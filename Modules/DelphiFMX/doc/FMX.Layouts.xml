<?xml version="1.0" ?><namespace name="FMX.Layouts" platform="Win32">
  <class name="TLayout" file="FMX.Layouts.pas" line="24">
    
    <members>
      <procedure name="Paint" visibility="protected" procflags="override" file="FMX.Layouts.pas" line="26">
      <devnotes><summary>
Renders the control's surface. 
FMX.Layouts.TLayout.Paint inherits from FMX.Controls.TControl.Paint. All content below this line refers to FMX.Controls.TControl.Paint.
Renders the control's surface. 
The Paint method is called by DoPaint when a control is being painted by the PaintTo method. Before DoPaint, Painting is called. AfterPaint is called immediately after. 
FireMonkey internally calls Paint to paint the control when the window is being painted. You must not call Paint explicitly.
The base class TControl implements an empty Paint. The descendants of TControl override Paint to provide specific rendering of the respective controls.
For example, Paint methods in classes of the FMX.Objects unit draw and fill shapes using the properties defined in these classes. See the descriptions of these classes to find the properties of the respective shapes. 
</summary></devnotes></procedure>
      <constructor name="Create" visibility="public" file="FMX.Layouts.pas" line="28">
        <parameters>
          <parameter name="AOwner" type="TComponent"/>
        </parameters>
      <devnotes><summary>
Allocates memory and constructs a safely initialized instance of a component.
Allocates memory and constructs a safely initialized instance of a component.
Allocates memory and constructs a safely initialized instance of a component.
FMX.Layouts.TLayout.Create inherits from System.Classes.TComponent.Create. All content below this line refers to System.Classes.TComponent.Create.
Allocates memory and constructs a safely initialized instance of a component.
All objects have a Create method that constructs the object. TComponent redefines Create so that, for components, Create also:

Establishes the relationship of a component and its Owner, as indicated by the AOwner parameter.
Sets the ComponentStyle property to csInheritable, meaning that the component can be inherited by a descendent form type.
It is not necessary to explicitly create components added in the Form Designer. These components are created automatically when the application is run, and they are destroyed when the application is closed.
For components created programmatically, that is, not created in the Form Designer, call Create and pass in an owner component as the AOwner parameter. The owner disposes of the component when it is destroyed. If the component is not owned, then use Free when it needs to be destroyed.

Tip:  When passing in Self as the Owner parameter, consider what Self references. If a component creates another component in one of its methods, then Self refers to the first component and not the component being created, which is then owned by the first component.
Note:  The TComponent constructor is virtual in part to allow polymorphic instantiation of class references. This is critical to the streaming system and to the Form Designer. Do not forget to use the override directive when declaring a new component's Create constructor.</summary></devnotes></constructor>
      <property name="Align" visibility="published" read="FAlign" write="SetAlign" type="TAlignLayout" default="0" hoisted="true" file="FMX.Layouts.pas" line="30"/>
      <property name="Anchors" visibility="published" read="FAnchors" write="SetAnchors" stored="IsAnchorsStored" type="TAnchors" hoisted="true" file="FMX.Layouts.pas" line="31"/>
      <property name="ClipChildren" visibility="published" read="FClipChildren" write="SetClipChildren" type="Boolean" default="0" hoisted="true" file="FMX.Layouts.pas" line="32"/>
      <property name="ClipParent" visibility="published" read="FClipParent" write="FClipParent" type="Boolean" default="0" hoisted="true" file="FMX.Layouts.pas" line="33"/>
      <property name="Cursor" visibility="published" read="GetCursor" write="SetCursor" type="TCursor" default="0" hoisted="true" file="FMX.Layouts.pas" line="34"/>
      <property name="DragMode" visibility="published" read="GetDragMode" write="SetDragMode" type="TDragMode" default="0" hoisted="true" file="FMX.Layouts.pas" line="35"/>
      <property name="EnableDragHighlight" visibility="published" read="FEnableDragHighlight" write="FEnableDragHighlight" type="Boolean" default="1" hoisted="true" file="FMX.Layouts.pas" line="36"/>
      <property name="Enabled" visibility="published" read="FEnabled" write="SetEnabled" stored="EnabledStored" type="Boolean" hoisted="true" file="FMX.Layouts.pas" line="37"/>
      <property name="Locked" visibility="published" read="FLocked" write="SetLocked" type="Boolean" default="0" hoisted="true" file="FMX.Layouts.pas" line="38"/>
      <property name="Height" visibility="published" read="GetHeight" write="SetHeight" stored="False" type="Single" hoisted="true" file="FMX.Layouts.pas" line="39"/>
      <property name="Hint" visibility="published" read="FHint" write="SetHint" stored="HintStored" type="string" default="0" hoisted="true" file="FMX.Layouts.pas" line="40"/>
      <property name="HitTest" visibility="published" read="FHitTest" write="SetHitTest" type="Boolean" default="0" hoisted="true" file="FMX.Layouts.pas" line="41"/>
      <property name="Padding" visibility="published" read="GetPadding" write="SetPadding" type="TBounds" hoisted="true" file="FMX.Layouts.pas" line="42"/>
      <property name="Opacity" visibility="published" read="FOpacity" write="SetOpacity" stored="IsOpacityStored" type="Single" hoisted="true" file="FMX.Layouts.pas" line="43"/>
      <property name="Margins" visibility="published" read="GetMargins" write="SetMargins" type="TBounds" hoisted="true" file="FMX.Layouts.pas" line="44"/>
      <property name="PopupMenu" visibility="published" read="FPopupMenu" write="SetPopupMenu" stored="IsPopupMenuStored" type="TCustomPopupMenu" hoisted="true" file="FMX.Layouts.pas" line="45"/>
      <property name="Position" visibility="published" read="FPosition" write="SetPosition" stored="IsPositionStored" type="TPosition" hoisted="true" file="FMX.Layouts.pas" line="46"/>
      <property name="RotationAngle" visibility="published" read="GetRotationAngle" write="SetRotationAngle" type="Single" default="0" hoisted="true" file="FMX.Layouts.pas" line="47"/>
      <property name="RotationCenter" visibility="published" read="GetRotationCenter" write="SetRotationCenter" type="TPosition" hoisted="true" file="FMX.Layouts.pas" line="48"/>
      <property name="Scale" visibility="published" read="GetScale" write="SetScale" type="TPosition" hoisted="true" file="FMX.Layouts.pas" line="49"/>
      <property name="Size" visibility="published" read="FSize" write="SetSize" stored="IsSizeStored" type="TControlSize" hoisted="true" file="FMX.Layouts.pas" line="50"/>
      <property name="TouchTargetExpansion" visibility="published" read="FTouchTargetExpansion" write="SetTouchTargetExpansion" type="TBounds" hoisted="true" file="FMX.Layouts.pas" line="51"/>
      <property name="Visible" visibility="published" read="FVisible" write="SetVisible" stored="VisibleStored" type="Boolean" default="1" hoisted="true" file="FMX.Layouts.pas" line="52"/>
      <property name="Width" visibility="published" read="GetWidth" write="SetWidth" stored="False" type="Single" hoisted="true" file="FMX.Layouts.pas" line="53"/>
      <property name="ParentShowHint" visibility="published" read="FParentShowHint" write="SetParentShowHint" type="Boolean" default="1" hoisted="true" file="FMX.Layouts.pas" line="54"/>
      <property name="ShowHint" visibility="published" read="FShowHint" write="SetShowHint" stored="IsShowHintStored" type="Boolean" hoisted="true" file="FMX.Layouts.pas" line="55"/>
      <property name="TabOrder" visibility="published" read="GetTabOrder" write="SetTabOrder" type="TTabOrder" default="-1" hoisted="true" file="FMX.Layouts.pas" line="56"/>
      <property name="TabStop" visibility="published" read="GetTabStop" write="SetTabStop" type="Boolean" default="1" hoisted="true" file="FMX.Layouts.pas" line="57"/>
      <event name="OnPainting" visibility="published" read="FOnPainting" write="FOnPainting" type="TOnPaintEvent" hoisted="true" file="FMX.Layouts.pas" line="59"/>
      <event name="OnPaint" visibility="published" read="FOnPaint" write="FOnPaint" type="TOnPaintEvent" hoisted="true" file="FMX.Layouts.pas" line="60"/>
      <event name="OnResize" visibility="published" read="FOnResize" write="FOnResize" type="TNotifyEvent" hoisted="true" file="FMX.Layouts.pas" line="61"/>
      <event name="OnResized" visibility="published" read="FOnResized" write="FOnResized" type="TNotifyEvent" hoisted="true" file="FMX.Layouts.pas" line="62"/>
      <event name="OnDragEnter" visibility="published" read="FOnDragEnter" write="FOnDragEnter" type="TDragEnterEvent" hoisted="true" file="FMX.Layouts.pas" line="64"/>
      <event name="OnDragLeave" visibility="published" read="FOnDragLeave" write="FOnDragLeave" type="TNotifyEvent" hoisted="true" file="FMX.Layouts.pas" line="65"/>
      <event name="OnDragOver" visibility="published" read="FOnDragOver" write="FOnDragOver" type="TDragOverEvent" hoisted="true" file="FMX.Layouts.pas" line="66"/>
      <event name="OnDragDrop" visibility="published" read="FOnDragDrop" write="FOnDragDrop" type="TDragDropEvent" hoisted="true" file="FMX.Layouts.pas" line="67"/>
      <event name="OnDragEnd" visibility="published" read="FOnDragEnd" write="FOnDragEnd" type="TNotifyEvent" hoisted="true" file="FMX.Layouts.pas" line="68"/>
      <event name="OnClick" visibility="published" read="FOnClick" write="SetOnClick" stored="OnClickStored" type="TNotifyEvent" hoisted="true" file="FMX.Layouts.pas" line="70"/>
      <event name="OnDblClick" visibility="published" read="FOnDblClick" write="FOnDblClick" type="TNotifyEvent" hoisted="true" file="FMX.Layouts.pas" line="71"/>
      <event name="OnMouseDown" visibility="published" read="FOnMouseDown" write="FOnMouseDown" type="TMouseEvent" hoisted="true" file="FMX.Layouts.pas" line="72"/>
      <event name="OnMouseMove" visibility="published" read="FOnMouseMove" write="FOnMouseMove" type="TMouseMoveEvent" hoisted="true" file="FMX.Layouts.pas" line="73"/>
      <event name="OnMouseUp" visibility="published" read="FOnMouseUp" write="FOnMouseUp" type="TMouseEvent" hoisted="true" file="FMX.Layouts.pas" line="74"/>
      <event name="OnMouseWheel" visibility="published" read="FOnMouseWheel" write="FOnMouseWheel" type="TMouseWheelEvent" hoisted="true" file="FMX.Layouts.pas" line="75"/>
      <event name="OnMouseEnter" visibility="published" read="FOnMouseEnter" write="FOnMouseEnter" type="TNotifyEvent" hoisted="true" file="FMX.Layouts.pas" line="76"/>
      <event name="OnMouseLeave" visibility="published" read="FOnMouseLeave" write="FOnMouseLeave" type="TNotifyEvent" hoisted="true" file="FMX.Layouts.pas" line="77"/>
    </members>
  <devnotes><summary>
A layout is a container for other graphical objects. 
Use the layouts when you need to organize multiple graphical controls under the same parent.
For instance, you can use these layouts when you need to create rich FireMonkey applications with many graphical controls that are grouped on the same layer. You can set the visibility of all the controls on a layout at once by affecting the visibility of the layout.
</summary></devnotes></class>
  <class name="TScaledLayout" file="FMX.Layouts.pas" line="82">
    
    <members>
      <field name="FOriginalWidth" type="Single" visibility="private" size="4" offset="904" file="FMX.Layouts.pas" line="84"/>
      <field name="FOriginalHeight" type="Single" visibility="private" size="4" offset="908" file="FMX.Layouts.pas" line="85"/>
      <procedure name="SetOriginalWidth" visibility="private" file="FMX.Layouts.pas" line="86">
        <parameters>
          <parameter name="Value" type="Single" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetOriginalHeight" visibility="private" file="FMX.Layouts.pas" line="87">
        <parameters>
          <parameter name="Value" type="Single" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="DoRealign" visibility="protected" procflags="override" file="FMX.Layouts.pas" line="89">
      <devnotes><summary>
Performs the alignment of a FireMonkey control.
FMX.Layouts.TScaledLayout.DoRealign inherits from FMX.Controls.TControl.DoRealign. All content below this line refers to FMX.Controls.TControl.DoRealign.
Performs the alignment of a FireMonkey control.

 See Also
FMX.Types.AlignObjects

</summary></devnotes></procedure>
      <function name="GetChildrenMatrix" visibility="protected" procflags="override" file="FMX.Layouts.pas" line="90">
        <parameters>
          <parameter name="Matrix" type="TMatrix" paramflags="var"/>
          <parameter name="Simple" type="Boolean" paramflags="var"/>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Returns the children transformation matrix.
FMX.Layouts.TScaledLayout.GetChildrenMatrix inherits from FMX.Controls.TControl.GetChildrenMatrix. All content below this line refers to FMX.Controls.TControl.GetChildrenMatrix.
Returns the children transformation matrix.
The AbsoluteMatrix is calculated as:

  AbsoluteMatrix = (LocalMatrix * Parent.GetChildrenMatrix) * Parent.AbsoluteMatrix

TScaledLayout overrides GetChildrenMatrix to prescale layout contents.
</summary></devnotes></function>
      <procedure name="SetHeight" visibility="protected" procflags="override" file="FMX.Layouts.pas" line="91">
        <parameters>
          <parameter name="Value" type="Single" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Setter function for the Height property.
FMX.Layouts.TScaledLayout.SetHeight inherits from FMX.Controls.TControl.SetHeight. All content below this line refers to FMX.Controls.TControl.SetHeight.
Setter function for the Height property. Value specifies the new value of the Height property.
</summary></devnotes></procedure>
      <procedure name="SetWidth" visibility="protected" procflags="override" file="FMX.Layouts.pas" line="92">
        <parameters>
          <parameter name="Value" type="Single" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Setter function for the Width property.
FMX.Layouts.TScaledLayout.SetWidth inherits from FMX.Controls.TControl.SetWidth. All content below this line refers to FMX.Controls.TControl.SetWidth.
Setter function for the Width property. Value specifies the new value of the Width property.
</summary></devnotes></procedure>
      <procedure name="Paint" visibility="protected" procflags="override" file="FMX.Layouts.pas" line="93">
      <devnotes><summary>
Renders the control's surface. 
FMX.Layouts.TScaledLayout.Paint inherits from FMX.Controls.TControl.Paint. All content below this line refers to FMX.Controls.TControl.Paint.
Renders the control's surface. 
The Paint method is called by DoPaint when a control is being painted by the PaintTo method. Before DoPaint, Painting is called. AfterPaint is called immediately after. 
FireMonkey internally calls Paint to paint the control when the window is being painted. You must not call Paint explicitly.
The base class TControl implements an empty Paint. The descendants of TControl override Paint to provide specific rendering of the respective controls.
For example, Paint methods in classes of the FMX.Objects unit draw and fill shapes using the properties defined in these classes. See the descriptions of these classes to find the properties of the respective shapes. 
</summary></devnotes></procedure>
      <constructor name="Create" visibility="public" file="FMX.Layouts.pas" line="95">
        <parameters>
          <parameter name="AOwner" type="TComponent"/>
        </parameters>
      <devnotes><summary>
Allocates memory and constructs a safely initialized instance of a component.
Allocates memory and constructs a safely initialized instance of a component.
Allocates memory and constructs a safely initialized instance of a component.
FMX.Layouts.TScaledLayout.Create inherits from System.Classes.TComponent.Create. All content below this line refers to System.Classes.TComponent.Create.
Allocates memory and constructs a safely initialized instance of a component.
All objects have a Create method that constructs the object. TComponent redefines Create so that, for components, Create also:

Establishes the relationship of a component and its Owner, as indicated by the AOwner parameter.
Sets the ComponentStyle property to csInheritable, meaning that the component can be inherited by a descendent form type.
It is not necessary to explicitly create components added in the Form Designer. These components are created automatically when the application is run, and they are destroyed when the application is closed.
For components created programmatically, that is, not created in the Form Designer, call Create and pass in an owner component as the AOwner parameter. The owner disposes of the component when it is destroyed. If the component is not owned, then use Free when it needs to be destroyed.

Tip:  When passing in Self as the Owner parameter, consider what Self references. If a component creates another component in one of its methods, then Self refers to the first component and not the component being created, which is then owned by the first component.
Note:  The TComponent constructor is virtual in part to allow polymorphic instantiation of class references. This is critical to the streaming system and to the Form Designer. Do not forget to use the override directive when declaring a new component's Create constructor.</summary></devnotes></constructor>
      <destructor name="Destroy" visibility="public" file="FMX.Layouts.pas" line="96">
        <parameters>
        </parameters>
      <devnotes><summary>
Disposes of the component and its owned components.
Disposes of the component and its owned components.
Disposes of the component and its owned components.
FMX.Layouts.TScaledLayout.Destroy inherits from System.Classes.TComponent.Destroy. All content below this line refers to System.Classes.TComponent.Destroy.
Disposes of the component and its owned components.
Do not call Destroy directly. Call Free instead. Free verifies that the component is not nil, and only then calls Destroy.
Never explicitly free a component in one of its own event handlers, nor free a component from the event handler of a component that it owns or contains.
To destroy a form, call its Release method. Release waits for all the form's event handlers and the event handlers of the form's components to finish executing before destroying the form.

Note: A form owns all the controls and nonvisual components that are placed on it in design mode. When it is freed, all of these components are automatically freed as well. By default, all forms are owned by the global Application object. When an application terminates, it frees the global Application object, which frees all forms. For objects that are not components, and for components created with a nil owner, be sure to call Free after finishing with the object; otherwise the memory allocated for the object will be lost until the application terminates.</summary></devnotes></destructor>
      <property name="Align" visibility="published" read="FAlign" write="SetAlign" type="TAlignLayout" default="0" hoisted="true" file="FMX.Layouts.pas" line="98"/>
      <property name="Anchors" visibility="published" read="FAnchors" write="SetAnchors" stored="IsAnchorsStored" type="TAnchors" hoisted="true" file="FMX.Layouts.pas" line="99"/>
      <property name="ClipChildren" visibility="published" read="FClipChildren" write="SetClipChildren" type="Boolean" default="0" hoisted="true" file="FMX.Layouts.pas" line="100"/>
      <property name="ClipParent" visibility="published" read="FClipParent" write="FClipParent" type="Boolean" default="0" hoisted="true" file="FMX.Layouts.pas" line="101"/>
      <property name="Cursor" visibility="published" read="GetCursor" write="SetCursor" type="TCursor" default="0" hoisted="true" file="FMX.Layouts.pas" line="102"/>
      <property name="DragMode" visibility="published" read="GetDragMode" write="SetDragMode" type="TDragMode" default="0" hoisted="true" file="FMX.Layouts.pas" line="103"/>
      <property name="EnableDragHighlight" visibility="published" read="FEnableDragHighlight" write="FEnableDragHighlight" type="Boolean" default="1" hoisted="true" file="FMX.Layouts.pas" line="104"/>
      <property name="Enabled" visibility="published" read="FEnabled" write="SetEnabled" stored="EnabledStored" type="Boolean" hoisted="true" file="FMX.Layouts.pas" line="105"/>
      <property name="Locked" visibility="published" read="FLocked" write="SetLocked" type="Boolean" default="0" hoisted="true" file="FMX.Layouts.pas" line="106"/>
      <property name="Height" visibility="published" read="GetHeight" write="SetHeight" stored="False" type="Single" hoisted="true" file="FMX.Layouts.pas" line="107"/>
      <property name="Hint" visibility="published" read="FHint" write="SetHint" stored="HintStored" type="string" default="0" hoisted="true" file="FMX.Layouts.pas" line="108"/>
      <property name="HitTest" visibility="published" read="FHitTest" write="SetHitTest" type="Boolean" default="0" hoisted="true" file="FMX.Layouts.pas" line="109"/>
      <property name="Padding" visibility="published" read="GetPadding" write="SetPadding" type="TBounds" hoisted="true" file="FMX.Layouts.pas" line="110"/>
      <property name="Opacity" visibility="published" read="FOpacity" write="SetOpacity" stored="IsOpacityStored" type="Single" hoisted="true" file="FMX.Layouts.pas" line="111"/>
      <property name="OriginalWidth" visibility="published" read="FOriginalWidth" write="SetOriginalWidth" type="Single" default="0" file="FMX.Layouts.pas" line="112"><devnotes><summary>
Specifies the original width of the scaled layout control. The original width represents the unscaled X dimension of the scaled layout control.

</summary></devnotes></property>
      <property name="OriginalHeight" visibility="published" read="FOriginalHeight" write="SetOriginalHeight" type="Single" default="0" file="FMX.Layouts.pas" line="113"><devnotes><summary>
Specifies the original height of the scaled layout control. The original height represents the unscaled Y dimension of the scaled layout control.

</summary></devnotes></property>
      <property name="Margins" visibility="published" read="GetMargins" write="SetMargins" type="TBounds" hoisted="true" file="FMX.Layouts.pas" line="114"/>
      <property name="PopupMenu" visibility="published" read="FPopupMenu" write="SetPopupMenu" stored="IsPopupMenuStored" type="TCustomPopupMenu" hoisted="true" file="FMX.Layouts.pas" line="115"/>
      <property name="Position" visibility="published" read="FPosition" write="SetPosition" stored="IsPositionStored" type="TPosition" hoisted="true" file="FMX.Layouts.pas" line="116"/>
      <property name="RotationAngle" visibility="published" read="GetRotationAngle" write="SetRotationAngle" type="Single" default="0" hoisted="true" file="FMX.Layouts.pas" line="117"/>
      <property name="RotationCenter" visibility="published" read="GetRotationCenter" write="SetRotationCenter" type="TPosition" hoisted="true" file="FMX.Layouts.pas" line="118"/>
      <property name="Scale" visibility="published" read="GetScale" write="SetScale" type="TPosition" hoisted="true" file="FMX.Layouts.pas" line="119"/>
      <property name="Size" visibility="published" read="FSize" write="SetSize" stored="IsSizeStored" type="TControlSize" hoisted="true" file="FMX.Layouts.pas" line="120"/>
      <property name="TouchTargetExpansion" visibility="published" read="FTouchTargetExpansion" write="SetTouchTargetExpansion" type="TBounds" hoisted="true" file="FMX.Layouts.pas" line="121"/>
      <property name="Visible" visibility="published" read="FVisible" write="SetVisible" stored="VisibleStored" type="Boolean" default="1" hoisted="true" file="FMX.Layouts.pas" line="122"/>
      <property name="Width" visibility="published" read="GetWidth" write="SetWidth" stored="False" type="Single" hoisted="true" file="FMX.Layouts.pas" line="123"/>
      <property name="ParentShowHint" visibility="published" read="FParentShowHint" write="SetParentShowHint" type="Boolean" default="1" hoisted="true" file="FMX.Layouts.pas" line="124"/>
      <property name="ShowHint" visibility="published" read="FShowHint" write="SetShowHint" stored="IsShowHintStored" type="Boolean" hoisted="true" file="FMX.Layouts.pas" line="125"/>
      <event name="OnPainting" visibility="published" read="FOnPainting" write="FOnPainting" type="TOnPaintEvent" hoisted="true" file="FMX.Layouts.pas" line="127"/>
      <event name="OnPaint" visibility="published" read="FOnPaint" write="FOnPaint" type="TOnPaintEvent" hoisted="true" file="FMX.Layouts.pas" line="128"/>
      <event name="OnResize" visibility="published" read="FOnResize" write="FOnResize" type="TNotifyEvent" hoisted="true" file="FMX.Layouts.pas" line="129"/>
      <event name="OnResized" visibility="published" read="FOnResized" write="FOnResized" type="TNotifyEvent" hoisted="true" file="FMX.Layouts.pas" line="130"/>
      <event name="OnDragEnter" visibility="published" read="FOnDragEnter" write="FOnDragEnter" type="TDragEnterEvent" hoisted="true" file="FMX.Layouts.pas" line="132"/>
      <event name="OnDragLeave" visibility="published" read="FOnDragLeave" write="FOnDragLeave" type="TNotifyEvent" hoisted="true" file="FMX.Layouts.pas" line="133"/>
      <event name="OnDragOver" visibility="published" read="FOnDragOver" write="FOnDragOver" type="TDragOverEvent" hoisted="true" file="FMX.Layouts.pas" line="134"/>
      <event name="OnDragDrop" visibility="published" read="FOnDragDrop" write="FOnDragDrop" type="TDragDropEvent" hoisted="true" file="FMX.Layouts.pas" line="135"/>
      <event name="OnDragEnd" visibility="published" read="FOnDragEnd" write="FOnDragEnd" type="TNotifyEvent" hoisted="true" file="FMX.Layouts.pas" line="136"/>
      <event name="OnClick" visibility="published" read="FOnClick" write="SetOnClick" stored="OnClickStored" type="TNotifyEvent" hoisted="true" file="FMX.Layouts.pas" line="138"/>
      <event name="OnDblClick" visibility="published" read="FOnDblClick" write="FOnDblClick" type="TNotifyEvent" hoisted="true" file="FMX.Layouts.pas" line="139"/>
      <event name="OnMouseDown" visibility="published" read="FOnMouseDown" write="FOnMouseDown" type="TMouseEvent" hoisted="true" file="FMX.Layouts.pas" line="140"/>
      <event name="OnMouseMove" visibility="published" read="FOnMouseMove" write="FOnMouseMove" type="TMouseMoveEvent" hoisted="true" file="FMX.Layouts.pas" line="141"/>
      <event name="OnMouseUp" visibility="published" read="FOnMouseUp" write="FOnMouseUp" type="TMouseEvent" hoisted="true" file="FMX.Layouts.pas" line="142"/>
      <event name="OnMouseWheel" visibility="published" read="FOnMouseWheel" write="FOnMouseWheel" type="TMouseWheelEvent" hoisted="true" file="FMX.Layouts.pas" line="143"/>
      <event name="OnMouseEnter" visibility="published" read="FOnMouseEnter" write="FOnMouseEnter" type="TNotifyEvent" hoisted="true" file="FMX.Layouts.pas" line="144"/>
      <event name="OnMouseLeave" visibility="published" read="FOnMouseLeave" write="FOnMouseLeave" type="TNotifyEvent" hoisted="true" file="FMX.Layouts.pas" line="145"/>
    </members>
  <devnotes><summary>
A FireMonkey scaled layout is a wrapper over TControl and acts like a layer for other objects with the possibility of scaling its content according to the physical dimensions of the layout.
A scaled layout is a container for other graphical objects that can scale its contents as shown in the following image.

The label and the button are scaled according to the dimensions of the form that contains the layer aligned as the client so that the layer occupies the entire surface.
</summary></devnotes></class>
  <class name="TScrollContent" file="FMX.Layouts.pas" line="152">
    
    <members>
      <field name="FScrollBox" type="TCustomScrollBox" visibility="private" size="4" offset="912" file="FMX.Layouts.pas" line="154">
        <attributes>
          <attribute name="TObject"/>
        </attributes>
      </field>
      <field name="FIsContentChanged" type="Boolean" visibility="private" size="1" offset="916" file="FMX.Layouts.pas" line="155"/>
      <function name="GetClipRect" visibility="protected" procflags="override" file="FMX.Layouts.pas" line="157">
        <parameters>
          <retval type="TRectF"/>
        </parameters>
      </function>
      <function name="GetChildrenRect" visibility="protected" procflags="override" file="FMX.Layouts.pas" line="158">
        <parameters>
          <retval type="TRectF"/>
        </parameters>
      </function>
      <function name="ObjectAtPoint" visibility="protected" procflags="override" file="FMX.Layouts.pas" line="159">
        <parameters>
          <parameter name="P" type="TPointF"/>
          <retval type="IControl"/>
        </parameters>
      </function>
      <function name="DoGetUpdateRect" visibility="protected" procflags="override" file="FMX.Layouts.pas" line="160">
        <parameters>
          <retval type="TRectF"/>
        </parameters>
      </function>
      <procedure name="DoAddObject" visibility="protected" procflags="override" file="FMX.Layouts.pas" line="161">
        <parameters>
          <parameter name="AObject" type="TFmxObject" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="DoInsertObject" visibility="protected" procflags="override" file="FMX.Layouts.pas" line="162">
        <parameters>
          <parameter name="Index" type="Integer"/>
          <parameter name="AObject" type="TFmxObject" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="DoRemoveObject" visibility="protected" procflags="override" file="FMX.Layouts.pas" line="163">
        <parameters>
          <parameter name="AObject" type="TFmxObject" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="DoRealign" visibility="protected" procflags="override" file="FMX.Layouts.pas" line="164">
      </procedure>
      <procedure name="ContentChanged" visibility="protected" procflags="override" file="FMX.Layouts.pas" line="165">
      </procedure>
      <property name="IsContentChanged" visibility="protected" read="FIsContentChanged" write="FIsContentChanged" type="Boolean" file="FMX.Layouts.pas" line="167">
        <devnotes>
           <summary> This flag is set in the method ContentChanged. Used to optimize ScrollBox </summary>
        </devnotes>
      </property>
      <constructor name="Create" visibility="public" file="FMX.Layouts.pas" line="169">
        <parameters>
          <parameter name="AOwner" type="TComponent"/>
        </parameters>
      </constructor>
      <property name="ScrollBox" visibility="public" read="FScrollBox" type="TCustomScrollBox" file="FMX.Layouts.pas" line="170"/>
      <function name="PointInObjectLocal" visibility="public" procflags="override" file="FMX.Layouts.pas" line="171">
        <parameters>
          <parameter name="X" type="Single"/>
          <parameter name="Y" type="Single"/>
          <retval type="Boolean"/>
        </parameters>
      </function>
    </members>
  </class>
  <class name="TScrollCalculations" file="FMX.Layouts.pas" line="174">
    
    <members>
      <field name="FScrollBox" type="TCustomScrollBox" visibility="private" size="4" offset="400" file="FMX.Layouts.pas" line="176">
        <attributes>
          <attribute name="TObject"/>
        </attributes>
      </field>
      <procedure name="DoChanged" visibility="protected" procflags="override" file="FMX.Layouts.pas" line="178">
      </procedure>
      <procedure name="DoStart" visibility="protected" procflags="override" file="FMX.Layouts.pas" line="179">
      </procedure>
      <procedure name="DoStop" visibility="protected" procflags="override" file="FMX.Layouts.pas" line="180">
      </procedure>
      <constructor name="Create" visibility="public" file="FMX.Layouts.pas" line="182">
        <parameters>
          <parameter name="AOwner" type="TPersistent"/>
        </parameters>
      </constructor>
      <property name="ScrollBox" visibility="public" read="FScrollBox" type="TCustomScrollBox" file="FMX.Layouts.pas" line="183"/>
    </members>
  </class>
  <type name="TPositionChangeEvent" file="FMX.Layouts.pas" line="188" procflags="closure">
  </type>
  <type name="TOnCalcContentBoundsEvent" file="FMX.Layouts.pas" line="192" procflags="closure">
  </type>
  <class name="TCustomScrollBox" file="FMX.Layouts.pas" line="195">
    
    <members>
      <const name="SmallChangeFraction" visibility="private" type="Integer" file="FMX.Layouts.pas" line="198">
        <value>
          $5
        </value>
      </const>
      <field name="DesignBorderColor" type="TAlphaColor" visibility="private" varflags="class" file="FMX.Layouts.pas" line="199"/>
      <struct name="TScrollInfo" visibility="private" alias="FMX.Layouts.TScrollInfo" size="24" file="FMX.Layouts.pas" line="201">
        <field name="Scroll" type="TScrollBar" visibility="public" size="4" offset="0" file="FMX.Layouts.pas" line="202">
          <attributes>
            <attribute name="TObject"/>
          </attributes>
        </field>
        <field name="Align" type="TAlignLayout" visibility="public" size="4" offset="4" file="FMX.Layouts.pas" line="203"/>
        <field name="Margins" type="TRectF" visibility="public" size="16" offset="8" file="FMX.Layouts.pas" line="204"/>
      </struct>
      <field name="FSystemInfoSrv" type="IFMXSystemInformationService" visibility="private" size="4" offset="944" file="FMX.Layouts.pas" line="207"/>
      <field name="FDisableMouseWheel" type="Boolean" visibility="private" size="1" offset="948" file="FMX.Layouts.pas" line="208"/>
      <field name="FAniCalculations" type="TScrollCalculations" visibility="private" size="4" offset="952" file="FMX.Layouts.pas" line="210"/>
      <field name="FLastViewportPosition" type="TPointF" visibility="private" size="8" offset="956" file="FMX.Layouts.pas" line="211"/>
      <field name="FInInternalAlign" type="Boolean" visibility="private" size="1" offset="964" file="FMX.Layouts.pas" line="212"/>
      <field name="FBackground" type="TControl" visibility="private" size="4" offset="968" file="FMX.Layouts.pas" line="214"/>
      <field name="FContent" type="TScrollContent" visibility="private" size="4" offset="972" file="FMX.Layouts.pas" line="215"/>
      <field name="FContentLayout" type="TControl" visibility="private" size="4" offset="976" file="FMX.Layouts.pas" line="216"/>
      <field name="FContentBounds" type="TRectF" visibility="private" size="16" offset="980" file="FMX.Layouts.pas" line="217"/>
      <field name="FCachedContentSize" type="TSizeF" visibility="private" size="8" offset="996" file="FMX.Layouts.pas" line="218"/>
      <field name="FCachedAutoShowing" type="Boolean" visibility="private" size="1" offset="1004" file="FMX.Layouts.pas" line="219"/>
      <field name="FOriginalContentLayoutSize" type="TSizeF" visibility="private" size="8" offset="1008" file="FMX.Layouts.pas" line="220"/>
      <field name="FShowScrollBars" type="Boolean" visibility="private" size="1" offset="1016" file="FMX.Layouts.pas" line="222"/>
      <field name="FAutoHide" type="Boolean" visibility="private" size="1" offset="1017" file="FMX.Layouts.pas" line="223"/>
      <field name="FHScrollInfo" type=":TCustomScrollBox.:1" visibility="private" size="4" offset="1020" file="FMX.Layouts.pas" line="224"/>
      <field name="FVScrollInfo" type=":TCustomScrollBox.:2" visibility="private" size="4" offset="1024" file="FMX.Layouts.pas" line="225"/>
      <field name="FContentMargins" type="TRectF" visibility="private" size="16" offset="1028" file="FMX.Layouts.pas" line="226"/>
      <field name="FVDisablePaint" type="Boolean" visibility="private" size="1" offset="1044" file="FMX.Layouts.pas" line="227"/>
      <field name="FHDisablePaint" type="Boolean" visibility="private" size="1" offset="1045" file="FMX.Layouts.pas" line="228"/>
      <field name="FGDisablePaint" type="Boolean" visibility="private" size="1" offset="1046" file="FMX.Layouts.pas" line="229"/>
      <field name="FSizeGripContent" type="TControl" visibility="private" size="4" offset="1048" file="FMX.Layouts.pas" line="231"/>
      <field name="FSizeGripParent" type="TControl" visibility="private" size="4" offset="1052" file="FMX.Layouts.pas" line="232"/>
      <field name="FSizeGrip" type="TControl" visibility="private" size="4" offset="1056" file="FMX.Layouts.pas" line="233"/>
      <field name="FShowSizeGrip" type="Boolean" visibility="private" size="1" offset="1060" file="FMX.Layouts.pas" line="234"/>
      <field name="FOnViewportPositionChange" type="TPositionChangeEvent" visibility="private" size="8" offset="1064" file="FMX.Layouts.pas" line="235"/>
      <field name="FOnHScrollChange" type="TNotifyEvent" visibility="private" size="8" offset="1072" file="FMX.Layouts.pas" line="236"/>
      <field name="FOnVScrollChange" type="TNotifyEvent" visibility="private" size="8" offset="1080" file="FMX.Layouts.pas" line="237"/>
      <field name="FOnCalcContentBounds" type="TOnCalcContentBoundsEvent" visibility="private" size="8" offset="1088" file="FMX.Layouts.pas" line="238"/>
      <field name="FMouseEvents" type="Boolean" visibility="private" size="1" offset="1096" file="FMX.Layouts.pas" line="239"/>
      <field name="FContentCalculated" type="Boolean" visibility="private" size="1" offset="1097" file="FMX.Layouts.pas" line="240"/>
      <function name="HScrollIndex" visibility="private" file="FMX.Layouts.pas" line="241">
        <parameters>
          <retval type="Integer"/>
        </parameters>
      </function>
      <function name="VScrollIndex" visibility="private" file="FMX.Layouts.pas" line="242">
        <parameters>
          <retval type="Integer"/>
        </parameters>
      </function>
      <function name="GetHScrollAlign" visibility="private" file="FMX.Layouts.pas" line="243">
        <parameters>
          <retval type="TAlignLayout"/>
        </parameters>
      </function>
      <function name="GetVScrollAlign" visibility="private" file="FMX.Layouts.pas" line="244">
        <parameters>
          <retval type="TAlignLayout"/>
        </parameters>
      </function>
      <function name="GetHScrollMargins" visibility="private" file="FMX.Layouts.pas" line="245">
        <parameters>
          <retval type="TRectF"/>
        </parameters>
      </function>
      <function name="GetVScrollMargins" visibility="private" file="FMX.Layouts.pas" line="246">
        <parameters>
          <retval type="TRectF"/>
        </parameters>
      </function>
      <function name="GetSceneScale" visibility="private" file="FMX.Layouts.pas" line="247">
        <parameters>
          <retval type="Single"/>
        </parameters>
      </function>
      <procedure name="SetShowScrollBars" visibility="private" file="FMX.Layouts.pas" line="248">
        <parameters>
          <parameter name="Value" type="Boolean" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetShowSizeGrip" visibility="private" file="FMX.Layouts.pas" line="249">
        <parameters>
          <parameter name="Value" type="Boolean" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="GetVScrollBar" visibility="private" file="FMX.Layouts.pas" line="250">
        <parameters>
          <retval type="TScrollBar"/>
        </parameters>
      </function>
      <function name="GetHScrollBar" visibility="private" file="FMX.Layouts.pas" line="251">
        <parameters>
          <retval type="TScrollBar"/>
        </parameters>
      </function>
      <procedure name="UpdateSizeGrip" visibility="private" file="FMX.Layouts.pas" line="252">
      </procedure>
      <procedure name="UpdateVScrollBar" visibility="private" file="FMX.Layouts.pas" line="253">
        <parameters>
          <parameter name="Value" type="Single" paramflags="const"/>
          <parameter name="ViewportSize" type="Single" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="UpdateHScrollBar" visibility="private" file="FMX.Layouts.pas" line="254">
        <parameters>
          <parameter name="Value" type="Single" paramflags="const"/>
          <parameter name="ViewportSize" type="Single" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="InternalAlign" visibility="private" file="FMX.Layouts.pas" line="255">
      </procedure>
      <procedure name="HScrollChangeProc" visibility="private" file="FMX.Layouts.pas" line="256">
        <parameters>
          <parameter name="Sender" type="TObject"/>
        </parameters>
      </procedure>
      <procedure name="VScrollChangeProc" visibility="private" file="FMX.Layouts.pas" line="257">
        <parameters>
          <parameter name="Sender" type="TObject"/>
        </parameters>
      </procedure>
      <procedure name="MousePosToAni" visibility="private" file="FMX.Layouts.pas" line="258">
        <parameters>
          <parameter name="X" type="Single" paramflags="var"/>
          <parameter name="Y" type="Single" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="SetAutoHide" visibility="private" file="FMX.Layouts.pas" line="259">
        <parameters>
          <parameter name="Value" type="Boolean" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SaveDisablePaint" visibility="private" file="FMX.Layouts.pas" line="260">
      </procedure>
      <procedure name="RestoreDisablePaint" visibility="private" file="FMX.Layouts.pas" line="261">
      </procedure>
      <procedure name="SetDisablePaint" visibility="private" file="FMX.Layouts.pas" line="262">
      </procedure>
      <function name="GetViewportPosition" visibility="private" file="FMX.Layouts.pas" line="263">
        <parameters>
          <retval type="TPointF"/>
        </parameters>
      </function>
      <procedure name="SetViewportPosition" visibility="private" file="FMX.Layouts.pas" line="264">
        <parameters>
          <parameter name="Value" type="TPointF" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="StartScrolling" visibility="private" file="FMX.Layouts.pas" line="265">
      </procedure>
      <procedure name="StopScrolling" visibility="private" file="FMX.Layouts.pas" line="266">
      </procedure>
      <procedure name="UpdateOriginalContentLayoutSize" visibility="private" file="FMX.Layouts.pas" line="267">
        <parameters>
          <parameter name="Force" type="Boolean" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="ReadPartSize" visibility="private" file="FMX.Layouts.pas" line="268">
        <parameters>
          <parameter name="Reader" type="TReader"/>
          <parameter name="Size" type="Single" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="ReadContentLayoutHeight" visibility="private" file="FMX.Layouts.pas" line="269">
        <parameters>
          <parameter name="Reader" type="TReader"/>
        </parameters>
      </procedure>
      <procedure name="ReadContentLayoutWidth" visibility="private" file="FMX.Layouts.pas" line="270">
        <parameters>
          <parameter name="Reader" type="TReader"/>
        </parameters>
      </procedure>
      <procedure name="WriteContentLayoutHeight" visibility="private" file="FMX.Layouts.pas" line="271">
        <parameters>
          <parameter name="Writer" type="TWriter"/>
        </parameters>
      </procedure>
      <procedure name="WriteContentLayoutWidth" visibility="private" file="FMX.Layouts.pas" line="272">
        <parameters>
          <parameter name="Writer" type="TWriter"/>
        </parameters>
      </procedure>
      <procedure name="AniMouseDown" visibility="protected" procflags="virtual" file="FMX.Layouts.pas" line="275">
        <parameters>
          <parameter name="Touch" type="Boolean" paramflags="const"/>
          <parameter name="X" type="Single" paramflags="const"/>
          <parameter name="Y" type="Single" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="AniMouseMove" visibility="protected" procflags="virtual" file="FMX.Layouts.pas" line="276">
        <parameters>
          <parameter name="Touch" type="Boolean" paramflags="const"/>
          <parameter name="X" type="Single" paramflags="const"/>
          <parameter name="Y" type="Single" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="AniMouseUp" visibility="protected" procflags="virtual" file="FMX.Layouts.pas" line="277">
        <parameters>
          <parameter name="Touch" type="Boolean" paramflags="const"/>
          <parameter name="X" type="Single" paramflags="const"/>
          <parameter name="Y" type="Single" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <function name="GetScrollingBehaviours" visibility="protected" file="FMX.Layouts.pas" line="279">
        <parameters>
          <retval type="TScrollingBehaviours"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></function>
      <procedure name="Loaded" visibility="protected" procflags="override" file="FMX.Layouts.pas" line="280">
      <devnotes><summary>
Initializes the component after the form file has been read into memory.
FMX.Layouts.TCustomScrollBox.Loaded inherits from FMX.Controls.TControl.Loaded. All content below this line refers to FMX.Controls.TControl.Loaded.
Initializes the component after the form file has been read into memory. 
Loaded inherits TComponent.Loaded, realigns the children, if any, and updates the tab list.
For details, see TComponent.Loaded.
</summary></devnotes></procedure>
      <procedure name="PaddingChanged" visibility="protected" procflags="overload override" file="FMX.Layouts.pas" line="281">
      <devnotes><summary>
Applies the padding to the content of the TScrollBox. 
</summary></devnotes></procedure>
      <procedure name="DefineProperties" visibility="protected" procflags="override" file="FMX.Layouts.pas" line="282">
        <parameters>
          <parameter name="Filer" type="TFiler"/>
        </parameters>
      <devnotes><summary>




Designates methods for storing an object's unpublished data on a stream such as a form file.
FMX.Layouts.TCustomScrollBox.DefineProperties inherits from System.Classes.TComponent.DefineProperties. All content below this line refers to System.Classes.TComponent.DefineProperties.
Designates methods for storing an object's unpublished data on a stream such as a form file.
TComponent overrides the DefineProperties method defined in TPersistent to define &quot;fake&quot; Top and Left properties. These are defined so that components that are not controls can be manipulated at design time. However, the Top and Left properties are hidden, that is, they are not published, because only controls appear at run time.
DefineProperties is virtual; descendent classes can override it. When overriding DefineProperties, be aware that the Ancestor property of Filer might be set, and that this property can determine whether or not it is appropriate to write properties.
DefineProperties is called automatically as part of the component streaming system; do not call it directly.
</summary></devnotes></procedure>
      <procedure name="DoAddObject" visibility="protected" procflags="override" file="FMX.Layouts.pas" line="283">
        <parameters>
          <parameter name="AObject" type="TFmxObject" paramflags="const"/>
        </parameters>
      <devnotes><summary>


Adds the AObject object to the Children list of children attached to this parent object (self).
FMX.Layouts.TCustomScrollBox.DoAddObject inherits from FMX.Types.TFmxObject.DoAddObject. All content below this line refers to FMX.Types.TFmxObject.DoAddObject.
Adds the AObject object to the Children list of children attached to this parent object (self).
DoAddObject adds the object provided in the AObject parameter to the list of children stored in the Children property of this object (self). DoAddObject changes the parent of AObject to this object (self) and sets the root of AObject to the Root object of this object (self).
Descendant classes, like TCommonCustomForm and TControl, additionally handle tab stop lists keeping ordered lists of objects to which the user can tab. If such descendant class supports the ITabStopController interface and AObject is an object of a class supporting the IControl interface, then DoAddObject of this descendant adds AObject to the TabList tab stop lists of the (self) object. 
DoAddObject is internally called from AddObject.
</summary></devnotes></procedure>
      <procedure name="DoRealign" visibility="protected" procflags="override" file="FMX.Layouts.pas" line="284">
      <devnotes><summary>
Performs the realignment of the children controls of the TScrollBox object within the object.  
It is called internally every time visual properties of TScrollBox are changed. 
The children are realigned taking into account their alignment properties, margins, and padding. 
DoRealign calls the inherited TControl.DoRealign and then executes the realignment during the inertial scrolling.
</summary></devnotes></procedure>
      <function name="IsAddToContent" visibility="protected" procflags="virtual" file="FMX.Layouts.pas" line="285">
        <parameters>
          <parameter name="AObject" type="TFmxObject" paramflags="const"/>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></function>
      <procedure name="ContentAddObject" visibility="protected" procflags="virtual" file="FMX.Layouts.pas" line="286">
        <parameters>
          <parameter name="AObject" type="TFmxObject" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Virtual method to be implemented in subclasses to provide further functionality when adding AObject to the scroll box. In TScrollBox, ContentAddObject has no implementation.
</summary></devnotes></procedure>
      <procedure name="ContentInsertObject" visibility="protected" procflags="virtual" file="FMX.Layouts.pas" line="287">
        <parameters>
          <parameter name="Index" type="Integer"/>
          <parameter name="AObject" type="TFmxObject" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="ContentBeforeRemoveObject" visibility="protected" procflags="virtual" file="FMX.Layouts.pas" line="288">
        <parameters>
          <parameter name="AObject" type="TFmxObject"/>
        </parameters>
      <devnotes><summary>
Virtual method to be implemented in subclasses to provide further functionality right before removing AObject from the scroll box. In TScrollBox, ContentBeforeRemoveObject has no implementation.
</summary></devnotes></procedure>
      <procedure name="ContentRemoveObject" visibility="protected" procflags="virtual" file="FMX.Layouts.pas" line="289">
        <parameters>
          <parameter name="AObject" type="TFmxObject" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Virtual method to be implemented in subclasses to provide further functionality right after removing AObject from the scroll box. In TScrollBox, ContentRemoveObject has no implementation.
</summary></devnotes></procedure>
      <procedure name="HScrollChange" visibility="protected" procflags="virtual" file="FMX.Layouts.pas" line="290">
      <devnotes><summary>
Internally called when the horizontal scroll bar changes position. Do not call HScrollChange in applications.
</summary></devnotes></procedure>
      <procedure name="VScrollChange" visibility="protected" procflags="virtual" file="FMX.Layouts.pas" line="291">
      <devnotes><summary>
Internally called when the vertical scroll bar changes position. Do not call VScrollChange in applications.
</summary></devnotes></procedure>
      <procedure name="ViewportPositionChange" visibility="protected" procflags="virtual" file="FMX.Layouts.pas" line="292">
        <parameters>
          <parameter name="OldViewportPosition" type="TPointF" paramflags="const"/>
          <parameter name="NewViewportPosition" type="TPointF" paramflags="const"/>
          <parameter name="ContentSizeChanged" type="Boolean" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Executed when the viewport position changes.
ViewportPositionChange receives the following parameters:

OldViewportPosition is the value that the ViewportPosition property had before it changed.
NewViewportPosition is the new value of the ViewportPosition property.
ContentSizeChanged indicates whether the size of the content of the viewport has changed as well (True) or not (False).
ViewportPositionChange calls the handler of the OnViewportPositionChange event.


</summary></devnotes></procedure>
      <procedure name="CMGesture" visibility="protected" procflags="override" file="FMX.Layouts.pas" line="294">
        <parameters>
          <parameter name="EventInfo" type="TGestureEventInfo" paramflags="var"/>
        </parameters>
      <devnotes><summary>


Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="Painting" visibility="protected" procflags="override" file="FMX.Layouts.pas" line="295">
      <devnotes><summary>


OnPainting event dispatcher. 
FMX.Layouts.TCustomScrollBox.Painting inherits from FMX.Controls.TControl.Painting. All content below this line refers to FMX.Controls.TControl.Painting.
OnPainting event dispatcher. 
Painting defines the drawing area of the control by intersecting Canvas with ClipRect if ClipChildren is True and dispatches the OnPainting event.
It is always called internally before DoPaint. 
The Painting method can be overridden by derived controls to establish control-specific rendering conditions. 
</summary></devnotes></procedure>
      <procedure name="AfterPaint" visibility="protected" procflags="override" file="FMX.Layouts.pas" line="296">
      <devnotes><summary>
Restores Canvas properties after the painting process. 
FMX.Layouts.TCustomScrollBox.AfterPaint inherits from FMX.Controls.TControl.AfterPaint. All content below this line refers to FMX.Controls.TControl.AfterPaint.
Restores Canvas properties after the painting process. 
As implemented in TControl, AfterPaint does nothing.
TShape descendants of TControl override AfterPaint to restore Dash and  Thickness to default values.   
</summary></devnotes></procedure>
      <procedure name="ApplyStyle" visibility="protected" procflags="override" file="FMX.Layouts.pas" line="297">
      <devnotes><summary>
Customizes styles in complex objects.
FMX.Layouts.TCustomScrollBox.ApplyStyle inherits from FMX.Controls.TStyledControl.ApplyStyle. All content below this line refers to FMX.Controls.TStyledControl.ApplyStyle.
Customizes styles in complex objects.
TStyledControl descendants override it to apply styles in concordance with their primitive components.      
Do not call ApplyStyle explicitly in an application. It is called by the ApplyStyleLookup method when object styles are updated.
For an example of an ApplyStyle implementation, see &quot;TCalloutPanel:Style Contracts&quot; in FireMonkey Component Design.
</summary></devnotes></procedure>
      <procedure name="FreeStyle" visibility="protected" procflags="override" file="FMX.Layouts.pas" line="298">
      <devnotes><summary>
Frees the style of TStyledControl.
FMX.Layouts.TCustomScrollBox.FreeStyle inherits from FMX.Controls.TStyledControl.FreeStyle. All content below this line refers to FMX.Controls.TStyledControl.FreeStyle.
Frees the style of TStyledControl.
Override it to free additional component-specific style resources.
</summary></devnotes></procedure>
      <function name="IsOpaque" visibility="protected" procflags="virtual" file="FMX.Layouts.pas" line="299">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Indicates if the control should update effects when you scroll content.
Its default value is False, meaning that the control does not update effects.
In the TFramedScrollBox and TFramedVertScrollBox classes IsOpaque returns True.
</summary></devnotes></function>
      <function name="ContentRect" visibility="protected" file="FMX.Layouts.pas" line="300">
        <parameters>
          <retval type="TRectF"/>
        </parameters>
      <devnotes><summary>
Returns the rectangle that defines the scrolling area. The result value is of type TRectF.
</summary></devnotes></function>
      <function name="VScrollBarValue" visibility="protected" file="FMX.Layouts.pas" line="301">
        <parameters>
          <retval type="Single"/>
        </parameters>
      <devnotes><summary>
Returns the position of the vertical scroll bar.
VScrollBarValue returns a value of 0 if the vertical scroll bar is not required by this scroll box or it is not visible.
</summary></devnotes></function>
      <function name="HScrollBarValue" visibility="protected" file="FMX.Layouts.pas" line="302">
        <parameters>
          <retval type="Single"/>
        </parameters>
      <devnotes><summary>
Returns the position of the horizontal scroll bar.
HScrollBarValue returns a value of 0 if the horizontal scroll bar is not required by this scroll box or it is not visible.
</summary></devnotes></function>
      <function name="CreateScrollContent" visibility="protected" procflags="virtual" file="FMX.Layouts.pas" line="303">
        <parameters>
          <retval type="TScrollContent"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></function>
      <function name="CreateAniCalculations" visibility="protected" procflags="virtual" file="FMX.Layouts.pas" line="304">
        <parameters>
          <retval type="TScrollCalculations"/>
        </parameters>
      <devnotes><summary>
Constructs a TScrollCalculations type object in which you can set properties and calculate parameters of the inertial scrolling.
CreateAniCalculations calls the TScrollCalculations.Create constructor to create a TScrollCalculations object. The created object is kept in the AniCalculations property of the current TScrollBox instance. Using this TScrollCalculations object you can set the Animation, DecelerationRate, BoundsAnimation, AutoShowing, and Shown properties of inertial scrolling. 
TScrollCalculations is the descendant of the TAniCalculations class, which provides methods to calculate parameters of the inertial scrolling. 
UpdateAniCalculations calls CreateAniCalculations to create a TScrollCalculations object and then calls 
DoUpdateAniCalculations to set the default inertial scrolling properties under the current platform. 
</summary></devnotes></function>
      <procedure name="DoUpdateAniCalculations" visibility="protected" procflags="virtual" file="FMX.Layouts.pas" line="305">
        <parameters>
          <parameter name="AAniCalculations" type="TScrollCalculations" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Sets the default inertial scrolling properties for the current platform.
DoUpdateAniCalculations is called from UpdateAniCalculations to set the default values to the Animation, 
TouchTracking, BoundsAnimation, and AutoShowing properties of the inertial scrolling under the current platform. DoUpdateAniCalculations sets the properties of the TScrollCalculations object kept in the AniCalculations property.
</summary></devnotes></procedure>
      <procedure name="UpdateAniCalculations" visibility="protected" file="FMX.Layouts.pas" line="306">
      <devnotes><summary>
Initializes the inertial scrolling and sets its properties.
UpdateAniCalculations calls 
CreateAniCalculations to create a TScrollCalculations object handling calculations of the inertial scrolling and calls DoUpdateAniCalculations to update the 
TouchTracking, BoundsAnimation, and AutoShowing properties of the inertial scrolling. 
</summary></devnotes></procedure>
      <function name="DoCalcContentBounds" visibility="protected" procflags="virtual" file="FMX.Layouts.pas" line="307">
        <parameters>
          <retval type="TRectF"/>
        </parameters>
      <devnotes><summary>
Calculates the ContentBounds rectangle bounding all controls in the scrolling region.
DoRealign calls DoCalcContentBounds to calculate the ContentBounds rectangle. If the OnCalcContentBounds event handler is defined, then DoRealign calls this event handler and  passes into it the calculated content bounding rectangle for additional calculations.
</summary></devnotes></function>
      <procedure name="DoRealignContent" visibility="protected" procflags="virtual" file="FMX.Layouts.pas" line="308">
        <parameters>
          <parameter name="R" type="TRectF"/>
        </parameters>
      <devnotes><summary>
Changes the bounding rectangle of the content of the control to the specified rectangle, and realigns its child controls accordingly.
</summary></devnotes></procedure>
      <function name="GetContentBounds" visibility="protected" file="FMX.Layouts.pas" line="309">
        <parameters>
          <retval type="TRectF"/>
        </parameters>
      <devnotes><summary>
Returns the boundaries of the rectangle that defines the scrolling area. The result value is of type TRectF.
</summary></devnotes></function>
      <procedure name="MouseDown" visibility="protected" procflags="override" file="FMX.Layouts.pas" line="310">
        <parameters>
          <parameter name="Button" type="TMouseButton"/>
          <parameter name="Shift" type="TShiftState"/>
          <parameter name="X" type="Single"/>
          <parameter name="Y" type="Single"/>
        </parameters>
      <devnotes><summary>
Internally executed while a mouse button is pressed over the surface of this scroll box.
You can call MouseDown programmatically in applications to simulate a mouse button down event over this scroll box.
The Button parameter specifies the mouse button that has just been pressed (for instance, TMouseButton.mbLeft).
The Shift parameter specifies the keyboard state (for instance the CTRL key pressed at the same time with the mouse click).
The X and Y parameters specify the position of the mouse cursor on the screen.
</summary></devnotes></procedure>
      <procedure name="MouseMove" visibility="protected" procflags="override" file="FMX.Layouts.pas" line="311">
        <parameters>
          <parameter name="Shift" type="TShiftState"/>
          <parameter name="X" type="Single"/>
          <parameter name="Y" type="Single"/>
        </parameters>
      <devnotes><summary>
Internally executed while the mouse is moved over the surface of this scroll box.
You can call MouseMove programmatically in applications to simulate a mouse move event over this scroll box.
The Shift parameter specifies the keyboard state (for instance, the CTRL key pressed at the same time with the mouse click).
The X and Y parameters specify the position of the mouse cursor on the screen.
</summary></devnotes></procedure>
      <procedure name="MouseUp" visibility="protected" procflags="override" file="FMX.Layouts.pas" line="312">
        <parameters>
          <parameter name="Button" type="TMouseButton"/>
          <parameter name="Shift" type="TShiftState"/>
          <parameter name="X" type="Single"/>
          <parameter name="Y" type="Single"/>
        </parameters>
      <devnotes><summary>
Internally executed while a mouse button is released over the surface of this scroll box.
You can call MouseUp programmatically in applications to simulate a mouse button up event over this scroll box.
The Button parameter specifies the mouse button that has just been released (for instance, TMouseButton.mbLeft).
The Shift parameter specifies the keyboard state (for instance, the CTRL key pressed at the same time with the mouse click).
The X and Y parameters specify the position of the mouse cursor on the screen.
</summary></devnotes></procedure>
      <procedure name="DoMouseLeave" visibility="protected" procflags="override" file="FMX.Layouts.pas" line="313">
      <devnotes><summary>
OnMouseLeave event dispatcher.
FMX.Layouts.TCustomScrollBox.DoMouseLeave inherits from FMX.Controls.TControl.DoMouseLeave. All content below this line refers to FMX.Controls.TControl.DoMouseLeave.
OnMouseLeave event dispatcher.
DoMouseLeave is called automatically when the mouse pointer leaves the control's area.
DoMouseLeave starts the animation by calling StartTriggerAnimation and applies effects by calling ApplyTriggerEffect to background the control. 
Override the protected DoMouseLeave method to provide other responses when the mouse pointer leaves the control's area.
</summary></devnotes></procedure>
      <procedure name="MouseWheel" visibility="protected" procflags="override" file="FMX.Layouts.pas" line="314">
        <parameters>
          <parameter name="Shift" type="TShiftState"/>
          <parameter name="WheelDelta" type="Integer"/>
          <parameter name="Handled" type="Boolean" paramflags="var"/>
        </parameters>
      <devnotes><summary>
Internally executed while the mouse wheel is used over the surface of this scroll box.
You can call MouseWheel programmatically in applications to simulate a mouse wheel spin event over this scroll box.
The Shift parameter specifies the keyboard state (for instance, the CTRL key pressed at the same time with the mouse click).
The WheelDelta parameter specifies the position of the mouse wheel.
The Handled parameter specifies whether the mouse wheel events are handled by this scroll box control.
</summary></devnotes></procedure>
      <property name="ContentLayout" visibility="protected" read="FContentLayout" type="TControl" file="FMX.Layouts.pas" line="315"><devnotes><summary>
Protected read-only property that specifies the content layout of this scroll box.
</summary></devnotes></property>
      <property name="Content" visibility="protected" read="FContent" type="TScrollContent" file="FMX.Layouts.pas" line="316"><devnotes><summary>
Keeps an object that represents a scrollable content.
A TScrollBox object uses a TScrollContent object in order to provide an area onto which you can place any other graphical components. Content keeps this TScrollContent object.
</summary></devnotes></property>
      <property name="HScrollAlign" visibility="protected" read="GetHScrollAlign" type="TAlignLayout" file="FMX.Layouts.pas" line="317"><devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></property>
      <property name="VScrollAlign" visibility="protected" read="GetVScrollAlign" type="TAlignLayout" file="FMX.Layouts.pas" line="318"><devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></property>
      <property name="HScrollMargins" visibility="protected" read="GetHScrollMargins" type="TRectF" file="FMX.Layouts.pas" line="319"><devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></property>
      <property name="VScrollMargins" visibility="protected" read="GetVScrollMargins" type="TRectF" file="FMX.Layouts.pas" line="320"><devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></property>
      <property name="InInternalAlign" visibility="protected" read="FInInternalAlign" type="Boolean" file="FMX.Layouts.pas" line="321"><devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></property>
      <property name="HScrollBar" visibility="protected" read="GetHScrollBar" type="TScrollBar" file="FMX.Layouts.pas" line="322"><devnotes><summary>
Specifies the horizontal scroll bar attached to this scroll box.
Read the HScrollBar read-only property to obtain the horizontal scroll bar object attached to this scroll box component.
</summary></devnotes></property>
      <property name="VScrollBar" visibility="protected" read="GetVScrollBar" type="TScrollBar" file="FMX.Layouts.pas" line="323"><devnotes><summary>
Specifies the vertical scroll bar attached to this scroll box.
Read the VScrollBar read-only property to obtain the vertical scroll bar object attached to this scroll box component.
</summary></devnotes></property>
      <constructor name="Create" visibility="public" file="FMX.Layouts.pas" line="325">
        <parameters>
          <parameter name="AOwner" type="TComponent"/>
        </parameters>
      <devnotes><summary>
Allocates memory and constructs a safely initialized instance of a component.
Allocates memory and constructs a safely initialized instance of a component.
FMX.Layouts.TCustomScrollBox.Create inherits from System.Classes.TComponent.Create. All content below this line refers to System.Classes.TComponent.Create.
Allocates memory and constructs a safely initialized instance of a component.
All objects have a Create method that constructs the object. TComponent redefines Create so that, for components, Create also:

Establishes the relationship of a component and its Owner, as indicated by the AOwner parameter.
Sets the ComponentStyle property to csInheritable, meaning that the component can be inherited by a descendent form type.
It is not necessary to explicitly create components added in the Form Designer. These components are created automatically when the application is run, and they are destroyed when the application is closed.
For components created programmatically, that is, not created in the Form Designer, call Create and pass in an owner component as the AOwner parameter. The owner disposes of the component when it is destroyed. If the component is not owned, then use Free when it needs to be destroyed.

Tip:  When passing in Self as the Owner parameter, consider what Self references. If a component creates another component in one of its methods, then Self refers to the first component and not the component being created, which is then owned by the first component.
Note:  The TComponent constructor is virtual in part to allow polymorphic instantiation of class references. This is critical to the streaming system and to the Form Designer. Do not forget to use the override directive when declaring a new component's Create constructor.</summary></devnotes></constructor>
      <destructor name="Destroy" visibility="public" file="FMX.Layouts.pas" line="326">
        <parameters>
        </parameters>
      <devnotes><summary>
Disposes of the component and its owned components.
Disposes of the component and its owned components.
FMX.Layouts.TCustomScrollBox.Destroy inherits from System.Classes.TComponent.Destroy. All content below this line refers to System.Classes.TComponent.Destroy.
Disposes of the component and its owned components.
Do not call Destroy directly. Call Free instead. Free verifies that the component is not nil, and only then calls Destroy.
Never explicitly free a component in one of its own event handlers, nor free a component from the event handler of a component that it owns or contains.
To destroy a form, call its Release method. Release waits for all the form's event handlers and the event handlers of the form's components to finish executing before destroying the form.

Note: A form owns all the controls and nonvisual components that are placed on it in design mode. When it is freed, all of these components are automatically freed as well. By default, all forms are owned by the global Application object. When an application terminates, it frees the global Application object, which frees all forms. For objects that are not components, and for components created with a nil owner, be sure to call Free after finishing with the object; otherwise the memory allocated for the object will be lost until the application terminates.</summary></devnotes></destructor>
      <property name="AniCalculations" visibility="public" read="FAniCalculations" type="TScrollCalculations" file="FMX.Layouts.pas" line="327"><devnotes><summary>
Allows you to set various parameters that control the inertial scrolling effect animation.
AniCalculations keeps a TScrollCalculations object created by CreateAniCalculations. Using properties of this object you can programmatically set values for inertial scrolling properties in order to emulate on the current platform the inertial scrolling behavior typical for other platforms. For example, you can select the emulation of the iOS scrolling behavior under Windows and vice-versa.
TScrollCalculations is the descendant of the TAniCalculations class, which provides methods to calculate parameters of the inertial scrolling.
By using AniCalculations you can set:

Whether the scrolling is animated (via the TAniCalculations.Animation property).
The deceleration rate of the inertial scrolling (via the TAniCalculations.DecelerationRate property).
Whether the inertial scrolling is bound to the area (via the TAniCalculations.BoundsAnimation property).
Whether the scrolling bars appear automatically when the scroll action is initiated (via the TAniCalculations.AutoShowing property).
Whether the scrolling bars are hidden automatically when they are not needed (via the TAniCalculations.Shown property).
other properties of the TScrollCalculations object.</summary></devnotes></property>
      <property name="ViewportPosition" visibility="public" read="GetViewportPosition" write="SetViewportPosition" type="TPointF" file="FMX.Layouts.pas" line="328"><devnotes><summary>
Coordinates of the origin of the scrolling viewport specified as the offset from the origin of the content layout of this scroll box.
Coordinates are specified as the TPointF point defining the origin of the scrolling viewport in relation to the origin of the content layout of this scroll box.
A scrolling viewport (or viewport) is a rectangle bounding all controls placed on the content layout of this scroll box.
</summary></devnotes></property>
      <procedure name="Sort" visibility="public" procflags="override" file="FMX.Layouts.pas" line="329">
        <parameters>
          <parameter name="Compare" type="TFmxObjectSortCompare"/>
        </parameters>
      <devnotes><summary>
Sorts components of the layout based on the comparison function Compare. 
TFmxObjectSortCompare is declared as:

TFmxObjectSortCompare = function(item1, item2: TFmxObject): Integer;


</summary></devnotes></procedure>
      <procedure name="Center" visibility="public" file="FMX.Layouts.pas" line="330">
      <devnotes><summary>
Scrolls to the center of the TScrollBox control.
Center only has an effect if the scroll box actually has content beyond the display area and the scroll bars are needed to scroll to view all the content held by this scroll box.
</summary></devnotes></procedure>
      <procedure name="ScrollTo" visibility="public" file="FMX.Layouts.pas" line="331" symflags="deprecated">
        <parameters>
          <parameter name="Dx" type="Single" paramflags="const"/>
          <parameter name="Dy" type="Single" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="ScrollBy" visibility="public" file="FMX.Layouts.pas" line="332">
        <parameters>
          <parameter name="Dx" type="Single" paramflags="const"/>
          <parameter name="Dy" type="Single" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Scrolls the view according to the given Dx and Dy offsets (relative to the current position) in the TScrollBox control. 
The Dx and Dy parameters specify offsets to the values of the horizontal and  vertical scroll bars assigned to the TScrollBox control. This means that the Dx parameter is the change in pixels horizontally (along the X axis), and the Dy parameter is the change in pixels vertically (along the Y axis). 
ScrollBy has the effect of scrolling the view, in the TScrollBox control, to the new coordinates defined by the new values of the horizontal and  vertical scroll bars. These new values are obtained from the current values of the vertical and horizontal scroll bars by decreasing them by Dx and Dy pixels, respectively. For example, if Dx is a negative value, ScrollBy scrolls the view to the left; if  Dx is a positive value, ScrollBy scrolls the view to the right.
ScrollBy only has an effect if the scroll box actually has content beyond the display area, and the scroll bars are needed to view more of the content.
</summary></devnotes></procedure>
      <procedure name="InViewRect" visibility="public" file="FMX.Layouts.pas" line="333">
        <parameters>
          <parameter name="Rect" type="TRectF" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Internally used.
</summary></devnotes></procedure>
      <function name="ClientWidth" visibility="public" file="FMX.Layouts.pas" line="334">
        <parameters>
          <retval type="Single"/>
        </parameters>
      <devnotes><summary>
ClientWidth specifies the width of the components content (in dp). Use it to read or change the width of the component.

Note: ClientWidth is the components width without decoration. The components could be scrollbars and paddings.</summary></devnotes></function>
      <function name="ClientHeight" visibility="public" file="FMX.Layouts.pas" line="335">
        <parameters>
          <retval type="Single"/>
        </parameters>
      <devnotes><summary>
ClientHeight specifies the height of the components content (in dp). Use it to read or change the height of the component.

Note:  ClientHeight is the components height without decoration. The components could be scrollbars and paddings.</summary></devnotes></function>
      <function name="GetTabList" visibility="public" procflags="override" file="FMX.Layouts.pas" line="336">
        <parameters>
          <retval type="ITabList"/>
        </parameters>
      <devnotes><summary>


Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></function>
      <property name="ContentBounds" visibility="public" read="GetContentBounds" type="TRectF" file="FMX.Layouts.pas" line="337"><devnotes><summary>
Keeps a rectangle bounding all controls in the content of this scroll box.
DoRealign calls DoCalcContentBounds to calculate the ContentBounds rectangle. If the OnCalcContentBounds event handler is defined, then DoRealign calls this event handler and  passes into it the calculated content bounding rectangle for additional calculations.
The ContentBounds property is read-only. If the value returned by ContentBounds needs to be changed, you need to override DoCalcContentBounds or to assign the OnCalcContentBounds event handler.  
</summary></devnotes></property>
      <procedure name="InvalidateContentSize" visibility="public" file="FMX.Layouts.pas" line="338">
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="RealignContent" visibility="public" file="FMX.Layouts.pas" line="339">
      <devnotes><summary>
Realigns the children controls of this scroll box in the scrolling area of this scroll box. 
RealignContent can be overridden in subclasses to allow further functionality when performing the alignment of the objects inside the ContentBounds scrolling area of this scroll box.
</summary></devnotes></procedure>
      <property name="AutoHide" visibility="public" read="FAutoHide" write="SetAutoHide" type="Boolean" default="1" file="FMX.Layouts.pas" line="341"><devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></property>
      <property name="DisableMouseWheel" visibility="public" read="FDisableMouseWheel" write="FDisableMouseWheel" type="Boolean" default="0" file="FMX.Layouts.pas" line="342"><devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></property>
      <property name="ShowScrollBars" visibility="public" read="FShowScrollBars" write="SetShowScrollBars" type="Boolean" default="1" file="FMX.Layouts.pas" line="343"><devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></property>
      <property name="ShowSizeGrip" visibility="public" read="FShowSizeGrip" write="SetShowSizeGrip" type="Boolean" default="0" file="FMX.Layouts.pas" line="344"><devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></property>
      <event name="OnViewportPositionChange" visibility="public" read="FOnViewportPositionChange" write="FOnViewportPositionChange" type="TPositionChangeEvent" file="FMX.Layouts.pas" line="345"><devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></event>
      <event name="OnHScrollChange" visibility="public" read="FOnHScrollChange" write="FOnHScrollChange" type="TNotifyEvent" file="FMX.Layouts.pas" line="346"><devnotes><summary>
Raises when the horizontal scrollbar value was changed.
When the scroll position is changing at the ViewportPosition change, this event does not raise.
</summary></devnotes></event>
      <event name="OnVScrollChange" visibility="public" read="FOnVScrollChange" write="FOnVScrollChange" type="TNotifyEvent" file="FMX.Layouts.pas" line="347"><devnotes><summary>
Raises when the vertical scrollbar value was changed.
When the scroll position is changing at the ViewportPosition change, this event does not raise.
</summary></devnotes></event>
      <event name="OnCalcContentBounds" visibility="public" read="FOnCalcContentBounds" write="FOnCalcContentBounds" type="TOnCalcContentBoundsEvent" file="FMX.Layouts.pas" line="348"><devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></event>
      <property name="Align" visibility="published" read="FAlign" write="SetAlign" type="TAlignLayout" default="0" hoisted="true" file="FMX.Layouts.pas" line="350"/>
      <property name="Anchors" visibility="published" read="FAnchors" write="SetAnchors" stored="IsAnchorsStored" type="TAnchors" hoisted="true" file="FMX.Layouts.pas" line="351"/>
      <property name="ClipChildren" visibility="published" read="FClipChildren" write="SetClipChildren" type="Boolean" default="0" hoisted="true" file="FMX.Layouts.pas" line="352"/>
      <property name="ClipParent" visibility="published" read="FClipParent" write="FClipParent" type="Boolean" default="0" hoisted="true" file="FMX.Layouts.pas" line="353"/>
      <property name="Cursor" visibility="published" read="GetCursor" write="SetCursor" type="TCursor" default="0" hoisted="true" file="FMX.Layouts.pas" line="354"/>
      <property name="DragMode" visibility="published" read="GetDragMode" write="SetDragMode" type="TDragMode" default="0" hoisted="true" file="FMX.Layouts.pas" line="355"/>
      <property name="EnableDragHighlight" visibility="published" read="FEnableDragHighlight" write="FEnableDragHighlight" type="Boolean" default="1" hoisted="true" file="FMX.Layouts.pas" line="356"/>
      <property name="Enabled" visibility="published" read="FEnabled" write="SetEnabled" stored="EnabledStored" type="Boolean" hoisted="true" file="FMX.Layouts.pas" line="357"/>
      <property name="Locked" visibility="published" read="FLocked" write="SetLocked" type="Boolean" default="0" hoisted="true" file="FMX.Layouts.pas" line="358"/>
      <property name="Height" visibility="published" read="GetHeight" write="SetHeight" stored="False" type="Single" hoisted="true" file="FMX.Layouts.pas" line="359"/>
      <property name="HelpContext" visibility="published" read="FHelpContext" write="SetHelpContext" stored="IsHelpContextStored" type="THelpContext" default="0" hoisted="true" file="FMX.Layouts.pas" line="360"/>
      <property name="HelpKeyword" visibility="published" read="FHelpKeyword" write="SetHelpKeyword" stored="IsHelpContextStored" type="string" default="0" hoisted="true" file="FMX.Layouts.pas" line="361"/>
      <property name="HelpType" visibility="published" read="FHelpType" write="FHelpType" type="THelpType" default="1" hoisted="true" file="FMX.Layouts.pas" line="362"/>
      <property name="Hint" visibility="published" read="FHint" write="SetHint" stored="HintStored" type="string" default="0" hoisted="true" file="FMX.Layouts.pas" line="363"/>
      <property name="HitTest" visibility="published" read="FHitTest" write="SetHitTest" type="Boolean" default="1" hoisted="true" file="FMX.Layouts.pas" line="364"/>
      <property name="Padding" visibility="published" read="GetPadding" write="SetPadding" type="TBounds" hoisted="true" file="FMX.Layouts.pas" line="365"/>
      <property name="Opacity" visibility="published" read="FOpacity" write="SetOpacity" stored="IsOpacityStored" type="Single" hoisted="true" file="FMX.Layouts.pas" line="366"/>
      <property name="Margins" visibility="published" read="GetMargins" write="SetMargins" type="TBounds" hoisted="true" file="FMX.Layouts.pas" line="367"/>
      <property name="PopupMenu" visibility="published" read="FPopupMenu" write="SetPopupMenu" stored="IsPopupMenuStored" type="TCustomPopupMenu" hoisted="true" file="FMX.Layouts.pas" line="368"/>
      <property name="Position" visibility="published" read="FPosition" write="SetPosition" stored="IsPositionStored" type="TPosition" hoisted="true" file="FMX.Layouts.pas" line="369"/>
      <property name="RotationAngle" visibility="published" read="GetRotationAngle" write="SetRotationAngle" type="Single" default="0" hoisted="true" file="FMX.Layouts.pas" line="370"/>
      <property name="RotationCenter" visibility="published" read="GetRotationCenter" write="SetRotationCenter" type="TPosition" hoisted="true" file="FMX.Layouts.pas" line="371"/>
      <property name="Scale" visibility="published" read="GetScale" write="SetScale" type="TPosition" hoisted="true" file="FMX.Layouts.pas" line="372"/>
      <property name="Size" visibility="published" read="FSize" write="SetSize" stored="IsSizeStored" type="TControlSize" hoisted="true" file="FMX.Layouts.pas" line="373"/>
      <property name="StyleLookup" visibility="published" read="FStyleLookup" write="SetStyleLookup" type="string" default="0" hoisted="true" file="FMX.Layouts.pas" line="374"/>
      <property name="TabOrder" visibility="published" read="GetTabOrder" write="SetTabOrder" type="TTabOrder" default="-1" hoisted="true" file="FMX.Layouts.pas" line="375"/>
      <property name="TabStop" visibility="published" read="GetTabStop" write="SetTabStop" type="Boolean" default="1" hoisted="true" file="FMX.Layouts.pas" line="376"/>
      <property name="TouchTargetExpansion" visibility="published" read="FTouchTargetExpansion" write="SetTouchTargetExpansion" type="TBounds" hoisted="true" file="FMX.Layouts.pas" line="377"/>
      <property name="Visible" visibility="published" read="FVisible" write="SetVisible" stored="VisibleStored" type="Boolean" default="1" hoisted="true" file="FMX.Layouts.pas" line="378"/>
      <property name="Width" visibility="published" read="GetWidth" write="SetWidth" stored="False" type="Single" hoisted="true" file="FMX.Layouts.pas" line="379"/>
      <property name="ParentShowHint" visibility="published" read="FParentShowHint" write="SetParentShowHint" type="Boolean" default="1" hoisted="true" file="FMX.Layouts.pas" line="380"/>
      <property name="ShowHint" visibility="published" read="FShowHint" write="SetShowHint" stored="IsShowHintStored" type="Boolean" hoisted="true" file="FMX.Layouts.pas" line="381"/>
      <event name="OnApplyStyleLookup" visibility="published" read="FOnApplyStyleLookup" write="FOnApplyStyleLookup" type="TNotifyEvent" hoisted="true" file="FMX.Layouts.pas" line="383"/>
      <event name="OnPainting" visibility="published" read="FOnPainting" write="FOnPainting" type="TOnPaintEvent" hoisted="true" file="FMX.Layouts.pas" line="384"/>
      <event name="OnPaint" visibility="published" read="FOnPaint" write="FOnPaint" type="TOnPaintEvent" hoisted="true" file="FMX.Layouts.pas" line="385"/>
      <event name="OnResize" visibility="published" read="FOnResize" write="FOnResize" type="TNotifyEvent" hoisted="true" file="FMX.Layouts.pas" line="386"/>
      <event name="OnResized" visibility="published" read="FOnResized" write="FOnResized" type="TNotifyEvent" hoisted="true" file="FMX.Layouts.pas" line="387"/>
      <event name="OnDragEnter" visibility="published" read="FOnDragEnter" write="FOnDragEnter" type="TDragEnterEvent" hoisted="true" file="FMX.Layouts.pas" line="389"/>
      <event name="OnDragLeave" visibility="published" read="FOnDragLeave" write="FOnDragLeave" type="TNotifyEvent" hoisted="true" file="FMX.Layouts.pas" line="390"/>
      <event name="OnDragOver" visibility="published" read="FOnDragOver" write="FOnDragOver" type="TDragOverEvent" hoisted="true" file="FMX.Layouts.pas" line="391"/>
      <event name="OnDragDrop" visibility="published" read="FOnDragDrop" write="FOnDragDrop" type="TDragDropEvent" hoisted="true" file="FMX.Layouts.pas" line="392"/>
      <event name="OnDragEnd" visibility="published" read="FOnDragEnd" write="FOnDragEnd" type="TNotifyEvent" hoisted="true" file="FMX.Layouts.pas" line="393"/>
      <event name="OnClick" visibility="published" read="FOnClick" write="SetOnClick" stored="OnClickStored" type="TNotifyEvent" hoisted="true" file="FMX.Layouts.pas" line="395"/>
      <event name="OnDblClick" visibility="published" read="FOnDblClick" write="FOnDblClick" type="TNotifyEvent" hoisted="true" file="FMX.Layouts.pas" line="396"/>
      <event name="OnMouseDown" visibility="published" read="FOnMouseDown" write="FOnMouseDown" type="TMouseEvent" hoisted="true" file="FMX.Layouts.pas" line="397"/>
      <event name="OnMouseMove" visibility="published" read="FOnMouseMove" write="FOnMouseMove" type="TMouseMoveEvent" hoisted="true" file="FMX.Layouts.pas" line="398"/>
      <event name="OnMouseUp" visibility="published" read="FOnMouseUp" write="FOnMouseUp" type="TMouseEvent" hoisted="true" file="FMX.Layouts.pas" line="399"/>
      <event name="OnMouseWheel" visibility="published" read="FOnMouseWheel" write="FOnMouseWheel" type="TMouseWheelEvent" hoisted="true" file="FMX.Layouts.pas" line="400"/>
      <event name="OnMouseEnter" visibility="published" read="FOnMouseEnter" write="FOnMouseEnter" type="TNotifyEvent" hoisted="true" file="FMX.Layouts.pas" line="401"/>
      <event name="OnMouseLeave" visibility="published" read="FOnMouseLeave" write="FOnMouseLeave" type="TNotifyEvent" hoisted="true" file="FMX.Layouts.pas" line="402"/>
    </members>
  <devnotes><summary>
The base class for controls representing a scrolling area (scroll box).
One use of a scroll box is to group multiple graphical controls (such as buttons, list boxes, edit boxes, radio buttons, and so on) under the same scrollable parent (the scroll box itself). In this way, a smaller form can contain a lot of graphical objects organized in a scrollable manner in order to occupy less space on a graphical user interface (GUI).
Another use of scroll boxes is to create multiple scrolling areas (views) in a form. Views are common in commercial word-processor, spreadsheet, and project management applications.

Note: Do not anchor the children of a scroll layout (TScrollBox, TVertScrollBox, TFramedScrollBox, and so on) to the right and bottom edges. If the Anchors property of a scroll layout child is set to akBottom, akRight, or both, the child will continue to stretch to keep constant the distance to the layout edges when the layout content size is being calculated. The children of a scroll layout should be anchored only to the left and top edges.
Note: When the size of the area occupied by the Content of a scroll box exceeds the control Size, and, therefore,  all Content cannot be shown in the control at one moment, then you can use scroll bars to scroll the Content in the control. Notice that on Windows the scroll bar is shown by default. However, on OS X the scroll bar is not shown by default. On OS X, the scroll bar appears when you try to scroll the Content using the mouse wheel. To enforce the scroll bar to be shown by default, you can use the code like following:
ScrollBox1.AniCalculations.AutoShowing := false;</summary></devnotes></class>
  <class name="TScrollBox" file="FMX.Layouts.pas" line="407">
    
    <members>
      <procedure name="Paint" visibility="protected" procflags="override" file="FMX.Layouts.pas" line="409">
      <devnotes><summary>
Renders the control's surface. 
FMX.Layouts.TScrollBox.Paint inherits from FMX.Controls.TControl.Paint. All content below this line refers to FMX.Controls.TControl.Paint.
Renders the control's surface. 
The Paint method is called by DoPaint when a control is being painted by the PaintTo method. Before DoPaint, Painting is called. AfterPaint is called immediately after. 
FireMonkey internally calls Paint to paint the control when the window is being painted. You must not call Paint explicitly.
The base class TControl implements an empty Paint. The descendants of TControl override Paint to provide specific rendering of the respective controls.
For example, Paint methods in classes of the FMX.Objects unit draw and fill shapes using the properties defined in these classes. See the descriptions of these classes to find the properties of the respective shapes. 
</summary></devnotes></procedure>
      <property name="Content" visibility="public" read="FContent" type="TScrollContent" hoisted="true" file="FMX.Layouts.pas" line="411"/>
      <property name="Align" visibility="published" read="FAlign" write="SetAlign" type="TAlignLayout" default="0" hoisted="true" file="FMX.Layouts.pas" line="413"/>
      <property name="Anchors" visibility="published" read="FAnchors" write="SetAnchors" stored="IsAnchorsStored" type="TAnchors" hoisted="true" file="FMX.Layouts.pas" line="414"/>
      <property name="AutoHide" visibility="published" read="FAutoHide" write="SetAutoHide" type="Boolean" default="1" hoisted="true" file="FMX.Layouts.pas" line="415"/>
      <property name="ClipChildren" visibility="published" read="FClipChildren" write="SetClipChildren" type="Boolean" default="0" hoisted="true" file="FMX.Layouts.pas" line="416"/>
      <property name="ClipParent" visibility="published" read="FClipParent" write="FClipParent" type="Boolean" default="0" hoisted="true" file="FMX.Layouts.pas" line="417"/>
      <property name="Cursor" visibility="published" read="GetCursor" write="SetCursor" type="TCursor" default="0" hoisted="true" file="FMX.Layouts.pas" line="418"/>
      <property name="DisableMouseWheel" visibility="published" read="FDisableMouseWheel" write="FDisableMouseWheel" type="Boolean" default="0" hoisted="true" file="FMX.Layouts.pas" line="419"/>
      <property name="DragMode" visibility="published" read="GetDragMode" write="SetDragMode" type="TDragMode" default="0" hoisted="true" file="FMX.Layouts.pas" line="420"/>
      <property name="Enabled" visibility="published" read="FEnabled" write="SetEnabled" stored="EnabledStored" type="Boolean" hoisted="true" file="FMX.Layouts.pas" line="421"/>
      <property name="EnableDragHighlight" visibility="published" read="FEnableDragHighlight" write="FEnableDragHighlight" type="Boolean" default="1" hoisted="true" file="FMX.Layouts.pas" line="422"/>
      <property name="Height" visibility="published" read="GetHeight" write="SetHeight" stored="False" type="Single" hoisted="true" file="FMX.Layouts.pas" line="423"/>
      <property name="HelpContext" visibility="published" read="FHelpContext" write="SetHelpContext" stored="IsHelpContextStored" type="THelpContext" default="0" hoisted="true" file="FMX.Layouts.pas" line="424"/>
      <property name="HelpKeyword" visibility="published" read="FHelpKeyword" write="SetHelpKeyword" stored="IsHelpContextStored" type="string" default="0" hoisted="true" file="FMX.Layouts.pas" line="425"/>
      <property name="HelpType" visibility="published" read="FHelpType" write="FHelpType" type="THelpType" default="1" hoisted="true" file="FMX.Layouts.pas" line="426"/>
      <property name="Hint" visibility="published" read="FHint" write="SetHint" stored="HintStored" type="string" default="0" hoisted="true" file="FMX.Layouts.pas" line="427"/>
      <property name="HitTest" visibility="published" read="FHitTest" write="SetHitTest" type="Boolean" default="1" hoisted="true" file="FMX.Layouts.pas" line="428"/>
      <property name="Locked" visibility="published" read="FLocked" write="SetLocked" type="Boolean" default="0" hoisted="true" file="FMX.Layouts.pas" line="429"/>
      <property name="Margins" visibility="published" read="GetMargins" write="SetMargins" type="TBounds" hoisted="true" file="FMX.Layouts.pas" line="430"/>
      <property name="Opacity" visibility="published" read="FOpacity" write="SetOpacity" stored="IsOpacityStored" type="Single" hoisted="true" file="FMX.Layouts.pas" line="431"/>
      <property name="Padding" visibility="published" read="GetPadding" write="SetPadding" type="TBounds" hoisted="true" file="FMX.Layouts.pas" line="432"/>
      <property name="PopupMenu" visibility="published" read="FPopupMenu" write="SetPopupMenu" stored="IsPopupMenuStored" type="TCustomPopupMenu" hoisted="true" file="FMX.Layouts.pas" line="433"/>
      <property name="Position" visibility="published" read="FPosition" write="SetPosition" stored="IsPositionStored" type="TPosition" hoisted="true" file="FMX.Layouts.pas" line="434"/>
      <property name="RotationAngle" visibility="published" read="GetRotationAngle" write="SetRotationAngle" type="Single" default="0" hoisted="true" file="FMX.Layouts.pas" line="435"/>
      <property name="RotationCenter" visibility="published" read="GetRotationCenter" write="SetRotationCenter" type="TPosition" hoisted="true" file="FMX.Layouts.pas" line="436"/>
      <property name="Scale" visibility="published" read="GetScale" write="SetScale" type="TPosition" hoisted="true" file="FMX.Layouts.pas" line="437"/>
      <property name="ShowScrollBars" visibility="published" read="FShowScrollBars" write="SetShowScrollBars" type="Boolean" default="1" hoisted="true" file="FMX.Layouts.pas" line="438"/>
      <property name="ShowSizeGrip" visibility="published" read="FShowSizeGrip" write="SetShowSizeGrip" type="Boolean" default="0" hoisted="true" file="FMX.Layouts.pas" line="439"/>
      <property name="Size" visibility="published" read="FSize" write="SetSize" stored="IsSizeStored" type="TControlSize" hoisted="true" file="FMX.Layouts.pas" line="440"/>
      <property name="StyleLookup" visibility="published" read="FStyleLookup" write="SetStyleLookup" type="string" default="0" hoisted="true" file="FMX.Layouts.pas" line="441"/>
      <property name="TabOrder" visibility="published" read="GetTabOrder" write="SetTabOrder" type="TTabOrder" default="-1" hoisted="true" file="FMX.Layouts.pas" line="442"/>
      <property name="TabStop" visibility="published" read="GetTabStop" write="SetTabStop" type="Boolean" default="1" hoisted="true" file="FMX.Layouts.pas" line="443"/>
      <property name="TouchTargetExpansion" visibility="published" read="FTouchTargetExpansion" write="SetTouchTargetExpansion" type="TBounds" hoisted="true" file="FMX.Layouts.pas" line="444"/>
      <property name="Visible" visibility="published" read="FVisible" write="SetVisible" stored="VisibleStored" type="Boolean" default="1" hoisted="true" file="FMX.Layouts.pas" line="445"/>
      <property name="Width" visibility="published" read="GetWidth" write="SetWidth" stored="False" type="Single" hoisted="true" file="FMX.Layouts.pas" line="446"/>
      <property name="ParentShowHint" visibility="published" read="FParentShowHint" write="SetParentShowHint" type="Boolean" default="1" hoisted="true" file="FMX.Layouts.pas" line="447"/>
      <property name="ShowHint" visibility="published" read="FShowHint" write="SetShowHint" stored="IsShowHintStored" type="Boolean" hoisted="true" file="FMX.Layouts.pas" line="448"/>
      <event name="OnApplyStyleLookup" visibility="published" read="FOnApplyStyleLookup" write="FOnApplyStyleLookup" type="TNotifyEvent" hoisted="true" file="FMX.Layouts.pas" line="450"/>
      <event name="OnPainting" visibility="published" read="FOnPainting" write="FOnPainting" type="TOnPaintEvent" hoisted="true" file="FMX.Layouts.pas" line="451"/>
      <event name="OnPaint" visibility="published" read="FOnPaint" write="FOnPaint" type="TOnPaintEvent" hoisted="true" file="FMX.Layouts.pas" line="452"/>
      <event name="OnResize" visibility="published" read="FOnResize" write="FOnResize" type="TNotifyEvent" hoisted="true" file="FMX.Layouts.pas" line="453"/>
      <event name="OnResized" visibility="published" read="FOnResized" write="FOnResized" type="TNotifyEvent" hoisted="true" file="FMX.Layouts.pas" line="454"/>
      <event name="OnDragEnter" visibility="published" read="FOnDragEnter" write="FOnDragEnter" type="TDragEnterEvent" hoisted="true" file="FMX.Layouts.pas" line="456"/>
      <event name="OnDragLeave" visibility="published" read="FOnDragLeave" write="FOnDragLeave" type="TNotifyEvent" hoisted="true" file="FMX.Layouts.pas" line="457"/>
      <event name="OnDragOver" visibility="published" read="FOnDragOver" write="FOnDragOver" type="TDragOverEvent" hoisted="true" file="FMX.Layouts.pas" line="458"/>
      <event name="OnDragDrop" visibility="published" read="FOnDragDrop" write="FOnDragDrop" type="TDragDropEvent" hoisted="true" file="FMX.Layouts.pas" line="459"/>
      <event name="OnDragEnd" visibility="published" read="FOnDragEnd" write="FOnDragEnd" type="TNotifyEvent" hoisted="true" file="FMX.Layouts.pas" line="460"/>
      <event name="OnClick" visibility="published" read="FOnClick" write="SetOnClick" stored="OnClickStored" type="TNotifyEvent" hoisted="true" file="FMX.Layouts.pas" line="462"/>
      <event name="OnDblClick" visibility="published" read="FOnDblClick" write="FOnDblClick" type="TNotifyEvent" hoisted="true" file="FMX.Layouts.pas" line="463"/>
      <event name="OnMouseDown" visibility="published" read="FOnMouseDown" write="FOnMouseDown" type="TMouseEvent" hoisted="true" file="FMX.Layouts.pas" line="464"/>
      <event name="OnMouseMove" visibility="published" read="FOnMouseMove" write="FOnMouseMove" type="TMouseMoveEvent" hoisted="true" file="FMX.Layouts.pas" line="465"/>
      <event name="OnMouseUp" visibility="published" read="FOnMouseUp" write="FOnMouseUp" type="TMouseEvent" hoisted="true" file="FMX.Layouts.pas" line="466"/>
      <event name="OnMouseWheel" visibility="published" read="FOnMouseWheel" write="FOnMouseWheel" type="TMouseWheelEvent" hoisted="true" file="FMX.Layouts.pas" line="467"/>
      <event name="OnMouseEnter" visibility="published" read="FOnMouseEnter" write="FOnMouseEnter" type="TNotifyEvent" hoisted="true" file="FMX.Layouts.pas" line="468"/>
      <event name="OnMouseLeave" visibility="published" read="FOnMouseLeave" write="FOnMouseLeave" type="TNotifyEvent" hoisted="true" file="FMX.Layouts.pas" line="469"/>
      <event name="OnViewportPositionChange" visibility="published" read="FOnViewportPositionChange" write="FOnViewportPositionChange" type="TPositionChangeEvent" hoisted="true" file="FMX.Layouts.pas" line="471"/>
      <event name="OnHScrollChange" visibility="published" read="FOnHScrollChange" write="FOnHScrollChange" type="TNotifyEvent" hoisted="true" file="FMX.Layouts.pas" line="472"/>
      <event name="OnVScrollChange" visibility="published" read="FOnVScrollChange" write="FOnVScrollChange" type="TNotifyEvent" hoisted="true" file="FMX.Layouts.pas" line="473"/>
      <event name="OnCalcContentBounds" visibility="published" read="FOnCalcContentBounds" write="FOnCalcContentBounds" type="TOnCalcContentBoundsEvent" hoisted="true" file="FMX.Layouts.pas" line="474"/>
    </members>
  <devnotes><summary>
Extends TCustomScrollBox declaring published properties.
TScrollBox extends TCustomScrollBox declaring published properties. TScrollBox does not extend the base class with any new functionality.
In difference to TFramedScrollBox, TScrollBox does not draw the edges (top, left, bottom, and right) and does not fill the control rectangle with any special color. Therefore, by default TScrollBox is not highlighted from the background of a parent control.  
</summary></devnotes></class>
  <class name="TVertScrollBox" file="FMX.Layouts.pas" line="479">
    
    <members>
      <function name="GetDefaultStyleLookupName" visibility="protected" procflags="override" file="FMX.Layouts.pas" line="481">
        <parameters>
          <retval type="string"/>
        </parameters>
      <devnotes><summary>
Protected getter implementation for the DefaultStyleLookupName property.
FMX.Layouts.TVertScrollBox.GetDefaultStyleLookupName inherits from FMX.Controls.TStyledControl.GetDefaultStyleLookupName. All content below this line refers to FMX.Controls.TStyledControl.GetDefaultStyleLookupName.
Protected getter implementation for the DefaultStyleLookupName property.
When you Create a styled FireMonkey component by extending an existing component, override this method, if you want your component to inherit styles from the parent component. See Step 2 - Implement a Property to Specify the Format: Inheriting Styles of the Parent Component for more information and example code.
</summary></devnotes></function>
      <function name="DoCalcContentBounds" visibility="protected" procflags="override" file="FMX.Layouts.pas" line="482">
        <parameters>
          <retval type="TRectF"/>
        </parameters>
      <devnotes><summary>
Calculates the ContentBounds rectangle bounding all controls in the scrolling region.
FMX.Layouts.TVertScrollBox.DoCalcContentBounds inherits from FMX.Layouts.TCustomScrollBox.DoCalcContentBounds. All content below this line refers to FMX.Layouts.TCustomScrollBox.DoCalcContentBounds.
Calculates the ContentBounds rectangle bounding all controls in the scrolling region.
DoRealign calls DoCalcContentBounds to calculate the ContentBounds rectangle. If the OnCalcContentBounds event handler is defined, then DoRealign calls this event handler and  passes into it the calculated content bounding rectangle for additional calculations.
</summary></devnotes></function>
      <procedure name="Paint" visibility="protected" procflags="override" file="FMX.Layouts.pas" line="483">
      <devnotes><summary>
Renders the control's surface. 
FMX.Layouts.TVertScrollBox.Paint inherits from FMX.Controls.TControl.Paint. All content below this line refers to FMX.Controls.TControl.Paint.
Renders the control's surface. 
The Paint method is called by DoPaint when a control is being painted by the PaintTo method. Before DoPaint, Painting is called. AfterPaint is called immediately after. 
FireMonkey internally calls Paint to paint the control when the window is being painted. You must not call Paint explicitly.
The base class TControl implements an empty Paint. The descendants of TControl override Paint to provide specific rendering of the respective controls.
For example, Paint methods in classes of the FMX.Objects unit draw and fill shapes using the properties defined in these classes. See the descriptions of these classes to find the properties of the respective shapes. 
</summary></devnotes></procedure>
      <procedure name="DoUpdateAniCalculations" visibility="protected" procflags="override" file="FMX.Layouts.pas" line="484">
        <parameters>
          <parameter name="AAniCalculations" type="TScrollCalculations" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Sets the default inertial scrolling properties for the current platform.
DoUpdateAniCalculations calls the inherited TCustomScrollBox.DoUpdateAniCalculations to set the default values to the Animation, TouchTracking, 
BoundsAnimation,  and AutoShowing properties of the inertial scrolling under the current platform. In the TVertScrollBox class, DoUpdateAniCalculations permits only vertical TouchTracking if vertical touch tracking is supported under the current platform. DoUpdateAniCalculations sets the properties of the TScrollCalculations object kept in the AniCalculations property.  
</summary></devnotes></procedure>
      <property name="Content" visibility="public" read="FContent" type="TScrollContent" hoisted="true" file="FMX.Layouts.pas" line="486"/>
      <property name="Align" visibility="published" read="FAlign" write="SetAlign" type="TAlignLayout" default="0" hoisted="true" file="FMX.Layouts.pas" line="488"/>
      <property name="Anchors" visibility="published" read="FAnchors" write="SetAnchors" stored="IsAnchorsStored" type="TAnchors" hoisted="true" file="FMX.Layouts.pas" line="489"/>
      <property name="AutoHide" visibility="published" read="FAutoHide" write="SetAutoHide" type="Boolean" default="1" hoisted="true" file="FMX.Layouts.pas" line="490"/>
      <property name="ClipChildren" visibility="published" read="FClipChildren" write="SetClipChildren" type="Boolean" default="0" hoisted="true" file="FMX.Layouts.pas" line="491"/>
      <property name="ClipParent" visibility="published" read="FClipParent" write="FClipParent" type="Boolean" default="0" hoisted="true" file="FMX.Layouts.pas" line="492"/>
      <property name="Cursor" visibility="published" read="GetCursor" write="SetCursor" type="TCursor" default="0" hoisted="true" file="FMX.Layouts.pas" line="493"/>
      <property name="DisableMouseWheel" visibility="published" read="FDisableMouseWheel" write="FDisableMouseWheel" type="Boolean" default="0" hoisted="true" file="FMX.Layouts.pas" line="494"/>
      <property name="DragMode" visibility="published" read="GetDragMode" write="SetDragMode" type="TDragMode" default="0" hoisted="true" file="FMX.Layouts.pas" line="495"/>
      <property name="Enabled" visibility="published" read="FEnabled" write="SetEnabled" stored="EnabledStored" type="Boolean" hoisted="true" file="FMX.Layouts.pas" line="496"/>
      <property name="EnableDragHighlight" visibility="published" read="FEnableDragHighlight" write="FEnableDragHighlight" type="Boolean" default="1" hoisted="true" file="FMX.Layouts.pas" line="497"/>
      <property name="Height" visibility="published" read="GetHeight" write="SetHeight" stored="False" type="Single" hoisted="true" file="FMX.Layouts.pas" line="498"/>
      <property name="HelpContext" visibility="published" read="FHelpContext" write="SetHelpContext" stored="IsHelpContextStored" type="THelpContext" default="0" hoisted="true" file="FMX.Layouts.pas" line="499"/>
      <property name="HelpKeyword" visibility="published" read="FHelpKeyword" write="SetHelpKeyword" stored="IsHelpContextStored" type="string" default="0" hoisted="true" file="FMX.Layouts.pas" line="500"/>
      <property name="HelpType" visibility="published" read="FHelpType" write="FHelpType" type="THelpType" default="1" hoisted="true" file="FMX.Layouts.pas" line="501"/>
      <property name="Hint" visibility="published" read="FHint" write="SetHint" stored="HintStored" type="string" default="0" hoisted="true" file="FMX.Layouts.pas" line="502"/>
      <property name="HitTest" visibility="published" read="FHitTest" write="SetHitTest" type="Boolean" default="1" hoisted="true" file="FMX.Layouts.pas" line="503"/>
      <property name="Locked" visibility="published" read="FLocked" write="SetLocked" type="Boolean" default="0" hoisted="true" file="FMX.Layouts.pas" line="504"/>
      <property name="Margins" visibility="published" read="GetMargins" write="SetMargins" type="TBounds" hoisted="true" file="FMX.Layouts.pas" line="505"/>
      <property name="Opacity" visibility="published" read="FOpacity" write="SetOpacity" stored="IsOpacityStored" type="Single" hoisted="true" file="FMX.Layouts.pas" line="506"/>
      <property name="Padding" visibility="published" read="GetPadding" write="SetPadding" type="TBounds" hoisted="true" file="FMX.Layouts.pas" line="507"/>
      <property name="PopupMenu" visibility="published" read="FPopupMenu" write="SetPopupMenu" stored="IsPopupMenuStored" type="TCustomPopupMenu" hoisted="true" file="FMX.Layouts.pas" line="508"/>
      <property name="Position" visibility="published" read="FPosition" write="SetPosition" stored="IsPositionStored" type="TPosition" hoisted="true" file="FMX.Layouts.pas" line="509"/>
      <property name="RotationAngle" visibility="published" read="GetRotationAngle" write="SetRotationAngle" type="Single" default="0" hoisted="true" file="FMX.Layouts.pas" line="510"/>
      <property name="RotationCenter" visibility="published" read="GetRotationCenter" write="SetRotationCenter" type="TPosition" hoisted="true" file="FMX.Layouts.pas" line="511"/>
      <property name="Scale" visibility="published" read="GetScale" write="SetScale" type="TPosition" hoisted="true" file="FMX.Layouts.pas" line="512"/>
      <property name="ShowScrollBars" visibility="published" read="FShowScrollBars" write="SetShowScrollBars" type="Boolean" default="1" hoisted="true" file="FMX.Layouts.pas" line="513"/>
      <property name="ShowSizeGrip" visibility="published" read="FShowSizeGrip" write="SetShowSizeGrip" type="Boolean" default="0" hoisted="true" file="FMX.Layouts.pas" line="514"/>
      <property name="Size" visibility="published" read="FSize" write="SetSize" stored="IsSizeStored" type="TControlSize" hoisted="true" file="FMX.Layouts.pas" line="515"/>
      <property name="StyleLookup" visibility="published" read="FStyleLookup" write="SetStyleLookup" type="string" default="0" hoisted="true" file="FMX.Layouts.pas" line="516"/>
      <property name="TabOrder" visibility="published" read="GetTabOrder" write="SetTabOrder" type="TTabOrder" default="-1" hoisted="true" file="FMX.Layouts.pas" line="517"/>
      <property name="TabStop" visibility="published" read="GetTabStop" write="SetTabStop" type="Boolean" default="1" hoisted="true" file="FMX.Layouts.pas" line="518"/>
      <property name="TouchTargetExpansion" visibility="published" read="FTouchTargetExpansion" write="SetTouchTargetExpansion" type="TBounds" hoisted="true" file="FMX.Layouts.pas" line="519"/>
      <property name="Visible" visibility="published" read="FVisible" write="SetVisible" stored="VisibleStored" type="Boolean" default="1" hoisted="true" file="FMX.Layouts.pas" line="520"/>
      <property name="Width" visibility="published" read="GetWidth" write="SetWidth" stored="False" type="Single" hoisted="true" file="FMX.Layouts.pas" line="521"/>
      <property name="ParentShowHint" visibility="published" read="FParentShowHint" write="SetParentShowHint" type="Boolean" default="1" hoisted="true" file="FMX.Layouts.pas" line="522"/>
      <property name="ShowHint" visibility="published" read="FShowHint" write="SetShowHint" stored="IsShowHintStored" type="Boolean" hoisted="true" file="FMX.Layouts.pas" line="523"/>
      <event name="OnApplyStyleLookup" visibility="published" read="FOnApplyStyleLookup" write="FOnApplyStyleLookup" type="TNotifyEvent" hoisted="true" file="FMX.Layouts.pas" line="525"/>
      <event name="OnPainting" visibility="published" read="FOnPainting" write="FOnPainting" type="TOnPaintEvent" hoisted="true" file="FMX.Layouts.pas" line="526"/>
      <event name="OnPaint" visibility="published" read="FOnPaint" write="FOnPaint" type="TOnPaintEvent" hoisted="true" file="FMX.Layouts.pas" line="527"/>
      <event name="OnResize" visibility="published" read="FOnResize" write="FOnResize" type="TNotifyEvent" hoisted="true" file="FMX.Layouts.pas" line="528"/>
      <event name="OnResized" visibility="published" read="FOnResized" write="FOnResized" type="TNotifyEvent" hoisted="true" file="FMX.Layouts.pas" line="529"/>
      <event name="OnDragEnter" visibility="published" read="FOnDragEnter" write="FOnDragEnter" type="TDragEnterEvent" hoisted="true" file="FMX.Layouts.pas" line="531"/>
      <event name="OnDragLeave" visibility="published" read="FOnDragLeave" write="FOnDragLeave" type="TNotifyEvent" hoisted="true" file="FMX.Layouts.pas" line="532"/>
      <event name="OnDragOver" visibility="published" read="FOnDragOver" write="FOnDragOver" type="TDragOverEvent" hoisted="true" file="FMX.Layouts.pas" line="533"/>
      <event name="OnDragDrop" visibility="published" read="FOnDragDrop" write="FOnDragDrop" type="TDragDropEvent" hoisted="true" file="FMX.Layouts.pas" line="534"/>
      <event name="OnDragEnd" visibility="published" read="FOnDragEnd" write="FOnDragEnd" type="TNotifyEvent" hoisted="true" file="FMX.Layouts.pas" line="535"/>
      <event name="OnClick" visibility="published" read="FOnClick" write="SetOnClick" stored="OnClickStored" type="TNotifyEvent" hoisted="true" file="FMX.Layouts.pas" line="537"/>
      <event name="OnDblClick" visibility="published" read="FOnDblClick" write="FOnDblClick" type="TNotifyEvent" hoisted="true" file="FMX.Layouts.pas" line="538"/>
      <event name="OnMouseDown" visibility="published" read="FOnMouseDown" write="FOnMouseDown" type="TMouseEvent" hoisted="true" file="FMX.Layouts.pas" line="539"/>
      <event name="OnMouseMove" visibility="published" read="FOnMouseMove" write="FOnMouseMove" type="TMouseMoveEvent" hoisted="true" file="FMX.Layouts.pas" line="540"/>
      <event name="OnMouseUp" visibility="published" read="FOnMouseUp" write="FOnMouseUp" type="TMouseEvent" hoisted="true" file="FMX.Layouts.pas" line="541"/>
      <event name="OnMouseWheel" visibility="published" read="FOnMouseWheel" write="FOnMouseWheel" type="TMouseWheelEvent" hoisted="true" file="FMX.Layouts.pas" line="542"/>
      <event name="OnMouseEnter" visibility="published" read="FOnMouseEnter" write="FOnMouseEnter" type="TNotifyEvent" hoisted="true" file="FMX.Layouts.pas" line="543"/>
      <event name="OnMouseLeave" visibility="published" read="FOnMouseLeave" write="FOnMouseLeave" type="TNotifyEvent" hoisted="true" file="FMX.Layouts.pas" line="544"/>
      <event name="OnViewportPositionChange" visibility="published" read="FOnViewportPositionChange" write="FOnViewportPositionChange" type="TPositionChangeEvent" hoisted="true" file="FMX.Layouts.pas" line="546"/>
      <event name="OnVScrollChange" visibility="published" read="FOnVScrollChange" write="FOnVScrollChange" type="TNotifyEvent" hoisted="true" file="FMX.Layouts.pas" line="547"/>
      <event name="OnCalcContentBounds" visibility="published" read="FOnCalcContentBounds" write="FOnCalcContentBounds" type="TOnCalcContentBoundsEvent" hoisted="true" file="FMX.Layouts.pas" line="548"/>
    </members>
  <devnotes><summary>
Represents a TScrollBox restricted to vertical scrolling.
</summary></devnotes></class>
  <class name="THorzScrollBox" file="FMX.Layouts.pas" line="553">
    
    <members>
      <function name="GetDefaultStyleLookupName" visibility="protected" procflags="override" file="FMX.Layouts.pas" line="555">
        <parameters>
          <retval type="string"/>
        </parameters>
      <devnotes><summary>
Protected getter implementation for the DefaultStyleLookupName property.
FMX.Layouts.THorzScrollBox.GetDefaultStyleLookupName inherits from FMX.Controls.TStyledControl.GetDefaultStyleLookupName. All content below this line refers to FMX.Controls.TStyledControl.GetDefaultStyleLookupName.
Protected getter implementation for the DefaultStyleLookupName property.
When you Create a styled FireMonkey component by extending an existing component, override this method, if you want your component to inherit styles from the parent component. See Step 2 - Implement a Property to Specify the Format: Inheriting Styles of the Parent Component for more information and example code.
</summary></devnotes></function>
      <function name="DoCalcContentBounds" visibility="protected" procflags="override" file="FMX.Layouts.pas" line="556">
        <parameters>
          <retval type="TRectF"/>
        </parameters>
      <devnotes><summary>
Calculates the ContentBounds rectangle bounding all controls in the scrolling region.
FMX.Layouts.THorzScrollBox.DoCalcContentBounds inherits from FMX.Layouts.TCustomScrollBox.DoCalcContentBounds. All content below this line refers to FMX.Layouts.TCustomScrollBox.DoCalcContentBounds.
Calculates the ContentBounds rectangle bounding all controls in the scrolling region.
DoRealign calls DoCalcContentBounds to calculate the ContentBounds rectangle. If the OnCalcContentBounds event handler is defined, then DoRealign calls this event handler and  passes into it the calculated content bounding rectangle for additional calculations.
</summary></devnotes></function>
      <procedure name="Paint" visibility="protected" procflags="override" file="FMX.Layouts.pas" line="557">
      <devnotes><summary>
Renders the control's surface. 
FMX.Layouts.THorzScrollBox.Paint inherits from FMX.Controls.TControl.Paint. All content below this line refers to FMX.Controls.TControl.Paint.
Renders the control's surface. 
The Paint method is called by DoPaint when a control is being painted by the PaintTo method. Before DoPaint, Painting is called. AfterPaint is called immediately after. 
FireMonkey internally calls Paint to paint the control when the window is being painted. You must not call Paint explicitly.
The base class TControl implements an empty Paint. The descendants of TControl override Paint to provide specific rendering of the respective controls.
For example, Paint methods in classes of the FMX.Objects unit draw and fill shapes using the properties defined in these classes. See the descriptions of these classes to find the properties of the respective shapes. 
</summary></devnotes></procedure>
      <procedure name="DoUpdateAniCalculations" visibility="protected" procflags="override" file="FMX.Layouts.pas" line="558">
        <parameters>
          <parameter name="AAniCalculations" type="TScrollCalculations" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Sets the default inertial scrolling properties for the current platform.
DoUpdateAniCalculations calls the inherited TCustomScrollBox.DoUpdateAniCalculations to set the default values to the Animation, TouchTracking, 
BoundsAnimation, and AutoShowing properties of the inertial scrolling under the current platform. In the THorzScrollBox class, DoUpdateAniCalculations permits only horizontal TouchTracking if horizontal touch tracking is supported under the current platform. DoUpdateAniCalculations sets the properties of the TScrollCalculations object kept in the AniCalculations property.  
</summary></devnotes></procedure>
      <property name="Content" visibility="public" read="FContent" type="TScrollContent" hoisted="true" file="FMX.Layouts.pas" line="560"/>
      <property name="Align" visibility="published" read="FAlign" write="SetAlign" type="TAlignLayout" default="0" hoisted="true" file="FMX.Layouts.pas" line="562"/>
      <property name="Anchors" visibility="published" read="FAnchors" write="SetAnchors" stored="IsAnchorsStored" type="TAnchors" hoisted="true" file="FMX.Layouts.pas" line="563"/>
      <property name="AutoHide" visibility="published" read="FAutoHide" write="SetAutoHide" type="Boolean" default="1" hoisted="true" file="FMX.Layouts.pas" line="564"/>
      <property name="ClipChildren" visibility="published" read="FClipChildren" write="SetClipChildren" type="Boolean" default="0" hoisted="true" file="FMX.Layouts.pas" line="565"/>
      <property name="ClipParent" visibility="published" read="FClipParent" write="FClipParent" type="Boolean" default="0" hoisted="true" file="FMX.Layouts.pas" line="566"/>
      <property name="Cursor" visibility="published" read="GetCursor" write="SetCursor" type="TCursor" default="0" hoisted="true" file="FMX.Layouts.pas" line="567"/>
      <property name="DisableMouseWheel" visibility="published" read="FDisableMouseWheel" write="FDisableMouseWheel" type="Boolean" default="0" hoisted="true" file="FMX.Layouts.pas" line="568"/>
      <property name="DragMode" visibility="published" read="GetDragMode" write="SetDragMode" type="TDragMode" default="0" hoisted="true" file="FMX.Layouts.pas" line="569"/>
      <property name="Enabled" visibility="published" read="FEnabled" write="SetEnabled" stored="EnabledStored" type="Boolean" hoisted="true" file="FMX.Layouts.pas" line="570"/>
      <property name="EnableDragHighlight" visibility="published" read="FEnableDragHighlight" write="FEnableDragHighlight" type="Boolean" default="1" hoisted="true" file="FMX.Layouts.pas" line="571"/>
      <property name="Height" visibility="published" read="GetHeight" write="SetHeight" stored="False" type="Single" hoisted="true" file="FMX.Layouts.pas" line="572"/>
      <property name="HelpContext" visibility="published" read="FHelpContext" write="SetHelpContext" stored="IsHelpContextStored" type="THelpContext" default="0" hoisted="true" file="FMX.Layouts.pas" line="573"/>
      <property name="HelpKeyword" visibility="published" read="FHelpKeyword" write="SetHelpKeyword" stored="IsHelpContextStored" type="string" default="0" hoisted="true" file="FMX.Layouts.pas" line="574"/>
      <property name="HelpType" visibility="published" read="FHelpType" write="FHelpType" type="THelpType" default="1" hoisted="true" file="FMX.Layouts.pas" line="575"/>
      <property name="Hint" visibility="published" read="FHint" write="SetHint" stored="HintStored" type="string" default="0" hoisted="true" file="FMX.Layouts.pas" line="576"/>
      <property name="HitTest" visibility="published" read="FHitTest" write="SetHitTest" type="Boolean" default="1" hoisted="true" file="FMX.Layouts.pas" line="577"/>
      <property name="Locked" visibility="published" read="FLocked" write="SetLocked" type="Boolean" default="0" hoisted="true" file="FMX.Layouts.pas" line="578"/>
      <property name="Margins" visibility="published" read="GetMargins" write="SetMargins" type="TBounds" hoisted="true" file="FMX.Layouts.pas" line="579"/>
      <property name="Opacity" visibility="published" read="FOpacity" write="SetOpacity" stored="IsOpacityStored" type="Single" hoisted="true" file="FMX.Layouts.pas" line="580"/>
      <property name="Padding" visibility="published" read="GetPadding" write="SetPadding" type="TBounds" hoisted="true" file="FMX.Layouts.pas" line="581"/>
      <property name="PopupMenu" visibility="published" read="FPopupMenu" write="SetPopupMenu" stored="IsPopupMenuStored" type="TCustomPopupMenu" hoisted="true" file="FMX.Layouts.pas" line="582"/>
      <property name="Position" visibility="published" read="FPosition" write="SetPosition" stored="IsPositionStored" type="TPosition" hoisted="true" file="FMX.Layouts.pas" line="583"/>
      <property name="RotationAngle" visibility="published" read="GetRotationAngle" write="SetRotationAngle" type="Single" default="0" hoisted="true" file="FMX.Layouts.pas" line="584"/>
      <property name="RotationCenter" visibility="published" read="GetRotationCenter" write="SetRotationCenter" type="TPosition" hoisted="true" file="FMX.Layouts.pas" line="585"/>
      <property name="Scale" visibility="published" read="GetScale" write="SetScale" type="TPosition" hoisted="true" file="FMX.Layouts.pas" line="586"/>
      <property name="ShowScrollBars" visibility="published" read="FShowScrollBars" write="SetShowScrollBars" type="Boolean" default="1" hoisted="true" file="FMX.Layouts.pas" line="587"/>
      <property name="ShowSizeGrip" visibility="published" read="FShowSizeGrip" write="SetShowSizeGrip" type="Boolean" default="0" hoisted="true" file="FMX.Layouts.pas" line="588"/>
      <property name="Size" visibility="published" read="FSize" write="SetSize" stored="IsSizeStored" type="TControlSize" hoisted="true" file="FMX.Layouts.pas" line="589"/>
      <property name="StyleLookup" visibility="published" read="FStyleLookup" write="SetStyleLookup" type="string" default="0" hoisted="true" file="FMX.Layouts.pas" line="590"/>
      <property name="TabOrder" visibility="published" read="GetTabOrder" write="SetTabOrder" type="TTabOrder" default="-1" hoisted="true" file="FMX.Layouts.pas" line="591"/>
      <property name="TabStop" visibility="published" read="GetTabStop" write="SetTabStop" type="Boolean" default="1" hoisted="true" file="FMX.Layouts.pas" line="592"/>
      <property name="TouchTargetExpansion" visibility="published" read="FTouchTargetExpansion" write="SetTouchTargetExpansion" type="TBounds" hoisted="true" file="FMX.Layouts.pas" line="593"/>
      <property name="Visible" visibility="published" read="FVisible" write="SetVisible" stored="VisibleStored" type="Boolean" default="1" hoisted="true" file="FMX.Layouts.pas" line="594"/>
      <property name="Width" visibility="published" read="GetWidth" write="SetWidth" stored="False" type="Single" hoisted="true" file="FMX.Layouts.pas" line="595"/>
      <property name="ParentShowHint" visibility="published" read="FParentShowHint" write="SetParentShowHint" type="Boolean" default="1" hoisted="true" file="FMX.Layouts.pas" line="596"/>
      <property name="ShowHint" visibility="published" read="FShowHint" write="SetShowHint" stored="IsShowHintStored" type="Boolean" hoisted="true" file="FMX.Layouts.pas" line="597"/>
      <event name="OnApplyStyleLookup" visibility="published" read="FOnApplyStyleLookup" write="FOnApplyStyleLookup" type="TNotifyEvent" hoisted="true" file="FMX.Layouts.pas" line="599"/>
      <event name="OnPainting" visibility="published" read="FOnPainting" write="FOnPainting" type="TOnPaintEvent" hoisted="true" file="FMX.Layouts.pas" line="600"/>
      <event name="OnPaint" visibility="published" read="FOnPaint" write="FOnPaint" type="TOnPaintEvent" hoisted="true" file="FMX.Layouts.pas" line="601"/>
      <event name="OnResize" visibility="published" read="FOnResize" write="FOnResize" type="TNotifyEvent" hoisted="true" file="FMX.Layouts.pas" line="602"/>
      <event name="OnResized" visibility="published" read="FOnResized" write="FOnResized" type="TNotifyEvent" hoisted="true" file="FMX.Layouts.pas" line="603"/>
      <event name="OnDragEnter" visibility="published" read="FOnDragEnter" write="FOnDragEnter" type="TDragEnterEvent" hoisted="true" file="FMX.Layouts.pas" line="605"/>
      <event name="OnDragLeave" visibility="published" read="FOnDragLeave" write="FOnDragLeave" type="TNotifyEvent" hoisted="true" file="FMX.Layouts.pas" line="606"/>
      <event name="OnDragOver" visibility="published" read="FOnDragOver" write="FOnDragOver" type="TDragOverEvent" hoisted="true" file="FMX.Layouts.pas" line="607"/>
      <event name="OnDragDrop" visibility="published" read="FOnDragDrop" write="FOnDragDrop" type="TDragDropEvent" hoisted="true" file="FMX.Layouts.pas" line="608"/>
      <event name="OnDragEnd" visibility="published" read="FOnDragEnd" write="FOnDragEnd" type="TNotifyEvent" hoisted="true" file="FMX.Layouts.pas" line="609"/>
      <event name="OnClick" visibility="published" read="FOnClick" write="SetOnClick" stored="OnClickStored" type="TNotifyEvent" hoisted="true" file="FMX.Layouts.pas" line="611"/>
      <event name="OnDblClick" visibility="published" read="FOnDblClick" write="FOnDblClick" type="TNotifyEvent" hoisted="true" file="FMX.Layouts.pas" line="612"/>
      <event name="OnMouseDown" visibility="published" read="FOnMouseDown" write="FOnMouseDown" type="TMouseEvent" hoisted="true" file="FMX.Layouts.pas" line="613"/>
      <event name="OnMouseMove" visibility="published" read="FOnMouseMove" write="FOnMouseMove" type="TMouseMoveEvent" hoisted="true" file="FMX.Layouts.pas" line="614"/>
      <event name="OnMouseUp" visibility="published" read="FOnMouseUp" write="FOnMouseUp" type="TMouseEvent" hoisted="true" file="FMX.Layouts.pas" line="615"/>
      <event name="OnMouseWheel" visibility="published" read="FOnMouseWheel" write="FOnMouseWheel" type="TMouseWheelEvent" hoisted="true" file="FMX.Layouts.pas" line="616"/>
      <event name="OnMouseEnter" visibility="published" read="FOnMouseEnter" write="FOnMouseEnter" type="TNotifyEvent" hoisted="true" file="FMX.Layouts.pas" line="617"/>
      <event name="OnMouseLeave" visibility="published" read="FOnMouseLeave" write="FOnMouseLeave" type="TNotifyEvent" hoisted="true" file="FMX.Layouts.pas" line="618"/>
      <event name="OnViewportPositionChange" visibility="published" read="FOnViewportPositionChange" write="FOnViewportPositionChange" type="TPositionChangeEvent" hoisted="true" file="FMX.Layouts.pas" line="620"/>
      <event name="OnHScrollChange" visibility="published" read="FOnHScrollChange" write="FOnHScrollChange" type="TNotifyEvent" hoisted="true" file="FMX.Layouts.pas" line="621"/>
      <event name="OnCalcContentBounds" visibility="published" read="FOnCalcContentBounds" write="FOnCalcContentBounds" type="TOnCalcContentBoundsEvent" hoisted="true" file="FMX.Layouts.pas" line="622"/>
    </members>
  <devnotes><summary>
Represents a TScrollBox  restricted to horizontal scrolling.
</summary></devnotes></class>
  <class name="TFramedScrollBox" file="FMX.Layouts.pas" line="627">
    
    <members>
      <function name="IsOpaque" visibility="protected" procflags="override" file="FMX.Layouts.pas" line="629">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Indicates if the control should update effects when you scroll content.
FMX.Layouts.TFramedScrollBox.IsOpaque inherits from FMX.Layouts.TCustomScrollBox.IsOpaque. All content below this line refers to FMX.Layouts.TCustomScrollBox.IsOpaque.
Indicates if the control should update effects when you scroll content.
Its default value is False, meaning that the control does not update effects.
In the TFramedScrollBox and TFramedVertScrollBox classes IsOpaque returns True.
</summary></devnotes></function>
      <property name="Content" visibility="public" read="FContent" type="TScrollContent" hoisted="true" file="FMX.Layouts.pas" line="631"/>
      <property name="Align" visibility="published" read="FAlign" write="SetAlign" type="TAlignLayout" default="0" hoisted="true" file="FMX.Layouts.pas" line="633"/>
      <property name="Anchors" visibility="published" read="FAnchors" write="SetAnchors" stored="IsAnchorsStored" type="TAnchors" hoisted="true" file="FMX.Layouts.pas" line="634"/>
      <property name="AutoHide" visibility="published" read="FAutoHide" write="SetAutoHide" type="Boolean" default="1" hoisted="true" file="FMX.Layouts.pas" line="635"/>
      <property name="ClipChildren" visibility="published" read="FClipChildren" write="SetClipChildren" type="Boolean" default="0" hoisted="true" file="FMX.Layouts.pas" line="636"/>
      <property name="ClipParent" visibility="published" read="FClipParent" write="FClipParent" type="Boolean" default="0" hoisted="true" file="FMX.Layouts.pas" line="637"/>
      <property name="Cursor" visibility="published" read="GetCursor" write="SetCursor" type="TCursor" default="0" hoisted="true" file="FMX.Layouts.pas" line="638"/>
      <property name="DisableMouseWheel" visibility="published" read="FDisableMouseWheel" write="FDisableMouseWheel" type="Boolean" default="0" hoisted="true" file="FMX.Layouts.pas" line="639"/>
      <property name="DragMode" visibility="published" read="GetDragMode" write="SetDragMode" type="TDragMode" default="0" hoisted="true" file="FMX.Layouts.pas" line="640"/>
      <property name="Enabled" visibility="published" read="FEnabled" write="SetEnabled" stored="EnabledStored" type="Boolean" hoisted="true" file="FMX.Layouts.pas" line="641"/>
      <property name="EnableDragHighlight" visibility="published" read="FEnableDragHighlight" write="FEnableDragHighlight" type="Boolean" default="1" hoisted="true" file="FMX.Layouts.pas" line="642"/>
      <property name="Height" visibility="published" read="GetHeight" write="SetHeight" stored="False" type="Single" hoisted="true" file="FMX.Layouts.pas" line="643"/>
      <property name="HelpContext" visibility="published" read="FHelpContext" write="SetHelpContext" stored="IsHelpContextStored" type="THelpContext" default="0" hoisted="true" file="FMX.Layouts.pas" line="644"/>
      <property name="HelpKeyword" visibility="published" read="FHelpKeyword" write="SetHelpKeyword" stored="IsHelpContextStored" type="string" default="0" hoisted="true" file="FMX.Layouts.pas" line="645"/>
      <property name="HelpType" visibility="published" read="FHelpType" write="FHelpType" type="THelpType" default="1" hoisted="true" file="FMX.Layouts.pas" line="646"/>
      <property name="Hint" visibility="published" read="FHint" write="SetHint" stored="HintStored" type="string" default="0" hoisted="true" file="FMX.Layouts.pas" line="647"/>
      <property name="HitTest" visibility="published" read="FHitTest" write="SetHitTest" type="Boolean" default="1" hoisted="true" file="FMX.Layouts.pas" line="648"/>
      <property name="Locked" visibility="published" read="FLocked" write="SetLocked" type="Boolean" default="0" hoisted="true" file="FMX.Layouts.pas" line="649"/>
      <property name="Margins" visibility="published" read="GetMargins" write="SetMargins" type="TBounds" hoisted="true" file="FMX.Layouts.pas" line="650"/>
      <property name="Opacity" visibility="published" read="FOpacity" write="SetOpacity" stored="IsOpacityStored" type="Single" hoisted="true" file="FMX.Layouts.pas" line="651"/>
      <property name="Padding" visibility="published" read="GetPadding" write="SetPadding" type="TBounds" hoisted="true" file="FMX.Layouts.pas" line="652"/>
      <property name="PopupMenu" visibility="published" read="FPopupMenu" write="SetPopupMenu" stored="IsPopupMenuStored" type="TCustomPopupMenu" hoisted="true" file="FMX.Layouts.pas" line="653"/>
      <property name="Position" visibility="published" read="FPosition" write="SetPosition" stored="IsPositionStored" type="TPosition" hoisted="true" file="FMX.Layouts.pas" line="654"/>
      <property name="RotationAngle" visibility="published" read="GetRotationAngle" write="SetRotationAngle" type="Single" default="0" hoisted="true" file="FMX.Layouts.pas" line="655"/>
      <property name="RotationCenter" visibility="published" read="GetRotationCenter" write="SetRotationCenter" type="TPosition" hoisted="true" file="FMX.Layouts.pas" line="656"/>
      <property name="Scale" visibility="published" read="GetScale" write="SetScale" type="TPosition" hoisted="true" file="FMX.Layouts.pas" line="657"/>
      <property name="ShowScrollBars" visibility="published" read="FShowScrollBars" write="SetShowScrollBars" type="Boolean" default="1" hoisted="true" file="FMX.Layouts.pas" line="658"/>
      <property name="ShowSizeGrip" visibility="published" read="FShowSizeGrip" write="SetShowSizeGrip" type="Boolean" default="0" hoisted="true" file="FMX.Layouts.pas" line="659"/>
      <property name="Size" visibility="published" read="FSize" write="SetSize" stored="IsSizeStored" type="TControlSize" hoisted="true" file="FMX.Layouts.pas" line="660"/>
      <property name="StyleLookup" visibility="published" read="FStyleLookup" write="SetStyleLookup" type="string" default="0" hoisted="true" file="FMX.Layouts.pas" line="661"/>
      <property name="TabOrder" visibility="published" read="GetTabOrder" write="SetTabOrder" type="TTabOrder" default="-1" hoisted="true" file="FMX.Layouts.pas" line="662"/>
      <property name="TabStop" visibility="published" read="GetTabStop" write="SetTabStop" type="Boolean" default="1" hoisted="true" file="FMX.Layouts.pas" line="663"/>
      <property name="TouchTargetExpansion" visibility="published" read="FTouchTargetExpansion" write="SetTouchTargetExpansion" type="TBounds" hoisted="true" file="FMX.Layouts.pas" line="664"/>
      <property name="Visible" visibility="published" read="FVisible" write="SetVisible" stored="VisibleStored" type="Boolean" default="1" hoisted="true" file="FMX.Layouts.pas" line="665"/>
      <property name="Width" visibility="published" read="GetWidth" write="SetWidth" stored="False" type="Single" hoisted="true" file="FMX.Layouts.pas" line="666"/>
      <property name="ParentShowHint" visibility="published" read="FParentShowHint" write="SetParentShowHint" type="Boolean" default="1" hoisted="true" file="FMX.Layouts.pas" line="667"/>
      <property name="ShowHint" visibility="published" read="FShowHint" write="SetShowHint" stored="IsShowHintStored" type="Boolean" hoisted="true" file="FMX.Layouts.pas" line="668"/>
      <event name="OnApplyStyleLookup" visibility="published" read="FOnApplyStyleLookup" write="FOnApplyStyleLookup" type="TNotifyEvent" hoisted="true" file="FMX.Layouts.pas" line="670"/>
      <event name="OnPainting" visibility="published" read="FOnPainting" write="FOnPainting" type="TOnPaintEvent" hoisted="true" file="FMX.Layouts.pas" line="671"/>
      <event name="OnPaint" visibility="published" read="FOnPaint" write="FOnPaint" type="TOnPaintEvent" hoisted="true" file="FMX.Layouts.pas" line="672"/>
      <event name="OnResize" visibility="published" read="FOnResize" write="FOnResize" type="TNotifyEvent" hoisted="true" file="FMX.Layouts.pas" line="673"/>
      <event name="OnResized" visibility="published" read="FOnResized" write="FOnResized" type="TNotifyEvent" hoisted="true" file="FMX.Layouts.pas" line="674"/>
      <event name="OnDragEnter" visibility="published" read="FOnDragEnter" write="FOnDragEnter" type="TDragEnterEvent" hoisted="true" file="FMX.Layouts.pas" line="676"/>
      <event name="OnDragLeave" visibility="published" read="FOnDragLeave" write="FOnDragLeave" type="TNotifyEvent" hoisted="true" file="FMX.Layouts.pas" line="677"/>
      <event name="OnDragOver" visibility="published" read="FOnDragOver" write="FOnDragOver" type="TDragOverEvent" hoisted="true" file="FMX.Layouts.pas" line="678"/>
      <event name="OnDragDrop" visibility="published" read="FOnDragDrop" write="FOnDragDrop" type="TDragDropEvent" hoisted="true" file="FMX.Layouts.pas" line="679"/>
      <event name="OnDragEnd" visibility="published" read="FOnDragEnd" write="FOnDragEnd" type="TNotifyEvent" hoisted="true" file="FMX.Layouts.pas" line="680"/>
      <event name="OnClick" visibility="published" read="FOnClick" write="SetOnClick" stored="OnClickStored" type="TNotifyEvent" hoisted="true" file="FMX.Layouts.pas" line="682"/>
      <event name="OnDblClick" visibility="published" read="FOnDblClick" write="FOnDblClick" type="TNotifyEvent" hoisted="true" file="FMX.Layouts.pas" line="683"/>
      <event name="OnMouseDown" visibility="published" read="FOnMouseDown" write="FOnMouseDown" type="TMouseEvent" hoisted="true" file="FMX.Layouts.pas" line="684"/>
      <event name="OnMouseMove" visibility="published" read="FOnMouseMove" write="FOnMouseMove" type="TMouseMoveEvent" hoisted="true" file="FMX.Layouts.pas" line="685"/>
      <event name="OnMouseUp" visibility="published" read="FOnMouseUp" write="FOnMouseUp" type="TMouseEvent" hoisted="true" file="FMX.Layouts.pas" line="686"/>
      <event name="OnMouseWheel" visibility="published" read="FOnMouseWheel" write="FOnMouseWheel" type="TMouseWheelEvent" hoisted="true" file="FMX.Layouts.pas" line="687"/>
      <event name="OnMouseEnter" visibility="published" read="FOnMouseEnter" write="FOnMouseEnter" type="TNotifyEvent" hoisted="true" file="FMX.Layouts.pas" line="688"/>
      <event name="OnMouseLeave" visibility="published" read="FOnMouseLeave" write="FOnMouseLeave" type="TNotifyEvent" hoisted="true" file="FMX.Layouts.pas" line="689"/>
      <event name="OnViewportPositionChange" visibility="published" read="FOnViewportPositionChange" write="FOnViewportPositionChange" type="TPositionChangeEvent" hoisted="true" file="FMX.Layouts.pas" line="691"/>
      <event name="OnHScrollChange" visibility="published" read="FOnHScrollChange" write="FOnHScrollChange" type="TNotifyEvent" hoisted="true" file="FMX.Layouts.pas" line="692"/>
      <event name="OnVScrollChange" visibility="published" read="FOnVScrollChange" write="FOnVScrollChange" type="TNotifyEvent" hoisted="true" file="FMX.Layouts.pas" line="693"/>
      <event name="OnCalcContentBounds" visibility="published" read="FOnCalcContentBounds" write="FOnCalcContentBounds" type="TOnCalcContentBoundsEvent" hoisted="true" file="FMX.Layouts.pas" line="694"/>
    </members>
  <devnotes><summary>
Extends TCustomScrollBox declaring published properties.
TFramedScrollBox extends TCustomScrollBox declaring published properties. TFramedScrollBox does not extend the base class with any new functionality.
In difference to TScrollBox, TFramedScrollBox draws the edges (top, left, bottom, and right) and fills the control rectangle with some special color. Therefore, TFramedScrollBox scroll boxes are highlighted from the background of a parent control.  
</summary></devnotes></class>
  <class name="TFramedVertScrollBox" file="FMX.Layouts.pas" line="699">
    
    <members>
      <function name="IsOpaque" visibility="protected" procflags="override" file="FMX.Layouts.pas" line="701">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Indicates if the control should update effects when you scroll content.
FMX.Layouts.TFramedVertScrollBox.IsOpaque inherits from FMX.Layouts.TCustomScrollBox.IsOpaque. All content below this line refers to FMX.Layouts.TCustomScrollBox.IsOpaque.
Indicates if the control should update effects when you scroll content.
Its default value is False, meaning that the control does not update effects.
In the TFramedScrollBox and TFramedVertScrollBox classes IsOpaque returns True.
</summary></devnotes></function>
      <function name="GetDefaultStyleLookupName" visibility="protected" procflags="override" file="FMX.Layouts.pas" line="702">
        <parameters>
          <retval type="string"/>
        </parameters>
      <devnotes><summary>


Protected getter implementation for the DefaultStyleLookupName property.
FMX.Layouts.TFramedVertScrollBox.GetDefaultStyleLookupName inherits from FMX.Controls.TStyledControl.GetDefaultStyleLookupName. All content below this line refers to FMX.Controls.TStyledControl.GetDefaultStyleLookupName.
Protected getter implementation for the DefaultStyleLookupName property.
When you Create a styled FireMonkey component by extending an existing component, override this method, if you want your component to inherit styles from the parent component. See Step 2 - Implement a Property to Specify the Format: Inheriting Styles of the Parent Component for more information and example code.
</summary></devnotes></function>
    </members>
  <devnotes><summary>
Represents a TFramedScrollBox with an applied framedscrollboxstyle style lookup.
</summary></devnotes></class>
  <class name="TGridLayout" file="FMX.Layouts.pas" line="707">
    
    <members>
      <field name="FItemWidth" type="Single" visibility="private" size="4" offset="904" file="FMX.Layouts.pas" line="709"/>
      <field name="FItemHeight" type="Single" visibility="private" size="4" offset="908" file="FMX.Layouts.pas" line="710"/>
      <field name="FOrientation" type="TOrientation" visibility="private" size="1" offset="912" file="FMX.Layouts.pas" line="711"/>
      <procedure name="SetItemHeight" visibility="private" file="FMX.Layouts.pas" line="712">
        <parameters>
          <parameter name="Value" type="Single" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetItemWidth" visibility="private" file="FMX.Layouts.pas" line="713">
        <parameters>
          <parameter name="Value" type="Single" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetOrientation" visibility="private" file="FMX.Layouts.pas" line="714">
        <parameters>
          <parameter name="Value" type="TOrientation" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="DoRealign" visibility="protected" procflags="override" file="FMX.Layouts.pas" line="716">
      <devnotes><summary>
Performs the alignment of a FireMonkey control.
FMX.Layouts.TGridLayout.DoRealign inherits from FMX.Controls.TControl.DoRealign. All content below this line refers to FMX.Controls.TControl.DoRealign.
Performs the alignment of a FireMonkey control.

 See Also
FMX.Types.AlignObjects

</summary></devnotes></procedure>
      <procedure name="DoAddObject" visibility="protected" procflags="override" file="FMX.Layouts.pas" line="717">
        <parameters>
          <parameter name="AObject" type="TFmxObject" paramflags="const"/>
        </parameters>
      <devnotes><summary>


Adds the AObject object to the Children list of children attached to this parent object (self).
FMX.Layouts.TGridLayout.DoAddObject inherits from FMX.Types.TFmxObject.DoAddObject. All content below this line refers to FMX.Types.TFmxObject.DoAddObject.
Adds the AObject object to the Children list of children attached to this parent object (self).
DoAddObject adds the object provided in the AObject parameter to the list of children stored in the Children property of this object (self). DoAddObject changes the parent of AObject to this object (self) and sets the root of AObject to the Root object of this object (self).
Descendant classes, like TCommonCustomForm and TControl, additionally handle tab stop lists keeping ordered lists of objects to which the user can tab. If such descendant class supports the ITabStopController interface and AObject is an object of a class supporting the IControl interface, then DoAddObject of this descendant adds AObject to the TabList tab stop lists of the (self) object. 
DoAddObject is internally called from AddObject.
</summary></devnotes></procedure>
      <procedure name="DoRemoveObject" visibility="protected" procflags="override" file="FMX.Layouts.pas" line="718">
        <parameters>
          <parameter name="AObject" type="TFmxObject" paramflags="const"/>
        </parameters>
      <devnotes><summary>




Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="Paint" visibility="protected" procflags="override" file="FMX.Layouts.pas" line="719">
      <devnotes><summary>
Renders the control's surface. 
FMX.Layouts.TGridLayout.Paint inherits from FMX.Controls.TControl.Paint. All content below this line refers to FMX.Controls.TControl.Paint.
Renders the control's surface. 
The Paint method is called by DoPaint when a control is being painted by the PaintTo method. Before DoPaint, Painting is called. AfterPaint is called immediately after. 
FireMonkey internally calls Paint to paint the control when the window is being painted. You must not call Paint explicitly.
The base class TControl implements an empty Paint. The descendants of TControl override Paint to provide specific rendering of the respective controls.
For example, Paint methods in classes of the FMX.Objects unit draw and fill shapes using the properties defined in these classes. See the descriptions of these classes to find the properties of the respective shapes. 
</summary></devnotes></procedure>
      <constructor name="Create" visibility="public" file="FMX.Layouts.pas" line="721">
        <parameters>
          <parameter name="AOwner" type="TComponent"/>
        </parameters>
      <devnotes><summary>
Allocates memory and constructs a safely initialized instance of a component.
Allocates memory and constructs a safely initialized instance of a component.
Allocates memory and constructs a safely initialized instance of a component.
FMX.Layouts.TGridLayout.Create inherits from System.Classes.TComponent.Create. All content below this line refers to System.Classes.TComponent.Create.
Allocates memory and constructs a safely initialized instance of a component.
All objects have a Create method that constructs the object. TComponent redefines Create so that, for components, Create also:

Establishes the relationship of a component and its Owner, as indicated by the AOwner parameter.
Sets the ComponentStyle property to csInheritable, meaning that the component can be inherited by a descendent form type.
It is not necessary to explicitly create components added in the Form Designer. These components are created automatically when the application is run, and they are destroyed when the application is closed.
For components created programmatically, that is, not created in the Form Designer, call Create and pass in an owner component as the AOwner parameter. The owner disposes of the component when it is destroyed. If the component is not owned, then use Free when it needs to be destroyed.

Tip:  When passing in Self as the Owner parameter, consider what Self references. If a component creates another component in one of its methods, then Self refers to the first component and not the component being created, which is then owned by the first component.
Note:  The TComponent constructor is virtual in part to allow polymorphic instantiation of class references. This is critical to the streaming system and to the Form Designer. Do not forget to use the override directive when declaring a new component's Create constructor.</summary></devnotes></constructor>
      <property name="Align" visibility="published" read="FAlign" write="SetAlign" type="TAlignLayout" default="0" hoisted="true" file="FMX.Layouts.pas" line="723"/>
      <property name="Anchors" visibility="published" read="FAnchors" write="SetAnchors" stored="IsAnchorsStored" type="TAnchors" hoisted="true" file="FMX.Layouts.pas" line="724"/>
      <property name="ClipChildren" visibility="published" read="FClipChildren" write="SetClipChildren" type="Boolean" default="0" hoisted="true" file="FMX.Layouts.pas" line="725"/>
      <property name="ClipParent" visibility="published" read="FClipParent" write="FClipParent" type="Boolean" default="0" hoisted="true" file="FMX.Layouts.pas" line="726"/>
      <property name="Cursor" visibility="published" read="GetCursor" write="SetCursor" type="TCursor" default="0" hoisted="true" file="FMX.Layouts.pas" line="727"/>
      <property name="DragMode" visibility="published" read="GetDragMode" write="SetDragMode" type="TDragMode" default="0" hoisted="true" file="FMX.Layouts.pas" line="728"/>
      <property name="EnableDragHighlight" visibility="published" read="FEnableDragHighlight" write="FEnableDragHighlight" type="Boolean" default="1" hoisted="true" file="FMX.Layouts.pas" line="729"/>
      <property name="Enabled" visibility="published" read="FEnabled" write="SetEnabled" stored="EnabledStored" type="Boolean" hoisted="true" file="FMX.Layouts.pas" line="730"/>
      <property name="Locked" visibility="published" read="FLocked" write="SetLocked" type="Boolean" default="0" hoisted="true" file="FMX.Layouts.pas" line="731"/>
      <property name="Height" visibility="published" read="GetHeight" write="SetHeight" stored="False" type="Single" hoisted="true" file="FMX.Layouts.pas" line="732"/>
      <property name="Hint" visibility="published" read="FHint" write="SetHint" stored="HintStored" type="string" default="0" hoisted="true" file="FMX.Layouts.pas" line="733"/>
      <property name="HitTest" visibility="published" read="FHitTest" write="SetHitTest" type="Boolean" default="1" hoisted="true" file="FMX.Layouts.pas" line="734"/>
      <property name="ItemHeight" visibility="published" read="FItemHeight" write="SetItemHeight" type="Single" default="0" file="FMX.Layouts.pas" line="735"><devnotes><summary>
Specifies the height of each cell that holds an item in a grid layout control.
Use ItemHeight in combination with ItemWidth in order to change the aspect ratio of the graphical objects that are part of this grid layout.

</summary></devnotes></property>
      <property name="ItemWidth" visibility="published" read="FItemWidth" write="SetItemWidth" type="Single" default="0" file="FMX.Layouts.pas" line="736"><devnotes><summary>
Specifies the width of each cell that holds an item in a grid layout control.
Use ItemWidth in combination with ItemHeight in order to change the aspect ratio of the graphical objects that are part of this grid layout.
</summary></devnotes></property>
      <property name="Padding" visibility="published" read="GetPadding" write="SetPadding" type="TBounds" hoisted="true" file="FMX.Layouts.pas" line="737"/>
      <property name="Opacity" visibility="published" read="FOpacity" write="SetOpacity" stored="IsOpacityStored" type="Single" hoisted="true" file="FMX.Layouts.pas" line="738"/>
      <property name="Orientation" visibility="published" read="FOrientation" write="SetOrientation" type="TOrientation" file="FMX.Layouts.pas" line="739"><devnotes><summary>
Specifies the orientation of the graphical controls that are part of this grid.
The Orientation property can be set to either Horizontal or Vertical in order to change the grid's orientation (and the position of the graphical objects in this grid) to either horizontal (left to right) or vertical (top to bottom).
</summary></devnotes></property>
      <property name="Margins" visibility="published" read="GetMargins" write="SetMargins" type="TBounds" hoisted="true" file="FMX.Layouts.pas" line="740"/>
      <property name="PopupMenu" visibility="published" read="FPopupMenu" write="SetPopupMenu" stored="IsPopupMenuStored" type="TCustomPopupMenu" hoisted="true" file="FMX.Layouts.pas" line="741"/>
      <property name="Position" visibility="published" read="FPosition" write="SetPosition" stored="IsPositionStored" type="TPosition" hoisted="true" file="FMX.Layouts.pas" line="742"/>
      <property name="RotationAngle" visibility="published" read="GetRotationAngle" write="SetRotationAngle" type="Single" default="0" hoisted="true" file="FMX.Layouts.pas" line="743"/>
      <property name="RotationCenter" visibility="published" read="GetRotationCenter" write="SetRotationCenter" type="TPosition" hoisted="true" file="FMX.Layouts.pas" line="744"/>
      <property name="Scale" visibility="published" read="GetScale" write="SetScale" type="TPosition" hoisted="true" file="FMX.Layouts.pas" line="745"/>
      <property name="Size" visibility="published" read="FSize" write="SetSize" stored="IsSizeStored" type="TControlSize" hoisted="true" file="FMX.Layouts.pas" line="746"/>
      <property name="TouchTargetExpansion" visibility="published" read="FTouchTargetExpansion" write="SetTouchTargetExpansion" type="TBounds" hoisted="true" file="FMX.Layouts.pas" line="747"/>
      <property name="Visible" visibility="published" read="FVisible" write="SetVisible" stored="VisibleStored" type="Boolean" default="1" hoisted="true" file="FMX.Layouts.pas" line="748"/>
      <property name="Width" visibility="published" read="GetWidth" write="SetWidth" stored="False" type="Single" hoisted="true" file="FMX.Layouts.pas" line="749"/>
      <property name="TabOrder" visibility="published" read="GetTabOrder" write="SetTabOrder" type="TTabOrder" default="-1" hoisted="true" file="FMX.Layouts.pas" line="750"/>
      <property name="TabStop" visibility="published" read="GetTabStop" write="SetTabStop" type="Boolean" default="1" hoisted="true" file="FMX.Layouts.pas" line="751"/>
      <property name="ParentShowHint" visibility="published" read="FParentShowHint" write="SetParentShowHint" type="Boolean" default="1" hoisted="true" file="FMX.Layouts.pas" line="752"/>
      <property name="ShowHint" visibility="published" read="FShowHint" write="SetShowHint" stored="IsShowHintStored" type="Boolean" hoisted="true" file="FMX.Layouts.pas" line="753"/>
      <event name="OnDragEnter" visibility="published" read="FOnDragEnter" write="FOnDragEnter" type="TDragEnterEvent" hoisted="true" file="FMX.Layouts.pas" line="755"/>
      <event name="OnDragLeave" visibility="published" read="FOnDragLeave" write="FOnDragLeave" type="TNotifyEvent" hoisted="true" file="FMX.Layouts.pas" line="756"/>
      <event name="OnDragOver" visibility="published" read="FOnDragOver" write="FOnDragOver" type="TDragOverEvent" hoisted="true" file="FMX.Layouts.pas" line="757"/>
      <event name="OnDragDrop" visibility="published" read="FOnDragDrop" write="FOnDragDrop" type="TDragDropEvent" hoisted="true" file="FMX.Layouts.pas" line="758"/>
      <event name="OnDragEnd" visibility="published" read="FOnDragEnd" write="FOnDragEnd" type="TNotifyEvent" hoisted="true" file="FMX.Layouts.pas" line="759"/>
      <event name="OnCanFocus" visibility="published" read="FOnCanFocus" write="FOnCanFocus" type="TCanFocusEvent" hoisted="true" file="FMX.Layouts.pas" line="760"/>
      <event name="OnClick" visibility="published" read="FOnClick" write="SetOnClick" stored="OnClickStored" type="TNotifyEvent" hoisted="true" file="FMX.Layouts.pas" line="761"/>
      <event name="OnDblClick" visibility="published" read="FOnDblClick" write="FOnDblClick" type="TNotifyEvent" hoisted="true" file="FMX.Layouts.pas" line="762"/>
      <event name="OnMouseDown" visibility="published" read="FOnMouseDown" write="FOnMouseDown" type="TMouseEvent" hoisted="true" file="FMX.Layouts.pas" line="763"/>
      <event name="OnMouseMove" visibility="published" read="FOnMouseMove" write="FOnMouseMove" type="TMouseMoveEvent" hoisted="true" file="FMX.Layouts.pas" line="764"/>
      <event name="OnMouseUp" visibility="published" read="FOnMouseUp" write="FOnMouseUp" type="TMouseEvent" hoisted="true" file="FMX.Layouts.pas" line="765"/>
      <event name="OnMouseWheel" visibility="published" read="FOnMouseWheel" write="FOnMouseWheel" type="TMouseWheelEvent" hoisted="true" file="FMX.Layouts.pas" line="766"/>
      <event name="OnMouseEnter" visibility="published" read="FOnMouseEnter" write="FOnMouseEnter" type="TNotifyEvent" hoisted="true" file="FMX.Layouts.pas" line="767"/>
      <event name="OnMouseLeave" visibility="published" read="FOnMouseLeave" write="FOnMouseLeave" type="TNotifyEvent" hoisted="true" file="FMX.Layouts.pas" line="768"/>
      <event name="OnPainting" visibility="published" read="FOnPainting" write="FOnPainting" type="TOnPaintEvent" hoisted="true" file="FMX.Layouts.pas" line="769"/>
      <event name="OnPaint" visibility="published" read="FOnPaint" write="FOnPaint" type="TOnPaintEvent" hoisted="true" file="FMX.Layouts.pas" line="770"/>
      <event name="OnResize" visibility="published" read="FOnResize" write="FOnResize" type="TNotifyEvent" hoisted="true" file="FMX.Layouts.pas" line="771"/>
      <event name="OnResized" visibility="published" read="FOnResized" write="FOnResized" type="TNotifyEvent" hoisted="true" file="FMX.Layouts.pas" line="772"/>
    </members>
  <devnotes><summary>
A control that arranges child controls in a grid of equally sized cells.
A TGridLayout grid layout is a container for graphical objects that can arrange the objects it contains in a grid, as shown in the following image:


The children of a TGridLayout are resized to fit the sizes specified through the ItemHeight and ItemWidth properties. If the orientation is set to Horizontal, the child controls of a TGridLayout are lined one by one until the width of the layout is exceeded when a new line is added to the grid. If the orientation is set to Vertical, the child controls of a TGridLayout are positioned one under another until the height of the layout is exceeded when a new column is added to the grid. 
However, you can customize sizes of child controls using the Margins properties of child controls. For example, the following image demonstrates the usage of different margins for Button5, Button6, Button7, and Button8 child controls: 


Here we set:

The Top and Bottom margins for Button5.
The Left margin for Button6.
All four Top, Left, Right, and Bottom margins for Button7.
The Top and Left margins for Button8.
Look how child controls are resized and positioned inside the respective grid cells.

Note: The Align property of the controls within a TGridLayout is ignored. The Position, Height, and Width properties for child controls are automatically set, and explicitly changing their values has no effect. </summary></devnotes></class>
  <class name="TGridPanelLayout" file="FMX.Layouts.pas" line="777">
    
    <members>
      <enum name="TSizeStyle" visibility="public" alias="FMX.Layouts.TSizeStyle" file="FMX.Layouts.pas" line="779">
        <element value="0" name="Absolute" file="FMX.Layouts.pas" line="779"/>
        <element value="1" name="Percent" file="FMX.Layouts.pas" line="779"/>
        <element value="2" name="Auto" file="FMX.Layouts.pas" line="779"/>
      </enum>
      <class name="EGridLayoutException" visibility="public" alias="FMX.Layouts.EGridLayoutException" file="FMX.Layouts.pas" line="781">
        
      </class>
      <class name="TCellItem" visibility="public" alias="FMX.Layouts.TCellItem" file="FMX.Layouts.pas" line="783">
        
        <members>
          <field name="FSizeStyle" type="TGridPanelLayout.TSizeStyle" visibility="private" size="1" offset="12" file="FMX.Layouts.pas" line="785"/>
          <field name="FValue" type="Double" visibility="private" size="8" offset="16" file="FMX.Layouts.pas" line="786"/>
          <field name="FSize" type="Single" visibility="private" size="4" offset="24" file="FMX.Layouts.pas" line="787"/>
          <field name="FAutoAdded" type="Boolean" visibility="private" size="1" offset="28" file="FMX.Layouts.pas" line="788"/>
          <procedure name="AssignTo" visibility="protected" procflags="override" file="FMX.Layouts.pas" line="790">
            <parameters>
              <parameter name="Dest" type="TPersistent"/>
            </parameters>
          </procedure>
          <procedure name="SetSizeStyle" visibility="protected" file="FMX.Layouts.pas" line="791">
            <parameters>
              <parameter name="Value" type="TGridPanelLayout.TSizeStyle"/>
            </parameters>
          </procedure>
          <procedure name="SetValue" visibility="protected" file="FMX.Layouts.pas" line="792">
            <parameters>
              <parameter name="Value" type="Double"/>
            </parameters>
          </procedure>
          <property name="Size" visibility="protected" read="FSize" write="FSize" type="Single" default="0" file="FMX.Layouts.pas" line="793"/>
          <property name="AutoAdded" visibility="protected" read="FAutoAdded" write="FAutoAdded" type="Boolean" file="FMX.Layouts.pas" line="794"/>
          <constructor name="Create" visibility="public" file="FMX.Layouts.pas" line="796">
            <parameters>
              <parameter name="Collection" type="TCollection"/>
            </parameters>
          </constructor>
          <property name="SizeStyle" visibility="published" read="FSizeStyle" write="TCellItem.SetSizeStyle" type="TGridPanelLayout.TSizeStyle" default="1" file="FMX.Layouts.pas" line="798"/>
          <property name="Value" visibility="published" read="FValue" write="TCellItem.SetValue" type="Double" default="0" file="FMX.Layouts.pas" line="799"/>
        </members>
      </class>
      <class name="TRowItem" visibility="public" alias="FMX.Layouts.TRowItem" file="FMX.Layouts.pas" line="802">
        
      </class>
      <class name="TColumnItem" visibility="public" alias="FMX.Layouts.TColumnItem" file="FMX.Layouts.pas" line="804">
        
      </class>
      <class name="TCellCollection" visibility="public" alias="FMX.Layouts.TCellCollection" file="FMX.Layouts.pas" line="806">
        
        <members>
          <function name="GetAttrCount" visibility="protected" procflags="override" file="FMX.Layouts.pas" line="808">
            <parameters>
              <retval type="Integer"/>
            </parameters>
          </function>
          <function name="GetAttr" visibility="protected" procflags="override" file="FMX.Layouts.pas" line="809">
            <parameters>
              <parameter name="Index" type="Integer"/>
              <retval type="string"/>
            </parameters>
          </function>
          <function name="GetItemAttr" visibility="protected" procflags="override" file="FMX.Layouts.pas" line="810">
            <parameters>
              <parameter name="Index" type="Integer"/>
              <parameter name="ItemIndex" type="Integer"/>
              <retval type="string"/>
            </parameters>
          </function>
          <function name="GetItem" visibility="protected" file="FMX.Layouts.pas" line="811">
            <parameters>
              <parameter name="Index" type="Integer"/>
              <retval type="TGridPanelLayout.TCellItem"/>
            </parameters>
          </function>
          <procedure name="SetItem" visibility="protected" file="FMX.Layouts.pas" line="812">
            <parameters>
              <parameter name="Index" type="Integer"/>
              <parameter name="Value" type="TGridPanelLayout.TCellItem"/>
            </parameters>
          </procedure>
          <procedure name="Update" visibility="protected" procflags="override" file="FMX.Layouts.pas" line="813">
            <parameters>
              <parameter name="Item" type="TCollectionItem"/>
            </parameters>
          </procedure>
          <function name="Owner" visibility="public" file="FMX.Layouts.pas" line="815">
            <parameters>
              <retval type="TGridPanelLayout"/>
            </parameters>
          </function>
          <property name="Items[Index]" visibility="public" read="TCellCollection.GetItem" write="TCellCollection.SetItem" type="TGridPanelLayout.TCellItem" file="FMX.Layouts.pas" line="816"/>
        </members>
      </class>
      <type name="TCellSpan" type="cardinal" loBound="1" hiBound="2147483647" file="FMX.Layouts.pas" line="819"/>
      <class name="TRowCollection" visibility="public" alias="FMX.Layouts.TRowCollection" file="FMX.Layouts.pas" line="821">
        
        <members>
          <function name="GetItemAttr" visibility="protected" procflags="override" file="FMX.Layouts.pas" line="823">
            <parameters>
              <parameter name="Index" type="Integer"/>
              <parameter name="ItemIndex" type="Integer"/>
              <retval type="string"/>
            </parameters>
          </function>
          <procedure name="Notify" visibility="protected" procflags="override" file="FMX.Layouts.pas" line="824">
            <parameters>
              <parameter name="Item" type="TCollectionItem"/>
              <parameter name="Action" type="TCollectionNotification"/>
            </parameters>
          </procedure>
          <constructor name="Create" visibility="public" file="FMX.Layouts.pas" line="826">
            <parameters>
              <parameter name="AOwner" type="TPersistent"/>
            </parameters>
          </constructor>
          <function name="Add" visibility="public" file="FMX.Layouts.pas" line="827">
            <parameters>
              <retval type="TGridPanelLayout.TRowItem"/>
            </parameters>
          </function>
        </members>
      </class>
      <class name="TColumnCollection" visibility="public" alias="FMX.Layouts.TColumnCollection" file="FMX.Layouts.pas" line="830">
        
        <members>
          <function name="GetItemAttr" visibility="protected" procflags="override" file="FMX.Layouts.pas" line="832">
            <parameters>
              <parameter name="Index" type="Integer"/>
              <parameter name="ItemIndex" type="Integer"/>
              <retval type="string"/>
            </parameters>
          </function>
          <procedure name="Notify" visibility="protected" procflags="override" file="FMX.Layouts.pas" line="833">
            <parameters>
              <parameter name="Item" type="TCollectionItem"/>
              <parameter name="Action" type="TCollectionNotification"/>
            </parameters>
          </procedure>
          <constructor name="Create" visibility="public" file="FMX.Layouts.pas" line="835">
            <parameters>
              <parameter name="AOwner" type="TPersistent"/>
            </parameters>
          </constructor>
          <function name="Add" visibility="public" file="FMX.Layouts.pas" line="836">
            <parameters>
              <retval type="TGridPanelLayout.TColumnItem"/>
            </parameters>
          </function>
        </members>
      </class>
      <class name="TControlItem" visibility="public" alias="FMX.Layouts.TControlItem" file="FMX.Layouts.pas" line="839">
        
        <members>
          <field name="FControl" type="TControl" visibility="private" size="4" offset="12" file="FMX.Layouts.pas" line="841">
            <attributes>
              <attribute name="TObject"/>
            </attributes>
          </field>
          <field name="FColumn" type="Integer" visibility="private" size="4" offset="16" file="FMX.Layouts.pas" line="842"/>
          <field name="FRow" type="Integer" visibility="private" size="4" offset="20" file="FMX.Layouts.pas" line="842"/>
          <field name="FColumnSpan" type="TGridPanelLayout.TCellSpan" visibility="private" size="4" offset="24" file="FMX.Layouts.pas" line="843"/>
          <field name="FRowSpan" type="TGridPanelLayout.TCellSpan" visibility="private" size="4" offset="28" file="FMX.Layouts.pas" line="843"/>
          <field name="FPushed" type="Integer" visibility="private" size="4" offset="32" file="FMX.Layouts.pas" line="844"/>
          <function name="GetGridPanelLayout" visibility="private" file="FMX.Layouts.pas" line="845">
            <parameters>
              <retval type="TGridPanelLayout"/>
            </parameters>
          </function>
          <function name="GetPushed" visibility="private" file="FMX.Layouts.pas" line="846">
            <parameters>
              <retval type="Boolean"/>
            </parameters>
          </function>
          <procedure name="SetColumn" visibility="private" file="FMX.Layouts.pas" line="847">
            <parameters>
              <parameter name="Value" type="Integer"/>
            </parameters>
          </procedure>
          <procedure name="SetColumnSpan" visibility="private" file="FMX.Layouts.pas" line="848">
            <parameters>
              <parameter name="Value" type="TGridPanelLayout.TCellSpan"/>
            </parameters>
          </procedure>
          <procedure name="SetControl" visibility="private" file="FMX.Layouts.pas" line="849">
            <parameters>
              <parameter name="Value" type="TControl"/>
            </parameters>
          </procedure>
          <procedure name="SetRow" visibility="private" file="FMX.Layouts.pas" line="850">
            <parameters>
              <parameter name="Value" type="Integer"/>
            </parameters>
          </procedure>
          <procedure name="SetRowSpan" visibility="private" file="FMX.Layouts.pas" line="851">
            <parameters>
              <parameter name="Value" type="TGridPanelLayout.TCellSpan"/>
            </parameters>
          </procedure>
          <procedure name="AssignTo" visibility="protected" procflags="override" file="FMX.Layouts.pas" line="853">
            <parameters>
              <parameter name="Dest" type="TPersistent"/>
            </parameters>
          </procedure>
          <procedure name="InternalSetLocation" visibility="protected" file="FMX.Layouts.pas" line="854">
            <parameters>
              <parameter name="AColumn" type="Integer"/>
              <parameter name="ARow" type="Integer"/>
              <parameter name="APushed" type="Boolean"/>
              <parameter name="MoveExisting" type="Boolean"/>
            </parameters>
          </procedure>
          <property name="GridPanelLayout" visibility="protected" read="TControlItem.GetGridPanelLayout" type="TGridPanelLayout" file="FMX.Layouts.pas" line="855"/>
          <property name="Pushed" visibility="protected" read="TControlItem.GetPushed" type="Boolean" file="FMX.Layouts.pas" line="856"/>
          <constructor name="Create" visibility="public" file="FMX.Layouts.pas" line="858">
            <parameters>
              <parameter name="Collection" type="TCollection"/>
            </parameters>
          </constructor>
          <destructor name="Destroy" visibility="public" file="FMX.Layouts.pas" line="859">
            <parameters>
            </parameters>
          </destructor>
          <procedure name="SetLocation" visibility="public" file="FMX.Layouts.pas" line="860">
            <parameters>
              <parameter name="AColumn" type="Integer"/>
              <parameter name="ARow" type="Integer"/>
              <parameter name="APushed" type="Boolean">
                <value>
                  False
                </value>
              </parameter>
            </parameters>
          </procedure>
          <property name="Column" visibility="published" read="FColumn" write="TControlItem.SetColumn" type="Integer" file="FMX.Layouts.pas" line="862"/>
          <property name="ColumnSpan" visibility="published" read="FColumnSpan" write="TControlItem.SetColumnSpan" type="TGridPanelLayout.TCellSpan" default="1" file="FMX.Layouts.pas" line="863"/>
          <property name="Control" visibility="published" read="FControl" write="TControlItem.SetControl" type="TControl" file="FMX.Layouts.pas" line="864"/>
          <property name="Row" visibility="published" read="FRow" write="TControlItem.SetRow" type="Integer" file="FMX.Layouts.pas" line="865"/>
          <property name="RowSpan" visibility="published" read="FRowSpan" write="TControlItem.SetRowSpan" type="TGridPanelLayout.TCellSpan" default="1" file="FMX.Layouts.pas" line="866"/>
        </members>
      </class>
      <class name="TControlCollection" visibility="public" alias="FMX.Layouts.TControlCollection" file="FMX.Layouts.pas" line="869">
        
        <members>
          <function name="GetControl" visibility="protected" file="FMX.Layouts.pas" line="871">
            <parameters>
              <parameter name="AColumn" type="Integer"/>
              <parameter name="ARow" type="Integer"/>
              <retval type="TControl"/>
            </parameters>
          </function>
          <function name="GetControlItem" visibility="protected" file="FMX.Layouts.pas" line="872">
            <parameters>
              <parameter name="AColumn" type="Integer"/>
              <parameter name="ARow" type="Integer"/>
              <retval type="TGridPanelLayout.TControlItem"/>
            </parameters>
          </function>
          <function name="GetItem" visibility="protected" file="FMX.Layouts.pas" line="873">
            <parameters>
              <parameter name="Index" type="Integer"/>
              <retval type="TGridPanelLayout.TControlItem"/>
            </parameters>
          </function>
          <procedure name="SetControl" visibility="protected" file="FMX.Layouts.pas" line="874">
            <parameters>
              <parameter name="AColumn" type="Integer"/>
              <parameter name="ARow" type="Integer"/>
              <parameter name="Value" type="TControl"/>
            </parameters>
          </procedure>
          <procedure name="SetItem" visibility="protected" file="FMX.Layouts.pas" line="875">
            <parameters>
              <parameter name="Index" type="Integer"/>
              <parameter name="Value" type="TGridPanelLayout.TControlItem"/>
            </parameters>
          </procedure>
          <procedure name="Update" visibility="protected" procflags="override" file="FMX.Layouts.pas" line="876">
            <parameters>
              <parameter name="Item" type="TCollectionItem"/>
            </parameters>
          </procedure>
          <constructor name="Create" visibility="public" file="FMX.Layouts.pas" line="878">
            <parameters>
              <parameter name="AOwner" type="TPersistent"/>
            </parameters>
          </constructor>
          <function name="Add" visibility="public" file="FMX.Layouts.pas" line="879">
            <parameters>
              <retval type="TGridPanelLayout.TControlItem"/>
            </parameters>
          </function>
          <procedure name="AddControl" visibility="public" file="FMX.Layouts.pas" line="880">
            <parameters>
              <parameter name="AControl" type="TControl"/>
              <parameter name="AColumn" type="Integer">
                <value>
                  $FFFFFFFF
                </value>
              </parameter>
              <parameter name="ARow" type="Integer">
                <value>
                  $FFFFFFFF
                </value>
              </parameter>
            </parameters>
          </procedure>
          <procedure name="RemoveControl" visibility="public" file="FMX.Layouts.pas" line="881">
            <parameters>
              <parameter name="AControl" type="TControl"/>
            </parameters>
          </procedure>
          <function name="IndexOf" visibility="public" file="FMX.Layouts.pas" line="882">
            <parameters>
              <parameter name="AControl" type="TControl"/>
              <retval type="Integer"/>
            </parameters>
          </function>
          <function name="Owner" visibility="public" file="FMX.Layouts.pas" line="883">
            <parameters>
              <retval type="TGridPanelLayout"/>
            </parameters>
          </function>
          <property name="Controls[AColumn][ARow]" visibility="public" read="TControlCollection.GetControl" write="TControlCollection.SetControl" type="TControl" file="FMX.Layouts.pas" line="884"/>
          <property name="ControlItems[AColumn][ARow]" visibility="public" read="TControlCollection.GetControlItem" type="TGridPanelLayout.TControlItem" file="FMX.Layouts.pas" line="885"/>
          <property name="Items[Index]" visibility="public" read="TControlCollection.GetItem" write="TControlCollection.SetItem" type="TGridPanelLayout.TControlItem" file="FMX.Layouts.pas" line="886"/>
        </members>
      </class>
      <enum name="TExpandStyle" visibility="public" alias="FMX.Layouts.TExpandStyle" file="FMX.Layouts.pas" line="889">
        <element value="0" name="AddRows" file="FMX.Layouts.pas" line="889"/>
        <element value="1" name="AddColumns" file="FMX.Layouts.pas" line="889"/>
        <element value="2" name="FixedSize" file="FMX.Layouts.pas" line="889"/>
      </enum>
      <field name="FRecalcCellSizes" type="Boolean" visibility="private" size="1" offset="904" file="FMX.Layouts.pas" line="892"/>
      <field name="FExpandStyle" type="TGridPanelLayout.TExpandStyle" visibility="private" size="1" offset="905" file="FMX.Layouts.pas" line="893"/>
      <field name="FRowCollection" type="TGridPanelLayout.TRowCollection" visibility="private" size="4" offset="908" file="FMX.Layouts.pas" line="895"/>
      <field name="FColumnCollection" type="TGridPanelLayout.TColumnCollection" visibility="private" size="4" offset="912" file="FMX.Layouts.pas" line="896"/>
      <field name="FControlCollection" type="TGridPanelLayout.TControlCollection" visibility="private" size="4" offset="916" file="FMX.Layouts.pas" line="897"/>
      <procedure name="SetColumnCollection" visibility="private" file="FMX.Layouts.pas" line="899">
        <parameters>
          <parameter name="Value" type="TGridPanelLayout.TColumnCollection" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetControlCollection" visibility="private" file="FMX.Layouts.pas" line="900">
        <parameters>
          <parameter name="Value" type="TGridPanelLayout.TControlCollection" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetRowCollection" visibility="private" file="FMX.Layouts.pas" line="901">
        <parameters>
          <parameter name="Value" type="TGridPanelLayout.TRowCollection" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="GetCellCount" visibility="private" file="FMX.Layouts.pas" line="903">
        <parameters>
          <retval type="Integer"/>
        </parameters>
      </function>
      <function name="GetCellSizes" visibility="private" file="FMX.Layouts.pas" line="904">
        <parameters>
          <parameter name="AColumn" type="Integer"/>
          <parameter name="ARow" type="Integer"/>
          <retval type="TPointF"/>
        </parameters>
      </function>
      <function name="GetCellRect" visibility="private" file="FMX.Layouts.pas" line="905">
        <parameters>
          <parameter name="AColumn" type="Integer"/>
          <parameter name="ARow" type="Integer"/>
          <retval type="TRectF"/>
        </parameters>
      </function>
      <function name="GetColumnSpanIndex" visibility="private" file="FMX.Layouts.pas" line="906">
        <parameters>
          <parameter name="AColumn" type="Integer"/>
          <parameter name="ARow" type="Integer"/>
          <retval type="Integer"/>
        </parameters>
      </function>
      <function name="GetRowSpanIndex" visibility="private" file="FMX.Layouts.pas" line="907">
        <parameters>
          <parameter name="AColumn" type="Integer"/>
          <parameter name="ARow" type="Integer"/>
          <retval type="Integer"/>
        </parameters>
      </function>
      <procedure name="RecalcCellDimensions" visibility="private" file="FMX.Layouts.pas" line="908">
        <parameters>
          <parameter name="Rect" type="TRectF" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="DoRealign" visibility="protected" procflags="override" file="FMX.Layouts.pas" line="911">
      <devnotes><summary>
Performs the alignment of a FireMonkey control.
FMX.Layouts.TGridPanelLayout.DoRealign inherits from FMX.Controls.TControl.DoRealign. All content below this line refers to FMX.Controls.TControl.DoRealign.
Performs the alignment of a FireMonkey control.

 See Also
FMX.Types.AlignObjects

</summary></devnotes></procedure>
      <procedure name="DoAddObject" visibility="protected" procflags="override" file="FMX.Layouts.pas" line="912">
        <parameters>
          <parameter name="AObject" type="TFmxObject" paramflags="const"/>
        </parameters>
      <devnotes><summary>


Adds the AObject object to the Children list of children attached to this parent object (self).
FMX.Layouts.TGridPanelLayout.DoAddObject inherits from FMX.Types.TFmxObject.DoAddObject. All content below this line refers to FMX.Types.TFmxObject.DoAddObject.
Adds the AObject object to the Children list of children attached to this parent object (self).
DoAddObject adds the object provided in the AObject parameter to the list of children stored in the Children property of this object (self). DoAddObject changes the parent of AObject to this object (self) and sets the root of AObject to the Root object of this object (self).
Descendant classes, like TCommonCustomForm and TControl, additionally handle tab stop lists keeping ordered lists of objects to which the user can tab. If such descendant class supports the ITabStopController interface and AObject is an object of a class supporting the IControl interface, then DoAddObject of this descendant adds AObject to the TabList tab stop lists of the (self) object. 
DoAddObject is internally called from AddObject.
</summary></devnotes></procedure>
      <procedure name="DoRemoveObject" visibility="protected" procflags="override" file="FMX.Layouts.pas" line="913">
        <parameters>
          <parameter name="AObject" type="TFmxObject" paramflags="const"/>
        </parameters>
      <devnotes><summary>




Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <function name="AutoAddColumn" visibility="protected" file="FMX.Layouts.pas" line="914">
        <parameters>
          <retval type="TGridPanelLayout.TColumnItem"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></function>
      <function name="AutoAddRow" visibility="protected" file="FMX.Layouts.pas" line="915">
        <parameters>
          <retval type="TGridPanelLayout.TRowItem"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></function>
      <procedure name="RemoveEmptyAutoAddColumns" visibility="protected" file="FMX.Layouts.pas" line="916">
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="RemoveEmptyAutoAddRows" visibility="protected" file="FMX.Layouts.pas" line="917">
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <function name="CellToCellIndex" visibility="protected" file="FMX.Layouts.pas" line="918">
        <parameters>
          <parameter name="AColumn" type="Integer"/>
          <parameter name="ARow" type="Integer"/>
          <retval type="Integer"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></function>
      <procedure name="CellIndexToCell" visibility="protected" file="FMX.Layouts.pas" line="919">
        <parameters>
          <parameter name="AIndex" type="Integer"/>
          <parameter name="AColumn" type="Integer" paramflags="var"/>
          <parameter name="ARow" type="Integer" paramflags="var"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="DoPaint" visibility="protected" procflags="override" file="FMX.Layouts.pas" line="920">
      <devnotes><summary>
Processes the painting of the control. 
FMX.Layouts.TGridPanelLayout.DoPaint inherits from FMX.Controls.TControl.DoPaint. All content below this line refers to FMX.Controls.TControl.DoPaint.
Processes the painting of the control. 
This method is called internally from PaintTo and PaintChildren. DoPaint defines the drawing area by clipping the Canvas to the areas occupied by the control and its children, paints the children and then the control itself. The call to DoPaint is always preceded by a call to Painting and succeeded by a call to AfterPaint.
</summary></devnotes></procedure>
      <procedure name="Resize" visibility="protected" procflags="override" file="FMX.Layouts.pas" line="921">
      <devnotes><summary>
OnResize event dispatcher. 
FMX.Layouts.TGridPanelLayout.Resize inherits from FMX.Controls.TControl.Resize. All content below this line refers to FMX.Controls.TControl.Resize.
OnResize event dispatcher. 
A control calls Resize when the dimensions of the control change.
Derived classes can override the protected Resize method to implement specific responses to control resizing.
</summary></devnotes></procedure>
      <constructor name="Create" visibility="public" file="FMX.Layouts.pas" line="923">
        <parameters>
          <parameter name="AOwner" type="TComponent"/>
        </parameters>
      <devnotes><summary>
Allocates memory and constructs a safely initialized instance of a component.
Allocates memory and constructs a safely initialized instance of a component.
Allocates memory and constructs a safely initialized instance of a component.
FMX.Layouts.TGridPanelLayout.Create inherits from System.Classes.TComponent.Create. All content below this line refers to System.Classes.TComponent.Create.
Allocates memory and constructs a safely initialized instance of a component.
All objects have a Create method that constructs the object. TComponent redefines Create so that, for components, Create also:

Establishes the relationship of a component and its Owner, as indicated by the AOwner parameter.
Sets the ComponentStyle property to csInheritable, meaning that the component can be inherited by a descendent form type.
It is not necessary to explicitly create components added in the Form Designer. These components are created automatically when the application is run, and they are destroyed when the application is closed.
For components created programmatically, that is, not created in the Form Designer, call Create and pass in an owner component as the AOwner parameter. The owner disposes of the component when it is destroyed. If the component is not owned, then use Free when it needs to be destroyed.

Tip:  When passing in Self as the Owner parameter, consider what Self references. If a component creates another component in one of its methods, then Self refers to the first component and not the component being created, which is then owned by the first component.
Note:  The TComponent constructor is virtual in part to allow polymorphic instantiation of class references. This is critical to the streaming system and to the Form Designer. Do not forget to use the override directive when declaring a new component's Create constructor.</summary></devnotes></constructor>
      <destructor name="Destroy" visibility="public" file="FMX.Layouts.pas" line="924">
        <parameters>
        </parameters>
      <devnotes><summary>
Disposes of the component and its owned components.
Disposes of the component and its owned components.
Disposes of the component and its owned components.
FMX.Layouts.TGridPanelLayout.Destroy inherits from System.Classes.TComponent.Destroy. All content below this line refers to System.Classes.TComponent.Destroy.
Disposes of the component and its owned components.
Do not call Destroy directly. Call Free instead. Free verifies that the component is not nil, and only then calls Destroy.
Never explicitly free a component in one of its own event handlers, nor free a component from the event handler of a component that it owns or contains.
To destroy a form, call its Release method. Release waits for all the form's event handlers and the event handlers of the form's components to finish executing before destroying the form.

Note: A form owns all the controls and nonvisual components that are placed on it in design mode. When it is freed, all of these components are automatically freed as well. By default, all forms are owned by the global Application object. When an application terminates, it frees the global Application object, which frees all forms. For objects that are not components, and for components created with a nil owner, be sure to call Free after finishing with the object; otherwise the memory allocated for the object will be lost until the application terminates.</summary></devnotes></destructor>
      <function name="IsColumnEmpty" visibility="public" file="FMX.Layouts.pas" line="926">
        <parameters>
          <parameter name="AColumn" type="Integer"/>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></function>
      <function name="IsRowEmpty" visibility="public" file="FMX.Layouts.pas" line="927">
        <parameters>
          <parameter name="ARow" type="Integer"/>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></function>
      <procedure name="UpdateControlsColumn" visibility="public" file="FMX.Layouts.pas" line="928">
        <parameters>
          <parameter name="AColumn" type="Integer"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="UpdateControlsRow" visibility="public" file="FMX.Layouts.pas" line="929">
        <parameters>
          <parameter name="ARow" type="Integer"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <property name="ColumnSpanIndex[AColumn][ARow]" visibility="public" read="GetColumnSpanIndex" type="Integer" file="FMX.Layouts.pas" line="930"/>
      <property name="CellCount" visibility="public" read="GetCellCount" type="Integer" file="FMX.Layouts.pas" line="931"><devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></property>
      <property name="CellSize[AColumn][ARow]" visibility="public" read="GetCellSizes" type="TPointF" file="FMX.Layouts.pas" line="932"/>
      <property name="CellRect[AColumn][ARow]" visibility="public" read="GetCellRect" type="TRectF" file="FMX.Layouts.pas" line="933"/>
      <property name="RowSpanIndex[AColumn][ARow]" visibility="public" read="GetRowSpanIndex" type="Integer" file="FMX.Layouts.pas" line="934"/>
      <property name="Align" visibility="published" read="FAlign" write="SetAlign" type="TAlignLayout" default="0" hoisted="true" file="FMX.Layouts.pas" line="936"/>
      <property name="Anchors" visibility="published" read="FAnchors" write="SetAnchors" stored="IsAnchorsStored" type="TAnchors" hoisted="true" file="FMX.Layouts.pas" line="937"/>
      <property name="ClipChildren" visibility="published" read="FClipChildren" write="SetClipChildren" type="Boolean" default="0" hoisted="true" file="FMX.Layouts.pas" line="938"/>
      <property name="ClipParent" visibility="published" read="FClipParent" write="FClipParent" type="Boolean" default="0" hoisted="true" file="FMX.Layouts.pas" line="939"/>
      <property name="Cursor" visibility="published" read="GetCursor" write="SetCursor" type="TCursor" default="0" hoisted="true" file="FMX.Layouts.pas" line="940"/>
      <property name="DragMode" visibility="published" read="GetDragMode" write="SetDragMode" type="TDragMode" default="0" hoisted="true" file="FMX.Layouts.pas" line="941"/>
      <property name="EnableDragHighlight" visibility="published" read="FEnableDragHighlight" write="FEnableDragHighlight" type="Boolean" default="1" hoisted="true" file="FMX.Layouts.pas" line="942"/>
      <property name="Enabled" visibility="published" read="FEnabled" write="SetEnabled" stored="EnabledStored" type="Boolean" hoisted="true" file="FMX.Layouts.pas" line="943"/>
      <property name="Locked" visibility="published" read="FLocked" write="SetLocked" type="Boolean" default="0" hoisted="true" file="FMX.Layouts.pas" line="944"/>
      <property name="Height" visibility="published" read="GetHeight" write="SetHeight" stored="False" type="Single" hoisted="true" file="FMX.Layouts.pas" line="945"/>
      <property name="Hint" visibility="published" read="FHint" write="SetHint" stored="HintStored" type="string" default="0" hoisted="true" file="FMX.Layouts.pas" line="946"/>
      <property name="HitTest" visibility="published" read="FHitTest" write="SetHitTest" type="Boolean" default="1" hoisted="true" file="FMX.Layouts.pas" line="947"/>
      <property name="Padding" visibility="published" read="GetPadding" write="SetPadding" type="TBounds" hoisted="true" file="FMX.Layouts.pas" line="948"/>
      <property name="Opacity" visibility="published" read="FOpacity" write="SetOpacity" stored="IsOpacityStored" type="Single" hoisted="true" file="FMX.Layouts.pas" line="949"/>
      <property name="Margins" visibility="published" read="GetMargins" write="SetMargins" type="TBounds" hoisted="true" file="FMX.Layouts.pas" line="950"/>
      <property name="PopupMenu" visibility="published" read="FPopupMenu" write="SetPopupMenu" stored="IsPopupMenuStored" type="TCustomPopupMenu" hoisted="true" file="FMX.Layouts.pas" line="951"/>
      <property name="Position" visibility="published" read="FPosition" write="SetPosition" stored="IsPositionStored" type="TPosition" hoisted="true" file="FMX.Layouts.pas" line="952"/>
      <property name="RotationAngle" visibility="published" read="GetRotationAngle" write="SetRotationAngle" type="Single" default="0" hoisted="true" file="FMX.Layouts.pas" line="953"/>
      <property name="RotationCenter" visibility="published" read="GetRotationCenter" write="SetRotationCenter" type="TPosition" hoisted="true" file="FMX.Layouts.pas" line="954"/>
      <property name="Scale" visibility="published" read="GetScale" write="SetScale" type="TPosition" hoisted="true" file="FMX.Layouts.pas" line="955"/>
      <property name="Size" visibility="published" read="FSize" write="SetSize" stored="IsSizeStored" type="TControlSize" hoisted="true" file="FMX.Layouts.pas" line="956"/>
      <property name="TouchTargetExpansion" visibility="published" read="FTouchTargetExpansion" write="SetTouchTargetExpansion" type="TBounds" hoisted="true" file="FMX.Layouts.pas" line="957"/>
      <property name="Visible" visibility="published" read="FVisible" write="SetVisible" stored="VisibleStored" type="Boolean" default="1" hoisted="true" file="FMX.Layouts.pas" line="958"/>
      <property name="Width" visibility="published" read="GetWidth" write="SetWidth" stored="False" type="Single" hoisted="true" file="FMX.Layouts.pas" line="959"/>
      <property name="TabOrder" visibility="published" read="GetTabOrder" write="SetTabOrder" type="TTabOrder" default="-1" hoisted="true" file="FMX.Layouts.pas" line="960"/>
      <property name="TabStop" visibility="published" read="GetTabStop" write="SetTabStop" type="Boolean" default="1" hoisted="true" file="FMX.Layouts.pas" line="961"/>
      <property name="ParentShowHint" visibility="published" read="FParentShowHint" write="SetParentShowHint" type="Boolean" default="1" hoisted="true" file="FMX.Layouts.pas" line="962"/>
      <property name="ShowHint" visibility="published" read="FShowHint" write="SetShowHint" stored="IsShowHintStored" type="Boolean" hoisted="true" file="FMX.Layouts.pas" line="963"/>
      <property name="ColumnCollection" visibility="published" read="FColumnCollection" write="SetColumnCollection" type="TGridPanelLayout.TColumnCollection" file="FMX.Layouts.pas" line="965"><devnotes><summary>
Keeps the TColumnCollection column collection in the TGridPanelLayout grid panel layout. 
The Count property of ColumnCollection defines the number of columns in TGridPanelLayout.
</summary></devnotes></property>
      <property name="ControlCollection" visibility="published" read="FControlCollection" write="SetControlCollection" type="TGridPanelLayout.TControlCollection" file="FMX.Layouts.pas" line="966"><devnotes><summary>
Keeps the TControlCollection control collection of TControlItem control items.
Use ControlCollection to add, remove, or access control items in the collection of controls in a TGridPanelLayout grid panel layout. Each control item is identified by its Row and Column properties. 
</summary></devnotes></property>
      <property name="ExpandStyle" visibility="published" read="FExpandStyle" write="FExpandStyle" type="TGridPanelLayout.TExpandStyle" default="0" file="FMX.Layouts.pas" line="967"><devnotes><summary>
Specifies whether to add a row or column to a filled grid panel layout to accommodate additional controls.
The meanings of the options are:



Value

Meaning



AddRows



TGridPanelLayout is expanded vertically -- only rows are added.




AddColumns



TGridPanelLayout is expanded horizontally -- only columns are added.




FixedSize



TGridPanelLayout has a fixed number of rows and columns given by the Count property of both the ColumnCollection and RowCollection collections.


The property is used when a new control is added to the  ControlCollection using 
AddControl with the AColumn and ARow parameters set to -1. For example:

GridPanelLayout1.ControlCollection.AddControl(AControl,-1,-1);

where AControl is the control to add to the GridPanelLayout1 grid panel layout.
</summary></devnotes></property>
      <property name="RowCollection" visibility="published" read="FRowCollection" write="SetRowCollection" type="TGridPanelLayout.TRowCollection" file="FMX.Layouts.pas" line="968"><devnotes><summary>
Keeps the TRowCollection row collection in the TGridPanelLayout grid panel layout. 
The Count property of RowCollection defines the number of rows in TGridPanelLayout.
</summary></devnotes></property>
      <event name="OnDragEnter" visibility="published" read="FOnDragEnter" write="FOnDragEnter" type="TDragEnterEvent" hoisted="true" file="FMX.Layouts.pas" line="970"/>
      <event name="OnDragLeave" visibility="published" read="FOnDragLeave" write="FOnDragLeave" type="TNotifyEvent" hoisted="true" file="FMX.Layouts.pas" line="971"/>
      <event name="OnDragOver" visibility="published" read="FOnDragOver" write="FOnDragOver" type="TDragOverEvent" hoisted="true" file="FMX.Layouts.pas" line="972"/>
      <event name="OnDragDrop" visibility="published" read="FOnDragDrop" write="FOnDragDrop" type="TDragDropEvent" hoisted="true" file="FMX.Layouts.pas" line="973"/>
      <event name="OnDragEnd" visibility="published" read="FOnDragEnd" write="FOnDragEnd" type="TNotifyEvent" hoisted="true" file="FMX.Layouts.pas" line="974"/>
      <event name="OnCanFocus" visibility="published" read="FOnCanFocus" write="FOnCanFocus" type="TCanFocusEvent" hoisted="true" file="FMX.Layouts.pas" line="975"/>
      <event name="OnClick" visibility="published" read="FOnClick" write="SetOnClick" stored="OnClickStored" type="TNotifyEvent" hoisted="true" file="FMX.Layouts.pas" line="976"/>
      <event name="OnDblClick" visibility="published" read="FOnDblClick" write="FOnDblClick" type="TNotifyEvent" hoisted="true" file="FMX.Layouts.pas" line="977"/>
      <event name="OnMouseDown" visibility="published" read="FOnMouseDown" write="FOnMouseDown" type="TMouseEvent" hoisted="true" file="FMX.Layouts.pas" line="978"/>
      <event name="OnMouseMove" visibility="published" read="FOnMouseMove" write="FOnMouseMove" type="TMouseMoveEvent" hoisted="true" file="FMX.Layouts.pas" line="979"/>
      <event name="OnMouseUp" visibility="published" read="FOnMouseUp" write="FOnMouseUp" type="TMouseEvent" hoisted="true" file="FMX.Layouts.pas" line="980"/>
      <event name="OnMouseWheel" visibility="published" read="FOnMouseWheel" write="FOnMouseWheel" type="TMouseWheelEvent" hoisted="true" file="FMX.Layouts.pas" line="981"/>
      <event name="OnMouseEnter" visibility="published" read="FOnMouseEnter" write="FOnMouseEnter" type="TNotifyEvent" hoisted="true" file="FMX.Layouts.pas" line="982"/>
      <event name="OnMouseLeave" visibility="published" read="FOnMouseLeave" write="FOnMouseLeave" type="TNotifyEvent" hoisted="true" file="FMX.Layouts.pas" line="983"/>
      <event name="OnPainting" visibility="published" read="FOnPainting" write="FOnPainting" type="TOnPaintEvent" hoisted="true" file="FMX.Layouts.pas" line="984"/>
      <event name="OnPaint" visibility="published" read="FOnPaint" write="FOnPaint" type="TOnPaintEvent" hoisted="true" file="FMX.Layouts.pas" line="985"/>
      <event name="OnResize" visibility="published" read="FOnResize" write="FOnResize" type="TNotifyEvent" hoisted="true" file="FMX.Layouts.pas" line="986"/>
      <event name="OnResized" visibility="published" read="FOnResized" write="FOnResized" type="TNotifyEvent" hoisted="true" file="FMX.Layouts.pas" line="987"/>
    </members>
  <devnotes><summary>
Implements a grid panel layout control in which each component is placed within a cell on a grid panel.
In a TGridPanelLayout layout, you specify the number of rows and columns on the grid panel, then each component is placed into the next available cell in the grid panel, regardless of where you place it with the mouse. If each grid panel layout's cell already contains a control and you add more controls, the location for the new controls is determined by the ExpandStyle property. For example, using the default AddRows value of the ExpandStyle property, a new row is added to the grid panel, and each cell in this row can contain a new control. 
TGridPanelLayout layouts provide the following behavior:

You can explicitly set the Height,  Width, Align, and Anchors properties of child controls to manually resize and align child controls placed inside cells on a TGridPanelLayout layout:

You can specify that a child control can span on several merged cells. For example, look at the following figure:

Here, the B4 button spans on two cells in the rightmost column, the B5 button occupies four cells in two rows and two columns and the B8 button occupies three cells in the bottom row.
To specify that a child control can span on several cells you can use the following trick:

In the Structure view, locate the desired TGridPanelLayout layout node.
Under this node, locate the respective Control Collection node.
Among control items in this Control Collection, select the control item associated with the desired child control. The Object Inspector shows the properties of this control item.
In the ColumnSpan property, type the number of cells that can be occupied be the control item in the respective column (specified in the Column property).
In the RowSpan property, type the number of cells that can be occupied by the control item in the respective row (specified in the Row property).</summary></devnotes></class>
  <enum name="TFlowJustify" file="FMX.Layouts.pas" line="990">
    <element value="0" name="Left" file="FMX.Layouts.pas" line="990"/>
    <element value="1" name="Right" file="FMX.Layouts.pas" line="990"/>
    <element value="2" name="Center" file="FMX.Layouts.pas" line="990"/>
    <element value="3" name="Justify" file="FMX.Layouts.pas" line="990"/>
  </enum>
  <enum name="TFlowDirection" file="FMX.Layouts.pas" line="992">
    <element value="0" name="LeftToRight" file="FMX.Layouts.pas" line="992"/>
    <element value="1" name="RightToLeft" file="FMX.Layouts.pas" line="992"/>
  </enum>
  <struct name="TFlowLayoutRules" size="12" file="FMX.Layouts.pas" line="994">
    <field name="Justify" type="TFlowJustify" visibility="public" size="1" offset="0" file="FMX.Layouts.pas" line="995"/>
    <field name="JustifyLast" type="TFlowJustify" visibility="public" size="1" offset="1" file="FMX.Layouts.pas" line="996"/>
    <field name="Direction" type="TFlowDirection" visibility="public" size="1" offset="2" file="FMX.Layouts.pas" line="997"/>
    <field name="HorizontalGap" type="Single" visibility="public" size="4" offset="4" file="FMX.Layouts.pas" line="998"/>
    <field name="VerticalGap" type="Single" visibility="public" size="4" offset="8" file="FMX.Layouts.pas" line="999"/>
  </struct>
  <class name="TFlowLayoutBreak" file="FMX.Layouts.pas" line="1002">
    
    <members>
      <field name="FRules" type="TFlowLayoutRules" visibility="private" size="12" offset="904" file="FMX.Layouts.pas" line="1004"/>
      <field name="FChangesRules" type="Boolean" visibility="private" size="1" offset="916" file="FMX.Layouts.pas" line="1005"/>
      <procedure name="SetChangesRules" visibility="protected" file="FMX.Layouts.pas" line="1007">
        <parameters>
          <parameter name="AChangesRules" type="Boolean"/>
        </parameters>
      </procedure>
      <procedure name="Paint" visibility="protected" procflags="override" file="FMX.Layouts.pas" line="1008">
      </procedure>
      <function name="VisibleStored" visibility="protected" procflags="override" file="FMX.Layouts.pas" line="1009">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <constructor name="Create" visibility="public" file="FMX.Layouts.pas" line="1011">
        <parameters>
          <parameter name="AOwner" type="TComponent"/>
        </parameters>
      </constructor>
      <property name="ChangesRules" visibility="published" read="FChangesRules" write="SetChangesRules" type="Boolean" file="FMX.Layouts.pas" line="1013"/>
      <property name="Justify" visibility="published" type="TFlowJustify" file="FMX.Layouts.pas" line="1014"/>
      <property name="JustifyLastLine" visibility="published" type="TFlowJustify" file="FMX.Layouts.pas" line="1015"/>
      <property name="FlowDirection" visibility="published" type="TFlowDirection" file="FMX.Layouts.pas" line="1016"/>
      <property name="HorizontalGap" visibility="published" type="Single" default="0" file="FMX.Layouts.pas" line="1017"/>
      <property name="VerticalGap" visibility="published" type="Single" default="0" file="FMX.Layouts.pas" line="1018"/>
      <property name="Visible" visibility="published" read="FVisible" write="SetVisible" stored="VisibleStored" type="Boolean" default="1" hoisted="true" file="FMX.Layouts.pas" line="1019"/>
    </members>
  </class>
  <class name="TFlowLayout" file="FMX.Layouts.pas" line="1022">
    
    <members>
      <field name="FRules" type="TFlowLayoutRules" visibility="private" size="12" offset="904" file="FMX.Layouts.pas" line="1024"/>
      <procedure name="DoRealign" visibility="protected" procflags="override" file="FMX.Layouts.pas" line="1026">
      <devnotes><summary>
Performs the alignment of a FireMonkey control.
FMX.Layouts.TFlowLayout.DoRealign inherits from FMX.Controls.TControl.DoRealign. All content below this line refers to FMX.Controls.TControl.DoRealign.
Performs the alignment of a FireMonkey control.

 See Also
FMX.Types.AlignObjects

</summary></devnotes></procedure>
      <procedure name="DoAddObject" visibility="protected" procflags="override" file="FMX.Layouts.pas" line="1027">
        <parameters>
          <parameter name="AObject" type="TFmxObject" paramflags="const"/>
        </parameters>
      <devnotes><summary>


Adds the AObject object to the Children list of children attached to this parent object (self).
FMX.Layouts.TFlowLayout.DoAddObject inherits from FMX.Types.TFmxObject.DoAddObject. All content below this line refers to FMX.Types.TFmxObject.DoAddObject.
Adds the AObject object to the Children list of children attached to this parent object (self).
DoAddObject adds the object provided in the AObject parameter to the list of children stored in the Children property of this object (self). DoAddObject changes the parent of AObject to this object (self) and sets the root of AObject to the Root object of this object (self).
Descendant classes, like TCommonCustomForm and TControl, additionally handle tab stop lists keeping ordered lists of objects to which the user can tab. If such descendant class supports the ITabStopController interface and AObject is an object of a class supporting the IControl interface, then DoAddObject of this descendant adds AObject to the TabList tab stop lists of the (self) object. 
DoAddObject is internally called from AddObject.
</summary></devnotes></procedure>
      <procedure name="DoRemoveObject" visibility="protected" procflags="override" file="FMX.Layouts.pas" line="1028">
        <parameters>
          <parameter name="AObject" type="TFmxObject" paramflags="const"/>
        </parameters>
      <devnotes><summary>




Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="Paint" visibility="protected" procflags="override" file="FMX.Layouts.pas" line="1029">
      <devnotes><summary>
Renders the control's surface. 
FMX.Layouts.TFlowLayout.Paint inherits from FMX.Controls.TControl.Paint. All content below this line refers to FMX.Controls.TControl.Paint.
Renders the control's surface. 
The Paint method is called by DoPaint when a control is being painted by the PaintTo method. Before DoPaint, Painting is called. AfterPaint is called immediately after. 
FireMonkey internally calls Paint to paint the control when the window is being painted. You must not call Paint explicitly.
The base class TControl implements an empty Paint. The descendants of TControl override Paint to provide specific rendering of the respective controls.
For example, Paint methods in classes of the FMX.Objects unit draw and fill shapes using the properties defined in these classes. See the descriptions of these classes to find the properties of the respective shapes. 
</summary></devnotes></procedure>
      <procedure name="SetJustify" visibility="protected" file="FMX.Layouts.pas" line="1030">
        <parameters>
          <parameter name="AJustify" type="TFlowJustify"/>
        </parameters>
      <devnotes><summary>
Setter function for the Justify property. Value specifies the new value of the Justify property.
</summary></devnotes></procedure>
      <procedure name="SetJustifyLast" visibility="protected" file="FMX.Layouts.pas" line="1031">
        <parameters>
          <parameter name="AJustify" type="TFlowJustify"/>
        </parameters>
      <devnotes><summary>
Setter function for the JustifyLastLine property. Value specifies the new value of the JustifyLastLine property.
</summary></devnotes></procedure>
      <procedure name="SetFlowDirection" visibility="protected" file="FMX.Layouts.pas" line="1032">
        <parameters>
          <parameter name="ADirection" type="TFlowDirection"/>
        </parameters>
      <devnotes><summary>
Setter function for the FlowDirection property. Value specifies the new value of the FlowDirection property.
</summary></devnotes></procedure>
      <procedure name="SetHGap" visibility="protected" file="FMX.Layouts.pas" line="1033">
        <parameters>
          <parameter name="AHGap" type="Single"/>
        </parameters>
      <devnotes><summary>
Setter function for the HorizontalGap property. Value specifies the new value of the HorizontalGap property.
</summary></devnotes></procedure>
      <procedure name="SetVGap" visibility="protected" file="FMX.Layouts.pas" line="1034">
        <parameters>
          <parameter name="AVGap" type="Single"/>
        </parameters>
      <devnotes><summary>
Setter function for the VerticalGap property. Value specifies the new value of the VerticalGap property.
</summary></devnotes></procedure>
      <constructor name="Create" visibility="public" file="FMX.Layouts.pas" line="1036">
        <parameters>
          <parameter name="AOwner" type="TComponent"/>
        </parameters>
      <devnotes><summary>
Allocates memory and constructs a safely initialized instance of a component.
Allocates memory and constructs a safely initialized instance of a component.
Allocates memory and constructs a safely initialized instance of a component.
FMX.Layouts.TFlowLayout.Create inherits from System.Classes.TComponent.Create. All content below this line refers to System.Classes.TComponent.Create.
Allocates memory and constructs a safely initialized instance of a component.
All objects have a Create method that constructs the object. TComponent redefines Create so that, for components, Create also:

Establishes the relationship of a component and its Owner, as indicated by the AOwner parameter.
Sets the ComponentStyle property to csInheritable, meaning that the component can be inherited by a descendent form type.
It is not necessary to explicitly create components added in the Form Designer. These components are created automatically when the application is run, and they are destroyed when the application is closed.
For components created programmatically, that is, not created in the Form Designer, call Create and pass in an owner component as the AOwner parameter. The owner disposes of the component when it is destroyed. If the component is not owned, then use Free when it needs to be destroyed.

Tip:  When passing in Self as the Owner parameter, consider what Self references. If a component creates another component in one of its methods, then Self refers to the first component and not the component being created, which is then owned by the first component.
Note:  The TComponent constructor is virtual in part to allow polymorphic instantiation of class references. This is critical to the streaming system and to the Form Designer. Do not forget to use the override directive when declaring a new component's Create constructor.</summary></devnotes></constructor>
      <property name="Align" visibility="published" read="FAlign" write="SetAlign" type="TAlignLayout" default="0" hoisted="true" file="FMX.Layouts.pas" line="1038"/>
      <property name="Anchors" visibility="published" read="FAnchors" write="SetAnchors" stored="IsAnchorsStored" type="TAnchors" hoisted="true" file="FMX.Layouts.pas" line="1039"/>
      <property name="ClipChildren" visibility="published" read="FClipChildren" write="SetClipChildren" type="Boolean" default="0" hoisted="true" file="FMX.Layouts.pas" line="1040"/>
      <property name="ClipParent" visibility="published" read="FClipParent" write="FClipParent" type="Boolean" default="0" hoisted="true" file="FMX.Layouts.pas" line="1041"/>
      <property name="Cursor" visibility="published" read="GetCursor" write="SetCursor" type="TCursor" default="0" hoisted="true" file="FMX.Layouts.pas" line="1042"/>
      <property name="DragMode" visibility="published" read="GetDragMode" write="SetDragMode" type="TDragMode" default="0" hoisted="true" file="FMX.Layouts.pas" line="1043"/>
      <property name="EnableDragHighlight" visibility="published" read="FEnableDragHighlight" write="FEnableDragHighlight" type="Boolean" default="1" hoisted="true" file="FMX.Layouts.pas" line="1044"/>
      <property name="Enabled" visibility="published" read="FEnabled" write="SetEnabled" stored="EnabledStored" type="Boolean" hoisted="true" file="FMX.Layouts.pas" line="1045"/>
      <property name="Locked" visibility="published" read="FLocked" write="SetLocked" type="Boolean" default="0" hoisted="true" file="FMX.Layouts.pas" line="1046"/>
      <property name="Height" visibility="published" read="GetHeight" write="SetHeight" stored="False" type="Single" hoisted="true" file="FMX.Layouts.pas" line="1047"/>
      <property name="Hint" visibility="published" read="FHint" write="SetHint" stored="HintStored" type="string" default="0" hoisted="true" file="FMX.Layouts.pas" line="1048"/>
      <property name="HitTest" visibility="published" read="FHitTest" write="SetHitTest" type="Boolean" default="1" hoisted="true" file="FMX.Layouts.pas" line="1049"/>
      <property name="Padding" visibility="published" read="GetPadding" write="SetPadding" type="TBounds" hoisted="true" file="FMX.Layouts.pas" line="1050"/>
      <property name="Opacity" visibility="published" read="FOpacity" write="SetOpacity" stored="IsOpacityStored" type="Single" hoisted="true" file="FMX.Layouts.pas" line="1051"/>
      <property name="Margins" visibility="published" read="GetMargins" write="SetMargins" type="TBounds" hoisted="true" file="FMX.Layouts.pas" line="1052"/>
      <property name="PopupMenu" visibility="published" read="FPopupMenu" write="SetPopupMenu" stored="IsPopupMenuStored" type="TCustomPopupMenu" hoisted="true" file="FMX.Layouts.pas" line="1053"/>
      <property name="Position" visibility="published" read="FPosition" write="SetPosition" stored="IsPositionStored" type="TPosition" hoisted="true" file="FMX.Layouts.pas" line="1054"/>
      <property name="RotationAngle" visibility="published" read="GetRotationAngle" write="SetRotationAngle" type="Single" default="0" hoisted="true" file="FMX.Layouts.pas" line="1055"/>
      <property name="RotationCenter" visibility="published" read="GetRotationCenter" write="SetRotationCenter" type="TPosition" hoisted="true" file="FMX.Layouts.pas" line="1056"/>
      <property name="Scale" visibility="published" read="GetScale" write="SetScale" type="TPosition" hoisted="true" file="FMX.Layouts.pas" line="1057"/>
      <property name="Size" visibility="published" read="FSize" write="SetSize" stored="IsSizeStored" type="TControlSize" hoisted="true" file="FMX.Layouts.pas" line="1058"/>
      <property name="TouchTargetExpansion" visibility="published" read="FTouchTargetExpansion" write="SetTouchTargetExpansion" type="TBounds" hoisted="true" file="FMX.Layouts.pas" line="1059"/>
      <property name="Visible" visibility="published" read="FVisible" write="SetVisible" stored="VisibleStored" type="Boolean" default="1" hoisted="true" file="FMX.Layouts.pas" line="1060"/>
      <property name="Width" visibility="published" read="GetWidth" write="SetWidth" stored="False" type="Single" hoisted="true" file="FMX.Layouts.pas" line="1061"/>
      <property name="TabOrder" visibility="published" read="GetTabOrder" write="SetTabOrder" type="TTabOrder" default="-1" hoisted="true" file="FMX.Layouts.pas" line="1062"/>
      <property name="TabStop" visibility="published" read="GetTabStop" write="SetTabStop" type="Boolean" default="1" hoisted="true" file="FMX.Layouts.pas" line="1063"/>
      <property name="Justify" visibility="published" write="SetJustify" type="TFlowJustify" file="FMX.Layouts.pas" line="1064"><devnotes><summary>
Specifies the justification of all the lines within TFlowLayout, except the last line.
If there is a single line, Justify has no effect, the line is treated as a last line, and is aligned according to JustifyLastLine.
</summary></devnotes></property>
      <property name="JustifyLastLine" visibility="published" write="SetJustifyLast" type="TFlowJustify" file="FMX.Layouts.pas" line="1065"><devnotes><summary>
Specifies the justification of the last line of a TFlowLayout. 
If there is a single line, Justify has no effect, the line is treated as a last line, and is aligned according to JustifyLastLine.
</summary></devnotes></property>
      <property name="FlowDirection" visibility="published" write="SetFlowDirection" type="TFlowDirection" file="FMX.Layouts.pas" line="1066"><devnotes><summary>
Specifies the direction in which the controls are arranged within the TFlowLayout lines.
The direction of the controls flow can be from left to right or from right to left. Changing the direction does not change the line of the control, only the order of the controls on each line. 



Value

Result



LeftToRight








RightToLeft





</summary></devnotes></property>
      <property name="HorizontalGap" visibility="published" write="SetHGap" type="Single" default="0" file="FMX.Layouts.pas" line="1067"><devnotes><summary>
Specifies the minimum distance between two adjacent child controls of a TFlowLayout.
If HorizontalGap has a negative value, the child controls are overlapped following the direction specified by the FlowDirection property.



Gap and direction

Result



Positive Gap 








Negative Gap; Direction=LeftToRight








Negative Gap; Direction=RightToLeft





</summary></devnotes></property>
      <property name="VerticalGap" visibility="published" write="SetVGap" type="Single" default="0" file="FMX.Layouts.pas" line="1068"><devnotes><summary>
Specifies the minimum distance between two adjacent lines of a TFlowLayout.
If the VerticalGap has a negative value, the lines are overlapped.



Gap

Result



Positive Gap 








Negative Gap 





</summary></devnotes></property>
      <property name="ParentShowHint" visibility="published" read="FParentShowHint" write="SetParentShowHint" type="Boolean" default="1" hoisted="true" file="FMX.Layouts.pas" line="1069"/>
      <property name="ShowHint" visibility="published" read="FShowHint" write="SetShowHint" stored="IsShowHintStored" type="Boolean" hoisted="true" file="FMX.Layouts.pas" line="1070"/>
      <event name="OnDragEnter" visibility="published" read="FOnDragEnter" write="FOnDragEnter" type="TDragEnterEvent" hoisted="true" file="FMX.Layouts.pas" line="1072"/>
      <event name="OnDragLeave" visibility="published" read="FOnDragLeave" write="FOnDragLeave" type="TNotifyEvent" hoisted="true" file="FMX.Layouts.pas" line="1073"/>
      <event name="OnDragOver" visibility="published" read="FOnDragOver" write="FOnDragOver" type="TDragOverEvent" hoisted="true" file="FMX.Layouts.pas" line="1074"/>
      <event name="OnDragDrop" visibility="published" read="FOnDragDrop" write="FOnDragDrop" type="TDragDropEvent" hoisted="true" file="FMX.Layouts.pas" line="1075"/>
      <event name="OnDragEnd" visibility="published" read="FOnDragEnd" write="FOnDragEnd" type="TNotifyEvent" hoisted="true" file="FMX.Layouts.pas" line="1076"/>
      <event name="OnClick" visibility="published" read="FOnClick" write="SetOnClick" stored="OnClickStored" type="TNotifyEvent" hoisted="true" file="FMX.Layouts.pas" line="1078"/>
      <event name="OnDblClick" visibility="published" read="FOnDblClick" write="FOnDblClick" type="TNotifyEvent" hoisted="true" file="FMX.Layouts.pas" line="1079"/>
      <event name="OnMouseDown" visibility="published" read="FOnMouseDown" write="FOnMouseDown" type="TMouseEvent" hoisted="true" file="FMX.Layouts.pas" line="1080"/>
      <event name="OnMouseMove" visibility="published" read="FOnMouseMove" write="FOnMouseMove" type="TMouseMoveEvent" hoisted="true" file="FMX.Layouts.pas" line="1081"/>
      <event name="OnMouseUp" visibility="published" read="FOnMouseUp" write="FOnMouseUp" type="TMouseEvent" hoisted="true" file="FMX.Layouts.pas" line="1082"/>
      <event name="OnMouseWheel" visibility="published" read="FOnMouseWheel" write="FOnMouseWheel" type="TMouseWheelEvent" hoisted="true" file="FMX.Layouts.pas" line="1083"/>
      <event name="OnMouseEnter" visibility="published" read="FOnMouseEnter" write="FOnMouseEnter" type="TNotifyEvent" hoisted="true" file="FMX.Layouts.pas" line="1084"/>
      <event name="OnMouseLeave" visibility="published" read="FOnMouseLeave" write="FOnMouseLeave" type="TNotifyEvent" hoisted="true" file="FMX.Layouts.pas" line="1085"/>
      <event name="OnPainting" visibility="published" read="FOnPainting" write="FOnPainting" type="TOnPaintEvent" hoisted="true" file="FMX.Layouts.pas" line="1086"/>
      <event name="OnPaint" visibility="published" read="FOnPaint" write="FOnPaint" type="TOnPaintEvent" hoisted="true" file="FMX.Layouts.pas" line="1087"/>
      <event name="OnResize" visibility="published" read="FOnResize" write="FOnResize" type="TNotifyEvent" hoisted="true" file="FMX.Layouts.pas" line="1088"/>
      <event name="OnResized" visibility="published" read="FOnResized" write="FOnResized" type="TNotifyEvent" hoisted="true" file="FMX.Layouts.pas" line="1089"/>
    </members>
  <devnotes><summary>
A control that arranges its child controls as if they were words in a paragraph.
The children of a TFlowLayout are lined one by one. When the Width of the layout is exceeded, the remaining child controls are wrapped to the next line and so on until all of the controls are placed. To add a line break, like in a normal text, add a TFlowLayoutBreak to the current TFlowLayout. 
The direction of the controls flow can be from left to right or from right to left. To change the direction, set the FlowDirection property. Changing the direction does not change the line of the control, only the order of the controls on each line.
The distance between controls from the same line and the distance between lines can be customized by setting the HorizontalGap and VerticalGap properties.
The TFlowLayout children can be aligned as words in a paragraph: left, right, center, or justified. The alignment can be customized through the Justify property. The alignment of the last line within the layout is treated separately, and can be set through the JustifyLastLine property. If there is a single line, Justify has no effect, the line is treated as a last line, and is aligned according to JustifyLastLine.

Note: The Align property of the controls within a TFlowLayout is ignored. The Position property for child controls is automatically set, and explicitly changing its value has no effect. 
The TFlowLayout can be used to obtain this kind of results:
 
</summary></devnotes></class>
</namespace>