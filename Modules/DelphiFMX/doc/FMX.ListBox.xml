<?xml version="1.0" ?><namespace name="FMX.ListBox" platform="Win32">
  <class name="TListBoxItem" file="FMX.ListBox.pas" line="30">
    
    <interfaces>
      <implements name="IGlyph"/>
    </interfaces>
    <members>
      <enum name="TBackgroundShape" visibility="private" alias="FMX.ListBox.TBackgroundShape" file="FMX.ListBox.pas" line="32">
        <element value="0" name="SeparatorBottom" file="FMX.ListBox.pas" line="32"/>
        <element value="1" name="Sharp" file="FMX.ListBox.pas" line="32"/>
        <element value="2" name="RoundTop" file="FMX.ListBox.pas" line="32"/>
        <element value="3" name="RoundBottom" file="FMX.ListBox.pas" line="32"/>
        <element value="4" name="RoundAll" file="FMX.ListBox.pas" line="32"/>
      </enum>
      <field name="FIsChecked" type="Boolean" visibility="private" size="1" offset="992" file="FMX.ListBox.pas" line="34"/>
      <field name="FCheck" type="TCheckBox" visibility="private" size="4" offset="996" file="FMX.ListBox.pas" line="35"/>
      <field name="FIsSelected" type="Boolean" visibility="private" size="1" offset="1000" file="FMX.ListBox.pas" line="36"/>
      <field name="FIsSelectable" type="Boolean" visibility="private" size="1" offset="1001" file="FMX.ListBox.pas" line="37"/>
      <field name="FData" type="TObject" visibility="private" size="4" offset="1004" file="FMX.ListBox.pas" line="38"/>
      <field name="FItemData" type="TListBoxItemData" visibility="private" size="4" offset="1008" file="FMX.ListBox.pas" line="39"/>
      <field name="FBitmap" type="TBitmap" visibility="private" size="4" offset="1012" file="FMX.ListBox.pas" line="40"/>
      <field name="FIcon" type="TImage" visibility="private" size="4" offset="1016" file="FMX.ListBox.pas" line="41"/>
      <field name="FOldIconVisible" type="Boolean" visibility="private" size="1" offset="1020" file="FMX.ListBox.pas" line="42"/>
      <field name="FOldCheckAlign" type="TAlignLayout" visibility="private" size="4" offset="1024" file="FMX.ListBox.pas" line="43"/>
      <field name="FGlyph" type="TGlyph" visibility="private" size="4" offset="1028" file="FMX.ListBox.pas" line="44"/>
      <field name="FBackgroundShape" type="TListBoxItem.TBackgroundShape" visibility="private" size="1" offset="1032" file="FMX.ListBox.pas" line="45"/>
      <field name="FImageLink" type="TGlyphImageLink" visibility="private" size="4" offset="1036" file="FMX.ListBox.pas" line="46"/>
      <procedure name="SetIsChecked" visibility="private" file="FMX.ListBox.pas" line="47">
        <parameters>
          <parameter name="Value" type="Boolean" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="DoCheckClick" visibility="private" file="FMX.ListBox.pas" line="48">
        <parameters>
          <parameter name="Sender" type="TObject"/>
        </parameters>
      </procedure>
      <procedure name="InitCheckBox" visibility="private" file="FMX.ListBox.pas" line="49">
        <parameters>
          <parameter name="Visible" type="Boolean"/>
        </parameters>
      </procedure>
      <procedure name="UpdateCheck" visibility="private" file="FMX.ListBox.pas" line="50">
      </procedure>
      <procedure name="SetIsSelected" visibility="private" file="FMX.ListBox.pas" line="51">
        <parameters>
          <parameter name="Value" type="Boolean" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetSelectable" visibility="private" file="FMX.ListBox.pas" line="52">
        <parameters>
          <parameter name="Value" type="Boolean" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="GetImages" visibility="private" file="FMX.ListBox.pas" line="53">
        <parameters>
          <retval type="TCustomImageList">
            <devnotes>
               <summary> List of images. Base class that used in fire monkey without published properties </summary>
            </devnotes>
          </retval>
        </parameters>
      </function>
      <procedure name="SetImages" visibility="private" file="FMX.ListBox.pas" line="54">
        <parameters>
          <parameter name="Value" type="TCustomImageList" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="GetImageIndex" visibility="private" file="FMX.ListBox.pas" line="56">
        <parameters>
          <retval type="TImageIndex"/>
        </parameters>
      </function>
      <procedure name="SetImageIndex" visibility="private" file="FMX.ListBox.pas" line="57">
        <parameters>
          <parameter name="Value" type="TImageIndex" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="GetImageList" visibility="private" procflags="inline" file="FMX.ListBox.pas" line="58">
        <parameters>
          <retval type="TBaseImageList"/>
        </parameters>
      </function>
      <procedure name="SetImageList" visibility="private" file="FMX.ListBox.pas" line="59">
        <parameters>
          <parameter name="Value" type="TBaseImageList" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetItemData" visibility="private" file="FMX.ListBox.pas" line="62">
        <parameters>
          <parameter name="Value" type="TListBoxItemData" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="ChangeOrder" visibility="protected" procflags="override" file="FMX.ListBox.pas" line="64">
      <devnotes><summary>


Notification method called after the creation order is changed.
FMX.ListBox.TListBoxItem.ChangeOrder inherits from FMX.Types.TFmxObject.ChangeOrder. All content below this line refers to FMX.Types.TFmxObject.ChangeOrder.
Notification method called after the creation order is changed. ChangeOrder is a virtual method to be implemented in subclasses to allow for changing the creation order of this FMX object.
</summary></devnotes></procedure>
      <function name="ListBox" visibility="protected" file="FMX.ListBox.pas" line="65">
        <parameters>
          <retval type="TCustomListBox"/>
        </parameters>
      <devnotes><summary>
Returns the list box object that contains the item.
ListBox gets the list box parent of the item. If the parent of the item is not a TListBox, the method returns nil.
</summary></devnotes></function>
      <function name="ComboBox" visibility="protected" file="FMX.ListBox.pas" line="66">
        <parameters>
          <retval type="TCustomComboBox"/>
        </parameters>
      <devnotes><summary>
Returns the combo box object that contains the item.
ComboBox gets the combo box parent of the item. If the parent of the item is not a TComboBox, the method returns nil.
</summary></devnotes></function>
      <function name="GetDefaultSize" visibility="protected" procflags="override" file="FMX.ListBox.pas" line="67">
        <parameters>
          <retval type="TSizeF"/>
        </parameters>
      <devnotes><summary>
Getter of DefaultSize.
FMX.ListBox.TListBoxItem.GetDefaultSize inherits from FMX.Controls.TControl.GetDefaultSize. All content below this line refers to FMX.Controls.TControl.GetDefaultSize.
Getter of DefaultSize.


</summary></devnotes></function>
      <procedure name="ApplyStyle" visibility="protected" procflags="override" file="FMX.ListBox.pas" line="68">
      <devnotes><summary>


Customizes styles in complex objects.
FMX.ListBox.TListBoxItem.ApplyStyle inherits from FMX.Controls.TStyledControl.ApplyStyle. All content below this line refers to FMX.Controls.TStyledControl.ApplyStyle.
Customizes styles in complex objects.
TStyledControl descendants override it to apply styles in concordance with their primitive components.      
Do not call ApplyStyle explicitly in an application. It is called by the ApplyStyleLookup method when object styles are updated.
For an example of an ApplyStyle implementation, see &quot;TCalloutPanel:Style Contracts&quot; in FireMonkey Component Design.
</summary></devnotes></procedure>
      <procedure name="FreeStyle" visibility="protected" procflags="override" file="FMX.ListBox.pas" line="69">
      <devnotes><summary>
Frees the style of TStyledControl.
FMX.ListBox.TListBoxItem.FreeStyle inherits from FMX.Controls.TTextControl.FreeStyle. All content below this line refers to FMX.Controls.TTextControl.FreeStyle.
Frees the style of TStyledControl.
FreeStyle frees some TTextControl-specific style resources like TextObject and TextSettings, then calls the inherited TStyledControl.FreeStyle.
</summary></devnotes></procedure>
      <function name="EnterChildren" visibility="protected" procflags="override" file="FMX.ListBox.pas" line="70">
        <parameters>
          <parameter name="AObject" type="IControl"/>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Checks whether the input is taken by the control or by its parent.
FMX.ListBox.TListBoxItem.EnterChildren inherits from FMX.Controls.TControl.EnterChildren. All content below this line refers to FMX.Controls.TControl.EnterChildren.
Checks whether the input is taken by the control or by its parent.
EnterChildren returns True if the input is taken directly by the control's parent, and False otherwise. 
Usually, EnterChildren returns False. If the control is an item such as TListBoxItem, a TTreeViewItem, or TMenuItem, EnterChildren returns True.
</summary></devnotes></function>
      <procedure name="DragOver" visibility="protected" procflags="override" file="FMX.ListBox.pas" line="71">
        <parameters>
          <parameter name="Data" type="TDragObject" paramflags="const"/>
          <parameter name="Point" type="TPointF" paramflags="const"/>
          <parameter name="Operation" type="TDragOperation" paramflags="var"/>
        </parameters>
      <devnotes><summary>
OnDragOver event dispatcher. 
FMX.ListBox.TListBoxItem.DragOver inherits from FMX.Controls.TControl.DragOver. All content below this line refers to FMX.Controls.TControl.DragOver.
OnDragOver event dispatcher. 
Data specifies the dragged object.
Point specifies the current point of the  mouse cursor within the client area of the control.
Operation is the operation parameter (None, Move, Copy, Link) that specifies the action to perform when an item is dragged over the object.  

None is the default. No action takes place, it does not display any name.
Move - the word Move is displayed once an item is dragged over the object.
Copy - the word Copy is displayed once an item is dragged over the object.
Link - the word Link is displayed once an item is dragged over the object.
A control calls DragOver when a dragged object is over the control area.
Override the protected DragOver method to provide other responses when a dragged object is over the control area.
</summary></devnotes></procedure>
      <procedure name="DragEnd" visibility="protected" procflags="override" file="FMX.ListBox.pas" line="72">
      <devnotes><summary>
OnDragEnd event dispatcher. 
FMX.ListBox.TListBoxItem.DragEnd inherits from FMX.Controls.TControl.DragEnd. All content below this line refers to FMX.Controls.TControl.DragEnd.
OnDragEnd event dispatcher. 
A control calls DragEnd when a dragging session ends.
Override the protected DragEnd method to provide other responses when the dragging session ends.
</summary></devnotes></procedure>
      <procedure name="Paint" visibility="protected" procflags="override" file="FMX.ListBox.pas" line="73">
      <devnotes><summary>
Renders the control's surface. 
FMX.ListBox.TListBoxItem.Paint inherits from FMX.Controls.TControl.Paint. All content below this line refers to FMX.Controls.TControl.Paint.
Renders the control's surface. 
The Paint method is called by DoPaint when a control is being painted by the PaintTo method. Before DoPaint, Painting is called. AfterPaint is called immediately after. 
FireMonkey internally calls Paint to paint the control when the window is being painted. You must not call Paint explicitly.
The base class TControl implements an empty Paint. The descendants of TControl override Paint to provide specific rendering of the respective controls.
For example, Paint methods in classes of the FMX.Objects unit draw and fill shapes using the properties defined in these classes. See the descriptions of these classes to find the properties of the respective shapes. 
</summary></devnotes></procedure>
      <function name="GetHeight" visibility="protected" procflags="override" file="FMX.ListBox.pas" line="74">
        <parameters>
          <retval type="Single"/>
        </parameters>
      <devnotes><summary>
Getter function for the Height property.
FMX.ListBox.TListBoxItem.GetHeight inherits from FMX.Controls.TControl.GetHeight. All content below this line refers to FMX.Controls.TControl.GetHeight.
Getter function for the Height property.
</summary></devnotes></function>
      <function name="GetWidth" visibility="protected" procflags="override" file="FMX.ListBox.pas" line="75">
        <parameters>
          <retval type="Single"/>
        </parameters>
      <devnotes><summary>
Getter function for the Width property.
FMX.ListBox.TListBoxItem.GetWidth inherits from FMX.Controls.TControl.GetWidth. All content below this line refers to FMX.Controls.TControl.GetWidth.
Getter function for the Width property.
</summary></devnotes></function>
      <procedure name="SetHeight" visibility="protected" procflags="override" file="FMX.ListBox.pas" line="76">
        <parameters>
          <parameter name="Value" type="Single" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Setter function for the Height property.
FMX.ListBox.TListBoxItem.SetHeight inherits from FMX.Controls.TControl.SetHeight. All content below this line refers to FMX.Controls.TControl.SetHeight.
Setter function for the Height property. Value specifies the new value of the Height property.
</summary></devnotes></procedure>
      <function name="DoSetSize" visibility="protected" procflags="override" file="FMX.ListBox.pas" line="77">
        <parameters>
          <parameter name="ASize" type="TControlSize" paramflags="const"/>
          <parameter name="NewPlatformDefault" type="Boolean" paramflags="const"/>
          <parameter name="ANewWidth" type="Single"/>
          <parameter name="ANewHeight" type="Single"/>
          <parameter name="ALastWidth" type="Single" paramflags="var"/>
          <parameter name="ALastHeight" type="Single" paramflags="var"/>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>




Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></function>
      <procedure name="SelectBackground" visibility="protected" file="FMX.ListBox.pas" line="79">
        <parameters>
          <parameter name="Shape" type="TListBoxItem.TBackgroundShape" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="OnBitmapChanged" visibility="protected" file="FMX.ListBox.pas" line="80">
        <parameters>
          <parameter name="Sender" type="TObject"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <function name="StyledSettingsStored" visibility="protected" procflags="override" file="FMX.ListBox.pas" line="81">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Retrieves whether any of the default values of font properties that are stored in the StyledSettings property is changed.
FMX.ListBox.TListBoxItem.StyledSettingsStored inherits from FMX.Controls.TTextControl.StyledSettingsStored. All content below this line refers to FMX.Controls.TTextControl.StyledSettingsStored.
Retrieves whether any of the default values of font properties that are stored in the StyledSettings property is changed.
StyledSettingsStored retrieves whether StyledSettings needs to be stored in the .fmx form file, keeping the description of the FMX form.
StyledSettingsStored returns True if StyledSettings &lt;&gt; DefaultStyledSettings. The DefaultStyledSettings property is set during the style loading in the ApplyStyle method. See also AllStyledSettings.
</summary></devnotes></function>
      <property name="Align" visibility="protected" read="FAlign" write="SetAlign" type="TAlignLayout" default="0" hoisted="true" file="FMX.ListBox.pas" line="82"><devnotes><summary>
Specifies the alignment options (top, left, client, and so on) of this control. 
Use Align to automatically set the alignment of the current control. Setting Align to a value different than None can affect the  position, size (height and width), and anchors of the control. By default, Align is set to None.
Descendants of TControl typically set the visibility and value for the Align property. For example, for TToolBar, Align defaults to TAlignLayout.Top.
To see the possible values for Align and their visible effects over the control, see FMX.Types.TAlignLayout.  
Controls that have the Align or Anchors properties set can use a Scale that is different from the default (1,1), so that controls align together even when they have a custom scale. 
</summary></devnotes></property>
      <property name="RotationAngle" visibility="protected" read="GetRotationAngle" write="SetRotationAngle" type="Single" default="0" hoisted="true" file="FMX.ListBox.pas" line="83"><devnotes><summary>
Specifies the amount (in degrees) by which the control is rotated from the x-axis. 
Positive angles correspond to clockwise rotation. For counterclockwise rotation, use negative values.
To set the rotation center, use RotationCenter.
</summary></devnotes></property>
      <property name="RotationCenter" visibility="protected" read="GetRotationCenter" write="SetRotationCenter" type="TPosition" hoisted="true" file="FMX.ListBox.pas" line="84"><devnotes><summary>
Specifies the position of the pivot point of the control.
The coordinates of the rotation center take values in the range from 0 through 1. The point with the coordinates (0,0) corresponds to the upper-left corner of the control, the point with the coordinates (1,1) corresponds to the lower-right corner of the control. The default center of rotation is (0.5, 0.5).
Values outside of [0,0] and [1,1] can be clipped in some descendant classes.
To set the rotation angle, use RotationAngle.
</summary></devnotes></property>
      <function name="GetTextSettingsClass" visibility="protected" procflags="override" file="FMX.ListBox.pas" line="85">
        <parameters>
          <retval type="TTextSettingsInfo.TCustomTextSettingsClass"/>
        </parameters>
      <devnotes><summary>
Returns the class type that instance represents the used text settings.
FMX.ListBox.TListBoxItem.GetTextSettingsClass inherits from FMX.Controls.TTextControl.GetTextSettingsClass. All content below this line refers to FMX.Controls.TTextControl.GetTextSettingsClass.
Returns the class type that instance represents the used text settings.
GetTextSettingsClass returns the TTextSettingsInfo.TCustomTextSettingsClass (or its descendant)  class reference. An instance of such class provides the DefaultTextSettings,   TextSettings, StyledSettings, ResultingTextSettings, and other properties handling the text representation settings of a control. 
You can override the method in descendant classes to modify the default behavior.
Typical implementations of GetTextSettingsClass returns the class declaring properties like the Font, FontColor, HorzAlign, and WordWrap. Some of these properties can be declared as published to be editable in the Object Inspector.

 See Also
FMX.Controls.TTextSettingsInfo
FMX.Controls.TTextSettingsInfo.TCustomTextSettingsClass
FMX.Controls.TTextSettingsInfo.DefaultTextSettings
FMX.Controls.TTextSettingsInfo.TextSettings
FMX.Controls.TTextSettingsInfo.StyledSettings
FMX.Controls.TTextSettingsInfo.ResultingTextSettings

</summary></devnotes></function>
      <function name="GetDefaultStyleLookupName" visibility="protected" procflags="override" file="FMX.ListBox.pas" line="86">
        <parameters>
          <retval type="string"/>
        </parameters>
      <devnotes><summary>
Protected getter implementation for the DefaultStyleLookupName property.
FMX.ListBox.TListBoxItem.GetDefaultStyleLookupName inherits from FMX.Controls.TStyledControl.GetDefaultStyleLookupName. All content below this line refers to FMX.Controls.TStyledControl.GetDefaultStyleLookupName.
Protected getter implementation for the DefaultStyleLookupName property.
When you Create a styled FireMonkey component by extending an existing component, override this method, if you want your component to inherit styles from the parent component. See Step 2 - Implement a Property to Specify the Format: Inheriting Styles of the Parent Component for more information and example code.
</summary></devnotes></function>
      <function name="DoGetDefaultStyleLookupName" visibility="protected" procflags="virtual" file="FMX.ListBox.pas" line="87">
        <parameters>
          <parameter name="Defaults" type="TListBoxItemStyleDefaults" paramflags="const"/>
          <retval type="string"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></function>
      <procedure name="ImagesChanged" visibility="protected" procflags="virtual" file="FMX.ListBox.pas" line="91">
        <devnotes><summary>
Should be called when the component needs to redraw the image.
ImagesChanged should be called
when you change the Images reference to the TCustomImageList object or 
the object itself or when you change the ImageIndex property.
</summary></devnotes>
      </procedure>
      <function name="ImageIndexStored" visibility="protected" procflags="virtual" file="FMX.ListBox.pas" line="94">
        <devnotes><summary>
Returns True when the ImageIndex property needs to be stored in the fmx-file.
</summary></devnotes>
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <procedure name="SetVisible" visibility="protected" procflags="override" file="FMX.ListBox.pas" line="95">
        <parameters>
          <parameter name="Value" type="Boolean" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Setter for the Visible property.
This method also unselects any items that are not visible.
</summary></devnotes></procedure>
      <constructor name="Create" visibility="public" file="FMX.ListBox.pas" line="97">
        <parameters>
          <parameter name="AOwner" type="TComponent"/>
        </parameters>
      <devnotes><summary>


Allocates memory and constructs a safely initialized instance of a component.
Allocates memory and constructs a safely initialized instance of a component.
FMX.ListBox.TListBoxItem.Create inherits from System.Classes.TComponent.Create. All content below this line refers to System.Classes.TComponent.Create.
Allocates memory and constructs a safely initialized instance of a component.
All objects have a Create method that constructs the object. TComponent redefines Create so that, for components, Create also:

Establishes the relationship of a component and its Owner, as indicated by the AOwner parameter.
Sets the ComponentStyle property to csInheritable, meaning that the component can be inherited by a descendent form type.
It is not necessary to explicitly create components added in the Form Designer. These components are created automatically when the application is run, and they are destroyed when the application is closed.
For components created programmatically, that is, not created in the Form Designer, call Create and pass in an owner component as the AOwner parameter. The owner disposes of the component when it is destroyed. If the component is not owned, then use Free when it needs to be destroyed.

Tip:  When passing in Self as the Owner parameter, consider what Self references. If a component creates another component in one of its methods, then Self refers to the first component and not the component being created, which is then owned by the first component.
Note:  The TComponent constructor is virtual in part to allow polymorphic instantiation of class references. This is critical to the streaming system and to the Form Designer. Do not forget to use the override directive when declaring a new component's Create constructor.</summary></devnotes></constructor>
      <destructor name="Destroy" visibility="public" file="FMX.ListBox.pas" line="98">
        <parameters>
        </parameters>
      <devnotes><summary>


Disposes of the component and its owned components.
Disposes of the component and its owned components.
FMX.ListBox.TListBoxItem.Destroy inherits from System.Classes.TComponent.Destroy. All content below this line refers to System.Classes.TComponent.Destroy.
Disposes of the component and its owned components.
Do not call Destroy directly. Call Free instead. Free verifies that the component is not nil, and only then calls Destroy.
Never explicitly free a component in one of its own event handlers, nor free a component from the event handler of a component that it owns or contains.
To destroy a form, call its Release method. Release waits for all the form's event handlers and the event handlers of the form's components to finish executing before destroying the form.

Note: A form owns all the controls and nonvisual components that are placed on it in design mode. When it is freed, all of these components are automatically freed as well. By default, all forms are owned by the global Application object. When an application terminates, it frees the global Application object, which frees all forms. For objects that are not components, and for components created with a nil owner, be sure to call Free after finishing with the object; otherwise the memory allocated for the object will be lost until the application terminates.</summary></devnotes></destructor>
      <property name="Data" visibility="public" read="FData" write="FData" type="TObject" file="FMX.ListBox.pas" line="99"><devnotes><summary>
Stores a Tvalue, which is a data structure that can store different kinds of data types.
FMX.ListBox.TListBoxItem.Data inherits from FMX.Types.TFmxObject.Data. All content below this line refers to FMX.Types.TFmxObject.Data.
Stores a Tvalue, which is a data structure that can store different kinds of data types.
Data has no predefined meaning. Although Data is used for LiveBinding, any succesor override this behavior. Then, the behaviour of Data is based on the type of its value.

Note: Do not use this member. It is for internal use only.

</summary></devnotes></property>
      <function name="GetParentComponent" visibility="public" procflags="override" file="FMX.ListBox.pas" line="100">
        <parameters>
          <retval type="TComponent"/>
        </parameters>
      <devnotes><summary>
Returns the containing component.
Returns the containing component.
FMX.ListBox.TListBoxItem.GetParentComponent inherits from System.Classes.TComponent.GetParentComponent. All content below this line refers to System.Classes.TComponent.GetParentComponent.
Returns the containing component.
GetParentComponent returns a reference to the component that contains the current component, or nil if there is no container. Use HasParent to determine whether a component has a containing component. 
For example, a button on a panel on a form returns the panel, the panel returns the form, and the form returns nil.
</summary></devnotes></function>
      <procedure name="ApplyTriggerEffect" visibility="public" procflags="override" file="FMX.ListBox.pas" line="101">
        <parameters>
          <parameter name="AInstance" type="TFmxObject" paramflags="const"/>
          <parameter name="ATrigger" type="string" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Applies the specified mouse trigger effect to all the children of this FMX object that are of type TEffect.
FMX.ListBox.TListBoxItem.ApplyTriggerEffect inherits from FMX.Controls.TControl.ApplyTriggerEffect. All content below this line refers to FMX.Controls.TControl.ApplyTriggerEffect.
Applies the specified mouse trigger effect to all the children of this FMX object that are of type TEffect.
ApplyTriggerEffect iterates through all the children of this FMX object and, if one of them is of type TEffect, applies the mouse trigger given through the ATrigger parameter (which can be 'IsMouseOver', 'IsMouseOver', 'IsDragOver', and so on).
AInstance specifies the instance of the FMX object to which the trigger effect is applied.
</summary></devnotes></procedure>
      <procedure name="SetIsSelectedInternal" visibility="public" file="FMX.ListBox.pas" line="103">
        <devnotes><summary>
Processes the selection of an item.
Sets the value of the IsSelected property, triggers the selection animation and calls the ItemStateChanged method of the listbox selection controller.
The UserChange specifies whether the selection is initiated by an user action (as opposed to by a code call).
</summary></devnotes>
        <parameters>
          <parameter name="Value" type="Boolean" paramflags="const"/>
          <parameter name="UserChange" type="Boolean" paramflags="const"/>
        </parameters>
      </procedure>
      <property name="Font" visibility="public" read="GetFont" write="SetFont" type="TFont" hoisted="true" file="FMX.ListBox.pas" line="104"/>
      <property name="TextAlign" visibility="public" read="GetTextAlign" write="SetTextAlign" type="TTextAlign" default="1" hoisted="true" file="FMX.ListBox.pas" line="105"/>
      <property name="WordWrap" visibility="public" read="GetWordWrap" write="SetWordWrap" type="Boolean" default="0" hoisted="true" file="FMX.ListBox.pas" line="106"/>
      <property name="Images" visibility="public" read="GetImages" type="TCustomImageList" file="FMX.ListBox.pas" line="108">
        <devnotes><summary>
Defines the reference to a TCustomImageList list of images to be used to draw images on the component.
If the TCustomImageList list is empty, then Images is nil/null.
Call ImagesChanged when Images is changed.
</summary></devnotes>
      </property>
      <property name="AutoTranslate" visibility="published" read="FAutoTranslate" write="FAutoTranslate" type="Boolean" default="1" hoisted="true" file="FMX.ListBox.pas" line="110"/>
      <property name="ClipChildren" visibility="published" read="FClipChildren" write="SetClipChildren" type="Boolean" default="0" hoisted="true" file="FMX.ListBox.pas" line="111"/>
      <property name="ClipParent" visibility="published" read="FClipParent" write="FClipParent" type="Boolean" default="0" hoisted="true" file="FMX.ListBox.pas" line="112"/>
      <property name="Cursor" visibility="published" read="GetCursor" write="SetCursor" type="TCursor" default="0" hoisted="true" file="FMX.ListBox.pas" line="113"/>
      <property name="DragMode" visibility="published" read="GetDragMode" write="SetDragMode" type="TDragMode" default="0" hoisted="true" file="FMX.ListBox.pas" line="114"/>
      <property name="EnableDragHighlight" visibility="published" read="FEnableDragHighlight" write="FEnableDragHighlight" type="Boolean" default="1" hoisted="true" file="FMX.ListBox.pas" line="115"/>
      <property name="Selectable" visibility="published" read="FIsSelectable" write="SetSelectable" type="Boolean" default="1" file="FMX.ListBox.pas" line="116"><devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></property>
      <property name="TextSettings" visibility="published" read="GetTextSettings" write="SetTextSettings" type="TTextSettings" hoisted="true" file="FMX.ListBox.pas" line="117"/>
      <property name="StyledSettings" visibility="published" read="GetStyledSettings" write="SetStyledSettings" stored="StyledSettingsStored" type="TStyledSettings" hoisted="true" file="FMX.ListBox.pas" line="118"/>
      <property name="Locked" visibility="published" read="FLocked" write="SetLocked" type="Boolean" default="0" hoisted="true" file="FMX.ListBox.pas" line="119"/>
      <property name="Height" visibility="published" read="GetHeight" write="SetHeight" stored="False" type="Single" hoisted="true" file="FMX.ListBox.pas" line="120"/>
      <property name="HelpContext" visibility="published" read="FHelpContext" write="SetHelpContext" stored="IsHelpContextStored" type="THelpContext" default="0" hoisted="true" file="FMX.ListBox.pas" line="121"/>
      <property name="HelpKeyword" visibility="published" read="FHelpKeyword" write="SetHelpKeyword" stored="IsHelpContextStored" type="string" default="0" hoisted="true" file="FMX.ListBox.pas" line="122"/>
      <property name="HelpType" visibility="published" read="FHelpType" write="FHelpType" type="THelpType" default="1" hoisted="true" file="FMX.ListBox.pas" line="123"/>
      <property name="HitTest" visibility="published" read="FHitTest" write="SetHitTest" type="Boolean" default="0" hoisted="true" file="FMX.ListBox.pas" line="124"/>
      <property name="IsChecked" visibility="published" read="FIsChecked" write="SetIsChecked" type="Boolean" default="0" file="FMX.ListBox.pas" line="125"><devnotes><summary>
Specifies whether the check box associated with the item is checked.
</summary></devnotes></property>
      <property name="IsSelected" visibility="published" read="FIsSelected" write="SetIsSelected" type="Boolean" default="0" file="FMX.ListBox.pas" line="126"><devnotes><summary>
Specifies whether the item is selected.
If IsSelected is True, the item appears as selected inside its parent component.
</summary></devnotes></property>
      <property name="ItemData" visibility="published" read="FItemData" write="SetItemData" type="TListBoxItemData" file="FMX.ListBox.pas" line="127"><devnotes><summary>
Specifies various data that can be attached to a TListBoxItem in order to be shown in the list box.
Use the ItemData property in order to attach various data to a list box item. This data can then be displayed in the list box.

ItemData has four sub-properties:

Accessory - lets you add to the selected list box item one of the following items:
Checkmark icon 
Detail icon 
More icon 
No icon (this is the default)
Bitmap - lets you add a bitmap image to your item.
Detail - lets you add an additional text that describes your list box item.
Text - allows you to change the text displayed on your list box item.

In the picture above, two list box items are present in the list:

The first one has a bitmap image, additional text description and no accessory icon.
The second one has a bitmap image, additional text description and the Detail accessory icon.</summary></devnotes></property>
      <property name="ImageIndex" visibility="published" read="GetImageIndex" write="SetImageIndex" stored="ImageIndexStored" type="TImageIndex" file="FMX.ListBox.pas" line="131">
        <devnotes><summary>
Defines the zero-based index enumerating images in the Images list of images.
If you use a non-existing ImageIndex value to access an image in the Images list, then no image is retrieved and no exception is raised. The usual default value is -1. Call ImagesChanged when ImageIndex is changed.
</summary></devnotes>
      </property>
      <property name="Padding" visibility="published" read="GetPadding" write="SetPadding" type="TBounds" hoisted="true" file="FMX.ListBox.pas" line="132"/>
      <property name="Opacity" visibility="published" read="FOpacity" write="SetOpacity" stored="IsOpacityStored" type="Single" hoisted="true" file="FMX.ListBox.pas" line="133"/>
      <property name="Margins" visibility="published" read="GetMargins" write="SetMargins" type="TBounds" hoisted="true" file="FMX.ListBox.pas" line="134"/>
      <property name="PopupMenu" visibility="published" read="FPopupMenu" write="SetPopupMenu" stored="IsPopupMenuStored" type="TCustomPopupMenu" hoisted="true" file="FMX.ListBox.pas" line="135"/>
      <property name="Position" visibility="published" read="FPosition" write="SetPosition" stored="IsPositionStored" type="TPosition" hoisted="true" file="FMX.ListBox.pas" line="136"/>
      <property name="Scale" visibility="published" read="GetScale" write="SetScale" type="TPosition" hoisted="true" file="FMX.ListBox.pas" line="137"/>
      <property name="Size" visibility="published" read="FSize" write="SetSize" stored="IsSizeStored" type="TControlSize" hoisted="true" file="FMX.ListBox.pas" line="138"/>
      <property name="StyleLookup" visibility="published" read="FStyleLookup" write="SetStyleLookup" type="string" default="0" hoisted="true" file="FMX.ListBox.pas" line="139"/>
      <property name="TabOrder" visibility="published" read="GetTabOrder" write="SetTabOrder" type="TTabOrder" default="-1" hoisted="true" file="FMX.ListBox.pas" line="140"/>
      <property name="TabStop" visibility="published" read="GetTabStop" write="SetTabStop" type="Boolean" default="1" hoisted="true" file="FMX.ListBox.pas" line="141"/>
      <property name="Text" visibility="published" read="GetText" write="SetText" stored="TextStored" type="string" default="0" hoisted="true" file="FMX.ListBox.pas" line="142"/>
      <property name="Width" visibility="published" read="GetWidth" write="SetWidth" stored="False" type="Single" hoisted="true" file="FMX.ListBox.pas" line="143"/>
      <property name="Visible" visibility="published" read="FVisible" write="SetVisible" stored="VisibleStored" type="Boolean" default="1" hoisted="true" file="FMX.ListBox.pas" line="144"/>
      <property name="ParentShowHint" visibility="published" read="FParentShowHint" write="SetParentShowHint" type="Boolean" default="1" hoisted="true" file="FMX.ListBox.pas" line="145"/>
      <event name="OnApplyStyleLookup" visibility="published" read="FOnApplyStyleLookup" write="FOnApplyStyleLookup" type="TNotifyEvent" hoisted="true" file="FMX.ListBox.pas" line="147"/>
      <event name="OnDragEnter" visibility="published" read="FOnDragEnter" write="FOnDragEnter" type="TDragEnterEvent" hoisted="true" file="FMX.ListBox.pas" line="149"/>
      <event name="OnDragLeave" visibility="published" read="FOnDragLeave" write="FOnDragLeave" type="TNotifyEvent" hoisted="true" file="FMX.ListBox.pas" line="150"/>
      <event name="OnDragOver" visibility="published" read="FOnDragOver" write="FOnDragOver" type="TDragOverEvent" hoisted="true" file="FMX.ListBox.pas" line="151"/>
      <event name="OnDragDrop" visibility="published" read="FOnDragDrop" write="FOnDragDrop" type="TDragDropEvent" hoisted="true" file="FMX.ListBox.pas" line="152"/>
      <event name="OnDragEnd" visibility="published" read="FOnDragEnd" write="FOnDragEnd" type="TNotifyEvent" hoisted="true" file="FMX.ListBox.pas" line="153"/>
      <event name="OnMouseDown" visibility="published" read="FOnMouseDown" write="FOnMouseDown" type="TMouseEvent" hoisted="true" file="FMX.ListBox.pas" line="155"/>
      <event name="OnMouseMove" visibility="published" read="FOnMouseMove" write="FOnMouseMove" type="TMouseMoveEvent" hoisted="true" file="FMX.ListBox.pas" line="156"/>
      <event name="OnMouseUp" visibility="published" read="FOnMouseUp" write="FOnMouseUp" type="TMouseEvent" hoisted="true" file="FMX.ListBox.pas" line="157"/>
      <event name="OnMouseWheel" visibility="published" read="FOnMouseWheel" write="FOnMouseWheel" type="TMouseWheelEvent" hoisted="true" file="FMX.ListBox.pas" line="158"/>
      <event name="OnMouseEnter" visibility="published" read="FOnMouseEnter" write="FOnMouseEnter" type="TNotifyEvent" hoisted="true" file="FMX.ListBox.pas" line="159"/>
      <event name="OnMouseLeave" visibility="published" read="FOnMouseLeave" write="FOnMouseLeave" type="TNotifyEvent" hoisted="true" file="FMX.ListBox.pas" line="160"/>
      <event name="OnClick" visibility="published" read="FOnClick" write="SetOnClick" stored="OnClickStored" type="TNotifyEvent" hoisted="true" file="FMX.ListBox.pas" line="161"/>
      <event name="OnPainting" visibility="published" read="FOnPainting" write="FOnPainting" type="TOnPaintEvent" hoisted="true" file="FMX.ListBox.pas" line="162"/>
      <event name="OnPaint" visibility="published" read="FOnPaint" write="FOnPaint" type="TOnPaintEvent" hoisted="true" file="FMX.ListBox.pas" line="163"/>
      <event name="OnResize" visibility="published" read="FOnResize" write="FOnResize" type="TNotifyEvent" hoisted="true" file="FMX.ListBox.pas" line="164"/>
      <event name="OnResized" visibility="published" read="FOnResized" write="FOnResized" type="TNotifyEvent" hoisted="true" file="FMX.ListBox.pas" line="165"/>
    </members>
  <devnotes><summary>
A TListBoxItem is an item that is used in list box components.
The items in list boxes and combo boxes are of type TListBoxItem. To add an item to a list box or combo box, double-click the component or right-click the component and choose Add Item.
</summary></devnotes></class>
  <class name="TListBoxItemData" file="FMX.ListBox.pas" line="170">
    
    <members>
      <enum name="TAccessory" visibility="public" alias="FMX.ListBox.TAccessory" file="FMX.ListBox.pas" line="172">
        <element value="0" name="aNone" file="FMX.ListBox.pas" line="172"/>
        <element value="1" name="aMore" file="FMX.ListBox.pas" line="172"/>
        <element value="2" name="aDetail" file="FMX.ListBox.pas" line="172"/>
        <element value="3" name="aCheckmark" file="FMX.ListBox.pas" line="172"/>
      </enum>
      <const name="StyleSelectorMore" visibility="class private" type="string" file="FMX.ListBox.pas" line="186">
        <value>
          accessorymore.Visible
        </value>
      </const>
      <const name="StyleSelectorDetail" visibility="class private" type="string">
        <value>
          accessorydetail.Visible
        </value>
      </const>
      <const name="StyleSelectorCheckmark" visibility="class private" type="string">
        <value>
          accessorycheckmark.Visible
        </value>
      </const>
      <field name="FItem" type="TListBoxItem" visibility="private" size="4" offset="4" file="FMX.ListBox.pas" line="179">
        <attributes>
          <attribute name="TObject"/>
        </attributes>
      </field>
      <field name="FAccessory" type="TListBoxItemData.TAccessory" visibility="private" size="1" offset="8" file="FMX.ListBox.pas" line="180"/>
      <procedure name="SetText" visibility="private" file="FMX.ListBox.pas" line="181">
        <parameters>
          <parameter name="Text" type="string" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="GetText" visibility="private" file="FMX.ListBox.pas" line="182">
        <parameters>
          <retval type="string"/>
        </parameters>
      </function>
      <procedure name="SetDetail" visibility="private" file="FMX.ListBox.pas" line="183">
        <parameters>
          <parameter name="Detail" type="string" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="GetDetail" visibility="private" file="FMX.ListBox.pas" line="184">
        <parameters>
          <retval type="string"/>
        </parameters>
      </function>
      <procedure name="SetBitmap" visibility="private" file="FMX.ListBox.pas" line="185">
        <parameters>
          <parameter name="Bitmap" type="TBitmap" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="GetBitmap" visibility="private" file="FMX.ListBox.pas" line="186">
        <parameters>
          <retval type="TBitmap"/>
        </parameters>
      </function>
      <function name="GetAccessory" visibility="private" file="FMX.ListBox.pas" line="187">
        <parameters>
          <retval type="TListBoxItemData.TAccessory"/>
        </parameters>
      </function>
      <procedure name="SetAccessory" visibility="private" file="FMX.ListBox.pas" line="188">
        <parameters>
          <parameter name="Accessory" type="TListBoxItemData.TAccessory" paramflags="const"/>
        </parameters>
      </procedure>
      <constructor name="Create" visibility="public" file="FMX.ListBox.pas" line="190">
        <parameters>
          <parameter name="HostItem" type="TListBoxItem" paramflags="const"/>
        </parameters>
      </constructor>
      <destructor name="Destroy" visibility="public" file="FMX.ListBox.pas" line="191">
        <parameters>
        </parameters>
      </destructor>
      <procedure name="Assign" visibility="public" procflags="override" file="FMX.ListBox.pas" line="192">
        <parameters>
          <parameter name="Source" type="TPersistent"/>
        </parameters>
      </procedure>
      <procedure name="Disappear" visibility="public" file="FMX.ListBox.pas" line="193">
      </procedure>
      <property name="Text" visibility="published" read="GetText" write="SetText" stored="False" type="string" default="0" file="FMX.ListBox.pas" line="195"/>
      <property name="Detail" visibility="published" read="GetDetail" write="SetDetail" type="string" default="0" file="FMX.ListBox.pas" line="196"/>
      <property name="Accessory" visibility="published" read="GetAccessory" write="SetAccessory" type="TListBoxItemData.TAccessory" default="0" file="FMX.ListBox.pas" line="197"/>
      <property name="Bitmap" visibility="published" read="GetBitmap" write="SetBitmap" type="TBitmap" file="FMX.ListBox.pas" line="198"/>
    </members>
  </class>
  <enum name="TListStyle" file="FMX.ListBox.pas" line="203">
    <element value="0" name="Vertical" file="FMX.ListBox.pas" line="203"/>
    <element value="1" name="Horizontal" file="FMX.ListBox.pas" line="203"/>
  </enum>
  <enum name="TListGroupingKind" file="FMX.ListBox.pas" line="205">
    <element value="0" name="Plain" file="FMX.ListBox.pas" line="205"/>
    <element value="1" name="Grouped" file="FMX.ListBox.pas" line="205"/>
  </enum>
  <type name="TOnCompareListBoxItemEvent" file="FMX.ListBox.pas" line="207" procflags="closure">
  </type>
  <type name="TOnListBoxDragChange" file="FMX.ListBox.pas" line="208" procflags="closure">
  </type>
  <class name="TListBoxItemStyleDefaults" file="FMX.ListBox.pas" line="210">
    
    <members>
      <field name="FItemStyle" type="string" visibility="class private" size="4" offset="4" file="FMX.ListBox.pas" line="212"/>
      <field name="FHeaderStyle" type="string" visibility="class private" size="4" offset="8" file="FMX.ListBox.pas" line="213"/>
      <field name="FFooterStyle" type="string" visibility="class private" size="4" offset="12" file="FMX.ListBox.pas" line="214"/>
      <field name="FListBox" type="TCustomListBox" visibility="class private" size="4" offset="16" file="FMX.ListBox.pas" line="215">
        <attributes>
          <attribute name="TObject"/>
        </attributes>
      </field>
      <function name="GetItemStyle" visibility="private" file="FMX.ListBox.pas" line="217">
        <parameters>
          <retval type="string"/>
        </parameters>
      </function>
      <procedure name="SetItemStyle" visibility="private" file="FMX.ListBox.pas" line="218">
        <parameters>
          <parameter name="Value" type="string" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="GetGroupHeaderStyle" visibility="private" file="FMX.ListBox.pas" line="219">
        <parameters>
          <retval type="string"/>
        </parameters>
      </function>
      <procedure name="SetGroupHeaderStyle" visibility="private" file="FMX.ListBox.pas" line="220">
        <parameters>
          <parameter name="Value" type="string" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="GetGroupFooterStyle" visibility="private" file="FMX.ListBox.pas" line="221">
        <parameters>
          <retval type="string"/>
        </parameters>
      </function>
      <procedure name="SetGroupFooterStyle" visibility="private" file="FMX.ListBox.pas" line="222">
        <parameters>
          <parameter name="Value" type="string" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="RefreshListBox" visibility="private" file="FMX.ListBox.pas" line="223">
      </procedure>
      <constructor name="Create" visibility="private" file="FMX.ListBox.pas" line="224">
        <parameters>
          <parameter name="ListBox" type="TCustomListBox" paramflags="const"/>
        </parameters>
      </constructor>
      <procedure name="Assign" visibility="public" procflags="override" file="FMX.ListBox.pas" line="226">
        <parameters>
          <parameter name="Source" type="TPersistent"/>
        </parameters>
      </procedure>
      <property name="ListBox" visibility="public" read="FListBox" type="TCustomListBox" file="FMX.ListBox.pas" line="227"/>
      <property name="ItemStyle" visibility="published" read="GetItemStyle" write="SetItemStyle" type="string" file="FMX.ListBox.pas" line="229"/>
      <property name="GroupHeaderStyle" visibility="published" read="GetGroupHeaderStyle" write="SetGroupHeaderStyle" type="string" file="FMX.ListBox.pas" line="230"/>
      <property name="GroupFooterStyle" visibility="published" read="GetGroupFooterStyle" write="SetGroupFooterStyle" type="string" file="FMX.ListBox.pas" line="231"/>
    </members>
  </class>
  <enum name="TMultiSelectStyle" file="FMX.ListBox.pas" line="234">
    <element value="0" name="None" file="FMX.ListBox.pas" line="234"/>
    <element value="1" name="Default" file="FMX.ListBox.pas" line="234"/>
    <element value="2" name="Extended" file="FMX.ListBox.pas" line="234"/>
  </enum>
  <class name="TCustomListBox" file="FMX.ListBox.pas" line="236">
    
    <interfaces>
      <implements name="IGlyph"/>
      <implements name="ISearchResponder"/>
      <implements name="{FMX.Controls}IInflatableContent&lt;FMX.ListBox.TListBoxItem&gt;"/>
      <implements name="IItemsContainer"/>
    </interfaces>
    <members>
      <const name="UnfocusedSelectionOpacity" visibility="private" type="Comp" file="FMX.ListBox.pas" line="238">
        <value>
          0.7
        </value>
      </const>
      <const name="ExtendedSelectionOpacity" visibility="private" type="Comp" file="FMX.ListBox.pas" line="239">
        <value>
          0.7
        </value>
      </const>
      <enum name="TStringsChangeOp" visibility="public" alias="FMX.ListBox.TStringsChangeOp" file="FMX.ListBox.pas" line="241">
        <element value="0" name="Added" file="FMX.ListBox.pas" line="241"/>
        <element value="1" name="Deleted" file="FMX.ListBox.pas" line="241"/>
        <element value="2" name="Clear" file="FMX.ListBox.pas" line="241"/>
      </enum>
      <type name="TStringsChangedEvent" file="FMX.ListBox.pas" line="242" procflags="closure">
      </type>
      <type name="TItemClickEvent" file="FMX.ListBox.pas" line="243" procflags="closure">
      </type>
      <class name="TListBoxStrings" visibility="private" alias="FMX.ListBox.TListBoxStrings" file="FMX.ListBox.pas" line="245">
        
        <members>
          <field name="FListBox" type="TCustomListBox" visibility="private" size="4" offset="32" file="FMX.ListBox.pas" line="247">
            <attributes>
              <attribute name="TObject"/>
            </attributes>
          </field>
          <procedure name="ReadData" visibility="private" file="FMX.ListBox.pas" line="248">
            <parameters>
              <parameter name="Reader" type="TReader"/>
            </parameters>
          </procedure>
          <procedure name="WriteData" visibility="private" file="FMX.ListBox.pas" line="249">
            <parameters>
              <parameter name="Writer" type="TWriter"/>
            </parameters>
          </procedure>
          <procedure name="Put" visibility="protected" procflags="override" file="FMX.ListBox.pas" line="251">
            <parameters>
              <parameter name="Index" type="Integer"/>
              <parameter name="S" type="string" paramflags="const"/>
            </parameters>
          </procedure>
          <function name="Get" visibility="protected" procflags="override" file="FMX.ListBox.pas" line="252">
            <parameters>
              <parameter name="Index" type="Integer"/>
              <retval type="string"/>
            </parameters>
          </function>
          <function name="GetCount" visibility="protected" procflags="override" file="FMX.ListBox.pas" line="253">
            <parameters>
              <retval type="Integer"/>
            </parameters>
          </function>
          <function name="GetObject" visibility="protected" procflags="override" file="FMX.ListBox.pas" line="254">
            <parameters>
              <parameter name="Index" type="Integer"/>
              <retval type="TObject"/>
            </parameters>
          </function>
          <procedure name="PutObject" visibility="protected" procflags="override" file="FMX.ListBox.pas" line="255">
            <parameters>
              <parameter name="Index" type="Integer"/>
              <parameter name="AObject" type="TObject"/>
            </parameters>
          </procedure>
          <procedure name="SetUpdateState" visibility="protected" procflags="override" file="FMX.ListBox.pas" line="256">
            <parameters>
              <parameter name="Updating" type="Boolean"/>
            </parameters>
          </procedure>
          <procedure name="DefineProperties" visibility="protected" procflags="override" file="FMX.ListBox.pas" line="257">
            <parameters>
              <parameter name="Filer" type="TFiler"/>
            </parameters>
          </procedure>
          <function name="Add" visibility="public" procflags="override" file="FMX.ListBox.pas" line="259">
            <parameters>
              <parameter name="S" type="string" paramflags="const"/>
              <retval type="Integer"/>
            </parameters>
          </function>
          <procedure name="Clear" visibility="public" procflags="override" file="FMX.ListBox.pas" line="260">
          </procedure>
          <procedure name="Delete" visibility="public" procflags="override" file="FMX.ListBox.pas" line="261">
            <parameters>
              <parameter name="Index" type="Integer"/>
            </parameters>
          </procedure>
          <procedure name="Exchange" visibility="public" procflags="override" file="FMX.ListBox.pas" line="262">
            <parameters>
              <parameter name="Index1" type="Integer"/>
              <parameter name="Index2" type="Integer"/>
            </parameters>
          </procedure>
          <function name="IndexOf" visibility="public" procflags="override" file="FMX.ListBox.pas" line="263">
            <parameters>
              <parameter name="S" type="string" paramflags="const"/>
              <retval type="Integer"/>
            </parameters>
          </function>
          <procedure name="Insert" visibility="public" procflags="override" file="FMX.ListBox.pas" line="264">
            <parameters>
              <parameter name="Index" type="Integer"/>
              <parameter name="S" type="string" paramflags="const"/>
            </parameters>
          </procedure>
        </members>
      </class>
      <struct name="TGroup" visibility="private" alias="FMX.ListBox.TGroup" size="8" file="FMX.ListBox.pas" line="267">
        <field name="First" type="Integer" visibility="public" size="4" offset="0" file="FMX.ListBox.pas" line="268"/>
        <field name="Length" type="Integer" visibility="public" size="4" offset="4" file="FMX.ListBox.pas" line="269"/>
        <constructor name="Create" visibility="public" file="FMX.ListBox.pas" line="270">
          <parameters>
            <parameter name="AFirst" type="Integer" paramflags="const"/>
            <parameter name="ALength" type="Integer" paramflags="const"/>
          </parameters>
        </constructor>
      </struct>
      <class name="TGroups" visibility="private" alias="FMX.ListBox.TGroups" file="FMX.ListBox.pas" line="273">
        
        <members>
          <function name="FindGroup" visibility="public" file="FMX.ListBox.pas" line="275">
            <parameters>
              <parameter name="Index" type="Integer" paramflags="const"/>
              <retval type="Integer"/>
            </parameters>
          </function>
        </members>
      </class>
      <class name="TStyledSelection" visibility="private" alias="FMX.ListBox.TStyledSelection" file="FMX.ListBox.pas" line="282">
        
        <members>
          <field name="FListBox" type="TCustomListBox" visibility="private" size="4" offset="4" file="FMX.ListBox.pas" line="284"/>
          <field name="FUnfocusedObjectsPool" type="TControlList" visibility="private" size="4" offset="8" file="FMX.ListBox.pas" line="285"/>
          <field name="FFocusedObjectsPool" type="TControlList" visibility="private" size="4" offset="12" file="FMX.ListBox.pas" line="286"/>
          <field name="FCurrentObjects" type="TControlList" visibility="private" size="4" offset="16" file="FMX.ListBox.pas" line="287"/>
          <field name="FIsFocused" type="Boolean" visibility="private" size="1" offset="20" file="FMX.ListBox.pas" line="288"/>
          <field name="FUnfocusedSelection" type="TControl" visibility="private" size="4" offset="24" file="FMX.ListBox.pas" line="290"/>
          <field name="FFocusedSelection" type="TControl" visibility="private" size="4" offset="28" file="FMX.ListBox.pas" line="291"/>
          <procedure name="SetIsFocused" visibility="private" file="FMX.ListBox.pas" line="292">
            <parameters>
              <parameter name="Value" type="Boolean" paramflags="const"/>
            </parameters>
          </procedure>
          <function name="CreateSelectionControl" visibility="private" file="FMX.ListBox.pas" line="294">
            <parameters>
              <parameter name="AIsFocused" type="Boolean" paramflags="const"/>
              <retval type="TControl"/>
            </parameters>
          </function>
          <constructor name="Create" visibility="public" file="FMX.ListBox.pas" line="296">
            <parameters>
              <parameter name="AListBox" type="TCustomListBox" paramflags="const"/>
            </parameters>
          </constructor>
          <destructor name="Destroy" visibility="public" file="FMX.ListBox.pas" line="297">
            <parameters>
            </parameters>
          </destructor>
          <procedure name="Realign" visibility="public" file="FMX.ListBox.pas" line="299">
            <devnotes>
               <summary>Aligns the style selection controls according to the passed areas.</summary>
            </devnotes>
            <parameters>
              <parameter name="ASelectionRects" type="TList&lt;System.Types.TRectF&gt;" paramflags="const"/>
            </parameters>
          </procedure>
          <procedure name="ClearPools" visibility="public" file="FMX.ListBox.pas" line="301">
            <devnotes>
               <summary>Clear all style selection controls for focused and unfocused states.</summary>
            </devnotes>
          </procedure>
          <property name="UnfocusedSelection" visibility="public" read="FUnfocusedSelection" write="FUnfocusedSelection" type="TControl" file="FMX.ListBox.pas" line="304">
            <devnotes>
               <summary>The reference on style object that is used to create controls for unfocused selection.</summary>
            </devnotes>
          </property>
          <property name="FocusedSelection" visibility="public" read="FFocusedSelection" write="FFocusedSelection" type="TControl" file="FMX.ListBox.pas" line="306">
            <devnotes>
               <summary>The reference on style object that is used to create controls for focused selection.</summary>
            </devnotes>
          </property>
          <property name="IsFocused" visibility="public" read="FIsFocused" write="TStyledSelection.SetIsFocused" type="Boolean" file="FMX.ListBox.pas" line="307"/>
        </members>
      </class>
      <field name="FBeingPainted" type="Boolean" visibility="class private" size="1" offset="1104" file="FMX.ListBox.pas" line="311"/>
      <field name="FRealignRequested" type="Boolean" visibility="class private" size="1" offset="1105" file="FMX.ListBox.pas" line="312"/>
      <field name="FUpdateGroupsRequested" type="Boolean" visibility="class private" size="1" offset="1106" file="FMX.ListBox.pas" line="313"/>
      <field name="FToInflate" type="TList&lt;FMX.ListBox.TListBoxItem&gt;" visibility="class private" size="4" offset="1108" file="FMX.ListBox.pas" line="314"/>
      <field name="FInflater" type="TContentInflater&lt;FMX.ListBox.TListBoxItem&gt;" visibility="class private" size="4" offset="1112" file="FMX.ListBox.pas" line="315"/>
      <field name="FStringsChanged" type="TCustomListBox.TStringsChangedEvent" visibility="class private" size="8" offset="1120" file="FMX.ListBox.pas" line="316"/>
      <field name="FOnItemClick" type="TCustomListBox.TItemClickEvent" visibility="class private" size="8" offset="1128" file="FMX.ListBox.pas" line="317"/>
      <field name="FItemDown" type="TListBoxItem" visibility="class private" size="4" offset="1136" file="FMX.ListBox.pas" line="318">
        <attributes>
          <attribute name="TObject"/>
        </attributes>
      </field>
      <field name="FOnChange" type="TNotifyEvent" visibility="class private" size="8" offset="1144" file="FMX.ListBox.pas" line="319"/>
      <field name="FShowCheckboxes" type="Boolean" visibility="class private" size="1" offset="1152" file="FMX.ListBox.pas" line="320"/>
      <field name="FOnChangeCheck" type="TNotifyEvent" visibility="class private" size="8" offset="1160" file="FMX.ListBox.pas" line="321"/>
      <field name="FSorted" type="Boolean" visibility="class private" size="1" offset="1168" file="FMX.ListBox.pas" line="322"/>
      <field name="FOnCompare" type="TOnCompareListBoxItemEvent" visibility="class private" size="8" offset="1176" file="FMX.ListBox.pas" line="323"/>
      <field name="FAlternatingRowBackground" type="Boolean" visibility="class private" size="1" offset="1184" file="FMX.ListBox.pas" line="324"/>
      <field name="FAllowDrag" type="Boolean" visibility="class private" size="1" offset="1185" file="FMX.ListBox.pas" line="325"/>
      <field name="FOnDragChange" type="TOnListBoxDragChange" visibility="class private" size="8" offset="1192" file="FMX.ListBox.pas" line="326"/>
      <field name="FNoItemsContent" type="TContent" visibility="class private" size="4" offset="1200" file="FMX.ListBox.pas" line="327"/>
      <field name="FHeaderCompartment" type="TContent" visibility="class private" size="4" offset="1204" file="FMX.ListBox.pas" line="328"/>
      <field name="FFooterCompartment" type="TContent" visibility="class private" size="4" offset="1208" file="FMX.ListBox.pas" line="329"/>
      <field name="FContentOverlay" type="TContent" visibility="class private" size="4" offset="1212" file="FMX.ListBox.pas" line="330"/>
      <field name="FDefaultStyles" type="TListBoxItemStyleDefaults" visibility="class private" size="4" offset="1216" file="FMX.ListBox.pas" line="331"/>
      <field name="FGroups" type="TCustomListBox.TGroups" visibility="class private" size="4" offset="1220" file="FMX.ListBox.pas" line="332"/>
      <field name="FGroupingKind" type="TListGroupingKind" visibility="class private" size="1" offset="1224" file="FMX.ListBox.pas" line="333"/>
      <field name="FClickEnable" type="Boolean" visibility="class private" size="1" offset="1225" file="FMX.ListBox.pas" line="334"/>
      <field name="FSelection" type="TControl" visibility="class private" size="4" offset="1228" file="FMX.ListBox.pas" line="335"/>
      <field name="FExtendedSelection" type="TControl" visibility="class private" size="4" offset="1232" file="FMX.ListBox.pas" line="336"/>
      <field name="FFocusedSelection" type="TControl" visibility="class private" size="4" offset="1236" file="FMX.ListBox.pas" line="337"/>
      <field name="FSelector" type="TListBoxSelector" visibility="class private" size="4" offset="1240" file="FMX.ListBox.pas" line="338"/>
      <field name="FImageLink" type="TGlyphImageLink" visibility="class private" size="4" offset="1244" file="FMX.ListBox.pas" line="339"/>
      <field name="FImages" type="TCustomImageList" visibility="class private" size="4" offset="1248" file="FMX.ListBox.pas" line="340">
        <attributes>
          <attribute name="TObject"/>
        </attributes>
      </field>
      <function name="GetInflatableItems" visibility="class private" file="FMX.ListBox.pas" line="341">
        <parameters>
          <retval type="TList&lt;FMX.ListBox.TListBoxItem&gt;"/>
        </parameters>
      </function>
      <procedure name="CalcSelectionRects" visibility="class private" file="FMX.ListBox.pas" line="342">
        <parameters>
          <parameter name="SelRects" type="TList&lt;System.Types.TRectF&gt;" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="PerformInternalDrag" visibility="class private" file="FMX.ListBox.pas" line="343">
      </procedure>
      <function name="GetImages" visibility="class private" file="FMX.ListBox.pas" line="344">
        <parameters>
          <retval type="TCustomImageList">
            <devnotes>
               <summary> List of images. Base class that used in fire monkey without published properties </summary>
            </devnotes>
          </retval>
        </parameters>
      </function>
      <procedure name="SetImages" visibility="class private" file="FMX.ListBox.pas" line="345">
        <parameters>
          <parameter name="Value" type="TCustomImageList" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="GetImageIndex" visibility="class private" file="FMX.ListBox.pas" line="347">
        <parameters>
          <retval type="TImageIndex"/>
        </parameters>
      </function>
      <procedure name="SetImageIndex" visibility="class private" file="FMX.ListBox.pas" line="348">
        <parameters>
          <parameter name="Value" type="TImageIndex" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="GetImageList" visibility="class private" procflags="inline" file="FMX.ListBox.pas" line="349">
        <parameters>
          <retval type="TBaseImageList"/>
        </parameters>
      </function>
      <procedure name="SetImageList" visibility="class private" file="FMX.ListBox.pas" line="350">
        <parameters>
          <parameter name="Value" type="TBaseImageList" paramflags="const"/>
        </parameters>
      </procedure>
      <field name="FDragItem" type="TListBoxItem" visibility="private" size="4" offset="1252" file="FMX.ListBox.pas" line="354"/>
      <field name="FFirstVisibleItem" type="Integer" visibility="private" size="4" offset="1256" file="FMX.ListBox.pas" line="355"/>
      <field name="FLastVisibleItem" type="Integer" visibility="private" size="4" offset="1260" file="FMX.ListBox.pas" line="355"/>
      <field name="FItems" type="TStrings" visibility="private" size="4" offset="1264" file="FMX.ListBox.pas" line="356"/>
      <field name="FColumns" type="Integer" visibility="private" size="4" offset="1268" file="FMX.ListBox.pas" line="357"/>
      <field name="FItemWidth" type="Single" visibility="private" size="4" offset="1272" file="FMX.ListBox.pas" line="358"/>
      <field name="FItemHeight" type="Single" visibility="private" size="4" offset="1276" file="FMX.ListBox.pas" line="359"/>
      <field name="FListStyle" type="TListStyle" visibility="private" size="1" offset="1280" file="FMX.ListBox.pas" line="360"/>
      <field name="FOddFill" type="TBrush" visibility="private" size="4" offset="1284" file="FMX.ListBox.pas" line="361"/>
      <field name="FContentInsets" type="TRectF" visibility="private" size="16" offset="1288" file="FMX.ListBox.pas" line="362"/>
      <field name="FSelectionObjects" type="TCustomListBox.TStyledSelection" visibility="private" size="4" offset="1304" file="FMX.ListBox.pas" line="363"/>
      <procedure name="IgnoreString" visibility="private" file="FMX.ListBox.pas" line="364">
        <parameters>
          <parameter name="Reader" type="TReader"/>
        </parameters>
      </procedure>
      <procedure name="ReadMultiSelect" visibility="private" file="FMX.ListBox.pas" line="365">
        <parameters>
          <parameter name="Reader" type="TReader"/>
        </parameters>
      </procedure>
      <function name="GetCount" visibility="private" file="FMX.ListBox.pas" line="366">
        <parameters>
          <retval type="Integer"/>
        </parameters>
      </function>
      <function name="GetSelected" visibility="private" file="FMX.ListBox.pas" line="367">
        <parameters>
          <retval type="TListBoxItem"/>
        </parameters>
      </function>
      <procedure name="SetColumns" visibility="private" file="FMX.ListBox.pas" line="368">
        <parameters>
          <parameter name="Value" type="Integer" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetItemHeight" visibility="private" file="FMX.ListBox.pas" line="369">
        <parameters>
          <parameter name="Value" type="Single" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetItemWidth" visibility="private" file="FMX.ListBox.pas" line="370">
        <parameters>
          <parameter name="Value" type="Single" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetListStyle" visibility="private" file="FMX.ListBox.pas" line="371">
        <parameters>
          <parameter name="Value" type="TListStyle" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetShowCheckboxes" visibility="private" file="FMX.ListBox.pas" line="372">
        <parameters>
          <parameter name="Value" type="Boolean" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="GetListItem" visibility="private" file="FMX.ListBox.pas" line="373">
        <parameters>
          <parameter name="Index" type="Integer"/>
          <retval type="TListBoxItem"/>
        </parameters>
      </function>
      <procedure name="SetSorted" visibility="private" file="FMX.ListBox.pas" line="374">
        <parameters>
          <parameter name="Value" type="Boolean" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetAlternatingRowBackground" visibility="private" file="FMX.ListBox.pas" line="375">
        <parameters>
          <parameter name="Value" type="Boolean" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetItems" visibility="private" file="FMX.ListBox.pas" line="376">
        <parameters>
          <parameter name="Value" type="TStrings" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetMultiSelectStyle" visibility="private" file="FMX.ListBox.pas" line="377">
        <parameters>
          <parameter name="Value" type="TMultiSelectStyle" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="GetMultiSelectStyle" visibility="private" file="FMX.ListBox.pas" line="378">
        <parameters>
          <retval type="TMultiSelectStyle"/>
        </parameters>
      </function>
      <procedure name="SetAllowDrag" visibility="private" file="FMX.ListBox.pas" line="379">
        <parameters>
          <parameter name="Value" type="Boolean" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="GetMultiSelect" visibility="private" file="FMX.ListBox.pas" line="380">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <procedure name="SetMultiSelect" visibility="private" file="FMX.ListBox.pas" line="381">
        <parameters>
          <parameter name="Value" type="Boolean" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="GetItem" visibility="private" file="FMX.ListBox.pas" line="384">
        <parameters>
          <parameter name="AIndex" type="Integer" paramflags="const"/>
          <retval type="TFmxObject"/>
        </parameters>
      </function>
      <function name="GetFilterPredicate" visibility="private" file="FMX.ListBox.pas" line="385">
        <parameters>
          <retval type="TPredicate&lt;System.string&gt;"/>
        </parameters>
      </function>
      <procedure name="SetFilterPredicate" visibility="private" file="FMX.ListBox.pas" line="386">
        <parameters>
          <parameter name="Predicate" type="TPredicate&lt;System.string&gt;" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetItemDown" visibility="private" file="FMX.ListBox.pas" line="387">
        <parameters>
          <parameter name="Value" type="TListBoxItem" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="ItemsStored" visibility="private" file="FMX.ListBox.pas" line="388">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <procedure name="DefineProperties" visibility="protected" procflags="override" file="FMX.ListBox.pas" line="390">
        <parameters>
          <parameter name="Filer" type="TFiler"/>
        </parameters>
      <devnotes><summary>






Designates methods for storing an object's unpublished data on a stream such as a form file.
FMX.ListBox.TCustomListBox.DefineProperties inherits from System.Classes.TComponent.DefineProperties. All content below this line refers to System.Classes.TComponent.DefineProperties.
Designates methods for storing an object's unpublished data on a stream such as a form file.
TComponent overrides the DefineProperties method defined in TPersistent to define &quot;fake&quot; Top and Left properties. These are defined so that components that are not controls can be manipulated at design time. However, the Top and Left properties are hidden, that is, they are not published, because only controls appear at run time.
DefineProperties is virtual; descendent classes can override it. When overriding DefineProperties, be aware that the Ancestor property of Filer might be set, and that this property can determine whether or not it is appropriate to write properties.
DefineProperties is called automatically as part of the component streaming system; do not call it directly.
</summary></devnotes></procedure>
      <function name="GetData" visibility="protected" procflags="override" file="FMX.ListBox.pas" line="391">
        <parameters>
          <retval type="TValue">
            <attributes>
              <attribute name="HPPGENAttribute"/>
            </attributes>
          </retval>
        </parameters>
      <devnotes><summary>
Gets the text of the selected item.
GetData returns the text of the item that is selected in the list box or an empty string, if no item is selected.
</summary></devnotes></function>
      <procedure name="SetData" visibility="protected" procflags="override" file="FMX.ListBox.pas" line="392">
        <parameters>
          <parameter name="Value" type="TValue" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Sets the text of the selected item.
If no item is selected, nothing happens.
</summary></devnotes></procedure>
      <function name="CanObserve" visibility="protected" procflags="override" file="FMX.ListBox.pas" line="393">
        <parameters>
          <parameter name="ID" type="Integer" paramflags="const"/>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
For internal use only.
Do not use this member. It is for internal use only.


</summary></devnotes></function>
      <procedure name="DoChangeCheck" visibility="protected" procflags="dynamic" file="FMX.ListBox.pas" line="394">
        <parameters>
          <parameter name="Item" type="TListBoxItem" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Generates an OnChangeCheck event.
DoChangeCheck is executed internally when the check box associated with one of the items in the list changes its state. Check boxes are visible when the ShowCheckboxes property is set to True.
</summary></devnotes></procedure>
      <function name="CompareItems" visibility="protected" procflags="virtual" file="FMX.ListBox.pas" line="395">
        <parameters>
          <parameter name="Item1" type="TListBoxItem" paramflags="const"/>
          <parameter name="Item2" type="TListBoxItem" paramflags="const"/>
          <retval type="Integer"/>
        </parameters>
      <devnotes><summary>
Compares the given items.
CompareItems compares the text of the given TListBoxItem items.
It also generates an OnCompare event.
</summary></devnotes></function>
      <procedure name="DoChange" visibility="protected" procflags="dynamic" file="FMX.ListBox.pas" line="396">
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="SortItems" visibility="protected" procflags="virtual" file="FMX.ListBox.pas" line="397">
      <devnotes><summary>
Sorts the items in the list box.
</summary></devnotes></procedure>
      <procedure name="SetItemIndex" visibility="protected" procflags="virtual" file="FMX.ListBox.pas" line="399">
        <devnotes><summary>
Sets the index of the selected item in the list.
SetItemIndex is the protected setter method for the ItemIndex property.
</summary></devnotes>
        <parameters>
          <parameter name="Value" type="Integer" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="GetItemIndex" visibility="protected" procflags="virtual" file="FMX.ListBox.pas" line="401">
        <devnotes><summary>
Returns the index of the currently selected item.
</summary></devnotes>
        <parameters>
          <retval type="Integer"/>
        </parameters>
      </function>
      <procedure name="MouseDown" visibility="protected" procflags="override" file="FMX.ListBox.pas" line="402">
        <parameters>
          <parameter name="Button" type="TMouseButton"/>
          <parameter name="Shift" type="TShiftState"/>
          <parameter name="X" type="Single"/>
          <parameter name="Y" type="Single"/>
        </parameters>
      <devnotes><summary>
Internally executed while a mouse button is pressed over the surface of this scroll box.
FMX.ListBox.TCustomListBox.MouseDown inherits from FMX.Layouts.TCustomScrollBox.MouseDown. All content below this line refers to FMX.Layouts.TCustomScrollBox.MouseDown.
Internally executed while a mouse button is pressed over the surface of this scroll box.
You can call MouseDown programmatically in applications to simulate a mouse button down event over this scroll box.
The Button parameter specifies the mouse button that has just been pressed (for instance, TMouseButton.mbLeft).
The Shift parameter specifies the keyboard state (for instance the CTRL key pressed at the same time with the mouse click).
The X and Y parameters specify the position of the mouse cursor on the screen.
</summary></devnotes></procedure>
      <procedure name="MouseMove" visibility="protected" procflags="override" file="FMX.ListBox.pas" line="403">
        <parameters>
          <parameter name="Shift" type="TShiftState"/>
          <parameter name="X" type="Single"/>
          <parameter name="Y" type="Single"/>
        </parameters>
      <devnotes><summary>
Internally executed while the mouse is moved over the surface of this scroll box.
FMX.ListBox.TCustomListBox.MouseMove inherits from FMX.Layouts.TCustomScrollBox.MouseMove. All content below this line refers to FMX.Layouts.TCustomScrollBox.MouseMove.
Internally executed while the mouse is moved over the surface of this scroll box.
You can call MouseMove programmatically in applications to simulate a mouse move event over this scroll box.
The Shift parameter specifies the keyboard state (for instance, the CTRL key pressed at the same time with the mouse click).
The X and Y parameters specify the position of the mouse cursor on the screen.
</summary></devnotes></procedure>
      <procedure name="MouseUp" visibility="protected" procflags="override" file="FMX.ListBox.pas" line="404">
        <parameters>
          <parameter name="Button" type="TMouseButton"/>
          <parameter name="Shift" type="TShiftState"/>
          <parameter name="X" type="Single"/>
          <parameter name="Y" type="Single"/>
        </parameters>
      <devnotes><summary>
Internally executed while a mouse button is released over the surface of this scroll box.
FMX.ListBox.TCustomListBox.MouseUp inherits from FMX.Layouts.TCustomScrollBox.MouseUp. All content below this line refers to FMX.Layouts.TCustomScrollBox.MouseUp.
Internally executed while a mouse button is released over the surface of this scroll box.
You can call MouseUp programmatically in applications to simulate a mouse button up event over this scroll box.
The Button parameter specifies the mouse button that has just been released (for instance, TMouseButton.mbLeft).
The Shift parameter specifies the keyboard state (for instance, the CTRL key pressed at the same time with the mouse click).
The X and Y parameters specify the position of the mouse cursor on the screen.
</summary></devnotes></procedure>
      <procedure name="MouseClick" visibility="protected" procflags="override" file="FMX.ListBox.pas" line="405">
        <parameters>
          <parameter name="Button" type="TMouseButton"/>
          <parameter name="Shift" type="TShiftState"/>
          <parameter name="X" type="Single"/>
          <parameter name="Y" type="Single"/>
        </parameters>
      <devnotes><summary>
Calls Click and starts the animation by calling StartTriggerAnimation.
FMX.ListBox.TCustomListBox.MouseClick inherits from FMX.Controls.TControl.MouseClick. All content below this line refers to FMX.Controls.TControl.MouseClick.
Calls Click and starts the animation by calling StartTriggerAnimation.
MouseClick receives the following parameters: 

Button determines which mouse button was previously pressed: left, right, or middle.
Shift indicates which shift keys -- SHIFT, CTRL, ALT, and CMD (only for Mac) -- were down when the pressed mouse button is released.
X and Y are the pixel coordinates of the mouse pointer within the client area of the control.
 See Also
FMX.Controls.TControl.Click
FMX.Controls.TControl.OnClick
FMX.Controls.TControl.OnMouseLeave
FMX.Controls.TControl.OnMouseEnter
FMX.Controls.TControl.OnMouseMove
FMX.Controls.TControl.OnMouseDown
FMX.Controls.TControl.OnMouseWheel
System.Classes.TShiftState
System.UITypes.TMouseButton
FMX.Ani.TAnimator.StartTriggerAnimation

</summary></devnotes></procedure>
      <procedure name="KeyDown" visibility="protected" procflags="override" file="FMX.ListBox.pas" line="406">
        <parameters>
          <parameter name="Key" type="Word" paramflags="var"/>
          <parameter name="KeyChar" type="Char" paramflags="var"/>
          <parameter name="Shift" type="TShiftState"/>
        </parameters>
      <devnotes><summary>
Provides a response when a key is pressed down while the control has the keyboard focus. 
FMX.ListBox.TCustomListBox.KeyDown inherits from FMX.Controls.TControl.KeyDown. All content below this line refers to FMX.Controls.TControl.KeyDown.
Provides a response when a key is pressed down while the control has the keyboard focus. 
If the pressed key is the Applications key (Key = vkApps), then KeyDown shows the context menu of the control. Otherwise, KeyDown calls the OnKeyDown event handler if one is assigned. 
TCommonCustomForm and descendant of TControl classes--like TCustomGrid--call KeyDown from their methods handling key pressing. They decode the message parameters into the key code, character code, and shift state. They pass them into the called KeyDown method in the Key, KeyChar, and Shift parameters, respectively:  



Parameters

Descriptions



Key



Is the scan code of the pressed keyboard key or $0.
If a pressed key combination can be a shortcut, then Key &lt;&gt; 0 is a virtual key and KeyChar = #0. 
Physical scan codes of the same key can differ under different platforms (Windows or iOS).
Platform-specific units (for example FMX.Platform.Mac.pas) should translate native scan codes to corresponding Windows codes defined in the UITypes unit.  For example, 

vkReturn = $0D;  {  13 } corresponds to the RETURN keyboard key.
vkF2     = $71;  { 113 } corresponds to the F2 keyboard key.



KeyChar



Is the pressed character (digit) or #0.
If a pressed key combination can be treated as a printable character or digit, then Key = 0 and KeyChar contains a pressed symbol according to the current keyboard's input language, keyboard mode (CAPS LOCK and NUM LOCK keys), keyboard Shift state, and IME state. Editors can use this symbol to add into a text being edited. 




Shift



Indicates which shift keys--SHIFT, CTRL, ALT, and CMD (only for Mac)--were down when the specified key was pressed with the control in focus.


If the control has successfully processed the pressed key combination and no additional processing is required, then KeyDown assigns Key = 0 and KeyChar = #0.  
Override the protected KeyDown method to provide other responses when a key is down while the control has keyboard input focus.
See TCommonCustomForm.KeyDown for more information about parameters.
</summary></devnotes></procedure>
      <procedure name="DragOver" visibility="protected" procflags="override" file="FMX.ListBox.pas" line="407">
        <parameters>
          <parameter name="Data" type="TDragObject" paramflags="const"/>
          <parameter name="Point" type="TPointF" paramflags="const"/>
          <parameter name="Operation" type="TDragOperation" paramflags="var"/>
        </parameters>
      <devnotes><summary>
OnDragOver event dispatcher. 
FMX.ListBox.TCustomListBox.DragOver inherits from FMX.Controls.TControl.DragOver. All content below this line refers to FMX.Controls.TControl.DragOver.
OnDragOver event dispatcher. 
Data specifies the dragged object.
Point specifies the current point of the  mouse cursor within the client area of the control.
Operation is the operation parameter (None, Move, Copy, Link) that specifies the action to perform when an item is dragged over the object.  

None is the default. No action takes place, it does not display any name.
Move - the word Move is displayed once an item is dragged over the object.
Copy - the word Copy is displayed once an item is dragged over the object.
Link - the word Link is displayed once an item is dragged over the object.
A control calls DragOver when a dragged object is over the control area.
Override the protected DragOver method to provide other responses when a dragged object is over the control area.
</summary></devnotes></procedure>
      <procedure name="DragDrop" visibility="protected" procflags="override" file="FMX.ListBox.pas" line="408">
        <parameters>
          <parameter name="Data" type="TDragObject" paramflags="const"/>
          <parameter name="Point" type="TPointF" paramflags="const"/>
        </parameters>
      <devnotes><summary>
OnDragDrop event dispatcher. 
FMX.ListBox.TCustomListBox.DragDrop inherits from FMX.Controls.TControl.DragDrop. All content below this line refers to FMX.Controls.TControl.DragDrop.
OnDragDrop event dispatcher. 
Data specifies the dragged object.
Point specifies the current point of the mouse cursor, within the client area of the control.
A control calls DragDrop when a dragged object is dropped on the control area.
Override the protected DragDrop method to provide other responses when a dragged object is dropped on the control area.
</summary></devnotes></procedure>
      <function name="GetDefaultSize" visibility="protected" procflags="override" file="FMX.ListBox.pas" line="409">
        <parameters>
          <retval type="TSizeF"/>
        </parameters>
      <devnotes><summary>
Getter of DefaultSize.
FMX.ListBox.TCustomListBox.GetDefaultSize inherits from FMX.Controls.TControl.GetDefaultSize. All content below this line refers to FMX.Controls.TControl.GetDefaultSize.
Getter of DefaultSize.


</summary></devnotes></function>
      <procedure name="ApplyStyle" visibility="protected" procflags="override" file="FMX.ListBox.pas" line="410">
      <devnotes><summary>


Customizes styles in complex objects.
FMX.ListBox.TCustomListBox.ApplyStyle inherits from FMX.Controls.TStyledControl.ApplyStyle. All content below this line refers to FMX.Controls.TStyledControl.ApplyStyle.
Customizes styles in complex objects.
TStyledControl descendants override it to apply styles in concordance with their primitive components.      
Do not call ApplyStyle explicitly in an application. It is called by the ApplyStyleLookup method when object styles are updated.
For an example of an ApplyStyle implementation, see &quot;TCalloutPanel:Style Contracts&quot; in FireMonkey Component Design.
</summary></devnotes></procedure>
      <procedure name="FreeStyle" visibility="protected" procflags="override" file="FMX.ListBox.pas" line="411">
      <devnotes><summary>


Frees the style of TStyledControl.
FMX.ListBox.TCustomListBox.FreeStyle inherits from FMX.Controls.TStyledControl.FreeStyle. All content below this line refers to FMX.Controls.TStyledControl.FreeStyle.
Frees the style of TStyledControl.
Override it to free additional component-specific style resources.
</summary></devnotes></procedure>
      <procedure name="DoEnter" visibility="protected" procflags="override" file="FMX.ListBox.pas" line="412">
      <devnotes><summary>
Responds when receiving input focus.
FMX.ListBox.TCustomListBox.DoEnter inherits from FMX.Controls.TStyledControl.DoEnter. All content below this line refers to FMX.Controls.TStyledControl.DoEnter.
Responds when receiving input focus.
DoEnter is called automatically when the control receives the input focus.
</summary></devnotes></procedure>
      <procedure name="DoExit" visibility="protected" procflags="override" file="FMX.ListBox.pas" line="413">
      <devnotes><summary>
OnExit event dispatcher.
FMX.ListBox.TCustomListBox.DoExit inherits from FMX.Controls.TControl.DoExit. All content below this line refers to FMX.Controls.TControl.DoExit.
OnExit event dispatcher.
DoExit is called automatically when the input focus moves from the current object.
DoExit repaints the control, starts the animation by calling StartTriggerAnimation, and applies effects by calling ApplyTriggerEffect. When a control receives focus, it is highlighted. The animations and effects applied by DoExit background the control.
Override the protected DoExit method to provide other responses when the focus moves from the current control.
</summary></devnotes></procedure>
      <procedure name="DoAddObject" visibility="protected" procflags="override" file="FMX.ListBox.pas" line="414">
        <parameters>
          <parameter name="AObject" type="TFmxObject" paramflags="const"/>
        </parameters>
      <devnotes><summary>




Adds the AObject object to the Children list of children attached to this parent object (self).
FMX.ListBox.TCustomListBox.DoAddObject inherits from FMX.Types.TFmxObject.DoAddObject. All content below this line refers to FMX.Types.TFmxObject.DoAddObject.
Adds the AObject object to the Children list of children attached to this parent object (self).
DoAddObject adds the object provided in the AObject parameter to the list of children stored in the Children property of this object (self). DoAddObject changes the parent of AObject to this object (self) and sets the root of AObject to the Root object of this object (self).
Descendant classes, like TCommonCustomForm and TControl, additionally handle tab stop lists keeping ordered lists of objects to which the user can tab. If such descendant class supports the ITabStopController interface and AObject is an object of a class supporting the IControl interface, then DoAddObject of this descendant adds AObject to the TabList tab stop lists of the (self) object. 
DoAddObject is internally called from AddObject.
</summary></devnotes></procedure>
      <procedure name="DoInsertObject" visibility="protected" procflags="override" file="FMX.ListBox.pas" line="415">
        <parameters>
          <parameter name="Index" type="Integer"/>
          <parameter name="AObject" type="TFmxObject" paramflags="const"/>
        </parameters>
      <devnotes><summary>




Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="DoRemoveObject" visibility="protected" procflags="override" file="FMX.ListBox.pas" line="416">
        <parameters>
          <parameter name="AObject" type="TFmxObject" paramflags="const"/>
        </parameters>
      <devnotes><summary>




Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <function name="GetBorderHeight" visibility="protected" file="FMX.ListBox.pas" line="417">
        <parameters>
          <retval type="Single"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></function>
      <function name="CreateScrollContent" visibility="protected" procflags="override" file="FMX.ListBox.pas" line="418">
        <parameters>
          <retval type="TScrollContent"/>
        </parameters>
      <devnotes><summary>


Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></function>
      <function name="DoCalcContentBounds" visibility="protected" procflags="override" file="FMX.ListBox.pas" line="419">
        <parameters>
          <retval type="TRectF"/>
        </parameters>
      <devnotes><summary>
Calculates the ContentBounds rectangle bounding all controls in the scrolling region.
FMX.ListBox.TCustomListBox.DoCalcContentBounds inherits from FMX.Layouts.TCustomScrollBox.DoCalcContentBounds. All content below this line refers to FMX.Layouts.TCustomScrollBox.DoCalcContentBounds.
Calculates the ContentBounds rectangle bounding all controls in the scrolling region.
DoRealign calls DoCalcContentBounds to calculate the ContentBounds rectangle. If the OnCalcContentBounds event handler is defined, then DoRealign calls this event handler and  passes into it the calculated content bounding rectangle for additional calculations.
</summary></devnotes></function>
      <procedure name="DoEndUpdate" visibility="protected" procflags="override" file="FMX.ListBox.pas" line="420">
      <devnotes><summary>


Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="ImagesChanged" visibility="protected" procflags="virtual" file="FMX.ListBox.pas" line="424">
        <devnotes><summary>
Should be called when the component needs to redraw the image.
ImagesChanged  should be called when you change the Images reference to the TCustomImageList object or the object itself.
</summary></devnotes>
      </procedure>
      <procedure name="Loaded" visibility="protected" procflags="override" file="FMX.ListBox.pas" line="425">
      <devnotes><summary>


Initializes the component after the form file has been read into memory.
FMX.ListBox.TCustomListBox.Loaded inherits from FMX.Controls.TControl.Loaded. All content below this line refers to FMX.Controls.TControl.Loaded.
Initializes the component after the form file has been read into memory. 
Loaded inherits TComponent.Loaded, realigns the children, if any, and updates the tab list.
For details, see TComponent.Loaded.
</summary></devnotes></procedure>
      <procedure name="DoContentPaint" visibility="protected" file="FMX.ListBox.pas" line="426">
        <parameters>
          <parameter name="Sender" type="TObject"/>
          <parameter name="Canvas" type="TCanvas"/>
          <parameter name="ARect" type="TRectF" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Executes internally to render the content of the list box.
</summary></devnotes></procedure>
      <procedure name="Painting" visibility="protected" procflags="override" file="FMX.ListBox.pas" line="427">
      <devnotes><summary>




OnPainting event dispatcher. 
FMX.ListBox.TCustomListBox.Painting inherits from FMX.Controls.TControl.Painting. All content below this line refers to FMX.Controls.TControl.Painting.
OnPainting event dispatcher. 
Painting defines the drawing area of the control by intersecting Canvas with ClipRect if ClipChildren is True and dispatches the OnPainting event.
It is always called internally before DoPaint. 
The Painting method can be overridden by derived controls to establish control-specific rendering conditions. 
</summary></devnotes></procedure>
      <procedure name="AfterPaint" visibility="protected" procflags="override" file="FMX.ListBox.pas" line="428">
      <devnotes><summary>


Restores Canvas properties after the painting process. 
FMX.ListBox.TCustomListBox.AfterPaint inherits from FMX.Controls.TControl.AfterPaint. All content below this line refers to FMX.Controls.TControl.AfterPaint.
Restores Canvas properties after the painting process. 
As implemented in TControl, AfterPaint does nothing.
TShape descendants of TControl override AfterPaint to restore Dash and  Thickness to default values.   
</summary></devnotes></procedure>
      <procedure name="ViewportPositionChange" visibility="protected" procflags="override" file="FMX.ListBox.pas" line="429">
        <parameters>
          <parameter name="OldViewportPosition" type="TPointF" paramflags="const"/>
          <parameter name="NewViewportPosition" type="TPointF" paramflags="const"/>
          <parameter name="ContentSizeChanged" type="Boolean" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Executed when the viewport position changes.
FMX.ListBox.TCustomListBox.ViewportPositionChange inherits from FMX.Layouts.TCustomScrollBox.ViewportPositionChange. All content below this line refers to FMX.Layouts.TCustomScrollBox.ViewportPositionChange.
Executed when the viewport position changes.
ViewportPositionChange receives the following parameters:

OldViewportPosition is the value that the ViewportPosition property had before it changed.
NewViewportPosition is the new value of the ViewportPosition property.
ContentSizeChanged indicates whether the size of the content of the viewport has changed as well (True) or not (False).
ViewportPositionChange calls the handler of the OnViewportPositionChange event.


</summary></devnotes></procedure>
      <procedure name="DoUpdateAniCalculations" visibility="protected" procflags="override" file="FMX.ListBox.pas" line="431">
        <parameters>
          <parameter name="AAniCalculations" type="TScrollCalculations" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Sets the default inertial scrolling properties for the current platform.
FMX.ListBox.TCustomListBox.DoUpdateAniCalculations inherits from FMX.Layouts.TCustomScrollBox.DoUpdateAniCalculations. All content below this line refers to FMX.Layouts.TCustomScrollBox.DoUpdateAniCalculations.
Sets the default inertial scrolling properties for the current platform.
DoUpdateAniCalculations is called from UpdateAniCalculations to set the default values to the Animation, 
TouchTracking, BoundsAnimation, and AutoShowing properties of the inertial scrolling under the current platform. DoUpdateAniCalculations sets the properties of the TScrollCalculations object kept in the AniCalculations property.
</summary></devnotes></procedure>
      <function name="IsAddToContent" visibility="protected" procflags="override" file="FMX.ListBox.pas" line="432">
        <parameters>
          <parameter name="AObject" type="TFmxObject" paramflags="const"/>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>


Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></function>
      <procedure name="ContentAddObject" visibility="protected" procflags="override" file="FMX.ListBox.pas" line="433">
        <parameters>
          <parameter name="AObject" type="TFmxObject" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Virtual method to be implemented in subclasses to provide further functionality when adding AObject to the scroll box.
FMX.ListBox.TCustomListBox.ContentAddObject inherits from FMX.Layouts.TCustomScrollBox.ContentAddObject. All content below this line refers to FMX.Layouts.TCustomScrollBox.ContentAddObject.
Virtual method to be implemented in subclasses to provide further functionality when adding AObject to the scroll box. In TScrollBox, ContentAddObject has no implementation.
</summary></devnotes></procedure>
      <procedure name="ContentInsertObject" visibility="protected" procflags="override" file="FMX.ListBox.pas" line="434">
        <parameters>
          <parameter name="Index" type="Integer"/>
          <parameter name="AObject" type="TFmxObject" paramflags="const"/>
        </parameters>
      <devnotes><summary>


Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="ContentBeforeRemoveObject" visibility="protected" procflags="override" file="FMX.ListBox.pas" line="435">
        <parameters>
          <parameter name="AObject" type="TFmxObject"/>
        </parameters>
      <devnotes><summary>
Virtual method to be implemented in subclasses to provide further functionality right before removing AObject from the scroll box.
FMX.ListBox.TCustomListBox.ContentBeforeRemoveObject inherits from FMX.Layouts.TCustomScrollBox.ContentBeforeRemoveObject. All content below this line refers to FMX.Layouts.TCustomScrollBox.ContentBeforeRemoveObject.
Virtual method to be implemented in subclasses to provide further functionality right before removing AObject from the scroll box. In TScrollBox, ContentBeforeRemoveObject has no implementation.
</summary></devnotes></procedure>
      <procedure name="ContentRemoveObject" visibility="protected" procflags="override" file="FMX.ListBox.pas" line="436">
        <parameters>
          <parameter name="AObject" type="TFmxObject" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Virtual method to be implemented in subclasses to provide further functionality right after removing AObject from the scroll box.
FMX.ListBox.TCustomListBox.ContentRemoveObject inherits from FMX.Layouts.TCustomScrollBox.ContentRemoveObject. All content below this line refers to FMX.Layouts.TCustomScrollBox.ContentRemoveObject.
Virtual method to be implemented in subclasses to provide further functionality right after removing AObject from the scroll box. In TScrollBox, ContentRemoveObject has no implementation.
</summary></devnotes></procedure>
      <function name="IsOpaque" visibility="protected" procflags="override" file="FMX.ListBox.pas" line="437">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Indicates if the control should update effects when you scroll content.
FMX.ListBox.TCustomListBox.IsOpaque inherits from FMX.Layouts.TCustomScrollBox.IsOpaque. All content below this line refers to FMX.Layouts.TCustomScrollBox.IsOpaque.
Indicates if the control should update effects when you scroll content.
Its default value is False, meaning that the control does not update effects.
In the TFramedScrollBox and TFramedVertScrollBox classes IsOpaque returns True.
</summary></devnotes></function>
      <procedure name="UpdateVisibleItems" visibility="protected" file="FMX.ListBox.pas" line="438">
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="UpdateSelection" visibility="protected" file="FMX.ListBox.pas" line="439">
      <devnotes><summary>
Updates the items that are selected in the list box.
</summary></devnotes></procedure>
      <procedure name="UpdateGroups" visibility="protected" file="FMX.ListBox.pas" line="440">
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="RealUpdateGroups" visibility="protected" procflags="virtual" file="FMX.ListBox.pas" line="441">
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="UpdateStickyHeader" visibility="protected" file="FMX.ListBox.pas" line="442">
      <devnotes><summary>
Updates the layout of the &quot;sticky&quot; item in a list box.
For example, a &quot;sticky&quot; item can be a TSearchBox. &quot;Sticky&quot; means that it always stays on the top of the list, similar to a header.
To add a search box as a &quot;sticky&quot; item, right-click on a TListBox control and select Add Item &gt; TSearchBox.
</summary></devnotes></procedure>
      <procedure name="SetGroupingKind" visibility="protected" file="FMX.ListBox.pas" line="443">
        <parameters>
          <parameter name="Value" type="TListGroupingKind" paramflags="const"/>
        </parameters>
      <devnotes><summary>
The setter for the GroupingKind property.
Sets the value of the GroupingKind property and updates and repaints the content of the ListBox.
</summary></devnotes></procedure>
      <procedure name="DoRealign" visibility="protected" procflags="override" file="FMX.ListBox.pas" line="444">
      <devnotes><summary>
Performs the realignment of the children controls of the TScrollBox object within the object. 
FMX.ListBox.TCustomListBox.DoRealign inherits from FMX.Layouts.TCustomScrollBox.DoRealign. All content below this line refers to FMX.Layouts.TCustomScrollBox.DoRealign.
Performs the realignment of the children controls of the TScrollBox object within the object.  
It is called internally every time visual properties of TScrollBox are changed. 
The children are realigned taking into account their alignment properties, margins, and padding. 
DoRealign calls the inherited TControl.DoRealign and then executes the realignment during the inertial scrolling.
</summary></devnotes></procedure>
      <procedure name="DispatchStringsChangeEvent" visibility="protected" file="FMX.ListBox.pas" line="445">
        <parameters>
          <parameter name="S" type="string" paramflags="const"/>
          <parameter name="Op" type="TCustomListBox.TStringsChangeOp" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="Show" visibility="protected" procflags="override" file="FMX.ListBox.pas" line="446">
      <devnotes><summary>


Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <property name="CanFocus" visibility="protected" read="FCanFocus" write="FCanFocus" type="Boolean" default="1" hoisted="true" file="FMX.ListBox.pas" line="447"><devnotes><summary>
Specifies whether the current control can receive focus. 
CanFocus is True if it can receive focus, and False otherwise.
If it is set to False, the control cannot be selected when using the TAB key.
A control can receive focus after it is created.
</summary></devnotes></property>
      <property name="CanParentFocus" visibility="protected" read="FCanParentFocus" write="FCanParentFocus" type="Boolean" default="0" hoisted="true" file="FMX.ListBox.pas" line="448"><devnotes><summary>
Specifies whether the parent of this control should be evaluated to receive focus.
CanParentFocus is True when the parent of this control should be evaluated to receive focus if this control cannot receive focus itself, and False otherwise.
</summary></devnotes></property>
      <property name="Selection" visibility="protected" read="FSelection" type="TControl" file="FMX.ListBox.pas" line="449"><devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></property>
      <procedure name="Notification" visibility="protected" procflags="override" file="FMX.ListBox.pas" line="450">
        <parameters>
          <parameter name="AComponent" type="TComponent"/>
          <parameter name="Operation" type="TOperation"/>
        </parameters>
      <devnotes><summary>






Forwards notification messages to all owned components.
FMX.ListBox.TCustomListBox.Notification inherits from System.Classes.TComponent.Notification. All content below this line refers to System.Classes.TComponent.Notification.
Forwards notification messages to all owned components.
Do not call the Notification method in an application. Notification is called automatically when the component specified by AComponent is about to be inserted or removed, as specified by Operation. By default, components pass along the notification to their owned components, if any.
A component can, if needed, act on the notification that a component is being inserted or removed. For example, if a component has object fields or properties that contain references to other components, it can check the notifications of component removals and invalidate those references as needed.

Note: Notification is not called for components that are freed implicitly (because their Owner is freed).</summary></devnotes></procedure>
      <function name="GetFirstSelect" visibility="protected" file="FMX.ListBox.pas" line="452">
        <devnotes><summary>
Getter for the FirstSelectedItem property.
</summary></devnotes>
        <parameters>
          <retval type="TListBoxItem"/>
        </parameters>
      </function>
      <property name="AllowDrag" visibility="protected" read="FAllowDrag" write="SetAllowDrag" type="Boolean" default="0" file="FMX.ListBox.pas" line="453"><devnotes><summary>
Allows the dragging of items inside the list.
AllowDrag allows you to change the order of the list items by dragging them.
</summary></devnotes></property>
      <property name="AlternatingRowBackground" visibility="protected" read="FAlternatingRowBackground" write="SetAlternatingRowBackground" type="Boolean" default="0" file="FMX.ListBox.pas" line="454"><devnotes><summary>
Specifies whether consecutive items should have different backgrounds.
Set AlternatingRowBackground to True so that the background of items alternates.

</summary></devnotes></property>
      <property name="Columns" visibility="protected" read="FColumns" write="SetColumns" type="Integer" default="1" file="FMX.ListBox.pas" line="455"><devnotes><summary>
Specifies the number of columns on which to display the items in the list box.
If Columns is set to 3, this is how the list box will display the items:

</summary></devnotes></property>
      <property name="ItemWidth" visibility="protected" read="FItemWidth" write="SetItemWidth" type="Single" default="0" file="FMX.ListBox.pas" line="456"><devnotes><summary>
Specifies the width of the items in the list box.
The default value is 0. If you set another value for ItemWidth, all the items will be re-dimensioned to that value and displayed on multiple columns.
</summary></devnotes></property>
      <property name="ItemHeight" visibility="protected" read="FItemHeight" write="SetItemHeight" type="Single" default="0" file="FMX.ListBox.pas" line="457"><devnotes><summary>
Specifies the height of the items from the list box.
Use ItemHeight to specify the height, in pixels, of the items in the list box.
</summary></devnotes></property>
      <property name="ListStyle" visibility="protected" read="FListStyle" write="SetListStyle" type="TListStyle" default="0" file="FMX.ListBox.pas" line="458"><devnotes><summary>
Specifies how the items are displayed in the list box.
ListStyle specifies whether the items in the list box are displayed vertically or horizontally.
ListStyle can be set to Vertical or Horizontal.
</summary></devnotes></property>
      <property name="MultiSelectStyle" visibility="protected" read="GetMultiSelectStyle" write="SetMultiSelectStyle" type="TMultiSelectStyle" default="0" file="FMX.ListBox.pas" line="460"><devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></property>
      <property name="Sorted" visibility="protected" read="FSorted" write="SetSorted" type="Boolean" default="0" file="FMX.ListBox.pas" line="461"><devnotes><summary>
Specifies whether the list of items is sorted.
</summary></devnotes></property>
      <property name="ShowCheckboxes" visibility="protected" read="FShowCheckboxes" write="SetShowCheckboxes" type="Boolean" default="0" file="FMX.ListBox.pas" line="462"><devnotes><summary>
Displays a check box next to every item in the list box.
</summary></devnotes></property>
      <property name="FirstSelectedItem" visibility="protected" read="GetFirstSelect" type="TListBoxItem" file="FMX.ListBox.pas" line="464">
        <devnotes><summary>
First item in the selection.
Returns nil if no item is selected.
</summary></devnotes>
      </property>
      <event name="OnChange" visibility="protected" read="FOnChange" write="FOnChange" type="TNotifyEvent" file="FMX.ListBox.pas" line="465"><devnotes><summary>
Occurs when the selection in the list box changes.
Write an OnChange event handler to take specific action immediately after a new item or items are selected in the list box.
</summary></devnotes></event>
      <event name="OnChangeCheck" visibility="protected" read="FOnChangeCheck" write="FOnChangeCheck" type="TNotifyEvent" file="FMX.ListBox.pas" line="466"><devnotes><summary>
Occurs when the check box attached to a list item changes its state.
Write an OnChangeCheck event handler to take specific action after the check box attached to an item changes its state from selected to cleared or vice versa.
To make the check boxes attached to the list items visible, set the ShowCheckboxes property to True.
</summary></devnotes></event>
      <event name="OnCompare" visibility="protected" read="FOnCompare" write="FOnCompare" type="TOnCompareListBoxItemEvent" file="FMX.ListBox.pas" line="467"><devnotes><summary>
Occurs when two list items are compared.
Write an OnCompare event handler to create your own comparing criteria.
</summary></devnotes></event>
      <event name="OnDragChange" visibility="protected" read="FOnDragChange" write="FOnDragChange" type="TOnListBoxDragChange" file="FMX.ListBox.pas" line="468"><devnotes><summary>
Occurs after a drag-and-drop operation.
The OnDragChange event occurs after a drag-and-drop operation and allows you to make further changes to the list box.
If AllowDrag is set to True, you can write an event handler to specify the changes to the list box when a list box item is dragged inside the list.
See TOnListBoxDragChange for more details.
</summary></devnotes></event>
      <event name="OnStringsChanged" visibility="protected" read="FStringsChanged" write="FStringsChanged" type="TCustomListBox.TStringsChangedEvent" file="FMX.ListBox.pas" line="469"><devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></event>
      <property name="SelectionController" visibility="protected" read="FSelector" type="TListBoxSelector" file="FMX.ListBox.pas" line="471">
        <devnotes><summary>
The current selection controller.
The constructor initializes the MultiSelectStyle property which in turn defines the SelectionController. The default value of MultiSelectStyle is TMultiSelectStyle.None.
</summary></devnotes>
      </property>
      <constructor name="Create" visibility="public" file="FMX.ListBox.pas" line="473">
        <parameters>
          <parameter name="AOwner" type="TComponent"/>
        </parameters>
      <devnotes><summary>


Allocates memory and constructs a safely initialized instance of a component.
Allocates memory and constructs a safely initialized instance of a component.
FMX.ListBox.TCustomListBox.Create inherits from System.Classes.TComponent.Create. All content below this line refers to System.Classes.TComponent.Create.
Allocates memory and constructs a safely initialized instance of a component.
All objects have a Create method that constructs the object. TComponent redefines Create so that, for components, Create also:

Establishes the relationship of a component and its Owner, as indicated by the AOwner parameter.
Sets the ComponentStyle property to csInheritable, meaning that the component can be inherited by a descendent form type.
It is not necessary to explicitly create components added in the Form Designer. These components are created automatically when the application is run, and they are destroyed when the application is closed.
For components created programmatically, that is, not created in the Form Designer, call Create and pass in an owner component as the AOwner parameter. The owner disposes of the component when it is destroyed. If the component is not owned, then use Free when it needs to be destroyed.

Tip:  When passing in Self as the Owner parameter, consider what Self references. If a component creates another component in one of its methods, then Self refers to the first component and not the component being created, which is then owned by the first component.
Note:  The TComponent constructor is virtual in part to allow polymorphic instantiation of class references. This is critical to the streaming system and to the Form Designer. Do not forget to use the override directive when declaring a new component's Create constructor.</summary></devnotes></constructor>
      <destructor name="Destroy" visibility="public" file="FMX.ListBox.pas" line="474">
        <parameters>
        </parameters>
      <devnotes><summary>


Disposes of the component and its owned components.
Disposes of the component and its owned components.
FMX.ListBox.TCustomListBox.Destroy inherits from System.Classes.TComponent.Destroy. All content below this line refers to System.Classes.TComponent.Destroy.
Disposes of the component and its owned components.
Do not call Destroy directly. Call Free instead. Free verifies that the component is not nil, and only then calls Destroy.
Never explicitly free a component in one of its own event handlers, nor free a component from the event handler of a component that it owns or contains.
To destroy a form, call its Release method. Release waits for all the form's event handlers and the event handlers of the form's components to finish executing before destroying the form.

Note: A form owns all the controls and nonvisual components that are placed on it in design mode. When it is freed, all of these components are automatically freed as well. By default, all forms are owned by the global Application object. When an application terminates, it frees the global Application object, which frees all forms. For objects that are not components, and for components created with a nil owner, be sure to call Free after finishing with the object; otherwise the memory allocated for the object will be lost until the application terminates.</summary></devnotes></destructor>
      <procedure name="Assign" visibility="public" procflags="override" file="FMX.ListBox.pas" line="475">
        <parameters>
          <parameter name="Source" type="TPersistent"/>
        </parameters>
      <devnotes><summary>
Assigns the Source object to the current object.
Assign copies the elements from Source to the current object, if Source is a TStrings object. 
</summary></devnotes></procedure>
      <procedure name="Clear" visibility="public" procflags="virtual" file="FMX.ListBox.pas" line="476">
      <devnotes><summary>
Deletes all the items from the list.
Clear removes the items from the list box and also frees the memory allocated for them. The items in the list box are stored as TListBoxItem objects.
</summary></devnotes></procedure>
      <function name="DragChange" visibility="public" procflags="dynamic" file="FMX.ListBox.pas" line="477">
        <parameters>
          <parameter name="SourceItem" type="TListBoxItem" paramflags="const"/>
          <parameter name="DestItem" type="TListBoxItem" paramflags="const"/>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Generates an OnDragChange event.
DragChange is called automatically after a drag-and-drop operation.
</summary></devnotes></function>
      <procedure name="SelectAll" visibility="public" file="FMX.ListBox.pas" line="478">
      <devnotes><summary>
Selects all the items in the list.
SelectAll works only if MultiSelect is set to True.
</summary></devnotes></procedure>
      <procedure name="ClearSelection" visibility="public" file="FMX.ListBox.pas" line="479">
      <devnotes><summary>
Deselects all the selected items from the list box.
If no items are selected before calling ClearSelection, nothing happens.
</summary></devnotes></procedure>
      <procedure name="SelectRange" visibility="public" file="FMX.ListBox.pas" line="480">
        <parameters>
          <parameter name="Item1" type="TListBoxItem" paramflags="const"/>
          <parameter name="Item2" type="TListBoxItem" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Selects all the items between two given items.
SelectRange selects the items between Item1 and Item2 (including Item1 and Item2)  and deselects any other previously selected items.
SelectRange works only if MultiSelect is set to True.
</summary></devnotes></procedure>
      <procedure name="ScrollToItem" visibility="public" file="FMX.ListBox.pas" line="482">
        <devnotes><summary>
Scrolls the content so that the Item is visible.
</summary></devnotes>
        <parameters>
          <parameter name="Item" type="TListBoxItem" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="FirstSelectedItemFrom" visibility="public" file="FMX.ListBox.pas" line="483">
        <parameters>
          <parameter name="Item" type="TListBoxItem" paramflags="const"/>
          <retval type="TListBoxItem"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></function>
      <function name="LastSelectedItemFrom" visibility="public" file="FMX.ListBox.pas" line="484">
        <parameters>
          <parameter name="Item" type="TListBoxItem" paramflags="const"/>
          <retval type="TListBoxItem"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></function>
      <function name="ItemByPoint" visibility="public" file="FMX.ListBox.pas" line="485">
        <parameters>
          <parameter name="X" type="Single" paramflags="const"/>
          <parameter name="Y" type="Single" paramflags="const"/>
          <retval type="TListBoxItem"/>
        </parameters>
      <devnotes><summary>
Returns the item at the specified point.
Call ItemByPoint to get the item that contains in its bounds the point specified by X and Y.
</summary></devnotes></function>
      <function name="ItemByIndex" visibility="public" file="FMX.ListBox.pas" line="486">
        <parameters>
          <parameter name="Idx" type="Integer" paramflags="const"/>
          <retval type="TListBoxItem"/>
        </parameters>
      <devnotes><summary>
Returns the item at the index specified by Idx.
</summary></devnotes></function>
      <procedure name="ItemsExchange" visibility="public" file="FMX.ListBox.pas" line="487">
        <parameters>
          <parameter name="Item1" type="TListBoxItem"/>
          <parameter name="Item2" type="TListBoxItem"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="Sort" visibility="public" procflags="override" file="FMX.ListBox.pas" line="488">
        <parameters>
          <parameter name="Compare" type="TFmxObjectSortCompare"/>
        </parameters>
      <devnotes><summary>
Sorts components of the layout based on the comparison function Compare. 
FMX.ListBox.TCustomListBox.Sort inherits from FMX.Layouts.TCustomScrollBox.Sort. All content below this line refers to FMX.Layouts.TCustomScrollBox.Sort.
Sorts components of the layout based on the comparison function Compare. 
TFmxObjectSortCompare is declared as:

TFmxObjectSortCompare = function(item1, item2: TFmxObject): Integer;


</summary></devnotes></procedure>
      <procedure name="NotifyInflated" visibility="public" file="FMX.ListBox.pas" line="489">
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <property name="BorderHeight" visibility="public" read="GetBorderHeight" type="Single" default="0" file="FMX.ListBox.pas" line="490"><devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></property>
      <property name="Count" visibility="public" read="GetCount" type="Integer" file="FMX.ListBox.pas" line="491"><devnotes><summary>
Determines the number of items in the list box.
</summary></devnotes></property>
      <property name="Selected" visibility="public" read="GetSelected" type="TListBoxItem" file="FMX.ListBox.pas" line="492"><devnotes><summary>
Returns the item that is currently selected.
If no item is selected, it returns nil.
To obtain the index of the item that is currently selected, use the ItemIndex property.
</summary></devnotes></property>
      <property name="Items" visibility="public" read="FItems" write="SetItems" stored="ItemsStored" type="TStrings" file="FMX.ListBox.pas" line="493"><devnotes><summary>
Specifies the items in the list box.
Use Items to get or set the list of items in the list box as strings.
Use the ListItems property to access an item by specifying its index. This property returns the item as a TListBoxItem object.

Adding Items
To add items as TListBoxItem at design-time, see ListBox Items Editor.
To add items as TStrings at design-time, see String List editor.</summary></devnotes></property>
      <property name="ItemDown" visibility="public" read="FItemDown" write="SetItemDown" type="TListBoxItem" file="FMX.ListBox.pas" line="494"><devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></property>
      <property name="Images" visibility="public" read="GetImages" write="SetImages" type="TCustomImageList" file="FMX.ListBox.pas" line="496">
        <devnotes><summary>
Defines the reference to a TCustomImageList list of images to be used to draw images on the component.
If the TCustomImageList list is empty, then Images is nil/null.
Call ImagesChanged when Images is changed.
</summary></devnotes>
      </property>
      <property name="ListItems[Index]" visibility="public" read="GetListItem" type="TListBoxItem" file="FMX.ListBox.pas" line="497"/>
      <property name="ItemIndex" visibility="public" read="GetItemIndex" write="SetItemIndex" type="Integer" default="-1" file="FMX.ListBox.pas" line="498"><devnotes><summary>
Specifies the index of the currently selected item.
Gets or sets the index of the item that is selected in the list box.
The first item in the list has index 0, the second item has index 1, and so on. If no item is selected, the value of ItemIndex is -1.
To get the actual item that is selected, use the Selected property.
</summary></devnotes></property>
      <property name="GroupingKind" visibility="public" read="FGroupingKind" write="SetGroupingKind" type="TListGroupingKind" default="0" file="FMX.ListBox.pas" line="499"><devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></property>
      <property name="FilterPredicate" visibility="public" read="GetFilterPredicate" write="SetFilterPredicate" stored="False" type="TPredicate&lt;System.string&gt;" file="FMX.ListBox.pas" line="500"><devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></property>
      <property name="MultiSelect" visibility="public" read="GetMultiSelect" write="SetMultiSelect" type="Boolean" file="FMX.ListBox.pas" line="501"><devnotes><summary>
Specifies whether multiple items can be selected in the list.
If MultiSelect is set to True, you can select more than one item from the list, otherwise you are limited to one item.
</summary></devnotes></property>
      <property name="DefaultItemStyles" visibility="public" read="FDefaultStyles" write="FDefaultStyles" type="TListBoxItemStyleDefaults" file="FMX.ListBox.pas" line="502"><devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></property>
      <event name="OnItemClick" visibility="public" read="FOnItemClick" write="FOnItemClick" type="TCustomListBox.TItemClickEvent" file="FMX.ListBox.pas" line="503"><devnotes><summary>
Occurs immediately after clicking an item from the listbox.
Write an OnItemClick event handler to respond to clicking on an item from the listbox component.
The event handler for the OnItemClick event receives two arguments:

Sender: The TCustomListBox instance that holds the list box item that was clicked.
Item: The TListBoxItem instance that was clicked.
OnItemClick is an event of type TItemClickEvent.
</summary></devnotes></event>
    </members>
  <devnotes><summary>
A TCustomListBox is the base class for list box components.
Inherits from TCustomListBox to create a control that represents a specialized list box.

List Box Events
TCustomListBox has events that are generic to the list box control, and other events that are specific to the items:

Events that are generic to the list box control: Events such as OnClick, OnDblClick, OnEnter, and OnMouseDown are inherited events, and they refer to the event that occurs in the list box control.
Events that are specific to the items of the list box: Events such as OnItemClick, OnChange, OnChangeCheck, OnCompare, and OnDragChange are specific to the list box item, and they refer to events that occur in the items of the list box.
Therefore it is important to see, for example, the difference between OnClick that occurs when the list box is clicked, and OnItemClick that occurs when a list box item is clicked.
See the full list of TCustomListBox events in FMX.ListBox.TCustomListBox_Events.
</summary></devnotes></class>
  <class name="TListBox" file="FMX.ListBox.pas" line="508">
    
    <members>
      <property name="Align" visibility="published" read="FAlign" write="SetAlign" type="TAlignLayout" default="0" hoisted="true" file="FMX.ListBox.pas" line="510"/>
      <property name="AllowDrag" visibility="published" read="FAllowDrag" write="SetAllowDrag" type="Boolean" default="0" hoisted="true" file="FMX.ListBox.pas" line="511"/>
      <property name="AlternatingRowBackground" visibility="published" read="FAlternatingRowBackground" write="SetAlternatingRowBackground" type="Boolean" default="0" hoisted="true" file="FMX.ListBox.pas" line="512"/>
      <property name="Anchors" visibility="published" read="FAnchors" write="SetAnchors" stored="IsAnchorsStored" type="TAnchors" hoisted="true" file="FMX.ListBox.pas" line="513"/>
      <property name="CanFocus" visibility="published" read="FCanFocus" write="FCanFocus" type="Boolean" default="1" hoisted="true" file="FMX.ListBox.pas" line="514"/>
      <property name="CanParentFocus" visibility="published" read="FCanParentFocus" write="FCanParentFocus" type="Boolean" default="0" hoisted="true" file="FMX.ListBox.pas" line="515"/>
      <property name="ClipChildren" visibility="published" read="FClipChildren" write="SetClipChildren" type="Boolean" default="0" hoisted="true" file="FMX.ListBox.pas" line="516"/>
      <property name="ClipParent" visibility="published" read="FClipParent" write="FClipParent" type="Boolean" default="0" hoisted="true" file="FMX.ListBox.pas" line="517"/>
      <property name="Columns" visibility="published" read="FColumns" write="SetColumns" type="Integer" default="1" hoisted="true" file="FMX.ListBox.pas" line="518"/>
      <property name="Cursor" visibility="published" read="GetCursor" write="SetCursor" type="TCursor" default="0" hoisted="true" file="FMX.ListBox.pas" line="519"/>
      <property name="DisableFocusEffect" visibility="published" read="FDisableFocusEffect" write="FDisableFocusEffect" type="Boolean" default="0" hoisted="true" file="FMX.ListBox.pas" line="520"/>
      <property name="DragMode" visibility="published" read="GetDragMode" write="SetDragMode" type="TDragMode" default="0" hoisted="true" file="FMX.ListBox.pas" line="521"/>
      <property name="EnableDragHighlight" visibility="published" read="FEnableDragHighlight" write="FEnableDragHighlight" type="Boolean" default="1" hoisted="true" file="FMX.ListBox.pas" line="522"/>
      <property name="Enabled" visibility="published" read="FEnabled" write="SetEnabled" stored="EnabledStored" type="Boolean" hoisted="true" file="FMX.ListBox.pas" line="523"/>
      <property name="Locked" visibility="published" read="FLocked" write="SetLocked" type="Boolean" default="0" hoisted="true" file="FMX.ListBox.pas" line="524"/>
      <property name="Height" visibility="published" read="GetHeight" write="SetHeight" stored="False" type="Single" hoisted="true" file="FMX.ListBox.pas" line="525"/>
      <property name="HitTest" visibility="published" read="FHitTest" write="SetHitTest" type="Boolean" default="1" hoisted="true" file="FMX.ListBox.pas" line="526"/>
      <property name="Hint" visibility="published" read="FHint" write="SetHint" stored="HintStored" type="string" default="0" hoisted="true" file="FMX.ListBox.pas" line="527"/>
      <property name="ItemIndex" visibility="published" read="GetItemIndex" write="SetItemIndex" type="Integer" default="-1" hoisted="true" file="FMX.ListBox.pas" line="528"/>
      <property name="ItemHeight" visibility="published" read="FItemHeight" write="SetItemHeight" type="Single" default="0" hoisted="true" file="FMX.ListBox.pas" line="529"/>
      <property name="Items" visibility="published" read="FItems" write="SetItems" stored="ItemsStored" type="TStrings" hoisted="true" file="FMX.ListBox.pas" line="530"/>
      <property name="ItemWidth" visibility="published" read="FItemWidth" write="SetItemWidth" type="Single" default="0" hoisted="true" file="FMX.ListBox.pas" line="531"/>
      <property name="Images" visibility="published" read="GetImages" write="SetImages" type="TCustomImageList" hoisted="true" file="FMX.ListBox.pas" line="532"/>
      <property name="DefaultItemStyles" visibility="published" read="FDefaultStyles" write="FDefaultStyles" type="TListBoxItemStyleDefaults" hoisted="true" file="FMX.ListBox.pas" line="533"/>
      <property name="GroupingKind" visibility="published" read="FGroupingKind" write="SetGroupingKind" type="TListGroupingKind" default="0" hoisted="true" file="FMX.ListBox.pas" line="534"/>
      <property name="ListStyle" visibility="published" read="FListStyle" write="SetListStyle" type="TListStyle" default="0" hoisted="true" file="FMX.ListBox.pas" line="535"/>
      <property name="Padding" visibility="published" read="GetPadding" write="SetPadding" type="TBounds" hoisted="true" file="FMX.ListBox.pas" line="536"/>
      <property name="MultiSelectStyle" visibility="published" read="GetMultiSelectStyle" write="SetMultiSelectStyle" type="TMultiSelectStyle" default="0" hoisted="true" file="FMX.ListBox.pas" line="537"/>
      <property name="Opacity" visibility="published" read="FOpacity" write="SetOpacity" stored="IsOpacityStored" type="Single" hoisted="true" file="FMX.ListBox.pas" line="538"/>
      <property name="Margins" visibility="published" read="GetMargins" write="SetMargins" type="TBounds" hoisted="true" file="FMX.ListBox.pas" line="539"/>
      <property name="PopupMenu" visibility="published" read="FPopupMenu" write="SetPopupMenu" stored="IsPopupMenuStored" type="TCustomPopupMenu" hoisted="true" file="FMX.ListBox.pas" line="540"/>
      <property name="Position" visibility="published" read="FPosition" write="SetPosition" stored="IsPositionStored" type="TPosition" hoisted="true" file="FMX.ListBox.pas" line="541"/>
      <property name="RotationAngle" visibility="published" read="GetRotationAngle" write="SetRotationAngle" type="Single" default="0" hoisted="true" file="FMX.ListBox.pas" line="542"/>
      <property name="RotationCenter" visibility="published" read="GetRotationCenter" write="SetRotationCenter" type="TPosition" hoisted="true" file="FMX.ListBox.pas" line="543"/>
      <property name="Scale" visibility="published" read="GetScale" write="SetScale" type="TPosition" hoisted="true" file="FMX.ListBox.pas" line="544"/>
      <property name="Size" visibility="published" read="FSize" write="SetSize" stored="IsSizeStored" type="TControlSize" hoisted="true" file="FMX.ListBox.pas" line="545"/>
      <property name="ShowCheckboxes" visibility="published" read="FShowCheckboxes" write="SetShowCheckboxes" type="Boolean" default="0" hoisted="true" file="FMX.ListBox.pas" line="546"/>
      <property name="Sorted" visibility="published" read="FSorted" write="SetSorted" type="Boolean" default="0" hoisted="true" file="FMX.ListBox.pas" line="547"/>
      <property name="StyleLookup" visibility="published" read="FStyleLookup" write="SetStyleLookup" type="string" default="0" hoisted="true" file="FMX.ListBox.pas" line="548"/>
      <property name="TabOrder" visibility="published" read="GetTabOrder" write="SetTabOrder" type="TTabOrder" default="-1" hoisted="true" file="FMX.ListBox.pas" line="549"/>
      <property name="TabStop" visibility="published" read="GetTabStop" write="SetTabStop" type="Boolean" default="1" hoisted="true" file="FMX.ListBox.pas" line="550"/>
      <property name="Visible" visibility="published" read="FVisible" write="SetVisible" stored="VisibleStored" type="Boolean" default="1" hoisted="true" file="FMX.ListBox.pas" line="551"/>
      <property name="Width" visibility="published" read="GetWidth" write="SetWidth" stored="False" type="Single" hoisted="true" file="FMX.ListBox.pas" line="552"/>
      <property name="ParentShowHint" visibility="published" read="FParentShowHint" write="SetParentShowHint" type="Boolean" default="1" hoisted="true" file="FMX.ListBox.pas" line="553"/>
      <property name="ShowHint" visibility="published" read="FShowHint" write="SetShowHint" stored="IsShowHintStored" type="Boolean" hoisted="true" file="FMX.ListBox.pas" line="554"/>
      <event name="OnApplyStyleLookup" visibility="published" read="FOnApplyStyleLookup" write="FOnApplyStyleLookup" type="TNotifyEvent" hoisted="true" file="FMX.ListBox.pas" line="557"/>
      <event name="OnChange" visibility="published" read="FOnChange" write="FOnChange" type="TNotifyEvent" hoisted="true" file="FMX.ListBox.pas" line="558"/>
      <event name="OnChangeCheck" visibility="published" read="FOnChangeCheck" write="FOnChangeCheck" type="TNotifyEvent" hoisted="true" file="FMX.ListBox.pas" line="559"/>
      <event name="OnCompare" visibility="published" read="FOnCompare" write="FOnCompare" type="TOnCompareListBoxItemEvent" hoisted="true" file="FMX.ListBox.pas" line="560"/>
      <event name="OnDragChange" visibility="published" read="FOnDragChange" write="FOnDragChange" type="TOnListBoxDragChange" hoisted="true" file="FMX.ListBox.pas" line="562"/>
      <event name="OnDragEnter" visibility="published" read="FOnDragEnter" write="FOnDragEnter" type="TDragEnterEvent" hoisted="true" file="FMX.ListBox.pas" line="563"/>
      <event name="OnDragLeave" visibility="published" read="FOnDragLeave" write="FOnDragLeave" type="TNotifyEvent" hoisted="true" file="FMX.ListBox.pas" line="564"/>
      <event name="OnDragOver" visibility="published" read="FOnDragOver" write="FOnDragOver" type="TDragOverEvent" hoisted="true" file="FMX.ListBox.pas" line="565"/>
      <event name="OnDragDrop" visibility="published" read="FOnDragDrop" write="FOnDragDrop" type="TDragDropEvent" hoisted="true" file="FMX.ListBox.pas" line="566"/>
      <event name="OnDragEnd" visibility="published" read="FOnDragEnd" write="FOnDragEnd" type="TNotifyEvent" hoisted="true" file="FMX.ListBox.pas" line="567"/>
      <event name="OnKeyDown" visibility="published" read="FOnKeyDown" write="FOnKeyDown" type="TKeyEvent" hoisted="true" file="FMX.ListBox.pas" line="569"/>
      <event name="OnKeyUp" visibility="published" read="FOnKeyUp" write="FOnKeyUp" type="TKeyEvent" hoisted="true" file="FMX.ListBox.pas" line="570"/>
      <event name="OnCanFocus" visibility="published" read="FOnCanFocus" write="FOnCanFocus" type="TCanFocusEvent" hoisted="true" file="FMX.ListBox.pas" line="572"/>
      <event name="OnItemClick" visibility="published" read="FOnItemClick" write="FOnItemClick" type="TCustomListBox.TItemClickEvent" hoisted="true" file="FMX.ListBox.pas" line="573"/>
      <event name="OnEnter" visibility="published" read="FOnEnter" write="FOnEnter" type="TNotifyEvent" hoisted="true" file="FMX.ListBox.pas" line="575"/>
      <event name="OnExit" visibility="published" read="FOnExit" write="FOnExit" type="TNotifyEvent" hoisted="true" file="FMX.ListBox.pas" line="576"/>
      <event name="OnMouseDown" visibility="published" read="FOnMouseDown" write="FOnMouseDown" type="TMouseEvent" hoisted="true" file="FMX.ListBox.pas" line="577"/>
      <event name="OnMouseMove" visibility="published" read="FOnMouseMove" write="FOnMouseMove" type="TMouseMoveEvent" hoisted="true" file="FMX.ListBox.pas" line="578"/>
      <event name="OnMouseUp" visibility="published" read="FOnMouseUp" write="FOnMouseUp" type="TMouseEvent" hoisted="true" file="FMX.ListBox.pas" line="579"/>
      <event name="OnMouseWheel" visibility="published" read="FOnMouseWheel" write="FOnMouseWheel" type="TMouseWheelEvent" hoisted="true" file="FMX.ListBox.pas" line="580"/>
      <event name="OnMouseEnter" visibility="published" read="FOnMouseEnter" write="FOnMouseEnter" type="TNotifyEvent" hoisted="true" file="FMX.ListBox.pas" line="581"/>
      <event name="OnMouseLeave" visibility="published" read="FOnMouseLeave" write="FOnMouseLeave" type="TNotifyEvent" hoisted="true" file="FMX.ListBox.pas" line="582"/>
      <event name="OnPainting" visibility="published" read="FOnPainting" write="FOnPainting" type="TOnPaintEvent" hoisted="true" file="FMX.ListBox.pas" line="584"/>
      <event name="OnPaint" visibility="published" read="FOnPaint" write="FOnPaint" type="TOnPaintEvent" hoisted="true" file="FMX.ListBox.pas" line="585"/>
      <event name="OnResize" visibility="published" read="FOnResize" write="FOnResize" type="TNotifyEvent" hoisted="true" file="FMX.ListBox.pas" line="586"/>
      <event name="OnResized" visibility="published" read="FOnResized" write="FOnResized" type="TNotifyEvent" hoisted="true" file="FMX.ListBox.pas" line="587"/>
    </members>
  </class>
  <class name="TListBoxHeader" file="FMX.ListBox.pas" line="590">
    
    <interfaces>
      <implements name="IListBoxHeaderTrait"/>
    </interfaces>
    <members>
      <function name="GetDefaultStyleLookupName" visibility="protected" procflags="override" file="FMX.ListBox.pas" line="592">
        <parameters>
          <retval type="string"/>
        </parameters>
      </function>
    </members>
  </class>
  <class name="TListBoxSeparatorItem" file="FMX.ListBox.pas" line="596">
    
    <members>
      <function name="GetDefaultGroupHeaderStyle" visibility="public" file="FMX.ListBox.pas" line="600">
        <devnotes>
           <summary>Gets default style for Group Header, which is used if TListBox.DefaultItemStyles.GroupHeaderStyle
            is empty</summary>
        </devnotes>
        <parameters>
          <retval type="string"/>
        </parameters>
      </function>
    </members>
  </class>
  <class name="TListBoxGroupHeader" file="FMX.ListBox.pas" line="603">
    
    <members>
      <field name="FCloneRef" type="TListBoxGroupHeader" visibility="class private" size="4" offset="1048" file="FMX.ListBox.pas" line="605">
        <attributes>
          <attribute name="TObject"/>
        </attributes>
      </field>
      <function name="DoGetDefaultStyleLookupName" visibility="protected" procflags="override" file="FMX.ListBox.pas" line="607">
        <parameters>
          <parameter name="Defaults" type="TListBoxItemStyleDefaults" paramflags="const"/>
          <retval type="string"/>
        </parameters>
      </function>
      <procedure name="DoTextChanged" visibility="protected" procflags="override" file="FMX.ListBox.pas" line="608">
      </procedure>
      <constructor name="Create" visibility="public" file="FMX.ListBox.pas" line="610">
        <parameters>
          <parameter name="AOwner" type="TComponent"/>
        </parameters>
      </constructor>
      <destructor name="Destroy" visibility="public" file="FMX.ListBox.pas" line="611">
        <parameters>
        </parameters>
      </destructor>
      <property name="CloneRef" visibility="public" read="FCloneRef" write="FCloneRef" type="TListBoxGroupHeader" file="FMX.ListBox.pas" line="613">
        <devnotes>
           <summary>Reference to sticky TListBoxGroupHeader clone in Plain grouping mode</summary>
        </devnotes>
      </property>
    </members>
  </class>
  <class name="TListBoxGroupFooter" file="FMX.ListBox.pas" line="616">
    
    <members>
      <function name="DoGetDefaultStyleLookupName" visibility="protected" procflags="override" file="FMX.ListBox.pas" line="618">
        <parameters>
          <parameter name="Defaults" type="TListBoxItemStyleDefaults" paramflags="const"/>
          <retval type="string"/>
        </parameters>
      </function>
      <constructor name="Create" visibility="public" file="FMX.ListBox.pas" line="620">
        <parameters>
          <parameter name="AOwner" type="TComponent"/>
        </parameters>
      </constructor>
    </members>
  </class>
  <class name="TListBoxSelector" file="FMX.ListBox.pas" line="627">
    
    <ancestor name="TObject" namespace="System">
      <methodref name="Create" visibility="public" procflags="constructor">
      </methodref>
      <methodref name="Free" visibility="public">
      </methodref>
      <methodref name="DisposeOf" visibility="public" procflags="inline">
      </methodref>
      <methodref name="InitInstance" visibility="public" procflags="class">
      </methodref>
      <methodref name="CleanupInstance" visibility="public">
      </methodref>
      <methodref name="ClassType" visibility="public" procflags="inline">
      </methodref>
      <methodref name="ClassName" visibility="public" procflags="class">
      </methodref>
      <methodref name="ClassNameIs" visibility="public" procflags="class">
      </methodref>
      <methodref name="ClassParent" visibility="public" procflags="class inline">
      </methodref>
      <methodref name="ClassInfo" visibility="public" procflags="class inline">
      </methodref>
      <methodref name="InstanceSize" visibility="public" procflags="class inline">
      </methodref>
      <methodref name="InheritsFrom" visibility="public" procflags="class">
      </methodref>
      <methodref name="MethodAddress" visibility="public" procflags="class overload">
      </methodref>
      <methodref name="MethodAddress" visibility="public" procflags="class overload">
      </methodref>
      <methodref name="MethodName" visibility="public" procflags="class">
      </methodref>
      <methodref name="QualifiedClassName" visibility="public" procflags="class">
      </methodref>
      <methodref name="FieldAddress" visibility="public" procflags="overload">
      </methodref>
      <methodref name="FieldAddress" visibility="public" procflags="overload">
      </methodref>
      <methodref name="GetInterface" visibility="public">
      </methodref>
      <methodref name="GetInterfaceEntry" visibility="public" procflags="class">
      </methodref>
      <methodref name="GetInterfaceTable" visibility="public" procflags="class inline">
      </methodref>
      <methodref name="UnitName" visibility="public" procflags="class">
      </methodref>
      <methodref name="UnitScope" visibility="public" procflags="class">
      </methodref>
      <methodref name="Equals" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="GetHashCode" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="ToString" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="SafeCallException" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="AfterConstruction" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="BeforeDestruction" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="Dispatch" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="DefaultHandler" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="NewInstance" visibility="public" procflags="class virtual">
      </methodref>
      <methodref name="FreeInstance" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="Destroy" visibility="public" procflags="destructor virtual">
      </methodref>
      <methodref name="GetDisposed" visibility="protected" procflags="inline">
      </methodref>
      <methodref name="CheckDisposed" visibility="protected" procflags="inline">
      </methodref>
      <propertyref name="Disposed" visibility="protected">
      </propertyref>
    </ancestor>
    <members>
      <enum name="TKeyAction" visibility="public" alias="FMX.ListBox.TKeyAction" file="FMX.ListBox.pas" line="630">
        <element value="0" name="Move" file="FMX.ListBox.pas" line="630"/>
        <element value="1" name="Toggle" file="FMX.ListBox.pas" line="630"/>
      </enum>
      <field name="FListBox" type="TCustomListBox" visibility="class protected" size="4" offset="4" file="FMX.ListBox.pas" line="633">
        <attributes>
          <attribute name="TObject"/>
        </attributes>
        <devnotes>
           <summary>Reference to TListBox that hosts this controller</summary>
        </devnotes>
      </field>
      <field name="FCurrent" type="Integer" visibility="class protected" size="4" offset="8" file="FMX.ListBox.pas" line="635">
        <devnotes>
           <summary>Index of currently selected item, -1 if none</summary>
        </devnotes>
      </field>
      <field name="FFirst" type="Integer" visibility="class protected" size="4" offset="12" file="FMX.ListBox.pas" line="637">
        <devnotes>
           <summary>Index of first selected item, -1 if none</summary>
        </devnotes>
      </field>
      <field name="FSelectionTimer" type="TTimer" visibility="class protected" size="4" offset="16" file="FMX.ListBox.pas" line="639">
        <devnotes>
           <summary>Timer used for DelayedMouseDown</summary>
        </devnotes>
      </field>
      <field name="FSelectionTimerTarget" type="TListBoxItem" visibility="class protected" size="4" offset="20" file="FMX.ListBox.pas" line="641">
        <devnotes>
           <summary>Item that's going to be acted upon if DelayedMouseDown is employed</summary>
        </devnotes>
      </field>
      <field name="FInternalChange" type="Boolean" visibility="class protected" size="1" offset="24" file="FMX.ListBox.pas" line="643">
        <devnotes>
           <summary>Flag used to prevent sending change notification</summary>
        </devnotes>
      </field>
      <field name="FMouseSelectActive" type="Boolean" visibility="class protected" size="1" offset="25" file="FMX.ListBox.pas" line="645">
        <devnotes>
           <summary>True during mouse selection</summary>
        </devnotes>
      </field>
      <constructor name="Create" visibility="protected" file="FMX.ListBox.pas" line="648">
        <devnotes>
           <summary>Create a new instance of TSelectionController</summary>
        </devnotes>
        <parameters>
          <parameter name="ListBox" type="TCustomListBox" paramflags="const"/>
        </parameters>
      </constructor>
      <function name="GetMultiSelectStyle" visibility="protected" procflags="abstract virtual" file="FMX.ListBox.pas" line="650">
        <devnotes>
           <summary>Getter for MutliSelectStyle</summary>
        </devnotes>
        <parameters>
          <retval type="TMultiSelectStyle"/>
        </parameters>
      </function>
      <procedure name="UpdateSelection" visibility="protected" file="FMX.ListBox.pas" line="652">
        <devnotes>
           <summary>Make host TListBox update selection visuals</summary>
        </devnotes>
      </procedure>
      <procedure name="DelayedMouseDown" visibility="protected" file="FMX.ListBox.pas" line="654">
        <devnotes>
           <summary>Initiate a delayed mouse down action</summary>
        </devnotes>
        <parameters>
          <parameter name="ItemDown" type="TListBoxItem" paramflags="const"/>
          <parameter name="Shift" type="TShiftState" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="AbortDelayed" visibility="protected" file="FMX.ListBox.pas" line="656">
        <devnotes>
           <summary>Abort delayed mouse down action, if any</summary>
        </devnotes>
      </procedure>
      <function name="GetMouseSelectActive" visibility="protected" file="FMX.ListBox.pas" line="657">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <procedure name="SetMouseSelectActive" visibility="protected" procflags="virtual" file="FMX.ListBox.pas" line="658">
        <parameters>
          <parameter name="Value" type="Boolean" paramflags="const"/>
        </parameters>
      </procedure>
      <destructor name="Destroy" visibility="public" file="FMX.ListBox.pas" line="660">
        <parameters>
        </parameters>
      </destructor>
      <function name="GetFirst" visibility="public" file="FMX.ListBox.pas" line="662">
        <devnotes>
           <summary>Get first item index, -1 if none</summary>
        </devnotes>
        <parameters>
          <retval type="Integer"/>
        </parameters>
      </function>
      <function name="GetCurrent" visibility="public" file="FMX.ListBox.pas" line="664">
        <devnotes>
           <summary>Get current item index, -1 if none</summary>
        </devnotes>
        <parameters>
          <retval type="Integer"/>
        </parameters>
      </function>
      <function name="GetCurrentItem" visibility="public" file="FMX.ListBox.pas" line="666">
        <devnotes>
           <summary>Get current TListBoxItem, nil if none selected</summary>
        </devnotes>
        <parameters>
          <retval type="TListBoxItem"/>
        </parameters>
      </function>
      <procedure name="ClearSelection" visibility="public" file="FMX.ListBox.pas" line="668">
        <devnotes>
           <summary>Clear selection</summary>
        </devnotes>
      </procedure>
      <procedure name="CopySelection" visibility="public" procflags="abstract virtual" file="FMX.ListBox.pas" line="670">
        <devnotes>
           <summary>Attempt to copy selection from another selector</summary>
        </devnotes>
        <parameters>
          <parameter name="Other" type="TListBoxSelector" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SelectAll" visibility="public" file="FMX.ListBox.pas" line="672">
        <devnotes>
           <summary>Select everything</summary>
        </devnotes>
      </procedure>
      <function name="SelectRange" visibility="public" file="FMX.ListBox.pas" line="674">
        <devnotes>
           <summary>Select range between TListBoxItems Item1 and Item2</summary>
        </devnotes>
        <parameters>
          <parameter name="Item1" type="TListBoxItem" paramflags="const"/>
          <parameter name="Item2" type="TListBoxItem" paramflags="const"/>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <function name="SetSelected" visibility="public" file="FMX.ListBox.pas" line="677">
        <devnotes>
           <summary>Mark TListBoxItem Item as Selected if Value is True, as not selected if Value is False.
           No notification. Return true if Item.Selected has been changed.</summary>
        </devnotes>
        <parameters>
          <parameter name="Item" type="TListBoxItem" paramflags="const"/>
          <parameter name="Value" type="Boolean" paramflags="const"/>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <function name="SetCurrent" visibility="public" file="FMX.ListBox.pas" line="679">
        <devnotes>
           <summary>Set item with index Index as current. Return True if the value of Current has been changed.</summary>
        </devnotes>
        <parameters>
          <parameter name="Index" type="Integer" paramflags="const"/>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <procedure name="ItemStateChanged" visibility="public" file="FMX.ListBox.pas" line="681">
        <devnotes>
           <summary>Used to notify this TSelectionController when item state was changed externally. See DoItemStateChanged.</summary>
        </devnotes>
        <parameters>
          <parameter name="Item" type="TListBoxItem" paramflags="const"/>
          <parameter name="UserChange" type="Boolean" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="MouseSelectStart" visibility="public" procflags="virtual" file="FMX.ListBox.pas" line="683">
        <devnotes>
           <summary>Start mouse selection</summary>
        </devnotes>
        <parameters>
          <parameter name="Item" type="TListBoxItem" paramflags="const"/>
          <parameter name="Button" type="TMouseButton" paramflags="const"/>
          <parameter name="Shift" type="TShiftState" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="MouseSelectMove" visibility="public" procflags="virtual" file="FMX.ListBox.pas" line="685">
        <devnotes>
           <summary>Handle mouse move during selection</summary>
        </devnotes>
        <parameters>
          <parameter name="Item" type="TListBoxItem" paramflags="const"/>
          <parameter name="Shift" type="TShiftState" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="MouseSelectFinishing" visibility="public" procflags="virtual" file="FMX.ListBox.pas" line="687">
        <devnotes>
           <summary>Before mouse selection is finished</summary>
        </devnotes>
        <parameters>
          <parameter name="Item" type="TListBoxItem" paramflags="const"/>
          <parameter name="Button" type="TMouseButton" paramflags="const"/>
          <parameter name="Shift" type="TShiftState" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="MouseSelectFinish" visibility="public" procflags="virtual" file="FMX.ListBox.pas" line="689">
        <devnotes>
           <summary>Finish mouse selection</summary>
        </devnotes>
        <parameters>
          <parameter name="Item" type="TListBoxItem" paramflags="const"/>
          <parameter name="Button" type="TMouseButton" paramflags="const"/>
          <parameter name="Shift" type="TShiftState" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="KeyboardSelect" visibility="public" procflags="virtual" file="FMX.ListBox.pas" line="691">
        <devnotes>
           <summary>Select using keyboard, e.g. by pressing space. KeyAction is one of: Move or Toggle</summary>
        </devnotes>
        <parameters>
          <parameter name="KeyAction" type="TListBoxSelector.TKeyAction" paramflags="const"/>
          <parameter name="Shift" type="TShiftState" paramflags="const"/>
          <parameter name="Item" type="TListBoxItem" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="UserSetIndex" visibility="public" procflags="virtual" file="FMX.ListBox.pas" line="693">
        <devnotes>
           <summary>Invoked when item index is set programmatically by user</summary>
        </devnotes>
        <parameters>
          <parameter name="Index" type="Integer" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="Change" visibility="public" file="FMX.ListBox.pas" line="695">
        <devnotes>
           <summary>Dispatch change notification</summary>
        </devnotes>
      </procedure>
      <procedure name="DoMouseSelectStart" visibility="public" procflags="abstract virtual" file="FMX.ListBox.pas" line="697">
        <devnotes>
           <summary>MouseSelectStart implementation</summary>
        </devnotes>
        <parameters>
          <parameter name="Item" type="TListBoxItem" paramflags="const"/>
          <parameter name="Shift" type="TShiftState" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="DoMouseSelectMove" visibility="public" procflags="abstract virtual" file="FMX.ListBox.pas" line="699">
        <devnotes>
           <summary>MouseSelectMove implementation</summary>
        </devnotes>
        <parameters>
          <parameter name="Item" type="TListBoxItem" paramflags="const"/>
          <parameter name="Shift" type="TShiftState" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="DoMouseSelectFinishing" visibility="public" procflags="virtual" file="FMX.ListBox.pas" line="701">
        <devnotes>
           <summary>MouseSelectFinishing implementation</summary>
        </devnotes>
        <parameters>
          <parameter name="Item" type="TListBoxItem" paramflags="const"/>
          <parameter name="Shift" type="TShiftState" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="DoMouseSelectFinish" visibility="public" procflags="abstract virtual" file="FMX.ListBox.pas" line="703">
        <devnotes>
           <summary>MouseSelectFinish implementation</summary>
        </devnotes>
        <parameters>
          <parameter name="Item" type="TListBoxItem" paramflags="const"/>
          <parameter name="Shift" type="TShiftState" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="DoKeyboardSelect" visibility="public" procflags="abstract virtual" file="FMX.ListBox.pas" line="705">
        <devnotes>
           <summary>KeyboardSelect implementation</summary>
        </devnotes>
        <parameters>
          <parameter name="KeyAction" type="TListBoxSelector.TKeyAction" paramflags="const"/>
          <parameter name="Shift" type="TShiftState" paramflags="const"/>
          <parameter name="Item" type="TListBoxItem" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="DoUserSetIndex" visibility="public" procflags="abstract virtual" file="FMX.ListBox.pas" line="707">
        <devnotes>
           <summary>UserSetIndex implementation</summary>
        </devnotes>
        <parameters>
          <parameter name="Index" type="Integer" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="DoItemStateChanged" visibility="public" procflags="virtual" file="FMX.ListBox.pas" line="709">
        <devnotes>
           <summary>ItemStateChanged implementation</summary>
        </devnotes>
        <parameters>
          <parameter name="Item" type="TListBoxItem" paramflags="const"/>
          <parameter name="UserChange" type="Boolean" paramflags="const"/>
        </parameters>
      </procedure>
      <property name="MultiSelectStyle" visibility="public" read="GetMultiSelectStyle" type="TMultiSelectStyle" file="FMX.ListBox.pas" line="711">
        <devnotes>
           <summary>MultiSelectStyle that this selection controller implements</summary>
        </devnotes>
      </property>
      <property name="MouseSelectActive" visibility="public" read="GetMouseSelectActive" write="SetMouseSelectActive" type="Boolean" file="FMX.ListBox.pas" line="713">
        <devnotes>
           <summary>True during mouse selection</summary>
        </devnotes>
      </property>
    </members>
  </class>
  <classref name="TListBoxSelectorClass" ref="TListBoxSelector" file="FMX.ListBox.pas" line="716"/>
  <class name="TListBoxSelectorFactory" file="FMX.ListBox.pas" line="720">
    
    <ancestor name="TObject" namespace="System">
      <methodref name="Create" visibility="public" procflags="constructor">
      </methodref>
      <methodref name="Free" visibility="public">
      </methodref>
      <methodref name="DisposeOf" visibility="public" procflags="inline">
      </methodref>
      <methodref name="InitInstance" visibility="public" procflags="class">
      </methodref>
      <methodref name="CleanupInstance" visibility="public">
      </methodref>
      <methodref name="ClassType" visibility="public" procflags="inline">
      </methodref>
      <methodref name="ClassName" visibility="public" procflags="class">
      </methodref>
      <methodref name="ClassNameIs" visibility="public" procflags="class">
      </methodref>
      <methodref name="ClassParent" visibility="public" procflags="class inline">
      </methodref>
      <methodref name="ClassInfo" visibility="public" procflags="class inline">
      </methodref>
      <methodref name="InstanceSize" visibility="public" procflags="class inline">
      </methodref>
      <methodref name="InheritsFrom" visibility="public" procflags="class">
      </methodref>
      <methodref name="MethodAddress" visibility="public" procflags="class overload">
      </methodref>
      <methodref name="MethodAddress" visibility="public" procflags="class overload">
      </methodref>
      <methodref name="MethodName" visibility="public" procflags="class">
      </methodref>
      <methodref name="QualifiedClassName" visibility="public" procflags="class">
      </methodref>
      <methodref name="FieldAddress" visibility="public" procflags="overload">
      </methodref>
      <methodref name="FieldAddress" visibility="public" procflags="overload">
      </methodref>
      <methodref name="GetInterface" visibility="public">
      </methodref>
      <methodref name="GetInterfaceEntry" visibility="public" procflags="class">
      </methodref>
      <methodref name="GetInterfaceTable" visibility="public" procflags="class inline">
      </methodref>
      <methodref name="UnitName" visibility="public" procflags="class">
      </methodref>
      <methodref name="UnitScope" visibility="public" procflags="class">
      </methodref>
      <methodref name="Equals" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="GetHashCode" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="ToString" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="SafeCallException" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="AfterConstruction" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="BeforeDestruction" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="Dispatch" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="DefaultHandler" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="NewInstance" visibility="public" procflags="class virtual">
      </methodref>
      <methodref name="FreeInstance" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="Destroy" visibility="public" procflags="destructor virtual">
      </methodref>
      <methodref name="GetDisposed" visibility="protected" procflags="inline">
      </methodref>
      <methodref name="CheckDisposed" visibility="protected" procflags="inline">
      </methodref>
      <propertyref name="Disposed" visibility="protected">
      </propertyref>
    </ancestor>
    <members>
      <field name="FSelectors" visibility="private" varflags="class" file="FMX.ListBox.pas" line="722">
        <array name="FSelectors" visibility="private" file="FMX.ListBox.pas" line="722">
          <element type="TListBoxSelectorClass"/>
        </array>
      </field>
      <function name="CreateSelector" visibility="public" procflags="class" file="FMX.ListBox.pas" line="725">
        <devnotes>
           <summary>Create TListBoxSelector for ListBox based on MultiSelectStyle</summary>
        </devnotes>
        <parameters>
          <parameter name="ListBox" type="TCustomListBox" paramflags="const"/>
          <parameter name="MultiSelectStyle" type="TMultiSelectStyle" paramflags="const"/>
          <retval type="TListBoxSelector">
            <devnotes>
               <summary>Base class for selection controllers. Selection controllers handle various types of selection.
                Normally TListBox.MultiSelectStyle property selects one of the three predefined ones:
                TSingleSelectionController, TMutiselectSelectionController, TExtendedSelectionController
                </summary>
            </devnotes>
          </retval>
        </parameters>
      </function>
      <procedure name="RegisterSelector" visibility="public" procflags="class" file="FMX.ListBox.pas" line="727">
        <devnotes>
           <summary>Register a selector that handles given MultiSelectStyle. Used during framework initialization</summary>
        </devnotes>
        <parameters>
          <parameter name="MultiSelectStyle" type="TMultiSelectStyle"/>
          <parameter name="Selector" type="TListBoxSelectorClass"/>
        </parameters>
      </procedure>
    </members>
  </class>
  <class name="TComboListBox" file="FMX.ListBox.pas" line="732">
    
    <interfaces>
      <implements name="IContent"/>
    </interfaces>
    <members>
      <field name="FComboBox" type="TCustomComboBox" visibility="protected" size="4" offset="1328" file="FMX.ListBox.pas" line="734">
        <attributes>
          <attribute name="TObject"/>
        </attributes>
      </field>
      <field name="FInKeyDown" type="Boolean" visibility="protected" size="1" offset="1332" file="FMX.ListBox.pas" line="735"/>
      <procedure name="KeyDown" visibility="protected" procflags="override" file="FMX.ListBox.pas" line="736">
        <parameters>
          <parameter name="Key" type="Word" paramflags="var"/>
          <parameter name="KeyChar" type="Char" paramflags="var"/>
          <parameter name="Shift" type="TShiftState"/>
        </parameters>
      </procedure>
      <function name="GetObservers" visibility="protected" procflags="override" file="FMX.ListBox.pas" line="737">
        <parameters>
          <retval type="TObservers"/>
        </parameters>
      </function>
      <function name="GetDefaultStyleLookupName" visibility="protected" procflags="override" file="FMX.ListBox.pas" line="738">
        <parameters>
          <retval type="string"/>
        </parameters>
      </function>
      <procedure name="ContentChanged" visibility="protected" procflags="virtual" file="FMX.ListBox.pas" line="740">
      </procedure>
      <constructor name="Create" visibility="public" file="FMX.ListBox.pas" line="742">
        <parameters>
          <parameter name="AOwner" type="TComponent"/>
        </parameters>
      </constructor>
      <procedure name="MouseMove" visibility="public" procflags="override" file="FMX.ListBox.pas" line="743">
        <parameters>
          <parameter name="Shift" type="TShiftState"/>
          <parameter name="X" type="Single"/>
          <parameter name="Y" type="Single"/>
        </parameters>
      </procedure>
      <procedure name="MouseUp" visibility="public" procflags="override" file="FMX.ListBox.pas" line="744">
        <parameters>
          <parameter name="Button" type="TMouseButton"/>
          <parameter name="Shift" type="TShiftState"/>
          <parameter name="X" type="Single"/>
          <parameter name="Y" type="Single"/>
        </parameters>
      </procedure>
    </members>
  </class>
  <class name="TCustomComboBox" file="FMX.ListBox.pas" line="749">
    
    <interfaces>
      <implements name="IGlyph"/>
      <implements name="IItemsContainer"/>
    </interfaces>
    <members>
      <field name="FDropDownCount" type="Integer" visibility="private" size="4" offset="944" file="FMX.ListBox.pas" line="751"/>
      <field name="FDroppedDown" type="Boolean" visibility="private" size="1" offset="948" file="FMX.ListBox.pas" line="752"/>
      <field name="FIsPressed" type="Boolean" visibility="private" size="1" offset="949" file="FMX.ListBox.pas" line="753"/>
      <field name="FOldItemIndex" type="Integer" visibility="private" size="4" offset="952" file="FMX.ListBox.pas" line="754"/>
      <field name="FItemWidth" type="Single" visibility="private" size="4" offset="956" file="FMX.ListBox.pas" line="755"/>
      <field name="FOnChange" type="TNotifyEvent" visibility="private" size="8" offset="960" file="FMX.ListBox.pas" line="756"/>
      <field name="FOnClosePopup" type="TNotifyEvent" visibility="private" size="8" offset="968" file="FMX.ListBox.pas" line="757"/>
      <field name="FOnPopup" type="TNotifyEvent" visibility="private" size="8" offset="976" file="FMX.ListBox.pas" line="758"/>
      <field name="FImageLink" type="TGlyphImageLink" visibility="private" size="4" offset="984" file="FMX.ListBox.pas" line="759"/>
      <field name="FDropDownKind" type="TDropDownKind" visibility="private" size="1" offset="988" file="FMX.ListBox.pas" line="760"/>
      <field name="FPopup" type="TPopup" visibility="private" size="4" offset="992" file="FMX.ListBox.pas" line="761"/>
      <field name="FListBox" type="TComboListBox" visibility="private" size="4" offset="996" file="FMX.ListBox.pas" line="762"/>
      <field name="FItemIndex" type="Integer" visibility="private" size="4" offset="1000" file="FMX.ListBox.pas" line="763"/>
      <field name="FListPicker" type="TCustomListPicker" visibility="private" size="4" offset="1004" file="FMX.ListBox.pas" line="764"/>
      <field name="FImages" type="TCustomImageList" visibility="private" size="4" offset="1008" file="FMX.ListBox.pas" line="765">
        <attributes>
          <attribute name="TObject"/>
        </attributes>
      </field>
      <field name="FItemsChanged" type="Boolean" visibility="private" size="1" offset="1012" file="FMX.ListBox.pas" line="766"/>
      <procedure name="SetItemIndex" visibility="private" file="FMX.ListBox.pas" line="767">
        <parameters>
          <parameter name="Value" type="Integer" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="GetItemIndex" visibility="private" file="FMX.ListBox.pas" line="768">
        <parameters>
          <retval type="Integer"/>
        </parameters>
      </function>
      <function name="GetCount" visibility="private" file="FMX.ListBox.pas" line="769">
        <parameters>
          <retval type="Integer"/>
        </parameters>
      </function>
      <procedure name="SetListBoxResource" visibility="private" file="FMX.ListBox.pas" line="770">
        <parameters>
          <parameter name="Value" type="string" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="GetListBoxResource" visibility="private" file="FMX.ListBox.pas" line="771">
        <parameters>
          <retval type="string"/>
        </parameters>
      </function>
      <function name="GetItemHeight" visibility="private" file="FMX.ListBox.pas" line="772">
        <parameters>
          <retval type="Single"/>
        </parameters>
      </function>
      <procedure name="SetItemHeight" visibility="private" file="FMX.ListBox.pas" line="773">
        <parameters>
          <parameter name="Value" type="Single" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetItemWidth" visibility="private" file="FMX.ListBox.pas" line="774">
        <parameters>
          <parameter name="Value" type="Single" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="GetPlacement" visibility="private" file="FMX.ListBox.pas" line="775">
        <parameters>
          <retval type="TPlacement"/>
        </parameters>
      </function>
      <function name="GetPlacementRectangle" visibility="private" file="FMX.ListBox.pas" line="776">
        <parameters>
          <retval type="TBounds"/>
        </parameters>
      </function>
      <procedure name="SetPlacement" visibility="private" file="FMX.ListBox.pas" line="777">
        <parameters>
          <parameter name="Value" type="TPlacement" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetPlacementRectangle" visibility="private" file="FMX.ListBox.pas" line="778">
        <parameters>
          <parameter name="Value" type="TBounds" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="UpdateCurrentItem" visibility="private" file="FMX.ListBox.pas" line="779">
      </procedure>
      <function name="GetItems" visibility="private" file="FMX.ListBox.pas" line="780">
        <parameters>
          <retval type="TStrings"/>
        </parameters>
      </function>
      <function name="GetListItem" visibility="private" file="FMX.ListBox.pas" line="781">
        <parameters>
          <parameter name="Index" type="Integer"/>
          <retval type="TListBoxItem"/>
        </parameters>
      </function>
      <function name="GetSelected" visibility="private" file="FMX.ListBox.pas" line="782">
        <parameters>
          <retval type="TListBoxItem"/>
        </parameters>
      </function>
      <procedure name="SetItems" visibility="private" file="FMX.ListBox.pas" line="783">
        <parameters>
          <parameter name="Value" type="TStrings" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="GetImages" visibility="private" file="FMX.ListBox.pas" line="784">
        <parameters>
          <retval type="TCustomImageList">
            <devnotes>
               <summary> List of images. Base class that used in fire monkey without published properties </summary>
            </devnotes>
          </retval>
        </parameters>
      </function>
      <procedure name="SetImages" visibility="private" file="FMX.ListBox.pas" line="785">
        <parameters>
          <parameter name="Value" type="TCustomImageList" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="GetImageIndex" visibility="private" file="FMX.ListBox.pas" line="787">
        <parameters>
          <retval type="TImageIndex"/>
        </parameters>
      </function>
      <procedure name="SetImageIndex" visibility="private" file="FMX.ListBox.pas" line="788">
        <parameters>
          <parameter name="Value" type="TImageIndex" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="GetImageList" visibility="private" procflags="inline" file="FMX.ListBox.pas" line="789">
        <parameters>
          <retval type="TBaseImageList"/>
        </parameters>
      </function>
      <procedure name="SetImageList" visibility="private" file="FMX.ListBox.pas" line="790">
        <parameters>
          <parameter name="Value" type="TBaseImageList" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="GetItemsCount" visibility="private" file="FMX.ListBox.pas" line="794">
        <parameters>
          <retval type="Integer"/>
        </parameters>
      </function>
      <function name="GetItem" visibility="private" file="FMX.ListBox.pas" line="795">
        <parameters>
          <parameter name="AIndex" type="Integer" paramflags="const"/>
          <retval type="TFmxObject"/>
        </parameters>
      </function>
      <function name="UseNativePicker" visibility="private" file="FMX.ListBox.pas" line="796">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <function name="ItemsStored" visibility="private" file="FMX.ListBox.pas" line="797">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <procedure name="HandleStringsChanged" visibility="private" file="FMX.ListBox.pas" line="798">
        <parameters>
          <parameter name="S" type="string" paramflags="const"/>
          <parameter name="Op" type="TCustomListBox.TStringsChangeOp" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="DefineProperties" visibility="protected" procflags="override" file="FMX.ListBox.pas" line="800">
        <parameters>
          <parameter name="Filer" type="TFiler"/>
        </parameters>
      <devnotes><summary>




Designates methods for storing an object's unpublished data on a stream such as a form file.
FMX.ListBox.TCustomComboBox.DefineProperties inherits from System.Classes.TComponent.DefineProperties. All content below this line refers to System.Classes.TComponent.DefineProperties.
Designates methods for storing an object's unpublished data on a stream such as a form file.
TComponent overrides the DefineProperties method defined in TPersistent to define &quot;fake&quot; Top and Left properties. These are defined so that components that are not controls can be manipulated at design time. However, the Top and Left properties are hidden, that is, they are not published, because only controls appear at run time.
DefineProperties is virtual; descendent classes can override it. When overriding DefineProperties, be aware that the Ancestor property of Filer might be set, and that this property can determine whether or not it is appropriate to write properties.
DefineProperties is called automatically as part of the component streaming system; do not call it directly.
</summary></devnotes></procedure>
      <procedure name="DoOnValueChangedFromDropDownList" visibility="protected" file="FMX.ListBox.pas" line="801">
        <parameters>
          <parameter name="Sender" type="TObject"/>
          <parameter name="AValueIndex" type="Integer" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="DoChange" visibility="protected" procflags="dynamic" file="FMX.ListBox.pas" line="802">
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="DoPopup" visibility="protected" file="FMX.ListBox.pas" line="803">
        <parameters>
          <parameter name="Sender" type="TObject"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="DoClosePopup" visibility="protected" file="FMX.ListBox.pas" line="804">
        <parameters>
          <parameter name="Sender" type="TObject"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="DoClosePicker" visibility="protected" file="FMX.ListBox.pas" line="805">
        <parameters>
          <parameter name="Sender" type="TObject"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <function name="CreateListBox" visibility="protected" procflags="virtual" file="FMX.ListBox.pas" line="806">
        <parameters>
          <retval type="TComboListBox"/>
        </parameters>
      <devnotes><summary>
Creates the list box associated with the combo box.
Call CreateListBox to instantiate the list box component of the current combo box. The list box is of type TComboListBox.
</summary></devnotes></function>
      <function name="CanObserve" visibility="protected" procflags="override" file="FMX.ListBox.pas" line="807">
        <parameters>
          <parameter name="ID" type="Integer" paramflags="const"/>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
For internal use only.
Do not use this member. It is for internal use only.


</summary></devnotes></function>
      <procedure name="GetChildren" visibility="protected" procflags="override" file="FMX.ListBox.pas" line="808">
        <parameters>
          <parameter name="Proc" type="TGetChildProc"/>
          <parameter name="Root" type="TComponent"/>
        </parameters>
      <devnotes><summary>


Enumerates all child components.
FMX.ListBox.TCustomComboBox.GetChildren inherits from System.Classes.TComponent.GetChildren. All content below this line refers to System.Classes.TComponent.GetChildren.
Enumerates all child components.
GetChildren is used internally in the component streaming system. It is not necessary to call it directly. 
GetChildren expects a TGetChildProc routine that receives all enumerated components. 
Root represents the owner of the components that will be enumerated.
This method does nothing in TComponent and is expected to be overridden in descendants. 
</summary></devnotes></procedure>
      <function name="GetDefaultSize" visibility="protected" procflags="override" file="FMX.ListBox.pas" line="809">
        <parameters>
          <retval type="TSizeF"/>
        </parameters>
      <devnotes><summary>
Getter of DefaultSize.
FMX.ListBox.TCustomComboBox.GetDefaultSize inherits from FMX.Controls.TControl.GetDefaultSize. All content below this line refers to FMX.Controls.TControl.GetDefaultSize.
Getter of DefaultSize.


</summary></devnotes></function>
      <procedure name="ApplyStyle" visibility="protected" procflags="override" file="FMX.ListBox.pas" line="810">
      <devnotes><summary>
Customizes styles in complex objects.
FMX.ListBox.TCustomComboBox.ApplyStyle inherits from FMX.Controls.TStyledControl.ApplyStyle. All content below this line refers to FMX.Controls.TStyledControl.ApplyStyle.
Customizes styles in complex objects.
TStyledControl descendants override it to apply styles in concordance with their primitive components.      
Do not call ApplyStyle explicitly in an application. It is called by the ApplyStyleLookup method when object styles are updated.
For an example of an ApplyStyle implementation, see &quot;TCalloutPanel:Style Contracts&quot; in FireMonkey Component Design.
</summary></devnotes></procedure>
      <procedure name="DoRealign" visibility="protected" procflags="override" file="FMX.ListBox.pas" line="811">
      <devnotes><summary>
Performs the alignment of a FireMonkey control.
FMX.ListBox.TCustomComboBox.DoRealign inherits from FMX.Controls.TControl.DoRealign. All content below this line refers to FMX.Controls.TControl.DoRealign.
Performs the alignment of a FireMonkey control.

 See Also
FMX.Types.AlignObjects

</summary></devnotes></procedure>
      <procedure name="DoContentPaint" visibility="protected" procflags="virtual" file="FMX.ListBox.pas" line="812">
        <parameters>
          <parameter name="Sender" type="TObject"/>
          <parameter name="Canvas" type="TCanvas"/>
          <parameter name="ARect" type="TRectF" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Renders the content of the combo box.
DoContentPaint paints the content of the combo box when it is not expanded.
DoContentPaint is used internally.
</summary></devnotes></procedure>
      <procedure name="DoExit" visibility="protected" procflags="override" file="FMX.ListBox.pas" line="813">
      <devnotes><summary>
OnExit event dispatcher.
FMX.ListBox.TCustomComboBox.DoExit inherits from FMX.Controls.TControl.DoExit. All content below this line refers to FMX.Controls.TControl.DoExit.
OnExit event dispatcher.
DoExit is called automatically when the input focus moves from the current object.
DoExit repaints the control, starts the animation by calling StartTriggerAnimation, and applies effects by calling ApplyTriggerEffect. When a control receives focus, it is highlighted. The animations and effects applied by DoExit background the control.
Override the protected DoExit method to provide other responses when the focus moves from the current control.
</summary></devnotes></procedure>
      <procedure name="DoAddObject" visibility="protected" procflags="override" file="FMX.ListBox.pas" line="814">
        <parameters>
          <parameter name="AObject" type="TFmxObject" paramflags="const"/>
        </parameters>
      <devnotes><summary>


Adds the AObject object to the Children list of children attached to this parent object (self).
FMX.ListBox.TCustomComboBox.DoAddObject inherits from FMX.Types.TFmxObject.DoAddObject. All content below this line refers to FMX.Types.TFmxObject.DoAddObject.
Adds the AObject object to the Children list of children attached to this parent object (self).
DoAddObject adds the object provided in the AObject parameter to the list of children stored in the Children property of this object (self). DoAddObject changes the parent of AObject to this object (self) and sets the root of AObject to the Root object of this object (self).
Descendant classes, like TCommonCustomForm and TControl, additionally handle tab stop lists keeping ordered lists of objects to which the user can tab. If such descendant class supports the ITabStopController interface and AObject is an object of a class supporting the IControl interface, then DoAddObject of this descendant adds AObject to the TabList tab stop lists of the (self) object. 
DoAddObject is internally called from AddObject.
</summary></devnotes></procedure>
      <procedure name="DoInsertObject" visibility="protected" procflags="override" file="FMX.ListBox.pas" line="815">
        <parameters>
          <parameter name="Index" type="Integer"/>
          <parameter name="AObject" type="TFmxObject" paramflags="const"/>
        </parameters>
      <devnotes><summary>




Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="DoRemoveObject" visibility="protected" procflags="override" file="FMX.ListBox.pas" line="816">
        <parameters>
          <parameter name="AObject" type="TFmxObject" paramflags="const"/>
        </parameters>
      <devnotes><summary>




Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="MouseDown" visibility="protected" procflags="override" file="FMX.ListBox.pas" line="817">
        <parameters>
          <parameter name="Button" type="TMouseButton"/>
          <parameter name="Shift" type="TShiftState"/>
          <parameter name="X" type="Single"/>
          <parameter name="Y" type="Single"/>
        </parameters>
      <devnotes><summary>
OnMouseDown event dispatcher. 
FMX.ListBox.TCustomComboBox.MouseDown inherits from FMX.Controls.TControl.MouseDown. All content below this line refers to FMX.Controls.TControl.MouseDown.
OnMouseDown event dispatcher. 
A control calls MouseDown in response to any of mouse-down messages, decoding the message parameters into the shift-key state and position, which it passes in the Shift, X, and Y parameters, respectively:

Button determines which mouse button is pressed: left, right, or middle.
Shift indicates which shift keys--SHIFT, CTRL, ALT, and CMD (only for Mac)--were down when the user pressed the mouse button.
X and Y are the pixel coordinates of the mouse pointer within the client area of the control. If Button is mbLeft, MouseDown sets PressedPosition as a TPointF(X,Y).
Override the protected MouseDown method to provide other responses when a mouse button is down while the cursor is over the control.

</summary></devnotes></procedure>
      <procedure name="MouseUp" visibility="protected" procflags="override" file="FMX.ListBox.pas" line="818">
        <parameters>
          <parameter name="Button" type="TMouseButton"/>
          <parameter name="Shift" type="TShiftState"/>
          <parameter name="X" type="Single"/>
          <parameter name="Y" type="Single"/>
        </parameters>
      <devnotes><summary>
OnMouseUp event dispatcher. 
FMX.ListBox.TCustomComboBox.MouseUp inherits from FMX.Controls.TControl.MouseUp. All content below this line refers to FMX.Controls.TControl.MouseUp.
OnMouseUp event dispatcher. 
A control calls MouseUp in response to any of mouse-up messages, decoding the message parameters into the shift-key state and position, which it passes in the Shift, X and Y parameters, respectively: 

Button determines which mouse button was previously pressed: left, right, or middle.
Shift indicates which shift keys--SHIFT, CTRL, ALT, and CMD (only for Mac)--were down when the pressed mouse button is released.
X and Y are the pixel coordinates of the mouse pointer within the client area of the control.
Override the protected MouseUp method to provide other responses when the mouse button previously pressed is released while the cursor is over the control.
</summary></devnotes></procedure>
      <procedure name="MouseWheel" visibility="protected" procflags="override" file="FMX.ListBox.pas" line="819">
        <parameters>
          <parameter name="Shift" type="TShiftState"/>
          <parameter name="WheelDelta" type="Integer"/>
          <parameter name="Handled" type="Boolean" paramflags="var"/>
        </parameters>
      <devnotes><summary>
OnMouseWheel event dispatcher. 
FMX.ListBox.TCustomComboBox.MouseWheel inherits from FMX.Controls.TControl.MouseWheel. All content below this line refers to FMX.Controls.TControl.MouseWheel.
OnMouseWheel event dispatcher. 
A control calls MouseWheel in response to any of mouse wheel messages, decoding the message parameters into the shift-key state, wheel rotation, and handle, which it passes in the Shift, WheelDelta, and Handled parameters, respectively:

Shift indicates which shift keys--SHIFT, CTRL, ALT, and CMD (only for Mac)--were down when the pressed mouse button is released.
WheelDelta indicates the distance the wheel was rotated. WheelDelta is positive if the mouse was rotated upward, negative if the mouse was rotated downward.
Handled indicates whether the scroll bar was already moved, depending on the WheelDelta value. If one of the scrolls bars (vertical or horizontal) was already handled or it does not exist, MouseWheel tries to apply the rolling on the other scroll bar, if it exists.
Override the protected MouseWheel method to provide other responses when the mouse wheel is rotated while the cursor is over the control.
</summary></devnotes></procedure>
      <procedure name="KeyDown" visibility="protected" procflags="override" file="FMX.ListBox.pas" line="820">
        <parameters>
          <parameter name="Key" type="Word" paramflags="var"/>
          <parameter name="KeyChar" type="Char" paramflags="var"/>
          <parameter name="Shift" type="TShiftState"/>
        </parameters>
      <devnotes><summary>
Provides a response when a key is pressed down while the control has the keyboard focus. 
FMX.ListBox.TCustomComboBox.KeyDown inherits from FMX.Controls.TControl.KeyDown. All content below this line refers to FMX.Controls.TControl.KeyDown.
Provides a response when a key is pressed down while the control has the keyboard focus. 
If the pressed key is the Applications key (Key = vkApps), then KeyDown shows the context menu of the control. Otherwise, KeyDown calls the OnKeyDown event handler if one is assigned. 
TCommonCustomForm and descendant of TControl classes--like TCustomGrid--call KeyDown from their methods handling key pressing. They decode the message parameters into the key code, character code, and shift state. They pass them into the called KeyDown method in the Key, KeyChar, and Shift parameters, respectively:  



Parameters

Descriptions



Key



Is the scan code of the pressed keyboard key or $0.
If a pressed key combination can be a shortcut, then Key &lt;&gt; 0 is a virtual key and KeyChar = #0. 
Physical scan codes of the same key can differ under different platforms (Windows or iOS).
Platform-specific units (for example FMX.Platform.Mac.pas) should translate native scan codes to corresponding Windows codes defined in the UITypes unit.  For example, 

vkReturn = $0D;  {  13 } corresponds to the RETURN keyboard key.
vkF2     = $71;  { 113 } corresponds to the F2 keyboard key.



KeyChar



Is the pressed character (digit) or #0.
If a pressed key combination can be treated as a printable character or digit, then Key = 0 and KeyChar contains a pressed symbol according to the current keyboard's input language, keyboard mode (CAPS LOCK and NUM LOCK keys), keyboard Shift state, and IME state. Editors can use this symbol to add into a text being edited. 




Shift



Indicates which shift keys--SHIFT, CTRL, ALT, and CMD (only for Mac)--were down when the specified key was pressed with the control in focus.


If the control has successfully processed the pressed key combination and no additional processing is required, then KeyDown assigns Key = 0 and KeyChar = #0.  
Override the protected KeyDown method to provide other responses when a key is down while the control has keyboard input focus.
See TCommonCustomForm.KeyDown for more information about parameters.
</summary></devnotes></procedure>
      <procedure name="Loaded" visibility="protected" procflags="override" file="FMX.ListBox.pas" line="821">
      <devnotes><summary>
Initializes the component after the form file has been read into memory.
FMX.ListBox.TCustomComboBox.Loaded inherits from FMX.Controls.TControl.Loaded. All content below this line refers to FMX.Controls.TControl.Loaded.
Initializes the component after the form file has been read into memory. 
Loaded inherits TComponent.Loaded, realigns the children, if any, and updates the tab list.
For details, see TComponent.Loaded.
</summary></devnotes></procedure>
      <procedure name="InitPicker" visibility="protected" procflags="virtual" file="FMX.ListBox.pas" line="823">
        <devnotes><summary>
Initializes a list picker. 
InitPicker initializes the list picker provided with the AListPicker parameter.
</summary></devnotes>
        <parameters>
          <parameter name="AListPicker" type="TCustomListPicker"/>
        </parameters>
      </procedure>
      <procedure name="RecalculatePopupSize" visibility="protected" procflags="virtual" file="FMX.ListBox.pas" line="825">
        <devnotes><summary>
Recalculates the pop-up size based on the items. 
</summary></devnotes>
      </procedure>
      <procedure name="ImagesChanged" visibility="protected" procflags="virtual" file="FMX.ListBox.pas" line="829">
        <devnotes><summary>
Should be called when the component needs to redraw the image.
ImagesChanged  should be called when you change the Images reference to the TCustomImageList object or the object itself.
</summary></devnotes>
      </procedure>
      <property name="Popup" visibility="protected" read="FPopup" type="TPopup" file="FMX.ListBox.pas" line="830"><devnotes><summary>
Gets the pop-up window that is used as a holder for the drop-down list.
</summary></devnotes></property>
      <property name="CanFocus" visibility="protected" read="FCanFocus" write="FCanFocus" type="Boolean" default="1" hoisted="true" file="FMX.ListBox.pas" line="831"><devnotes><summary>
Specifies whether the current control can receive focus. 
CanFocus is True if it can receive focus, and False otherwise.
If it is set to False, the control cannot be selected when using the TAB key.
A control can receive focus after it is created.
</summary></devnotes></property>
      <property name="CanParentFocus" visibility="protected" read="FCanParentFocus" write="FCanParentFocus" type="Boolean" default="0" hoisted="true" file="FMX.ListBox.pas" line="832"><devnotes><summary>
Specifies whether the parent of this control should be evaluated to receive focus.
CanParentFocus is True when the parent of this control should be evaluated to receive focus if this control cannot receive focus itself, and False otherwise.
</summary></devnotes></property>
      <property name="ItemHeight" visibility="protected" read="GetItemHeight" write="SetItemHeight" type="Single" default="0" file="FMX.ListBox.pas" line="833"><devnotes><summary>
Specifies the height of the items from the drop-down list.
Use ItemHeight to specify the height, in pixels, of the items in the combo box list.
</summary></devnotes></property>
      <property name="ItemWidth" visibility="protected" read="FItemWidth" write="SetItemWidth" type="Single" default="0" file="FMX.ListBox.pas" line="834"><devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></property>
      <property name="DropDownCount" visibility="protected" read="FDropDownCount" write="FDropDownCount" type="Integer" default="8" file="FMX.ListBox.pas" line="835"><devnotes><summary>
Specifies the maximum number of items displayed in the drop-down list.
By default, the drop-down list displays 8 items that are visible without requiring the user to scroll. To make the drop-down list smaller or larger, specify a number smaller or larger than eight as the DropDownCount value.
If the DropDownCount value is larger than the number of items, the drop-down list will be only large enough to display the existing items. If the DropDownCount value is smaller than the number of items, the drop-down list displays a scroll bar. 
</summary></devnotes></property>
      <property name="Placement" visibility="protected" read="GetPlacement" write="SetPlacement" type="TPlacement" default="0" file="FMX.ListBox.pas" line="836"><devnotes><summary>
Specifies the position of the list box relative to the combo box button.
For example, if Placement is set to TPlacement.Right, the drop-down list is displayed to the right of the combo box.

</summary></devnotes></property>
      <property name="PlacementRectangle" visibility="protected" read="GetPlacementRectangle" write="SetPlacementRectangle" type="TBounds" file="FMX.ListBox.pas" line="837"><devnotes><summary>
Specifies the position of the drop-down list of the combo box.
Use PlacementRectangle to specify the coordinates of the placement rectangle. The drop-down list will be displayed with the upper-left corner in the lower-left corner of the placement rectangle. The origin is considered to be the upper-left corner of the combo box button.

</summary></devnotes></property>
      <property name="DropDownKind" visibility="protected" read="FDropDownKind" write="FDropDownKind" type="TDropDownKind" default="1" file="FMX.ListBox.pas" line="838"><devnotes><summary>
Defines whether to use TCustomListPicker pickers providing platform-specific drop-down lists to select string items.
The TDropDownKind type is also used in the TComboEdit, 
TComboBox, and TPopupBox controls to define whether to use the TCustomListPicker picker to provide platform-specific controls to select string items from drop-down lists.
</summary></devnotes></property>
      <property name="ListBoxResource" visibility="protected" read="GetListBoxResource" write="SetListBoxResource" type="string" default="0" file="FMX.ListBox.pas" line="839"><devnotes><summary>
Specifies the name of the resource object to which the drop-down list of the combo box is linked.
Use ListBoxResource to specify the style for the drop-down list component of the combo box.
</summary></devnotes></property>
      <property name="Picker" visibility="protected" read="FListPicker" type="TCustomListPicker" file="FMX.ListBox.pas" line="840"><devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></property>
      <event name="OnChange" visibility="protected" read="FOnChange" write="FOnChange" type="TNotifyEvent" file="FMX.ListBox.pas" line="841"><devnotes><summary>
Occurs when the selected item in the combo box changes.
Write an OnChange event handler to take specific action immediately after a new item is selected from the list.
</summary></devnotes></event>
      <event name="OnClosePopup" visibility="protected" read="FOnClosePopup" write="FOnClosePopup" type="TNotifyEvent" file="FMX.ListBox.pas" line="842"><devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></event>
      <event name="OnPopup" visibility="protected" read="FOnPopup" write="FOnPopup" type="TNotifyEvent" file="FMX.ListBox.pas" line="843"><devnotes><summary>
Occurs just before the drop-drown list appears.
Write an OnPopup event handler to take specific action just before the drop-drown list appears.
</summary></devnotes></event>
      <constructor name="Create" visibility="public" file="FMX.ListBox.pas" line="845">
        <parameters>
          <parameter name="AOwner" type="TComponent"/>
        </parameters>
      <devnotes><summary>
Allocates memory and constructs a safely initialized instance of a component.
Allocates memory and constructs a safely initialized instance of a component.
FMX.ListBox.TCustomComboBox.Create inherits from System.Classes.TComponent.Create. All content below this line refers to System.Classes.TComponent.Create.
Allocates memory and constructs a safely initialized instance of a component.
All objects have a Create method that constructs the object. TComponent redefines Create so that, for components, Create also:

Establishes the relationship of a component and its Owner, as indicated by the AOwner parameter.
Sets the ComponentStyle property to csInheritable, meaning that the component can be inherited by a descendent form type.
It is not necessary to explicitly create components added in the Form Designer. These components are created automatically when the application is run, and they are destroyed when the application is closed.
For components created programmatically, that is, not created in the Form Designer, call Create and pass in an owner component as the AOwner parameter. The owner disposes of the component when it is destroyed. If the component is not owned, then use Free when it needs to be destroyed.

Tip:  When passing in Self as the Owner parameter, consider what Self references. If a component creates another component in one of its methods, then Self refers to the first component and not the component being created, which is then owned by the first component.
Note:  The TComponent constructor is virtual in part to allow polymorphic instantiation of class references. This is critical to the streaming system and to the Form Designer. Do not forget to use the override directive when declaring a new component's Create constructor.</summary></devnotes></constructor>
      <destructor name="Destroy" visibility="public" file="FMX.ListBox.pas" line="846">
        <parameters>
        </parameters>
      <devnotes><summary>
Disposes of the component and its owned components.
Disposes of the component and its owned components.
FMX.ListBox.TCustomComboBox.Destroy inherits from System.Classes.TComponent.Destroy. All content below this line refers to System.Classes.TComponent.Destroy.
Disposes of the component and its owned components.
Do not call Destroy directly. Call Free instead. Free verifies that the component is not nil, and only then calls Destroy.
Never explicitly free a component in one of its own event handlers, nor free a component from the event handler of a component that it owns or contains.
To destroy a form, call its Release method. Release waits for all the form's event handlers and the event handlers of the form's components to finish executing before destroying the form.

Note: A form owns all the controls and nonvisual components that are placed on it in design mode. When it is freed, all of these components are automatically freed as well. By default, all forms are owned by the global Application object. When an application terminates, it frees the global Application object, which frees all forms. For objects that are not components, and for components created with a nil owner, be sure to call Free after finishing with the object; otherwise the memory allocated for the object will be lost until the application terminates.</summary></devnotes></destructor>
      <procedure name="SetNewScene" visibility="public" procflags="override" file="FMX.ListBox.pas" line="847">
        <parameters>
          <parameter name="AScene" type="IScene"/>
        </parameters>
      <devnotes><summary>
Sets a new Scene for the current control.
Sets a new Scene for the current control.
FMX.ListBox.TCustomComboBox.SetNewScene inherits from FMX.Controls.TControl.SetNewScene. All content below this line refers to FMX.Controls.TControl.SetNewScene.
Sets a new Scene for the current control.
AScene specifies the new scene. If AScene is empty, SetNewScene does nothing.
SetNewScene sets the same scene for the control's children.
</summary></devnotes></procedure>
      <procedure name="Clear" visibility="public" procflags="virtual" file="FMX.ListBox.pas" line="848">
      <devnotes><summary>
Deletes all the items from the Items list.
Call Clear to empty the combo box at run time. 
</summary></devnotes></procedure>
      <procedure name="DropDown" visibility="public" procflags="virtual" file="FMX.ListBox.pas" line="849">
      <devnotes><summary>
Opens the list of items.
DropDown makes visible the list of items of the combo box.
</summary></devnotes></procedure>
      <procedure name="Sort" visibility="public" procflags="override" file="FMX.ListBox.pas" line="850">
        <parameters>
          <parameter name="Compare" type="TFmxObjectSortCompare"/>
        </parameters>
      <devnotes><summary>
Sorts the children in the children list using the specified sorting procedure.
FMX.ListBox.TCustomComboBox.Sort inherits from FMX.Types.TFmxObject.Sort. All content below this line refers to FMX.Types.TFmxObject.Sort.
Sorts the children in the children list using the specified sorting procedure.
</summary></devnotes></procedure>
      <property name="ListBox" visibility="public" read="FListBox" type="TComboListBox" file="FMX.ListBox.pas" line="851"><devnotes><summary>
Gets the drop-down list component of the combo box.
The returned object is a TComboListBox.
</summary></devnotes></property>
      <property name="Count" visibility="public" read="GetCount" type="Integer" file="FMX.ListBox.pas" line="852"><devnotes><summary>
Returns the total number of items in the drop-down list associated with the combo box.
</summary></devnotes></property>
      <property name="Selected" visibility="public" read="GetSelected" type="TListBoxItem" file="FMX.ListBox.pas" line="853"><devnotes><summary>
Gets the item that is currently selected in the combo box.
Selected returns the selected item in the combo box as a TListBoxItem instance.
</summary></devnotes></property>
      <property name="Items" visibility="public" read="GetItems" write="SetItems" stored="ItemsStored" type="TStrings" file="FMX.ListBox.pas" line="854"><devnotes><summary>
Specifies the items in the drop-down list.
Use Items to get or set the list of items in the drop-down as strings.
Use the ListItems property to access an item as a TListBoxItem object.
</summary></devnotes></property>
      <property name="Images" visibility="public" read="GetImages" write="SetImages" type="TCustomImageList" file="FMX.ListBox.pas" line="856">
        <devnotes><summary>
Defines the reference to a TCustomImageList list of images to be used to draw images on the component.
If the TCustomImageList list is empty, then Images is nil/null.
Call ImagesChanged when Images is changed.
</summary></devnotes>
      </property>
      <property name="ListItems[Index]" visibility="public" read="GetListItem" type="TListBoxItem" file="FMX.ListBox.pas" line="857"/>
      <property name="ItemIndex" visibility="public" read="GetItemIndex" write="SetItemIndex" type="Integer" file="FMX.ListBox.pas" line="858"><devnotes><summary>
Specifies the index of the currently selected item.
Gets or sets the index of the item that is selected in the combo box.
The first item in the list has index 0, the second item has index 1, and so on. If no item is selected, the value of ItemIndex is -1.
</summary></devnotes></property>
      <property name="DroppedDown" visibility="public" read="FDroppedDown" type="Boolean" file="FMX.ListBox.pas" line="859"><devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></property>
      <property name="IsPressed" visibility="public" read="FIsPressed" type="Boolean" file="FMX.ListBox.pas" line="860"><devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></property>
    </members>
  <devnotes><summary>
A TCustomComboBox is the base class for combo box components.
Inherit from TCustomComboBox to create a control that represents a specialized combo box.
</summary></devnotes></class>
  <class name="TComboBox" file="FMX.ListBox.pas" line="865">
    
    <members>
      <property name="PlacementRectangle" visibility="public" read="GetPlacementRectangle" write="SetPlacementRectangle" type="TBounds" hoisted="true" file="FMX.ListBox.pas" line="867"/>
      <property name="Align" visibility="published" read="FAlign" write="SetAlign" type="TAlignLayout" default="0" hoisted="true" file="FMX.ListBox.pas" line="869"/>
      <property name="Anchors" visibility="published" read="FAnchors" write="SetAnchors" stored="IsAnchorsStored" type="TAnchors" hoisted="true" file="FMX.ListBox.pas" line="870"/>
      <property name="CanFocus" visibility="published" read="FCanFocus" write="FCanFocus" type="Boolean" default="1" hoisted="true" file="FMX.ListBox.pas" line="871"/>
      <property name="CanParentFocus" visibility="published" read="FCanParentFocus" write="FCanParentFocus" type="Boolean" default="0" hoisted="true" file="FMX.ListBox.pas" line="872"/>
      <property name="ClipChildren" visibility="published" read="FClipChildren" write="SetClipChildren" type="Boolean" default="0" hoisted="true" file="FMX.ListBox.pas" line="873"/>
      <property name="ClipParent" visibility="published" read="FClipParent" write="FClipParent" type="Boolean" default="0" hoisted="true" file="FMX.ListBox.pas" line="874"/>
      <property name="Cursor" visibility="published" read="GetCursor" write="SetCursor" type="TCursor" default="0" hoisted="true" file="FMX.ListBox.pas" line="875"/>
      <property name="DisableFocusEffect" visibility="published" read="FDisableFocusEffect" write="FDisableFocusEffect" type="Boolean" default="0" hoisted="true" file="FMX.ListBox.pas" line="876"/>
      <property name="DragMode" visibility="published" read="GetDragMode" write="SetDragMode" type="TDragMode" default="0" hoisted="true" file="FMX.ListBox.pas" line="877"/>
      <property name="DropDownCount" visibility="published" read="FDropDownCount" write="FDropDownCount" type="Integer" default="8" hoisted="true" file="FMX.ListBox.pas" line="878"/>
      <property name="EnableDragHighlight" visibility="published" read="FEnableDragHighlight" write="FEnableDragHighlight" type="Boolean" default="1" hoisted="true" file="FMX.ListBox.pas" line="879"/>
      <property name="Enabled" visibility="published" read="FEnabled" write="SetEnabled" stored="EnabledStored" type="Boolean" hoisted="true" file="FMX.ListBox.pas" line="880"/>
      <property name="Locked" visibility="published" read="FLocked" write="SetLocked" type="Boolean" default="0" hoisted="true" file="FMX.ListBox.pas" line="881"/>
      <property name="Height" visibility="published" read="GetHeight" write="SetHeight" stored="False" type="Single" hoisted="true" file="FMX.ListBox.pas" line="882"/>
      <property name="HelpContext" visibility="published" read="FHelpContext" write="SetHelpContext" stored="IsHelpContextStored" type="THelpContext" default="0" hoisted="true" file="FMX.ListBox.pas" line="883"/>
      <property name="HelpKeyword" visibility="published" read="FHelpKeyword" write="SetHelpKeyword" stored="IsHelpContextStored" type="string" default="0" hoisted="true" file="FMX.ListBox.pas" line="884"/>
      <property name="HelpType" visibility="published" read="FHelpType" write="FHelpType" type="THelpType" default="1" hoisted="true" file="FMX.ListBox.pas" line="885"/>
      <property name="Hint" visibility="published" read="FHint" write="SetHint" stored="HintStored" type="string" default="0" hoisted="true" file="FMX.ListBox.pas" line="886"/>
      <property name="HitTest" visibility="published" read="FHitTest" write="SetHitTest" type="Boolean" default="1" hoisted="true" file="FMX.ListBox.pas" line="887"/>
      <property name="Items" visibility="published" read="GetItems" write="SetItems" stored="ItemsStored" type="TStrings" hoisted="true" file="FMX.ListBox.pas" line="888"/>
      <property name="Images" visibility="published" read="GetImages" write="SetImages" type="TCustomImageList" hoisted="true" file="FMX.ListBox.pas" line="889"/>
      <property name="ItemIndex" visibility="published" read="GetItemIndex" write="SetItemIndex" type="Integer" default="-1" hoisted="true" file="FMX.ListBox.pas" line="890"/>
      <property name="ItemWidth" visibility="published" read="FItemWidth" write="SetItemWidth" type="Single" default="0" hoisted="true" file="FMX.ListBox.pas" line="891"/>
      <property name="ItemHeight" visibility="published" read="GetItemHeight" write="SetItemHeight" type="Single" default="0" hoisted="true" file="FMX.ListBox.pas" line="892"/>
      <property name="ListBoxResource" visibility="published" read="GetListBoxResource" write="SetListBoxResource" type="string" default="0" hoisted="true" file="FMX.ListBox.pas" line="893"/>
      <property name="Padding" visibility="published" read="GetPadding" write="SetPadding" type="TBounds" hoisted="true" file="FMX.ListBox.pas" line="894"/>
      <property name="DropDownKind" visibility="published" read="FDropDownKind" write="FDropDownKind" type="TDropDownKind" default="1" hoisted="true" file="FMX.ListBox.pas" line="895"/>
      <property name="Opacity" visibility="published" read="FOpacity" write="SetOpacity" stored="IsOpacityStored" type="Single" hoisted="true" file="FMX.ListBox.pas" line="896"/>
      <property name="Margins" visibility="published" read="GetMargins" write="SetMargins" type="TBounds" hoisted="true" file="FMX.ListBox.pas" line="897"/>
      <property name="Placement" visibility="published" read="GetPlacement" write="SetPlacement" type="TPlacement" default="0" hoisted="true" file="FMX.ListBox.pas" line="898"/>
      <property name="PopupMenu" visibility="published" read="FPopupMenu" write="SetPopupMenu" stored="IsPopupMenuStored" type="TCustomPopupMenu" hoisted="true" file="FMX.ListBox.pas" line="899"/>
      <property name="Position" visibility="published" read="FPosition" write="SetPosition" stored="IsPositionStored" type="TPosition" hoisted="true" file="FMX.ListBox.pas" line="900"/>
      <property name="RotationAngle" visibility="published" read="GetRotationAngle" write="SetRotationAngle" type="Single" default="0" hoisted="true" file="FMX.ListBox.pas" line="901"/>
      <property name="RotationCenter" visibility="published" read="GetRotationCenter" write="SetRotationCenter" type="TPosition" hoisted="true" file="FMX.ListBox.pas" line="902"/>
      <property name="Scale" visibility="published" read="GetScale" write="SetScale" type="TPosition" hoisted="true" file="FMX.ListBox.pas" line="903"/>
      <property name="Size" visibility="published" read="FSize" write="SetSize" stored="IsSizeStored" type="TControlSize" hoisted="true" file="FMX.ListBox.pas" line="904"/>
      <property name="StyleLookup" visibility="published" read="FStyleLookup" write="SetStyleLookup" type="string" default="0" hoisted="true" file="FMX.ListBox.pas" line="905"/>
      <property name="TabOrder" visibility="published" read="GetTabOrder" write="SetTabOrder" type="TTabOrder" default="-1" hoisted="true" file="FMX.ListBox.pas" line="906"/>
      <property name="TabStop" visibility="published" read="GetTabStop" write="SetTabStop" type="Boolean" default="1" hoisted="true" file="FMX.ListBox.pas" line="907"/>
      <property name="TouchTargetExpansion" visibility="published" read="FTouchTargetExpansion" write="SetTouchTargetExpansion" type="TBounds" hoisted="true" file="FMX.ListBox.pas" line="908"/>
      <property name="Visible" visibility="published" read="FVisible" write="SetVisible" stored="VisibleStored" type="Boolean" default="1" hoisted="true" file="FMX.ListBox.pas" line="909"/>
      <property name="Width" visibility="published" read="GetWidth" write="SetWidth" stored="False" type="Single" hoisted="true" file="FMX.ListBox.pas" line="910"/>
      <property name="ParentShowHint" visibility="published" read="FParentShowHint" write="SetParentShowHint" type="Boolean" default="1" hoisted="true" file="FMX.ListBox.pas" line="911"/>
      <property name="ShowHint" visibility="published" read="FShowHint" write="SetShowHint" stored="IsShowHintStored" type="Boolean" hoisted="true" file="FMX.ListBox.pas" line="912"/>
      <event name="OnApplyStyleLookup" visibility="published" read="FOnApplyStyleLookup" write="FOnApplyStyleLookup" type="TNotifyEvent" hoisted="true" file="FMX.ListBox.pas" line="915"/>
      <event name="OnChange" visibility="published" read="FOnChange" write="FOnChange" type="TNotifyEvent" hoisted="true" file="FMX.ListBox.pas" line="916"/>
      <event name="OnClosePopup" visibility="published" read="FOnClosePopup" write="FOnClosePopup" type="TNotifyEvent" hoisted="true" file="FMX.ListBox.pas" line="917"/>
      <event name="OnPopup" visibility="published" read="FOnPopup" write="FOnPopup" type="TNotifyEvent" hoisted="true" file="FMX.ListBox.pas" line="918"/>
      <event name="OnDragEnter" visibility="published" read="FOnDragEnter" write="FOnDragEnter" type="TDragEnterEvent" hoisted="true" file="FMX.ListBox.pas" line="920"/>
      <event name="OnDragLeave" visibility="published" read="FOnDragLeave" write="FOnDragLeave" type="TNotifyEvent" hoisted="true" file="FMX.ListBox.pas" line="921"/>
      <event name="OnDragOver" visibility="published" read="FOnDragOver" write="FOnDragOver" type="TDragOverEvent" hoisted="true" file="FMX.ListBox.pas" line="922"/>
      <event name="OnDragDrop" visibility="published" read="FOnDragDrop" write="FOnDragDrop" type="TDragDropEvent" hoisted="true" file="FMX.ListBox.pas" line="923"/>
      <event name="OnDragEnd" visibility="published" read="FOnDragEnd" write="FOnDragEnd" type="TNotifyEvent" hoisted="true" file="FMX.ListBox.pas" line="924"/>
      <event name="OnKeyDown" visibility="published" read="FOnKeyDown" write="FOnKeyDown" type="TKeyEvent" hoisted="true" file="FMX.ListBox.pas" line="926"/>
      <event name="OnKeyUp" visibility="published" read="FOnKeyUp" write="FOnKeyUp" type="TKeyEvent" hoisted="true" file="FMX.ListBox.pas" line="927"/>
      <event name="OnCanFocus" visibility="published" read="FOnCanFocus" write="FOnCanFocus" type="TCanFocusEvent" hoisted="true" file="FMX.ListBox.pas" line="929"/>
      <event name="OnClick" visibility="published" read="FOnClick" write="SetOnClick" stored="OnClickStored" type="TNotifyEvent" hoisted="true" file="FMX.ListBox.pas" line="930"/>
      <event name="OnDblClick" visibility="published" read="FOnDblClick" write="FOnDblClick" type="TNotifyEvent" hoisted="true" file="FMX.ListBox.pas" line="931"/>
      <event name="OnEnter" visibility="published" read="FOnEnter" write="FOnEnter" type="TNotifyEvent" hoisted="true" file="FMX.ListBox.pas" line="933"/>
      <event name="OnExit" visibility="published" read="FOnExit" write="FOnExit" type="TNotifyEvent" hoisted="true" file="FMX.ListBox.pas" line="934"/>
      <event name="OnMouseDown" visibility="published" read="FOnMouseDown" write="FOnMouseDown" type="TMouseEvent" hoisted="true" file="FMX.ListBox.pas" line="935"/>
      <event name="OnMouseMove" visibility="published" read="FOnMouseMove" write="FOnMouseMove" type="TMouseMoveEvent" hoisted="true" file="FMX.ListBox.pas" line="936"/>
      <event name="OnMouseUp" visibility="published" read="FOnMouseUp" write="FOnMouseUp" type="TMouseEvent" hoisted="true" file="FMX.ListBox.pas" line="937"/>
      <event name="OnMouseWheel" visibility="published" read="FOnMouseWheel" write="FOnMouseWheel" type="TMouseWheelEvent" hoisted="true" file="FMX.ListBox.pas" line="938"/>
      <event name="OnMouseEnter" visibility="published" read="FOnMouseEnter" write="FOnMouseEnter" type="TNotifyEvent" hoisted="true" file="FMX.ListBox.pas" line="939"/>
      <event name="OnMouseLeave" visibility="published" read="FOnMouseLeave" write="FOnMouseLeave" type="TNotifyEvent" hoisted="true" file="FMX.ListBox.pas" line="940"/>
      <event name="OnPainting" visibility="published" read="FOnPainting" write="FOnPainting" type="TOnPaintEvent" hoisted="true" file="FMX.ListBox.pas" line="942"/>
      <event name="OnPaint" visibility="published" read="FOnPaint" write="FOnPaint" type="TOnPaintEvent" hoisted="true" file="FMX.ListBox.pas" line="943"/>
      <event name="OnResize" visibility="published" read="FOnResize" write="FOnResize" type="TNotifyEvent" hoisted="true" file="FMX.ListBox.pas" line="944"/>
      <event name="OnResized" visibility="published" read="FOnResized" write="FOnResized" type="TNotifyEvent" hoisted="true" file="FMX.ListBox.pas" line="945"/>
    </members>
  <devnotes><summary>
A TComboBox is a button with a list box attached to it.
Click the button to display the list.
You can select an item from the list and it will appear as the button's text. You cannot type text directly into the combo box button.
To add items, right-click the combo box on the form and choose Add Item. This creates a new TListBoxItem object that appears in the Structure pane and can be edited individually.
You can also manage the items in the combo box by double-clicking the combo box control in the Form Designer. This opens the Items Designer dialog where you can add, delete, and change the order of the items.

Note: When a number of items in a control is more than can be concurrently shown in the TListBoxItem list box, then you can use the scroll bar to scroll the items shown in the list box. Notice that on Windows the scroll bar is shown by default. However, on OS X the scroll bar is not shown by default. On OS X, the scroll bar appears when you try to scroll items using the mouse wheel. To enforce the scroll bar to be shown by default, you can use the code like following:
ComboBox1.ListBox.AniCalculations.AutoShowing := false;
In Windows 8 style applications, you can create a Windows 8 style combo box by setting the value Native for the property DropDownKind.  For more information, see Creating a Metropolis UI ComboBox.
</summary></devnotes></class>
  <class name="TMetropolisUIListBoxItem" file="FMX.ListBox.pas" line="948">
    
    <members>
      <field name="FImage" type="TImage" visibility="private" size="4" offset="1048" file="FMX.ListBox.pas" line="950"/>
      <field name="FText" type="TLayout" visibility="private" size="4" offset="1052" file="FMX.ListBox.pas" line="951"/>
      <field name="FTextPanel" type="TPanel" visibility="private" size="4" offset="1056" file="FMX.ListBox.pas" line="952"/>
      <field name="FTitle" type="TLabel" visibility="private" size="4" offset="1060" file="FMX.ListBox.pas" line="954"/>
      <field name="FSubTitle" type="TLabel" visibility="private" size="4" offset="1064" file="FMX.ListBox.pas" line="955"/>
      <field name="FDescription" type="TLabel" visibility="private" size="4" offset="1068" file="FMX.ListBox.pas" line="956"/>
      <field name="FIconSize" type="Integer" visibility="private" size="4" offset="1072" file="FMX.ListBox.pas" line="957"/>
      <procedure name="SkipIconSize" visibility="private" file="FMX.ListBox.pas" line="959">
        <parameters>
          <parameter name="Reader" type="TReader"/>
        </parameters>
      </procedure>
      <procedure name="SkipAlign" visibility="private" file="FMX.ListBox.pas" line="960">
        <parameters>
          <parameter name="Reader" type="TReader"/>
        </parameters>
      </procedure>
      <procedure name="SetIcon" visibility="protected" procflags="virtual" file="FMX.ListBox.pas" line="962">
        <parameters>
          <parameter name="Bitmap" type="TBitmap" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="GetIcon" visibility="protected" procflags="virtual" file="FMX.ListBox.pas" line="963">
        <parameters>
          <retval type="TBitmap"/>
        </parameters>
      </function>
      <procedure name="SetTitle" visibility="protected" procflags="virtual" file="FMX.ListBox.pas" line="964">
        <parameters>
          <parameter name="Title" type="string" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="GetTitle" visibility="protected" procflags="virtual" file="FMX.ListBox.pas" line="965">
        <parameters>
          <retval type="string"/>
        </parameters>
      </function>
      <procedure name="SetSubTitle" visibility="protected" procflags="virtual" file="FMX.ListBox.pas" line="966">
        <parameters>
          <parameter name="SubTitle" type="string" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="GetSubTitle" visibility="protected" procflags="virtual" file="FMX.ListBox.pas" line="967">
        <parameters>
          <retval type="string"/>
        </parameters>
      </function>
      <procedure name="SetDescription" visibility="protected" procflags="virtual" file="FMX.ListBox.pas" line="968">
        <parameters>
          <parameter name="Description" type="string" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="GetDescription" visibility="protected" procflags="virtual" file="FMX.ListBox.pas" line="969">
        <parameters>
          <retval type="string"/>
        </parameters>
      </function>
      <procedure name="SetIconSize" visibility="protected" procflags="virtual" file="FMX.ListBox.pas" line="970">
        <parameters>
          <parameter name="Value" type="Integer"/>
        </parameters>
      </procedure>
      <procedure name="SetParent" visibility="protected" procflags="override" file="FMX.ListBox.pas" line="972">
        <parameters>
          <parameter name="AParent" type="TFmxObject" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="ApplyStyle" visibility="protected" procflags="override" file="FMX.ListBox.pas" line="973">
      </procedure>
      <procedure name="FreeStyle" visibility="protected" procflags="override" file="FMX.ListBox.pas" line="974">
      </procedure>
      <procedure name="OnBitmapChanged" visibility="protected" file="FMX.ListBox.pas" line="975">
        <parameters>
          <parameter name="Sender" type="TObject"/>
        </parameters>
      </procedure>
      <procedure name="Resize" visibility="protected" procflags="override" file="FMX.ListBox.pas" line="976">
      </procedure>
      <procedure name="DoRealign" visibility="protected" procflags="override" file="FMX.ListBox.pas" line="977">
      </procedure>
      <procedure name="DefineProperties" visibility="protected" procflags="override" file="FMX.ListBox.pas" line="978">
        <parameters>
          <parameter name="Filer" type="TFiler"/>
        </parameters>
      </procedure>
      <function name="GetDefaultStyleLookupName" visibility="protected" procflags="override" file="FMX.ListBox.pas" line="979">
        <parameters>
          <retval type="string"/>
        </parameters>
      </function>
      <constructor name="Create" visibility="public" file="FMX.ListBox.pas" line="981">
        <parameters>
          <parameter name="AOwner" type="TComponent"/>
        </parameters>
      </constructor>
      <destructor name="Destroy" visibility="public" file="FMX.ListBox.pas" line="982">
        <parameters>
        </parameters>
      </destructor>
      <property name="IconSize" visibility="public" read="FIconSize" write="SetIconSize" type="Integer" file="FMX.ListBox.pas" line="983"/>
      <property name="Title" visibility="published" read="GetTitle" write="SetTitle" type="string" file="FMX.ListBox.pas" line="985"/>
      <property name="SubTitle" visibility="published" read="GetSubTitle" write="SetSubTitle" type="string" file="FMX.ListBox.pas" line="986"/>
      <property name="Description" visibility="published" read="GetDescription" write="SetDescription" type="string" file="FMX.ListBox.pas" line="987"/>
      <property name="Icon" visibility="published" read="GetIcon" write="SetIcon" type="TBitmap" file="FMX.ListBox.pas" line="988"/>
      <property name="Padding" visibility="published" read="GetPadding" write="SetPadding" type="TBounds" hoisted="true" file="FMX.ListBox.pas" line="989"/>
      <property name="Margins" visibility="published" read="GetMargins" write="SetMargins" type="TBounds" hoisted="true" file="FMX.ListBox.pas" line="990"/>
    </members>
  </class>
</namespace>