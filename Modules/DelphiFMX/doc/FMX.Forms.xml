<?xml version="1.0" ?><namespace name="FMX.Forms" platform="Win32">
  <const name="ActionUpdateDelayNever" type="Integer" visibility="public" file="FMX.Forms.pas" line="46"/>
  <const name="DefaultFormStyleLookup" type="string" file="FMX.Forms.pas" line="47">
    <value>
      backgroundstyle
    </value>
  </const>
  <type name="TExceptionEvent" file="FMX.Forms.pas" line="54" procflags="closure">
  </type>
  <type name="TIdleEvent" file="FMX.Forms.pas" line="55" procflags="closure">
  </type>
  <enum name="TDeviceKind" file="FMX.Forms.pas" line="57">
    <element value="0" name="Desktop" file="FMX.Forms.pas" line="57"/>
    <element value="1" name="iPhone" file="FMX.Forms.pas" line="57"/>
    <element value="2" name="iPad" file="FMX.Forms.pas" line="57"/>
  </enum>
  <set name="TDeviceKinds" type="TDeviceKind" file="FMX.Forms.pas" line="58">
    <element name="Desktop"/>
    <element name="iPhone"/>
    <element name="iPad"/>
  </set>
  <set name="TFormOrientations" alias="FMX.Types.TScreenOrientations" type="TScreenOrientation" file="FMX.Forms.pas" line="60">
    <element name="Portrait"/>
    <element name="Landscape"/>
    <element name="InvertedPortrait"/>
    <element name="InvertedLandscape"/>
  </set>
  <enum name="TFormOrientation" alias="FMX.Types.TScreenOrientation" file="FMX.Forms.pas" line="61">
    <element value="0" name="Portrait" file="FMX.Types.pas" line="122"/>
    <element value="1" name="Landscape" file="FMX.Types.pas" line="122"/>
    <element value="2" name="InvertedPortrait" file="FMX.Types.pas" line="122"/>
    <element value="3" name="InvertedLandscape" file="FMX.Types.pas" line="122"/>
  </enum>
  <class name="TFormFactor" file="FMX.Forms.pas" line="63">
    
    <members>
      <field name="FSize" type="TSize" visibility="private" size="8" offset="4" file="FMX.Forms.pas" line="65"/>
      <field name="FOrientations" type="TScreenOrientations" visibility="private" size="1" offset="12" file="FMX.Forms.pas" line="66"/>
      <field name="FDevices" type="TDeviceKinds" visibility="private" size="1" offset="13" file="FMX.Forms.pas" line="67"/>
      <procedure name="SetSupportedOrientations" visibility="private" procflags="virtual" file="FMX.Forms.pas" line="68">
        <parameters>
          <parameter name="AOrientations" type="TScreenOrientations"/>
        </parameters>
      </procedure>
      <procedure name="SetHeight" visibility="private" file="FMX.Forms.pas" line="69">
        <parameters>
          <parameter name="Value" type="Integer" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetWidth" visibility="private" file="FMX.Forms.pas" line="70">
        <parameters>
          <parameter name="Value" type="Integer" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="GetWidth" visibility="private" file="FMX.Forms.pas" line="71">
        <parameters>
          <retval type="Integer"/>
        </parameters>
      </function>
      <function name="GetHeight" visibility="private" file="FMX.Forms.pas" line="72">
        <parameters>
          <retval type="Integer"/>
        </parameters>
      </function>
      <constructor name="Create" visibility="public" file="FMX.Forms.pas" line="74">
        <parameters>
        </parameters>
      </constructor>
      <procedure name="AdjustToScreenSize" visibility="public" file="FMX.Forms.pas" line="75">
      </procedure>
      <property name="Width" visibility="published" read="GetWidth" write="SetWidth" stored="True" type="Integer" file="FMX.Forms.pas" line="77"/>
      <property name="Height" visibility="published" read="GetHeight" write="SetHeight" stored="True" type="Integer" file="FMX.Forms.pas" line="78"/>
      <property name="Orientations" visibility="published" read="FOrientations" write="SetSupportedOrientations" stored="True" type="TScreenOrientations" default="3" file="FMX.Forms.pas" line="79"/>
      <property name="Devices" visibility="published" read="FDevices" write="FDevices" stored="True" type="TDeviceKinds" file="FMX.Forms.pas" line="81"/>
    </members>
  </class>
  <class name="TApplicationFormFactor" file="FMX.Forms.pas" line="84">
    
    <members>
      <procedure name="SetSupportedOrientations" visibility="protected" procflags="override" file="FMX.Forms.pas" line="86">
        <parameters>
          <parameter name="AOrientations" type="TScreenOrientations"/>
        </parameters>
      </procedure>
    </members>
  </class>
  <interface name="IDesignerHook" GUID="{65A688CA-60DD-4038-AAFF-8F56A8B6AB69}" ancestor="IDesignerNotify" file="FMX.Forms.pas" line="92">
    <devnotes>
       <summary>IDesignerHook is an interface that allows component writers to
       interact with the form designer in the IDE.</summary>
    </devnotes>
    <function name="IsDesignMsg" visibility="public" procflags="abstract virtual" file="FMX.Forms.pas" line="94">
      <parameters>
        <parameter name="Sender" type="TFmxObject"/>
        <parameter name="Message" type="TMessage" paramflags="var"/>
        <retval type="Boolean"/>
      </parameters>
    </function>
    <procedure name="UpdateBorder" visibility="public" procflags="abstract virtual" file="FMX.Forms.pas" line="95">
    </procedure>
    <procedure name="PaintGrid" visibility="public" procflags="abstract virtual" file="FMX.Forms.pas" line="96">
    </procedure>
    <procedure name="DrawSelectionMarks" visibility="public" procflags="abstract virtual" file="FMX.Forms.pas" line="97">
      <parameters>
        <parameter name="AControl" type="TFmxObject"/>
      </parameters>
    </procedure>
    <function name="IsSelected" visibility="public" procflags="abstract virtual" file="FMX.Forms.pas" line="98">
      <parameters>
        <parameter name="Instance" type="TPersistent"/>
        <retval type="Boolean"/>
      </parameters>
    </function>
    <function name="IsView" visibility="public" procflags="abstract virtual" file="FMX.Forms.pas" line="99">
      <parameters>
        <retval type="Boolean"/>
      </parameters>
    </function>
    <function name="GetHasFixedSize" visibility="public" procflags="abstract virtual" file="FMX.Forms.pas" line="100">
      <parameters>
        <retval type="Boolean"/>
      </parameters>
    </function>
    <procedure name="DesignerModified" visibility="public" procflags="abstract virtual" file="FMX.Forms.pas" line="101">
      <parameters>
        <parameter name="Activate" type="Boolean">
          <value>
            False
          </value>
        </parameter>
      </parameters>
    </procedure>
    <procedure name="ValidateRename" visibility="public" procflags="abstract virtual" file="FMX.Forms.pas" line="102">
      <parameters>
        <parameter name="AComponent" type="TComponent"/>
        <parameter name="CurName" type="string" paramflags="const"/>
        <parameter name="NewName" type="string" paramflags="const"/>
      </parameters>
    </procedure>
    <function name="UniqueName" visibility="public" procflags="abstract virtual" file="FMX.Forms.pas" line="103">
      <parameters>
        <parameter name="BaseName" type="string" paramflags="const"/>
        <retval type="string"/>
      </parameters>
    </function>
    <function name="GetRoot" visibility="public" procflags="abstract virtual" file="FMX.Forms.pas" line="104">
      <parameters>
        <retval type="TComponent"/>
      </parameters>
    </function>
    <procedure name="FormFamilyChanged" visibility="public" procflags="abstract virtual" file="FMX.Forms.pas" line="105">
      <parameters>
        <parameter name="OldFormFamilyName" type="string" paramflags="const"/>
        <parameter name="NewFormFamilyName" type="string" paramflags="const"/>
        <parameter name="FormClassName" type="string" paramflags="const"/>
      </parameters>
    </procedure>
    <procedure name="SelectComponent" visibility="public" procflags="abstract virtual" file="FMX.Forms.pas" line="106">
      <parameters>
        <parameter name="Instance" type="TPersistent"/>
      </parameters>
    </procedure>
    <procedure name="Decorate" visibility="public" procflags="abstract virtual" file="FMX.Forms.pas" line="108">
      <devnotes>
         <summary>Called after the form has been completely painted, so additional painting can be performed on top on it</summary>
      </devnotes>
      <parameters>
        <parameter name="Context" type="TObject"/>
      </parameters>
    </procedure>
    <property name="HasFixedSize" visibility="public" read="GetHasFixedSize" type="Boolean" file="FMX.Forms.pas" line="110"/>
  </interface>
  <interface name="IDesignerStorage" GUID="{ACCC9241-07E2-421B-8F4C-B70D1E4050AE}" ancestor="IInterface" file="FMX.Forms.pas" line="114">
    <devnotes>
       <summary>Deprecated, only kept for backwards compatibility</summary>
    </devnotes>
    <function name="GetDesignerMobile" visibility="public" procflags="abstract virtual" file="FMX.Forms.pas" line="116">
      <parameters>
        <retval type="Boolean"/>
      </parameters>
    </function>
    <function name="GetDesignerWidth" visibility="public" procflags="abstract virtual" file="FMX.Forms.pas" line="117">
      <parameters>
        <retval type="Integer"/>
      </parameters>
    </function>
    <function name="GetDesignerHeight" visibility="public" procflags="abstract virtual" file="FMX.Forms.pas" line="118">
      <parameters>
        <retval type="Integer"/>
      </parameters>
    </function>
    <function name="GetDesignerDeviceName" visibility="public" procflags="abstract virtual" file="FMX.Forms.pas" line="119">
      <parameters>
        <retval type="string"/>
      </parameters>
    </function>
    <function name="GetDesignerOrientation" visibility="public" procflags="abstract virtual" file="FMX.Forms.pas" line="120">
      <parameters>
        <retval type="TScreenOrientation"/>
      </parameters>
    </function>
    <function name="GetDesignerOSVersion" visibility="public" procflags="abstract virtual" file="FMX.Forms.pas" line="121">
      <parameters>
        <retval type="string"/>
      </parameters>
    </function>
    <function name="GetDesignerMasterStyle" visibility="public" procflags="abstract virtual" file="FMX.Forms.pas" line="122">
      <parameters>
        <retval type="Integer"/>
      </parameters>
    </function>
    <procedure name="SetDesignerMasterStyle" visibility="public" procflags="abstract virtual" file="FMX.Forms.pas" line="123">
      <parameters>
        <parameter name="Value" type="Integer"/>
      </parameters>
    </procedure>
    <property name="Mobile" visibility="public" read="GetDesignerMobile" type="Boolean" file="FMX.Forms.pas" line="125"/>
    <property name="Width" visibility="public" read="GetDesignerWidth" type="Integer" file="FMX.Forms.pas" line="126"/>
    <property name="Height" visibility="public" read="GetDesignerHeight" type="Integer" file="FMX.Forms.pas" line="127"/>
    <property name="DeviceName" visibility="public" read="GetDesignerDeviceName" type="string" default="0" file="FMX.Forms.pas" line="128"/>
    <property name="Orientation" visibility="public" read="GetDesignerOrientation" type="TScreenOrientation" file="FMX.Forms.pas" line="129"/>
    <property name="OSVersion" visibility="public" read="GetDesignerOSVersion" type="string" default="0" file="FMX.Forms.pas" line="130"/>
    <property name="MasterStyle" visibility="public" read="GetDesignerMasterStyle" write="SetDesignerMasterStyle" type="Integer" file="FMX.Forms.pas" line="131"/>
  </interface>
  <enum name="TApplicationState" file="FMX.Forms.pas" line="142">
    <element value="0" name="None" file="FMX.Forms.pas" line="142"/>
    <element value="1" name="Running" file="FMX.Forms.pas" line="142"/>
    <element value="2" name="Terminating" file="FMX.Forms.pas" line="142"/>
    <element value="3" name="Terminated" file="FMX.Forms.pas" line="142"/>
  </enum>
  <class name="TApplicationTerminatingMessage" file="FMX.Forms.pas" line="144">
    
    <ancestor name="TMessageBase" namespace="System.Messaging">
      <ancestor name="TObject" namespace="System">
        <methodref name="Create" visibility="public" procflags="constructor">
        </methodref>
        <methodref name="Free" visibility="public">
        </methodref>
        <methodref name="DisposeOf" visibility="public" procflags="inline">
        </methodref>
        <methodref name="InitInstance" visibility="public" procflags="class">
        </methodref>
        <methodref name="CleanupInstance" visibility="public">
        </methodref>
        <methodref name="ClassType" visibility="public" procflags="inline">
        </methodref>
        <methodref name="ClassName" visibility="public" procflags="class">
        </methodref>
        <methodref name="ClassNameIs" visibility="public" procflags="class">
        </methodref>
        <methodref name="ClassParent" visibility="public" procflags="class inline">
        </methodref>
        <methodref name="ClassInfo" visibility="public" procflags="class inline">
        </methodref>
        <methodref name="InstanceSize" visibility="public" procflags="class inline">
        </methodref>
        <methodref name="InheritsFrom" visibility="public" procflags="class">
        </methodref>
        <methodref name="MethodAddress" visibility="public" procflags="class overload">
        </methodref>
        <methodref name="MethodAddress" visibility="public" procflags="class overload">
        </methodref>
        <methodref name="MethodName" visibility="public" procflags="class">
        </methodref>
        <methodref name="QualifiedClassName" visibility="public" procflags="class">
        </methodref>
        <methodref name="FieldAddress" visibility="public" procflags="overload">
        </methodref>
        <methodref name="FieldAddress" visibility="public" procflags="overload">
        </methodref>
        <methodref name="GetInterface" visibility="public">
        </methodref>
        <methodref name="GetInterfaceEntry" visibility="public" procflags="class">
        </methodref>
        <methodref name="GetInterfaceTable" visibility="public" procflags="class inline">
        </methodref>
        <methodref name="UnitName" visibility="public" procflags="class">
        </methodref>
        <methodref name="UnitScope" visibility="public" procflags="class">
        </methodref>
        <methodref name="Equals" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="GetHashCode" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="ToString" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="SafeCallException" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="AfterConstruction" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="BeforeDestruction" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="Dispatch" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="DefaultHandler" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="NewInstance" visibility="public" procflags="class virtual">
        </methodref>
        <methodref name="FreeInstance" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="Destroy" visibility="public" procflags="destructor virtual">
        </methodref>
        <methodref name="GetDisposed" visibility="protected" procflags="inline">
        </methodref>
        <methodref name="CheckDisposed" visibility="protected" procflags="inline">
        </methodref>
        <propertyref name="Disposed" visibility="protected">
        </propertyref>
      </ancestor>
    </ancestor>
  </class>
  <type name="TApplicationStateEvent" file="FMX.Forms.pas" line="146" procflags="">
  </type>
  <class name="TFormsCreatedMessage" file="FMX.Forms.pas" line="148">
    
  </class>
  <class name="TFormBeforeShownMessage" file="FMX.Forms.pas" line="150">
    
    <ancestor name="{System.Messaging}TMessage&lt;FMX.Forms.TCommonCustomForm&gt;" namespace="FMX.Forms">
      <methodref name="Create" visibility="public" procflags="constructor">
      </methodref>
      <methodref name="Destroy" visibility="public" procflags="destructor override">
      </methodref>
      <propertyref name="Value" visibility="public">
      </propertyref>
      <ancestor name="TMessageBase" namespace="System.Messaging">
        <ancestor name="TObject" namespace="System">
          <methodref name="Create" visibility="public" procflags="constructor">
          </methodref>
          <methodref name="Free" visibility="public">
          </methodref>
          <methodref name="DisposeOf" visibility="public" procflags="inline">
          </methodref>
          <methodref name="InitInstance" visibility="public" procflags="class">
          </methodref>
          <methodref name="CleanupInstance" visibility="public">
          </methodref>
          <methodref name="ClassType" visibility="public" procflags="inline">
          </methodref>
          <methodref name="ClassName" visibility="public" procflags="class">
          </methodref>
          <methodref name="ClassNameIs" visibility="public" procflags="class">
          </methodref>
          <methodref name="ClassParent" visibility="public" procflags="class inline">
          </methodref>
          <methodref name="ClassInfo" visibility="public" procflags="class inline">
          </methodref>
          <methodref name="InstanceSize" visibility="public" procflags="class inline">
          </methodref>
          <methodref name="InheritsFrom" visibility="public" procflags="class">
          </methodref>
          <methodref name="MethodAddress" visibility="public" procflags="class overload">
          </methodref>
          <methodref name="MethodAddress" visibility="public" procflags="class overload">
          </methodref>
          <methodref name="MethodName" visibility="public" procflags="class">
          </methodref>
          <methodref name="QualifiedClassName" visibility="public" procflags="class">
          </methodref>
          <methodref name="FieldAddress" visibility="public" procflags="overload">
          </methodref>
          <methodref name="FieldAddress" visibility="public" procflags="overload">
          </methodref>
          <methodref name="GetInterface" visibility="public">
          </methodref>
          <methodref name="GetInterfaceEntry" visibility="public" procflags="class">
          </methodref>
          <methodref name="GetInterfaceTable" visibility="public" procflags="class inline">
          </methodref>
          <methodref name="UnitName" visibility="public" procflags="class">
          </methodref>
          <methodref name="UnitScope" visibility="public" procflags="class">
          </methodref>
          <methodref name="Equals" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="GetHashCode" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="ToString" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="SafeCallException" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="AfterConstruction" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="BeforeDestruction" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="Dispatch" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="DefaultHandler" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="NewInstance" visibility="public" procflags="class virtual">
          </methodref>
          <methodref name="FreeInstance" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="Destroy" visibility="public" procflags="destructor virtual">
          </methodref>
          <methodref name="GetDisposed" visibility="protected" procflags="inline">
          </methodref>
          <methodref name="CheckDisposed" visibility="protected" procflags="inline">
          </methodref>
          <propertyref name="Disposed" visibility="protected">
          </propertyref>
        </ancestor>
      </ancestor>
    </ancestor>
  </class>
  <class name="TFormActivateMessage" file="FMX.Forms.pas" line="152">
    
    <ancestor name="{System.Messaging}TMessage&lt;FMX.Forms.TCommonCustomForm&gt;" namespace="FMX.Forms">
      <methodref name="Create" visibility="public" procflags="constructor">
      </methodref>
      <methodref name="Destroy" visibility="public" procflags="destructor override">
      </methodref>
      <propertyref name="Value" visibility="public">
      </propertyref>
      <ancestor name="TMessageBase" namespace="System.Messaging">
        <ancestor name="TObject" namespace="System">
          <methodref name="Create" visibility="public" procflags="constructor">
          </methodref>
          <methodref name="Free" visibility="public">
          </methodref>
          <methodref name="DisposeOf" visibility="public" procflags="inline">
          </methodref>
          <methodref name="InitInstance" visibility="public" procflags="class">
          </methodref>
          <methodref name="CleanupInstance" visibility="public">
          </methodref>
          <methodref name="ClassType" visibility="public" procflags="inline">
          </methodref>
          <methodref name="ClassName" visibility="public" procflags="class">
          </methodref>
          <methodref name="ClassNameIs" visibility="public" procflags="class">
          </methodref>
          <methodref name="ClassParent" visibility="public" procflags="class inline">
          </methodref>
          <methodref name="ClassInfo" visibility="public" procflags="class inline">
          </methodref>
          <methodref name="InstanceSize" visibility="public" procflags="class inline">
          </methodref>
          <methodref name="InheritsFrom" visibility="public" procflags="class">
          </methodref>
          <methodref name="MethodAddress" visibility="public" procflags="class overload">
          </methodref>
          <methodref name="MethodAddress" visibility="public" procflags="class overload">
          </methodref>
          <methodref name="MethodName" visibility="public" procflags="class">
          </methodref>
          <methodref name="QualifiedClassName" visibility="public" procflags="class">
          </methodref>
          <methodref name="FieldAddress" visibility="public" procflags="overload">
          </methodref>
          <methodref name="FieldAddress" visibility="public" procflags="overload">
          </methodref>
          <methodref name="GetInterface" visibility="public">
          </methodref>
          <methodref name="GetInterfaceEntry" visibility="public" procflags="class">
          </methodref>
          <methodref name="GetInterfaceTable" visibility="public" procflags="class inline">
          </methodref>
          <methodref name="UnitName" visibility="public" procflags="class">
          </methodref>
          <methodref name="UnitScope" visibility="public" procflags="class">
          </methodref>
          <methodref name="Equals" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="GetHashCode" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="ToString" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="SafeCallException" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="AfterConstruction" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="BeforeDestruction" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="Dispatch" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="DefaultHandler" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="NewInstance" visibility="public" procflags="class virtual">
          </methodref>
          <methodref name="FreeInstance" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="Destroy" visibility="public" procflags="destructor virtual">
          </methodref>
          <methodref name="GetDisposed" visibility="protected" procflags="inline">
          </methodref>
          <methodref name="CheckDisposed" visibility="protected" procflags="inline">
          </methodref>
          <propertyref name="Disposed" visibility="protected">
          </propertyref>
        </ancestor>
      </ancestor>
    </ancestor>
  </class>
  <class name="TFormDeactivateMessage" file="FMX.Forms.pas" line="154">
    
    <ancestor name="{System.Messaging}TMessage&lt;FMX.Forms.TCommonCustomForm&gt;" namespace="FMX.Forms">
      <methodref name="Create" visibility="public" procflags="constructor">
      </methodref>
      <methodref name="Destroy" visibility="public" procflags="destructor override">
      </methodref>
      <propertyref name="Value" visibility="public">
      </propertyref>
      <ancestor name="TMessageBase" namespace="System.Messaging">
        <ancestor name="TObject" namespace="System">
          <methodref name="Create" visibility="public" procflags="constructor">
          </methodref>
          <methodref name="Free" visibility="public">
          </methodref>
          <methodref name="DisposeOf" visibility="public" procflags="inline">
          </methodref>
          <methodref name="InitInstance" visibility="public" procflags="class">
          </methodref>
          <methodref name="CleanupInstance" visibility="public">
          </methodref>
          <methodref name="ClassType" visibility="public" procflags="inline">
          </methodref>
          <methodref name="ClassName" visibility="public" procflags="class">
          </methodref>
          <methodref name="ClassNameIs" visibility="public" procflags="class">
          </methodref>
          <methodref name="ClassParent" visibility="public" procflags="class inline">
          </methodref>
          <methodref name="ClassInfo" visibility="public" procflags="class inline">
          </methodref>
          <methodref name="InstanceSize" visibility="public" procflags="class inline">
          </methodref>
          <methodref name="InheritsFrom" visibility="public" procflags="class">
          </methodref>
          <methodref name="MethodAddress" visibility="public" procflags="class overload">
          </methodref>
          <methodref name="MethodAddress" visibility="public" procflags="class overload">
          </methodref>
          <methodref name="MethodName" visibility="public" procflags="class">
          </methodref>
          <methodref name="QualifiedClassName" visibility="public" procflags="class">
          </methodref>
          <methodref name="FieldAddress" visibility="public" procflags="overload">
          </methodref>
          <methodref name="FieldAddress" visibility="public" procflags="overload">
          </methodref>
          <methodref name="GetInterface" visibility="public">
          </methodref>
          <methodref name="GetInterfaceEntry" visibility="public" procflags="class">
          </methodref>
          <methodref name="GetInterfaceTable" visibility="public" procflags="class inline">
          </methodref>
          <methodref name="UnitName" visibility="public" procflags="class">
          </methodref>
          <methodref name="UnitScope" visibility="public" procflags="class">
          </methodref>
          <methodref name="Equals" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="GetHashCode" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="ToString" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="SafeCallException" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="AfterConstruction" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="BeforeDestruction" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="Dispatch" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="DefaultHandler" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="NewInstance" visibility="public" procflags="class virtual">
          </methodref>
          <methodref name="FreeInstance" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="Destroy" visibility="public" procflags="destructor virtual">
          </methodref>
          <methodref name="GetDisposed" visibility="protected" procflags="inline">
          </methodref>
          <methodref name="CheckDisposed" visibility="protected" procflags="inline">
          </methodref>
          <propertyref name="Disposed" visibility="protected">
          </propertyref>
        </ancestor>
      </ancestor>
    </ancestor>
  </class>
  <class name="TFormReleasedMessage" file="FMX.Forms.pas" line="155">
    
  </class>
  <class name="TApplication" file="FMX.Forms.pas" line="157">
    
    <members>
      <class name="TFormRegistryItem" visibility="private" alias="FMX.Forms.TFormRegistryItem" file="FMX.Forms.pas" line="159">
        
        <members>
          <field name="InstanceClass" type="TComponentClass" visibility="public" size="4" offset="4" file="FMX.Forms.pas" line="161"/>
          <field name="Instance" type="TComponent" visibility="public" size="4" offset="8" file="FMX.Forms.pas" line="162"/>
          <field name="Reference" type="Pointer" visibility="public" size="4" offset="12" file="FMX.Forms.pas" line="163"/>
        </members>
      </class>
      <field name="FOnException" type="TExceptionEvent" visibility="private" size="8" offset="64" file="FMX.Forms.pas" line="168"/>
      <field name="FTerminate" type="Boolean" visibility="private" size="1" offset="72" file="FMX.Forms.pas" line="169"/>
      <field name="FOnIdle" type="TIdleEvent" visibility="private" size="8" offset="80" file="FMX.Forms.pas" line="170"/>
      <field name="FDefaultTitleReceived" type="Boolean" visibility="private" size="1" offset="88" file="FMX.Forms.pas" line="171"/>
      <field name="FDefaultTitle" type="string" visibility="private" size="4" offset="92" file="FMX.Forms.pas" line="172"/>
      <field name="FMainForm" type="TCommonCustomForm" visibility="private" size="4" offset="96" file="FMX.Forms.pas" line="173"/>
      <field name="FCreateForms" type=":TApplication.:1" visibility="private" size="4" offset="100" file="FMX.Forms.pas" line="174"/>
      <field name="FBiDiMode" type="TBiDiMode" visibility="private" size="1" offset="104" file="FMX.Forms.pas" line="175"/>
      <field name="FTimerActionHandle" type="NativeUInt" visibility="private" size="4" offset="108" file="FMX.Forms.pas" line="176"/>
      <field name="FActionUpdateDelay" type="Integer" visibility="private" size="4" offset="112" file="FMX.Forms.pas" line="177"/>
      <field name="FActionClientsList" type="TList&lt;System.Classes.TComponent&gt;" visibility="private" size="4" offset="116" file="FMX.Forms.pas" line="178"/>
      <field name="FOnActionUpdate" type="TActionEvent" visibility="private" size="8" offset="120" file="FMX.Forms.pas" line="179"/>
      <field name="FIdleDone" type="Boolean" visibility="private" size="1" offset="128" file="FMX.Forms.pas" line="180"/>
      <field name="FIsRealCreateFormsCalled" type="Boolean" visibility="private" size="1" offset="129" file="FMX.Forms.pas" line="181"/>
      <field name="FFormFactor" type="TApplicationFormFactor" visibility="private" size="4" offset="132" file="FMX.Forms.pas" line="182"/>
      <field name="FFormRegistry" type="TApplication.TFormRegistry" visibility="private" size="4" offset="136" file="FMX.Forms.pas" line="183"/>
      <field name="FMainFormFamily" type="string" visibility="private" size="4" offset="140" file="FMX.Forms.pas" line="184"/>
      <field name="FLastKeyPress" type="TDateTime" visibility="private" size="8" offset="144" file="FMX.Forms.pas" line="185"/>
      <field name="FLastUserActive" type="TDateTime" visibility="private" size="8" offset="152" file="FMX.Forms.pas" line="186"/>
      <field name="FIdleMessage" type="TIdleMessage" visibility="private" size="4" offset="160" file="FMX.Forms.pas" line="187"/>
      <field name="FOnActionExecute" type="TActionEvent" visibility="private" size="8" offset="168" file="FMX.Forms.pas" line="188"/>
      <field name="FApplicationStateQuery" type="TApplicationStateEvent" visibility="private" size="4" offset="176" file="FMX.Forms.pas" line="189"/>
      <field name="FAnalyticsManager" type="TAnalyticsManager" visibility="private" size="4" offset="180" file="FMX.Forms.pas" line="190"/>
      <field name="FHint" type="string" visibility="private" size="4" offset="184" file="FMX.Forms.pas" line="191"/>
      <field name="FShowHint" type="Boolean" visibility="private" size="1" offset="188" file="FMX.Forms.pas" line="192"/>
      <field name="FOnHint" type="TNotifyEvent" visibility="private" size="8" offset="192" file="FMX.Forms.pas" line="193"/>
      <field name="FSharedHint" type="THint" visibility="private" size="4" offset="200" file="FMX.Forms.pas" line="194"/>
      <field name="FIsControlHint" type="Boolean" visibility="private" size="1" offset="204" file="FMX.Forms.pas" line="195"/>
      <field name="FHintShortCuts" type="Boolean" visibility="private" size="1" offset="205" file="FMX.Forms.pas" line="196"/>
      <field name="FTimerService" type="IFMXTimerService" visibility="private" size="4" offset="208" file="FMX.Forms.pas" line="197"/>
      <procedure name="Idle" visibility="private" file="FMX.Forms.pas" line="198">
      </procedure>
      <procedure name="DoUpdateActions" visibility="private" file="FMX.Forms.pas" line="199">
      </procedure>
      <procedure name="UpdateActionTimerProc" visibility="private" file="FMX.Forms.pas" line="200">
      </procedure>
      <function name="GetFormRegistryItem" visibility="private" file="FMX.Forms.pas" line="201">
        <parameters>
          <parameter name="FormFamily" type="string" paramflags="const"/>
          <parameter name="FormFactor" type="TFormFactor" paramflags="const"/>
          <retval type="TApplication.TFormRegistryItem"/>
        </parameters>
      </function>
      <function name="GetDefaultTitle" visibility="private" file="FMX.Forms.pas" line="202">
        <parameters>
          <retval type="string"/>
        </parameters>
      </function>
      <function name="GetTitle" visibility="private" file="FMX.Forms.pas" line="203">
        <parameters>
          <retval type="string"/>
        </parameters>
      </function>
      <procedure name="SetTitle" visibility="private" file="FMX.Forms.pas" line="204">
        <parameters>
          <parameter name="Value" type="string" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetMainForm" visibility="private" file="FMX.Forms.pas" line="205">
        <parameters>
          <parameter name="Value" type="TCommonCustomForm" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="GetAnalyticsManager" visibility="private" file="FMX.Forms.pas" line="206">
        <parameters>
          <retval type="TAnalyticsManager"/>
        </parameters>
      </function>
      <procedure name="SetShowHint" visibility="private" file="FMX.Forms.pas" line="207">
        <parameters>
          <parameter name="AValue" type="Boolean" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetHint" visibility="private" file="FMX.Forms.pas" line="208">
        <parameters>
          <parameter name="AHint" type="string" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetHintShortCuts" visibility="private" file="FMX.Forms.pas" line="209">
        <parameters>
          <parameter name="Value" type="Boolean" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="GetTimerService" visibility="private" file="FMX.Forms.pas" line="210">
        <parameters>
          <retval type="IFMXTimerService"/>
        </parameters>
      </function>
      <property name="TimerService" visibility="private" read="GetTimerService" type="IFMXTimerService" file="FMX.Forms.pas" line="211"/>
      <constructor name="Create" visibility="public" file="FMX.Forms.pas" line="213">
        <parameters>
          <parameter name="AOwner" type="TComponent"/>
        </parameters>
      </constructor>
      <destructor name="Destroy" visibility="public" file="FMX.Forms.pas" line="214">
        <parameters>
        </parameters>
      </destructor>
      <procedure name="FormDestroyed" visibility="public" file="FMX.Forms.pas" line="215">
        <parameters>
          <parameter name="AForm" type="TCommonCustomForm" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="RealCreateForms" visibility="public" file="FMX.Forms.pas" line="216">
      </procedure>
      <procedure name="CreateForm" visibility="public" file="FMX.Forms.pas" line="217">
        <parameters>
          <parameter name="InstanceClass" type="TComponentClass" paramflags="const"/>
          <parameter name="Reference" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="CreateMainForm" visibility="public" file="FMX.Forms.pas" line="218">
      </procedure>
      <procedure name="RegisterFormFamily" visibility="public" file="FMX.Forms.pas" line="219">
        <parameters>
          <parameter name="AFormFamily" type="string" paramflags="const"/>
          <parameter name="AForms" paramflags="const">
            <array name="AForms" file="FMX.Forms.pas" line="1545">
              <element type="TComponentClass"/>
            </array>
          </parameter>
        </parameters>
      </procedure>
      <procedure name="ProcessMessages" visibility="public" file="FMX.Forms.pas" line="220">
      </procedure>
      <property name="LastKeyPress" visibility="public" read="FLastKeyPress" type="TDateTime" default="0" file="FMX.Forms.pas" line="221"/>
      <property name="LastUserActive" visibility="public" read="FLastUserActive" type="TDateTime" default="0" file="FMX.Forms.pas" line="222"/>
      <procedure name="DoIdle" visibility="public" file="FMX.Forms.pas" line="223">
        <parameters>
          <parameter name="Done" type="Boolean" paramflags="var"/>
        </parameters>
      </procedure>
      <function name="HandleMessage" visibility="public" file="FMX.Forms.pas" line="224">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <procedure name="Run" visibility="public" file="FMX.Forms.pas" line="225">
      </procedure>
      <function name="Terminate" visibility="public" file="FMX.Forms.pas" line="226">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <procedure name="Initialize" visibility="public" file="FMX.Forms.pas" line="227">
      </procedure>
      <function name="ActionExecuteTarget" visibility="public" file="FMX.Forms.pas" line="232">
        <devnotes>
           <summary> Perform method <b>TComponent.ExecuteAction</b> for current active control or active form or
           <b>Application</b></summary>
           <returns> <c>True</c> if the method <b>ExecuteTarget</b> of <b>Action</b> was performed</returns>
           <remarks> This method is analogous to the CM_ACTIONEXECUTE handler's in VCL </remarks>
        </devnotes>
        <parameters>
          <parameter name="Action" type="TBasicAction"/>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <function name="ExecuteAction" visibility="public" file="FMX.Forms.pas" line="233">
        <parameters>
          <parameter name="Action" type="TBasicAction"/>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <function name="UpdateAction" visibility="public" procflags="override" file="FMX.Forms.pas" line="234">
        <parameters>
          <parameter name="Action" type="TBasicAction"/>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <function name="TrackActivity" visibility="public" file="FMX.Forms.pas" line="239">
        <devnotes>
            <summary>Provides a mechanism for checking if application analytics has been enabled without accessing the
            AnalyticsManager property (which will create an instance of an application manager if one does not already
            exist). Returns True if an instance of TAnalyticsManager is assigned to the application. Returns False
            otherwise.</summary>
        </devnotes>
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <property name="ActionUpdateDelay" visibility="public" read="FActionUpdateDelay" write="FActionUpdateDelay" type="Integer" file="FMX.Forms.pas" line="240"/>
      <procedure name="HandleException" visibility="public" file="FMX.Forms.pas" line="241">
        <parameters>
          <parameter name="Sender" type="TObject"/>
        </parameters>
      </procedure>
      <procedure name="ShowException" visibility="public" file="FMX.Forms.pas" line="242">
        <parameters>
          <parameter name="E" type="Exception"/>
        </parameters>
      </procedure>
      <procedure name="CancelHint" visibility="public" file="FMX.Forms.pas" line="244">
        <devnotes>
           <summary>Cancels the display of a hint for a control.</summary>
        </devnotes>
      </procedure>
      <procedure name="HideHint" visibility="public" file="FMX.Forms.pas" line="246">
        <devnotes>
           <summary>Hides the current hint.</summary>
        </devnotes>
      </procedure>
      <property name="ShowHint" visibility="public" read="FShowHint" write="SetShowHint" type="Boolean" file="FMX.Forms.pas" line="248">
        <devnotes>
           <summary>Determines whether Help Hints are enabled or disabled for the entire application.</summary>
        </devnotes>
      </property>
      <event name="OnHint" visibility="public" read="FOnHint" write="FOnHint" type="TNotifyEvent" file="FMX.Forms.pas" line="250">
        <devnotes>
           <summary>Occurs when the mouse pointer moves over a control or menu item that can display a Help Hint.</summary>
        </devnotes>
      </event>
      <property name="BiDiMode" visibility="public" read="FBiDiMode" write="FBiDiMode" type="TBiDiMode" default="0" file="FMX.Forms.pas" line="251"/>
      <property name="Terminated" visibility="public" read="FTerminate" write="FTerminate" type="Boolean" file="FMX.Forms.pas" line="252"/>
      <event name="OnIdle" visibility="public" read="FOnIdle" write="FOnIdle" type="TIdleEvent" file="FMX.Forms.pas" line="253"/>
      <property name="MainForm" visibility="public" read="FMainForm" write="SetMainForm" type="TCommonCustomForm" file="FMX.Forms.pas" line="254"/>
      <property name="Title" visibility="public" read="GetTitle" write="SetTitle" type="string" default="0" file="FMX.Forms.pas" line="255"/>
      <property name="DefaultTitle" visibility="public" read="GetDefaultTitle" type="string" default="0" file="FMX.Forms.pas" line="256"/>
      <event name="OnActionExecute" visibility="public" read="FOnActionExecute" write="FOnActionExecute" type="TActionEvent" file="FMX.Forms.pas" line="257"/>
      <event name="OnActionUpdate" visibility="public" read="FOnActionUpdate" write="FOnActionUpdate" type="TActionEvent" file="FMX.Forms.pas" line="258"/>
      <event name="OnException" visibility="public" read="FOnException" write="FOnException" type="TExceptionEvent" file="FMX.Forms.pas" line="259"/>
      <property name="ApplicationStateQuery" visibility="public" read="FApplicationStateQuery" write="FApplicationStateQuery" type="TApplicationState" file="FMX.Forms.pas" line="260"/>
      <property name="IsRealCreateFormsCalled" visibility="public" read="FIsRealCreateFormsCalled" type="Boolean" file="FMX.Forms.pas" line="262">
        <devnotes>
           <summary>Returns true if RealCreateForms was invoked; otherwise, false.</summary>
        </devnotes>
      </property>
      <procedure name="RegisterActionClient" visibility="public" file="FMX.Forms.pas" line="264">
        <parameters>
          <parameter name="ActionClient" type="TComponent" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="UnregisterActionClient" visibility="public" file="FMX.Forms.pas" line="265">
        <parameters>
          <parameter name="ActionClient" type="TComponent" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="GetActionClients" visibility="public" file="FMX.Forms.pas" line="266">
        <parameters>
          <retval type="TEnumerable&lt;System.Classes.TComponent&gt;"/>
        </parameters>
      </function>
      <function name="GetDeviceForm" visibility="public" procflags="overload" file="FMX.Forms.pas" line="267">
        <parameters>
          <parameter name="FormFamily" type="string" paramflags="const"/>
          <parameter name="FormFactor" type="TFormFactor" paramflags="const"/>
          <retval type="TCommonCustomForm"/>
        </parameters>
      </function>
      <function name="GetDeviceForm" visibility="public" procflags="overload" file="FMX.Forms.pas" line="268">
        <parameters>
          <parameter name="FormFamily" type="string" paramflags="const"/>
          <retval type="TCommonCustomForm"/>
        </parameters>
      </function>
      <procedure name="OverrideScreenSize" visibility="public" file="FMX.Forms.pas" line="269">
        <parameters>
          <parameter name="W" type="Integer"/>
          <parameter name="H" type="Integer"/>
        </parameters>
      </procedure>
      <property name="FormFactor" visibility="public" read="FFormFactor" type="TApplicationFormFactor" file="FMX.Forms.pas" line="270"/>
      <property name="AnalyticsManager" visibility="public" read="GetAnalyticsManager" type="TAnalyticsManager" file="FMX.Forms.pas" line="273">
        <devnotes>
           <summary>Returns an instance of TAnalyticsManager. An instance will be created if one does not already exist.
           There should only be one AnalyticsManager per application.</summary>
        </devnotes>
      </property>
      <property name="Hint" visibility="public" read="FHint" write="SetHint" type="string" default="0" file="FMX.Forms.pas" line="275">
        <devnotes>
           <summary>Specifies the text string that appears in the Help Hint box.</summary>
        </devnotes>
      </property>
      <property name="HintShortCuts" visibility="public" read="FHintShortCuts" write="SetHintShortCuts" type="Boolean" file="FMX.Forms.pas" line="277">
        <devnotes>
           <summary>Enables the display of keyboard shortcuts.</summary>
        </devnotes>
      </property>
    </members>
  </class>
  <class name="TFormActionLink" file="FMX.Forms.pas" line="281">
    
    <ancestor name="TActionLink" namespace="FMX.ActnList">
      <methodref name="UpdateImages" visibility="private"/>
      <methodref name="AssignClient" visibility="protected" procflags="override"/>
      <methodref name="SetAction" visibility="protected" procflags="override"/>
      <methodref name="IsCaptionLinked" visibility="protected" procflags="override"/>
      <methodref name="IsCheckedLinked" visibility="protected" procflags="override"/>
      <methodref name="IsEnabledLinked" visibility="protected" procflags="override"/>
      <methodref name="IsGroupIndexLinked" visibility="protected" procflags="override"/>
      <methodref name="IsOnExecuteLinked" visibility="protected" procflags="override"/>
      <methodref name="IsShortCutLinked" visibility="protected" procflags="override"/>
      <methodref name="IsVisibleLinked" visibility="protected" procflags="override"/>
      <methodref name="IsImageIndexLinked" visibility="protected" procflags="override"/>
      <methodref name="SetCaption" visibility="protected" procflags="override"/>
      <methodref name="SetChecked" visibility="protected" procflags="override"/>
      <methodref name="SetGroupIndex" visibility="protected" procflags="override"/>
      <methodref name="SetImageIndex" visibility="protected" procflags="override"/>
      <methodref name="Change" visibility="protected" procflags="override"/>
      <propertyref name="Glyph" visibility="protected">
      </propertyref>
      <methodref name="IsViewActionClient" visibility="public"/>
      <propertyref name="Client" visibility="public"/>
      <propertyref name="Images" visibility="public">
      </propertyref>
      <propertyref name="CaptionLinked" visibility="public"/>
      <propertyref name="HintLinked" visibility="public">
      </propertyref>
      <propertyref name="CheckedLinked" visibility="public"/>
      <propertyref name="EnabledLinked" visibility="public"/>
      <propertyref name="GroupIndexLinked" visibility="public"/>
      <propertyref name="ShortCutLinked" visibility="public"/>
      <propertyref name="VisibleLinked" visibility="public"/>
      <propertyref name="OnExecuteLinked" visibility="public"/>
      <ancestor name="TContainedActionLink" namespace="System.Actions">
        <methodref name="DefaultIsLinked" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="IsCaptionLinked" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="IsCheckedLinked" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="IsEnabledLinked" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="IsGroupIndexLinked" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="IsHelpContextLinked" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="IsHelpLinked" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="IsHintLinked" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="IsImageIndexLinked" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="IsShortCutLinked" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="IsVisibleLinked" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="IsStatusActionLinked" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="SetAutoCheck" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="SetCaption" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="SetChecked" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="SetEnabled" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="SetGroupIndex" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="SetHelpContext" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="SetHelpKeyword" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="SetHelpType" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="SetHint" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="SetImageIndex" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="SetShortCut" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="SetVisible" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="SetStatusAction" visibility="protected" procflags="virtual">
        </methodref>
        <ancestor name="TBasicActionLink" namespace="System.Classes">
          <methodref name="AssignClient" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="Change" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="IsOnExecuteLinked" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="SetAction" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="SetOnExecute" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="Create" visibility="public" procflags="constructor virtual">
          </methodref>
          <methodref name="Destroy" visibility="public" procflags="destructor override">
          </methodref>
          <methodref name="Execute" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="Update" visibility="public" procflags="virtual">
          </methodref>
          <propertyref name="Action" visibility="public">
          </propertyref>
          <eventref name="OnChange" visibility="public">
          </eventref>
          <ancestor name="TObject" namespace="System">
            <methodref name="Create" visibility="public" procflags="constructor">
            </methodref>
            <methodref name="Free" visibility="public">
            </methodref>
            <methodref name="DisposeOf" visibility="public" procflags="inline">
            </methodref>
            <methodref name="InitInstance" visibility="public" procflags="class">
            </methodref>
            <methodref name="CleanupInstance" visibility="public">
            </methodref>
            <methodref name="ClassType" visibility="public" procflags="inline">
            </methodref>
            <methodref name="ClassName" visibility="public" procflags="class">
            </methodref>
            <methodref name="ClassNameIs" visibility="public" procflags="class">
            </methodref>
            <methodref name="ClassParent" visibility="public" procflags="class inline">
            </methodref>
            <methodref name="ClassInfo" visibility="public" procflags="class inline">
            </methodref>
            <methodref name="InstanceSize" visibility="public" procflags="class inline">
            </methodref>
            <methodref name="InheritsFrom" visibility="public" procflags="class">
            </methodref>
            <methodref name="MethodAddress" visibility="public" procflags="class overload">
            </methodref>
            <methodref name="MethodAddress" visibility="public" procflags="class overload">
            </methodref>
            <methodref name="MethodName" visibility="public" procflags="class">
            </methodref>
            <methodref name="QualifiedClassName" visibility="public" procflags="class">
            </methodref>
            <methodref name="FieldAddress" visibility="public" procflags="overload">
            </methodref>
            <methodref name="FieldAddress" visibility="public" procflags="overload">
            </methodref>
            <methodref name="GetInterface" visibility="public">
            </methodref>
            <methodref name="GetInterfaceEntry" visibility="public" procflags="class">
            </methodref>
            <methodref name="GetInterfaceTable" visibility="public" procflags="class inline">
            </methodref>
            <methodref name="UnitName" visibility="public" procflags="class">
            </methodref>
            <methodref name="UnitScope" visibility="public" procflags="class">
            </methodref>
            <methodref name="Equals" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="GetHashCode" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="ToString" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="SafeCallException" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="AfterConstruction" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="BeforeDestruction" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="Dispatch" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="DefaultHandler" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="NewInstance" visibility="public" procflags="class virtual">
            </methodref>
            <methodref name="FreeInstance" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="Destroy" visibility="public" procflags="destructor virtual">
            </methodref>
            <methodref name="GetDisposed" visibility="protected" procflags="inline">
            </methodref>
            <methodref name="CheckDisposed" visibility="protected" procflags="inline">
            </methodref>
            <propertyref name="Disposed" visibility="protected">
            </propertyref>
          </ancestor>
        </ancestor>
      </ancestor>
    </ancestor>
    <members>
      <field name="FForm" type="TCommonCustomForm" visibility="private" size="4" offset="56" file="FMX.Forms.pas" line="283"/>
      <function name="ActionCustomViewComponent" visibility="private" file="FMX.Forms.pas" line="284">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <property name="Form" visibility="protected" read="FForm" type="TCommonCustomForm" file="FMX.Forms.pas" line="286"/>
      <procedure name="AssignClient" visibility="protected" procflags="override" file="FMX.Forms.pas" line="287">
        <parameters>
          <parameter name="AClient" type="TObject"/>
        </parameters>
      </procedure>
      <function name="IsCheckedLinked" visibility="protected" procflags="override" file="FMX.Forms.pas" line="288">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <function name="IsEnabledLinked" visibility="protected" procflags="override" file="FMX.Forms.pas" line="289">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <function name="IsGroupIndexLinked" visibility="protected" procflags="override" file="FMX.Forms.pas" line="290">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <function name="IsHelpLinked" visibility="protected" procflags="override" file="FMX.Forms.pas" line="291">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <function name="IsHintLinked" visibility="protected" procflags="override" file="FMX.Forms.pas" line="292">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <function name="IsVisibleLinked" visibility="protected" procflags="override" file="FMX.Forms.pas" line="293">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <function name="IsOnExecuteLinked" visibility="protected" procflags="override" file="FMX.Forms.pas" line="294">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <procedure name="SetVisible" visibility="protected" procflags="override" file="FMX.Forms.pas" line="295">
        <parameters>
          <parameter name="Value" type="Boolean"/>
        </parameters>
      </procedure>
    </members>
  </class>
  <type name="TCloseEvent" file="FMX.Forms.pas" line="300" procflags="closure">
  </type>
  <type name="TCloseQueryEvent" file="FMX.Forms.pas" line="301" procflags="closure">
  </type>
  <enum name="TFmxFormBorderStyle" file="FMX.Forms.pas" line="303">
    <element value="0" name="None" file="FMX.Forms.pas" line="303"/>
    <element value="1" name="Single" file="FMX.Forms.pas" line="303"/>
    <element value="2" name="Sizeable" file="FMX.Forms.pas" line="303"/>
    <element value="3" name="ToolWindow" file="FMX.Forms.pas" line="303"/>
    <element value="4" name="SizeToolWin" file="FMX.Forms.pas" line="303"/>
  </enum>
  <enum name="TFmxFormState" file="FMX.Forms.pas" line="305">
    <element value="0" name="Recreating" file="FMX.Forms.pas" line="305"/>
    <element value="1" name="Modal" file="FMX.Forms.pas" line="305"/>
    <element value="2" name="Released" file="FMX.Forms.pas" line="305"/>
    <element value="3" name="InDesigner" file="FMX.Forms.pas" line="305"/>
    <element value="4" name="WasNotShown" file="FMX.Forms.pas" line="305"/>
    <element value="5" name="Showing" file="FMX.Forms.pas" line="305"/>
    <element value="6" name="UpdateBorder" file="FMX.Forms.pas" line="305"/>
    <element value="7" name="Activation" file="FMX.Forms.pas" line="305"/>
    <element value="8" name="Closing" file="FMX.Forms.pas" line="305"/>
    <element value="9" name="Engaged" file="FMX.Forms.pas" line="306"/>
  </enum>
  <set name="TFmxFormStates" type="TFmxFormState" file="FMX.Forms.pas" line="308">
    <element name="Recreating"/>
    <element name="Modal"/>
    <element name="Released"/>
    <element name="InDesigner"/>
    <element name="WasNotShown"/>
    <element name="Showing"/>
    <element name="UpdateBorder"/>
    <element name="Activation"/>
    <element name="Closing"/>
    <element name="Engaged"/>
  </set>
  <enum name="TFormPosition" file="FMX.Forms.pas" line="310">
    <element value="0" name="Designed" file="FMX.Forms.pas" line="310"/>
    <element value="1" name="Default" file="FMX.Forms.pas" line="310"/>
    <element value="2" name="DefaultPosOnly" file="FMX.Forms.pas" line="310"/>
    <element value="3" name="DefaultSizeOnly" file="FMX.Forms.pas" line="310"/>
    <element value="4" name="ScreenCenter" file="FMX.Forms.pas" line="310"/>
    <element value="5" name="DesktopCenter" file="FMX.Forms.pas" line="310"/>
    <element value="6" name="MainFormCenter" file="FMX.Forms.pas" line="310"/>
    <element value="7" name="OwnerFormCenter" file="FMX.Forms.pas" line="310"/>
  </enum>
  <interface name="IFMXWindowService" GUID="{26C42398-9AFC-4D09-9541-9C71E769FC35}" ancestor="IInterface" file="FMX.Forms.pas" line="312">
    <function name="FindForm" visibility="public" procflags="abstract virtual" file="FMX.Forms.pas" line="314">
      <parameters>
        <parameter name="AHandle" type="TWindowHandle" paramflags="const"/>
        <retval type="TCommonCustomForm"/>
      </parameters>
    </function>
    <function name="CreateWindow" visibility="public" procflags="abstract virtual" file="FMX.Forms.pas" line="315">
      <parameters>
        <parameter name="AForm" type="TCommonCustomForm" paramflags="const"/>
        <retval type="TWindowHandle"/>
      </parameters>
    </function>
    <procedure name="DestroyWindow" visibility="public" procflags="abstract virtual" file="FMX.Forms.pas" line="316">
      <parameters>
        <parameter name="AForm" type="TCommonCustomForm" paramflags="const"/>
      </parameters>
    </procedure>
    <procedure name="ReleaseWindow" visibility="public" procflags="abstract virtual" file="FMX.Forms.pas" line="317">
      <parameters>
        <parameter name="AForm" type="TCommonCustomForm" paramflags="const"/>
      </parameters>
    </procedure>
    <procedure name="SetWindowState" visibility="public" procflags="abstract virtual" file="FMX.Forms.pas" line="318">
      <parameters>
        <parameter name="AForm" type="TCommonCustomForm" paramflags="const"/>
        <parameter name="AState" type="TWindowState" paramflags="const"/>
      </parameters>
    </procedure>
    <procedure name="ShowWindow" visibility="public" procflags="abstract virtual" file="FMX.Forms.pas" line="319">
      <parameters>
        <parameter name="AForm" type="TCommonCustomForm" paramflags="const"/>
      </parameters>
    </procedure>
    <procedure name="HideWindow" visibility="public" procflags="abstract virtual" file="FMX.Forms.pas" line="320">
      <parameters>
        <parameter name="AForm" type="TCommonCustomForm" paramflags="const"/>
      </parameters>
    </procedure>
    <function name="ShowWindowModal" visibility="public" procflags="abstract virtual" file="FMX.Forms.pas" line="321">
      <parameters>
        <parameter name="AForm" type="TCommonCustomForm" paramflags="const"/>
        <retval type="TModalResult"/>
      </parameters>
    </function>
    <procedure name="InvalidateWindowRect" visibility="public" procflags="abstract virtual" file="FMX.Forms.pas" line="322">
      <parameters>
        <parameter name="AForm" type="TCommonCustomForm" paramflags="const"/>
        <parameter name="R" type="TRectF"/>
      </parameters>
    </procedure>
    <procedure name="InvalidateImmediately" visibility="public" procflags="abstract virtual" file="FMX.Forms.pas" line="323">
      <parameters>
        <parameter name="AForm" type="TCommonCustomForm" paramflags="const"/>
      </parameters>
    </procedure>
    <procedure name="SetWindowRect" visibility="public" procflags="abstract virtual" file="FMX.Forms.pas" line="324">
      <parameters>
        <parameter name="AForm" type="TCommonCustomForm" paramflags="const"/>
        <parameter name="ARect" type="TRectF"/>
      </parameters>
    </procedure>
    <function name="GetWindowRect" visibility="public" procflags="abstract virtual" file="FMX.Forms.pas" line="325">
      <parameters>
        <parameter name="AForm" type="TCommonCustomForm" paramflags="const"/>
        <retval type="TRectF"/>
      </parameters>
    </function>
    <function name="GetClientSize" visibility="public" procflags="abstract virtual" file="FMX.Forms.pas" line="326">
      <parameters>
        <parameter name="AForm" type="TCommonCustomForm" paramflags="const"/>
        <retval type="TPointF"/>
      </parameters>
    </function>
    <procedure name="SetClientSize" visibility="public" procflags="abstract virtual" file="FMX.Forms.pas" line="327">
      <parameters>
        <parameter name="AForm" type="TCommonCustomForm" paramflags="const"/>
        <parameter name="ASize" type="TPointF" paramflags="const"/>
      </parameters>
    </procedure>
    <procedure name="SetWindowCaption" visibility="public" procflags="abstract virtual" file="FMX.Forms.pas" line="328">
      <parameters>
        <parameter name="AForm" type="TCommonCustomForm" paramflags="const"/>
        <parameter name="ACaption" type="string" paramflags="const"/>
      </parameters>
    </procedure>
    <procedure name="SetCapture" visibility="public" procflags="abstract virtual" file="FMX.Forms.pas" line="329">
      <parameters>
        <parameter name="AForm" type="TCommonCustomForm" paramflags="const"/>
      </parameters>
    </procedure>
    <procedure name="ReleaseCapture" visibility="public" procflags="abstract virtual" file="FMX.Forms.pas" line="330">
      <parameters>
        <parameter name="AForm" type="TCommonCustomForm" paramflags="const"/>
      </parameters>
    </procedure>
    <function name="ClientToScreen" visibility="public" procflags="abstract virtual" file="FMX.Forms.pas" line="331">
      <parameters>
        <parameter name="AForm" type="TCommonCustomForm" paramflags="const"/>
        <parameter name="AFormPoint" type="TPointF" paramflags="const"/>
        <retval type="TPointF"/>
      </parameters>
    </function>
    <function name="ScreenToClient" visibility="public" procflags="abstract virtual" file="FMX.Forms.pas" line="332">
      <parameters>
        <parameter name="AForm" type="TCommonCustomForm" paramflags="const"/>
        <parameter name="AScreenPoint" type="TPointF" paramflags="const"/>
        <retval type="TPointF"/>
      </parameters>
    </function>
    <procedure name="BringToFront" visibility="public" procflags="abstract virtual" file="FMX.Forms.pas" line="333">
      <parameters>
        <parameter name="AForm" type="TCommonCustomForm" paramflags="const"/>
      </parameters>
    </procedure>
    <procedure name="SendToBack" visibility="public" procflags="abstract virtual" file="FMX.Forms.pas" line="334">
      <parameters>
        <parameter name="AForm" type="TCommonCustomForm" paramflags="const"/>
      </parameters>
    </procedure>
    <procedure name="Activate" visibility="public" procflags="abstract virtual" file="FMX.Forms.pas" line="335">
      <parameters>
        <parameter name="AForm" type="TCommonCustomForm" paramflags="const"/>
      </parameters>
    </procedure>
    <function name="GetWindowScale" visibility="public" procflags="abstract virtual" file="FMX.Forms.pas" line="336" symflags="deprecated">
      <parameters>
        <parameter name="AForm" type="TCommonCustomForm" paramflags="const"/>
        <retval type="Single"/>
      </parameters>
    </function>
    <function name="CanShowModal" visibility="public" procflags="abstract virtual" file="FMX.Forms.pas" line="337">
      <parameters>
        <retval type="Boolean"/>
      </parameters>
    </function>
  </interface>
  <interface name="IFMXWindowConstraintsService" GUID="{030E519F-3D99-422C-9978-798EA04AF14B}" ancestor="IInterface" file="FMX.Forms.pas" line="341">
    <devnotes>
       <summary>A service for working with form size constraints.</summary>
    </devnotes>
    <procedure name="SetConstraints" visibility="public" procflags="abstract virtual" file="FMX.Forms.pas" line="343">
      <parameters>
        <parameter name="AForm" type="TCommonCustomForm" paramflags="const"/>
        <parameter name="AMinWidth" type="Single" paramflags="const"/>
        <parameter name="AMinHeight" type="Single" paramflags="const"/>
        <parameter name="AMaxWidth" type="Single" paramflags="const"/>
        <parameter name="AMaxHeight" type="Single" paramflags="const"/>
      </parameters>
    </procedure>
  </interface>
  <interface name="IFMXFullScreenWindowService" GUID="{103EB4B7-E899-4684-8174-2EEEE24F1E58}" ancestor="IInterface" file="FMX.Forms.pas" line="346">
    <procedure name="SetFullScreen" visibility="public" procflags="abstract virtual" file="FMX.Forms.pas" line="348">
      <parameters>
        <parameter name="AForm" type="TCommonCustomForm" paramflags="const"/>
        <parameter name="AValue" type="Boolean" paramflags="const"/>
      </parameters>
    </procedure>
    <function name="GetFullScreen" visibility="public" procflags="abstract virtual" file="FMX.Forms.pas" line="349">
      <parameters>
        <parameter name="AForm" type="TCommonCustomForm" paramflags="const"/>
        <retval type="Boolean"/>
      </parameters>
    </function>
    <procedure name="SetShowFullScreenIcon" visibility="public" procflags="abstract virtual" file="FMX.Forms.pas" line="350">
      <parameters>
        <parameter name="AForm" type="TCommonCustomForm" paramflags="const"/>
        <parameter name="AValue" type="Boolean" paramflags="const"/>
      </parameters>
    </procedure>
  </interface>
  <class name="TWindowBorder" file="FMX.Forms.pas" line="353">
    
    <members>
      <field name="FForm" type="TCommonCustomForm" visibility="private" size="4" offset="128" file="FMX.Forms.pas" line="355">
        <attributes>
          <attribute name="TObject"/>
        </attributes>
      </field>
      <function name="GetSupported" visibility="protected" procflags="abstract virtual" file="FMX.Forms.pas" line="357">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <procedure name="Resize" visibility="protected" procflags="abstract virtual" file="FMX.Forms.pas" line="358">
      </procedure>
      <procedure name="Activate" visibility="protected" procflags="abstract virtual" file="FMX.Forms.pas" line="359">
      </procedure>
      <procedure name="Deactivate" visibility="protected" procflags="abstract virtual" file="FMX.Forms.pas" line="360">
      </procedure>
      <procedure name="StyleChanged" visibility="protected" procflags="abstract virtual" file="FMX.Forms.pas" line="362">
        <devnotes>
           <summary>Notifies when form changed style.</summary>
        </devnotes>
      </procedure>
      <procedure name="ScaleChanged" visibility="protected" procflags="abstract virtual" file="FMX.Forms.pas" line="363">
      </procedure>
      <procedure name="EnableChanged" visibility="protected" procflags="virtual" file="FMX.Forms.pas" line="364">
      </procedure>
      <constructor name="Create" visibility="public" file="FMX.Forms.pas" line="366">
        <parameters>
          <parameter name="AForm" type="TCommonCustomForm" paramflags="const"/>
        </parameters>
      </constructor>
      <property name="Form" visibility="public" read="FForm" type="TCommonCustomForm" file="FMX.Forms.pas" line="367"/>
      <property name="IsSupported" visibility="public" read="GetSupported" type="Boolean" file="FMX.Forms.pas" line="368"/>
    </members>
  </class>
  <interface name="IFMXWindowBorderService" GUID="{F3FC3133-CEF0-446F-B3C6-7820989DDFC6}" ancestor="IInterface" file="FMX.Forms.pas" line="371">
    <function name="CreateWindowBorder" visibility="public" procflags="abstract virtual" file="FMX.Forms.pas" line="373">
      <parameters>
        <parameter name="AForm" type="TCommonCustomForm" paramflags="const"/>
        <retval type="TWindowBorder"/>
      </parameters>
    </function>
  </interface>
  <class name="TFormBorder" file="FMX.Forms.pas" line="376">
    
    <members>
      <field name="FWindowBorder" type="TWindowBorder" visibility="private" size="4" offset="4" file="FMX.Forms.pas" line="378"/>
      <field name="FForm" type="TCommonCustomForm" visibility="private" size="4" offset="8" file="FMX.Forms.pas" line="379">
        <attributes>
          <attribute name="TObject"/>
        </attributes>
      </field>
      <field name="FStyling" type="Boolean" visibility="private" size="1" offset="12" file="FMX.Forms.pas" line="380"/>
      <procedure name="SetStyling" visibility="private" file="FMX.Forms.pas" line="381">
        <parameters>
          <parameter name="Value" type="Boolean" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="GetSupported" visibility="protected" file="FMX.Forms.pas" line="383">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <procedure name="Recreate" visibility="protected" file="FMX.Forms.pas" line="384">
      </procedure>
      <procedure name="EnableChanged" visibility="protected" file="FMX.Forms.pas" line="385">
      </procedure>
      <constructor name="Create" visibility="public" file="FMX.Forms.pas" line="387">
        <parameters>
          <parameter name="AForm" type="TCommonCustomForm" paramflags="const"/>
        </parameters>
      </constructor>
      <destructor name="Destroy" visibility="public" file="FMX.Forms.pas" line="388">
        <parameters>
        </parameters>
      </destructor>
      <procedure name="StyleChanged" visibility="public" file="FMX.Forms.pas" line="389">
      </procedure>
      <procedure name="ScaleChanged" visibility="public" file="FMX.Forms.pas" line="390">
      </procedure>
      <procedure name="Resize" visibility="public" file="FMX.Forms.pas" line="391">
      </procedure>
      <procedure name="Activate" visibility="public" file="FMX.Forms.pas" line="392">
      </procedure>
      <procedure name="Deactivate" visibility="public" file="FMX.Forms.pas" line="393">
      </procedure>
      <property name="WindowBorder" visibility="public" read="FWindowBorder" type="TWindowBorder" file="FMX.Forms.pas" line="394"/>
      <property name="IsSupported" visibility="public" read="GetSupported" type="Boolean" file="FMX.Forms.pas" line="395"/>
      <property name="Styling" visibility="published" read="FStyling" write="SetStyling" type="Boolean" default="1" file="FMX.Forms.pas" line="397"/>
    </members>
  </class>
  <class name="TVKStateChangeMessage" file="FMX.Forms.pas" line="400">
    
    <members>
      <field name="FKeyboardShown" type="Boolean" visibility="private" size="1" offset="4" file="FMX.Forms.pas" line="402"/>
      <field name="FBounds" type="TRect" visibility="private" size="16" offset="8" file="FMX.Forms.pas" line="403"/>
      <constructor name="Create" visibility="public" file="FMX.Forms.pas" line="405">
        <parameters>
          <parameter name="AKeyboardShown" type="Boolean"/>
          <parameter name="Bounds" type="TRect" paramflags="const"/>
        </parameters>
      </constructor>
      <property name="KeyboardVisible" visibility="public" read="FKeyboardShown" type="Boolean" file="FMX.Forms.pas" line="406"/>
      <property name="KeyboardBounds" visibility="public" read="FBounds" type="TRect" file="FMX.Forms.pas" line="407"/>
    </members>
  </class>
  <class name="TScaleChangedMessage" file="FMX.Forms.pas" line="410">
    
  </class>
  <class name="TMainCaptionChangedMessage" file="FMX.Forms.pas" line="411">
    
  </class>
  <class name="TMainFormChangedMessage" file="FMX.Forms.pas" line="412">
    
  </class>
  <class name="TBeforeDestroyFormHandle" file="FMX.Forms.pas" line="414">
    
    <ancestor name="{System.Messaging}TMessage&lt;FMX.Forms.TCommonCustomForm&gt;" namespace="FMX.Forms">
      <methodref name="Create" visibility="public" procflags="constructor">
      </methodref>
      <methodref name="Destroy" visibility="public" procflags="destructor override">
      </methodref>
      <propertyref name="Value" visibility="public">
      </propertyref>
      <ancestor name="TMessageBase" namespace="System.Messaging">
        <ancestor name="TObject" namespace="System">
          <methodref name="Create" visibility="public" procflags="constructor">
          </methodref>
          <methodref name="Free" visibility="public">
          </methodref>
          <methodref name="DisposeOf" visibility="public" procflags="inline">
          </methodref>
          <methodref name="InitInstance" visibility="public" procflags="class">
          </methodref>
          <methodref name="CleanupInstance" visibility="public">
          </methodref>
          <methodref name="ClassType" visibility="public" procflags="inline">
          </methodref>
          <methodref name="ClassName" visibility="public" procflags="class">
          </methodref>
          <methodref name="ClassNameIs" visibility="public" procflags="class">
          </methodref>
          <methodref name="ClassParent" visibility="public" procflags="class inline">
          </methodref>
          <methodref name="ClassInfo" visibility="public" procflags="class inline">
          </methodref>
          <methodref name="InstanceSize" visibility="public" procflags="class inline">
          </methodref>
          <methodref name="InheritsFrom" visibility="public" procflags="class">
          </methodref>
          <methodref name="MethodAddress" visibility="public" procflags="class overload">
          </methodref>
          <methodref name="MethodAddress" visibility="public" procflags="class overload">
          </methodref>
          <methodref name="MethodName" visibility="public" procflags="class">
          </methodref>
          <methodref name="QualifiedClassName" visibility="public" procflags="class">
          </methodref>
          <methodref name="FieldAddress" visibility="public" procflags="overload">
          </methodref>
          <methodref name="FieldAddress" visibility="public" procflags="overload">
          </methodref>
          <methodref name="GetInterface" visibility="public">
          </methodref>
          <methodref name="GetInterfaceEntry" visibility="public" procflags="class">
          </methodref>
          <methodref name="GetInterfaceTable" visibility="public" procflags="class inline">
          </methodref>
          <methodref name="UnitName" visibility="public" procflags="class">
          </methodref>
          <methodref name="UnitScope" visibility="public" procflags="class">
          </methodref>
          <methodref name="Equals" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="GetHashCode" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="ToString" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="SafeCallException" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="AfterConstruction" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="BeforeDestruction" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="Dispatch" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="DefaultHandler" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="NewInstance" visibility="public" procflags="class virtual">
          </methodref>
          <methodref name="FreeInstance" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="Destroy" visibility="public" procflags="destructor virtual">
          </methodref>
          <methodref name="GetDisposed" visibility="protected" procflags="inline">
          </methodref>
          <methodref name="CheckDisposed" visibility="protected" procflags="inline">
          </methodref>
          <propertyref name="Disposed" visibility="protected">
          </propertyref>
        </ancestor>
      </ancestor>
    </ancestor>
  </class>
  <class name="TAfterCreateFormHandle" file="FMX.Forms.pas" line="416">
    
    <ancestor name="{System.Messaging}TMessage&lt;FMX.Forms.TCommonCustomForm&gt;" namespace="FMX.Forms">
      <methodref name="Create" visibility="public" procflags="constructor">
      </methodref>
      <methodref name="Destroy" visibility="public" procflags="destructor override">
      </methodref>
      <propertyref name="Value" visibility="public">
      </propertyref>
      <ancestor name="TMessageBase" namespace="System.Messaging">
        <ancestor name="TObject" namespace="System">
          <methodref name="Create" visibility="public" procflags="constructor">
          </methodref>
          <methodref name="Free" visibility="public">
          </methodref>
          <methodref name="DisposeOf" visibility="public" procflags="inline">
          </methodref>
          <methodref name="InitInstance" visibility="public" procflags="class">
          </methodref>
          <methodref name="CleanupInstance" visibility="public">
          </methodref>
          <methodref name="ClassType" visibility="public" procflags="inline">
          </methodref>
          <methodref name="ClassName" visibility="public" procflags="class">
          </methodref>
          <methodref name="ClassNameIs" visibility="public" procflags="class">
          </methodref>
          <methodref name="ClassParent" visibility="public" procflags="class inline">
          </methodref>
          <methodref name="ClassInfo" visibility="public" procflags="class inline">
          </methodref>
          <methodref name="InstanceSize" visibility="public" procflags="class inline">
          </methodref>
          <methodref name="InheritsFrom" visibility="public" procflags="class">
          </methodref>
          <methodref name="MethodAddress" visibility="public" procflags="class overload">
          </methodref>
          <methodref name="MethodAddress" visibility="public" procflags="class overload">
          </methodref>
          <methodref name="MethodName" visibility="public" procflags="class">
          </methodref>
          <methodref name="QualifiedClassName" visibility="public" procflags="class">
          </methodref>
          <methodref name="FieldAddress" visibility="public" procflags="overload">
          </methodref>
          <methodref name="FieldAddress" visibility="public" procflags="overload">
          </methodref>
          <methodref name="GetInterface" visibility="public">
          </methodref>
          <methodref name="GetInterfaceEntry" visibility="public" procflags="class">
          </methodref>
          <methodref name="GetInterfaceTable" visibility="public" procflags="class inline">
          </methodref>
          <methodref name="UnitName" visibility="public" procflags="class">
          </methodref>
          <methodref name="UnitScope" visibility="public" procflags="class">
          </methodref>
          <methodref name="Equals" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="GetHashCode" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="ToString" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="SafeCallException" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="AfterConstruction" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="BeforeDestruction" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="Dispatch" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="DefaultHandler" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="NewInstance" visibility="public" procflags="class virtual">
          </methodref>
          <methodref name="FreeInstance" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="Destroy" visibility="public" procflags="destructor virtual">
          </methodref>
          <methodref name="GetDisposed" visibility="protected" procflags="inline">
          </methodref>
          <methodref name="CheckDisposed" visibility="protected" procflags="inline">
          </methodref>
          <propertyref name="Disposed" visibility="protected">
          </propertyref>
        </ancestor>
      </ancestor>
    </ancestor>
  </class>
  <class name="TOrientationChangedMessage" file="FMX.Forms.pas" line="417">
    
  </class>
  <class name="TSizeChangedMessage" file="FMX.Forms.pas" line="418">
    
  </class>
  <class name="TSaveStateMessage" file="FMX.Forms.pas" line="419">
    
  </class>
  <class name="TFormChangingFocusControl" file="FMX.Forms.pas" line="421">
    
    <ancestor name="TMessageBase" namespace="System.Messaging">
      <ancestor name="TObject" namespace="System">
        <methodref name="Create" visibility="public" procflags="constructor">
        </methodref>
        <methodref name="Free" visibility="public">
        </methodref>
        <methodref name="DisposeOf" visibility="public" procflags="inline">
        </methodref>
        <methodref name="InitInstance" visibility="public" procflags="class">
        </methodref>
        <methodref name="CleanupInstance" visibility="public">
        </methodref>
        <methodref name="ClassType" visibility="public" procflags="inline">
        </methodref>
        <methodref name="ClassName" visibility="public" procflags="class">
        </methodref>
        <methodref name="ClassNameIs" visibility="public" procflags="class">
        </methodref>
        <methodref name="ClassParent" visibility="public" procflags="class inline">
        </methodref>
        <methodref name="ClassInfo" visibility="public" procflags="class inline">
        </methodref>
        <methodref name="InstanceSize" visibility="public" procflags="class inline">
        </methodref>
        <methodref name="InheritsFrom" visibility="public" procflags="class">
        </methodref>
        <methodref name="MethodAddress" visibility="public" procflags="class overload">
        </methodref>
        <methodref name="MethodAddress" visibility="public" procflags="class overload">
        </methodref>
        <methodref name="MethodName" visibility="public" procflags="class">
        </methodref>
        <methodref name="QualifiedClassName" visibility="public" procflags="class">
        </methodref>
        <methodref name="FieldAddress" visibility="public" procflags="overload">
        </methodref>
        <methodref name="FieldAddress" visibility="public" procflags="overload">
        </methodref>
        <methodref name="GetInterface" visibility="public">
        </methodref>
        <methodref name="GetInterfaceEntry" visibility="public" procflags="class">
        </methodref>
        <methodref name="GetInterfaceTable" visibility="public" procflags="class inline">
        </methodref>
        <methodref name="UnitName" visibility="public" procflags="class">
        </methodref>
        <methodref name="UnitScope" visibility="public" procflags="class">
        </methodref>
        <methodref name="Equals" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="GetHashCode" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="ToString" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="SafeCallException" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="AfterConstruction" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="BeforeDestruction" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="Dispatch" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="DefaultHandler" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="NewInstance" visibility="public" procflags="class virtual">
        </methodref>
        <methodref name="FreeInstance" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="Destroy" visibility="public" procflags="destructor virtual">
        </methodref>
        <methodref name="GetDisposed" visibility="protected" procflags="inline">
        </methodref>
        <methodref name="CheckDisposed" visibility="protected" procflags="inline">
        </methodref>
        <propertyref name="Disposed" visibility="protected">
        </propertyref>
      </ancestor>
    </ancestor>
    <members>
      <field name="PreviousFocusedControl" type="IControl" visibility="public" size="4" offset="4" file="FMX.Forms.pas" line="424">
        <attributes>
          <attribute name="TObject"/>
        </attributes>
        <devnotes>
           <summary>Previous focused control.</summary>
        </devnotes>
      </field>
      <field name="NewFocusedControl" type="IControl" visibility="public" size="4" offset="8" file="FMX.Forms.pas" line="426">
        <attributes>
          <attribute name="TObject"/>
        </attributes>
        <devnotes>
           <summary>New control, which are going to have focus.</summary>
        </devnotes>
      </field>
      <field name="IsChanged" type="Boolean" visibility="public" size="1" offset="12" file="FMX.Forms.pas" line="428">
        <devnotes>
           <summary>Does focus changing finished? True - <c>NewFocusedControl</c> received focus, False - otherwise.</summary>
        </devnotes>
      </field>
      <constructor name="Create" visibility="public" file="FMX.Forms.pas" line="429">
        <parameters>
          <parameter name="APreviousFocusedControl" type="IControl" paramflags="const"/>
          <parameter name="ANewFocusedControl" type="IControl" paramflags="const"/>
          <parameter name="AIsChanged" type="Boolean" paramflags="const"/>
        </parameters>
      </constructor>
    </members>
  </class>
  <class name="TFormSaveState" file="FMX.Forms.pas" line="432">
    
    <members>
      <const name="UniqueNameSeparator" visibility="class private" type="Char" file="FMX.Forms.pas" line="432">
        <value>
          $5F
        </value>
      </const>
      <const name="UniqueNamePrefix" visibility="class private" type="string" file="FMX.Forms.pas" line="447">
        <value>
          FM
        </value>
      </const>
      <const name="UniqueNameExtension" visibility="class private" type="string">
        <value>
          .TMP
        </value>
      </const>
      <field name="FOwner" type="TCommonCustomForm" visibility="class private" size="4" offset="4" file="FMX.Forms.pas" line="438">
        <attributes>
          <attribute name="TObject"/>
        </attributes>
      </field>
      <field name="FStream" type="TMemoryStream" visibility="class private" size="4" offset="8" file="FMX.Forms.pas" line="439"/>
      <field name="FName" type="string" visibility="class private" size="4" offset="12" file="FMX.Forms.pas" line="440"/>
      <procedure name="UpdateFromSaveState" visibility="class private" file="FMX.Forms.pas" line="441">
      </procedure>
      <function name="GetStream" visibility="class private" file="FMX.Forms.pas" line="442">
        <parameters>
          <retval type="TMemoryStream"/>
        </parameters>
      </function>
      <function name="GenerateUniqueName" visibility="class private" file="FMX.Forms.pas" line="443">
        <parameters>
          <retval type="string"/>
        </parameters>
      </function>
      <procedure name="UpdateToSaveState" visibility="private" file="FMX.Forms.pas" line="445">
      </procedure>
      <function name="GetStoragePath" visibility="private" file="FMX.Forms.pas" line="446">
        <parameters>
          <retval type="string"/>
        </parameters>
      </function>
      <procedure name="SetStoragePath" visibility="private" file="FMX.Forms.pas" line="447">
        <parameters>
          <parameter name="AValue" type="string" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="GetUniqueName" visibility="protected" file="FMX.Forms.pas" line="449">
        <parameters>
          <retval type="string"/>
        </parameters>
      </function>
      <constructor name="Create" visibility="public" file="FMX.Forms.pas" line="451">
        <parameters>
          <parameter name="AOwner" type="TCommonCustomForm" paramflags="const"/>
        </parameters>
      </constructor>
      <destructor name="Destroy" visibility="public" file="FMX.Forms.pas" line="452">
        <parameters>
        </parameters>
      </destructor>
      <property name="Owner" visibility="public" read="FOwner" type="TCommonCustomForm" file="FMX.Forms.pas" line="453"/>
      <property name="Stream" visibility="public" read="GetStream" type="TMemoryStream" file="FMX.Forms.pas" line="454"/>
      <property name="Name" visibility="public" read="FName" write="FName" type="string" default="0" file="FMX.Forms.pas" line="455"/>
      <property name="StoragePath" visibility="public" read="GetStoragePath" write="SetStoragePath" type="string" default="0" file="FMX.Forms.pas" line="456"/>
    </members>
  </class>
  <enum name="TWindowStyle" file="FMX.Forms.pas" line="461">
    <element value="0" name="GPUSurface" file="FMX.Forms.pas" line="461"/>
  </enum>
  <set name="TWindowStyles" type="TWindowStyle" file="FMX.Forms.pas" line="463">
    <element name="GPUSurface"/>
  </set>
  <class name="TFormSystemStatusBar" file="FMX.Forms.pas" line="466">
    
    <ancestor name="TPersistent" namespace="System.Classes">
      <methodref name="AssignError" visibility="private">
      </methodref>
      <methodref name="AssignTo" visibility="protected" procflags="virtual">
      </methodref>
      <methodref name="DefineProperties" visibility="protected" procflags="virtual">
      </methodref>
      <methodref name="GetOwner" visibility="protected" procflags="dynamic">
      </methodref>
      <methodref name="Destroy" visibility="public" procflags="destructor override">
      </methodref>
      <methodref name="Assign" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="GetNamePath" visibility="public" procflags="dynamic">
      </methodref>
      <ancestor name="TObject" namespace="System">
        <methodref name="Create" visibility="public" procflags="constructor">
        </methodref>
        <methodref name="Free" visibility="public">
        </methodref>
        <methodref name="DisposeOf" visibility="public" procflags="inline">
        </methodref>
        <methodref name="InitInstance" visibility="public" procflags="class">
        </methodref>
        <methodref name="CleanupInstance" visibility="public">
        </methodref>
        <methodref name="ClassType" visibility="public" procflags="inline">
        </methodref>
        <methodref name="ClassName" visibility="public" procflags="class">
        </methodref>
        <methodref name="ClassNameIs" visibility="public" procflags="class">
        </methodref>
        <methodref name="ClassParent" visibility="public" procflags="class inline">
        </methodref>
        <methodref name="ClassInfo" visibility="public" procflags="class inline">
        </methodref>
        <methodref name="InstanceSize" visibility="public" procflags="class inline">
        </methodref>
        <methodref name="InheritsFrom" visibility="public" procflags="class">
        </methodref>
        <methodref name="MethodAddress" visibility="public" procflags="class overload">
        </methodref>
        <methodref name="MethodAddress" visibility="public" procflags="class overload">
        </methodref>
        <methodref name="MethodName" visibility="public" procflags="class">
        </methodref>
        <methodref name="QualifiedClassName" visibility="public" procflags="class">
        </methodref>
        <methodref name="FieldAddress" visibility="public" procflags="overload">
        </methodref>
        <methodref name="FieldAddress" visibility="public" procflags="overload">
        </methodref>
        <methodref name="GetInterface" visibility="public">
        </methodref>
        <methodref name="GetInterfaceEntry" visibility="public" procflags="class">
        </methodref>
        <methodref name="GetInterfaceTable" visibility="public" procflags="class inline">
        </methodref>
        <methodref name="UnitName" visibility="public" procflags="class">
        </methodref>
        <methodref name="UnitScope" visibility="public" procflags="class">
        </methodref>
        <methodref name="Equals" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="GetHashCode" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="ToString" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="SafeCallException" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="AfterConstruction" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="BeforeDestruction" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="Dispatch" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="DefaultHandler" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="NewInstance" visibility="public" procflags="class virtual">
        </methodref>
        <methodref name="FreeInstance" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="Destroy" visibility="public" procflags="destructor virtual">
        </methodref>
        <methodref name="GetDisposed" visibility="protected" procflags="inline">
        </methodref>
        <methodref name="CheckDisposed" visibility="protected" procflags="inline">
        </methodref>
        <propertyref name="Disposed" visibility="protected">
        </propertyref>
      </ancestor>
    </ancestor>
    <members>
      <enum name="TVisibilityMode" visibility="public" alias="FMX.Forms.TVisibilityMode" file="FMX.Forms.pas" line="468">
        <element value="0" name="Visible" file="FMX.Forms.pas" line="468"/>
        <element value="1" name="Invisible" file="FMX.Forms.pas" line="468"/>
        <element value="2" name="VisibleAndOverlap" file="FMX.Forms.pas" line="468"/>
      </enum>
      <const name="DefaultBackgroundColor" visibility="public" type="TAlphaColor" file="FMX.Forms.pas" line="466">
        <value>
          $0
        </value>
      </const>
      <const name="DefaultVisibility" visibility="public" type="TFormSystemStatusBar.TVisibilityMode" file="FMX.Forms.pas" line="471">
        <value>
          Visible
        </value>
      </const>
      <field name="FForm" type="TCommonCustomForm" visibility="private" size="4" offset="4" file="FMX.Forms.pas" line="473">
        <attributes>
          <attribute name="TObject"/>
        </attributes>
      </field>
      <field name="FBackgroundColor" type="TAlphaColor" visibility="private" size="4" offset="8" file="FMX.Forms.pas" line="474"/>
      <field name="FVisibility" type="TFormSystemStatusBar.TVisibilityMode" visibility="private" size="4" offset="12" file="FMX.Forms.pas" line="475"/>
      <procedure name="SetBackgroundColor" visibility="private" file="FMX.Forms.pas" line="476">
        <parameters>
          <parameter name="Value" type="TAlphaColor" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetVisibility" visibility="private" file="FMX.Forms.pas" line="477">
        <parameters>
          <parameter name="Value" type="TFormSystemStatusBar.TVisibilityMode" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="AssignTo" visibility="protected" procflags="override" file="FMX.Forms.pas" line="479">
        <parameters>
          <parameter name="Dest" type="TPersistent"/>
        </parameters>
      </procedure>
      <constructor name="Create" visibility="public" file="FMX.Forms.pas" line="481">
        <parameters>
          <parameter name="AForm" type="TCommonCustomForm" paramflags="const"/>
        </parameters>
      </constructor>
      <property name="BackgroundColor" visibility="published" read="FBackgroundColor" write="SetBackgroundColor" type="TAlphaColor" default="0" file="FMX.Forms.pas" line="484">
        <devnotes>
           <summary>Background color of system status bar</summary>
        </devnotes>
      </property>
      <property name="Visibility" visibility="published" read="FVisibility" write="SetVisibility" type="TFormSystemStatusBar.TVisibilityMode" default="0" file="FMX.Forms.pas" line="486">
        <devnotes>
           <summary>Different modes of showing system status bar</summary>
        </devnotes>
      </property>
    </members>
  </class>
  <interface name="IFMXWindowSystemStatusBarService" GUID="{06258F45-98C5-4F8F-9A77-01F2BD892A5B}" ancestor="IInterface" file="FMX.Forms.pas" line="490">
    <devnotes>
       <summary>Service for working with native system status bar</summary>
    </devnotes>
    <procedure name="SetBackgroundColor" visibility="public" procflags="abstract virtual" file="FMX.Forms.pas" line="493">
      <devnotes>
         <summary>Sets background color of system status bar</summary>
      </devnotes>
      <parameters>
        <parameter name="AForm" type="TCommonCustomForm" paramflags="const"/>
        <parameter name="AColor" type="TAlphaColor" paramflags="const"/>
      </parameters>
    </procedure>
    <procedure name="SetVisibility" visibility="public" procflags="abstract virtual" file="FMX.Forms.pas" line="495">
      <devnotes>
         <summary>Sets how system status bar will be shown. See TVisibilityMode</summary>
      </devnotes>
      <parameters>
        <parameter name="AForm" type="TCommonCustomForm" paramflags="const"/>
        <parameter name="AMode" type="TFormSystemStatusBar.TVisibilityMode" paramflags="const"/>
      </parameters>
    </procedure>
  </interface>
  <type name="TConstraintSize" type="Float" file="System.pas" line="12"/>
  <class name="TSizeConstraints" file="FMX.Forms.pas" line="500">
    
    <members>
      <enum name="TDimension" visibility="private" alias="FMX.Forms.TDimension" file="FMX.Forms.pas" line="502">
        <element value="0" name="MaxHeight" file="FMX.Forms.pas" line="502"/>
        <element value="1" name="MaxWidth" file="FMX.Forms.pas" line="502"/>
        <element value="2" name="MinHeight" file="FMX.Forms.pas" line="502"/>
        <element value="3" name="MinWidth" file="FMX.Forms.pas" line="502"/>
      </enum>
      <field name="FOwner" type="TComponent" visibility="private" size="4" offset="4" file="FMX.Forms.pas" line="504"/>
      <field name="FMaxHeight" type="Single" visibility="private" size="4" offset="8" file="FMX.Forms.pas" line="505"/>
      <field name="FMaxWidth" type="Single" visibility="private" size="4" offset="12" file="FMX.Forms.pas" line="506"/>
      <field name="FMinHeight" type="Single" visibility="private" size="4" offset="16" file="FMX.Forms.pas" line="507"/>
      <field name="FMinWidth" type="Single" visibility="private" size="4" offset="20" file="FMX.Forms.pas" line="508"/>
      <field name="FOnChange" type="TNotifyEvent" visibility="private" size="8" offset="24" file="FMX.Forms.pas" line="509"/>
      <procedure name="SetConstraints" visibility="private" file="FMX.Forms.pas" line="510">
        <parameters>
          <parameter name="Index" type="TSizeConstraints.TDimension" paramflags="const"/>
          <parameter name="Value" type="Single"/>
        </parameters>
      </procedure>
      <function name="GetMaxSize" visibility="private" file="FMX.Forms.pas" line="511">
        <parameters>
          <retval type="TSizeF"/>
        </parameters>
      </function>
      <function name="GetMinSize" visibility="private" file="FMX.Forms.pas" line="512">
        <parameters>
          <retval type="TSizeF"/>
        </parameters>
      </function>
      <function name="IsValueStored" visibility="private" file="FMX.Forms.pas" line="513">
        <parameters>
          <parameter name="Index" type="TSizeConstraints.TDimension" paramflags="const"/>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <procedure name="Change" visibility="protected" procflags="virtual" file="FMX.Forms.pas" line="515">
      </procedure>
      <procedure name="AssignTo" visibility="protected" procflags="override" file="FMX.Forms.pas" line="516">
        <parameters>
          <parameter name="Dest" type="TPersistent"/>
        </parameters>
      </procedure>
      <function name="GetOwner" visibility="protected" procflags="override" file="FMX.Forms.pas" line="517">
        <parameters>
          <retval type="TPersistent"/>
        </parameters>
      </function>
      <constructor name="Create" visibility="public" file="FMX.Forms.pas" line="519">
        <parameters>
          <parameter name="AOwner" type="TComponent" paramflags="const"/>
        </parameters>
      </constructor>
      <property name="MinSize" visibility="public" read="GetMinSize" type="TSizeF" file="FMX.Forms.pas" line="520"/>
      <property name="MaxSize" visibility="public" read="GetMaxSize" type="TSizeF" file="FMX.Forms.pas" line="521"/>
      <event name="OnChange" visibility="public" read="FOnChange" write="FOnChange" type="TNotifyEvent" file="FMX.Forms.pas" line="522"/>
      <property name="MaxHeight" visibility="published" read="FMaxHeight" write="SetConstraints" stored="IsValueStored" type="Single" index="0" file="FMX.Forms.pas" line="524"/>
      <property name="MaxWidth" visibility="published" read="FMaxWidth" write="SetConstraints" stored="IsValueStored" type="Single" index="1" file="FMX.Forms.pas" line="525"/>
      <property name="MinHeight" visibility="published" read="FMinHeight" write="SetConstraints" stored="IsValueStored" type="Single" index="2" file="FMX.Forms.pas" line="526"/>
      <property name="MinWidth" visibility="published" read="FMinWidth" write="SetConstraints" stored="IsValueStored" type="Single" index="3" file="FMX.Forms.pas" line="527"/>
    </members>
  </class>
  <type name="TConstrainedResizeEvent" file="FMX.Forms.pas" line="530" procflags="closure">
  </type>
  <class name="TCommonCustomForm" file="FMX.Forms.pas" line="532">
    
    <interfaces>
      <implements name="IHintRegistry"/>
      <implements name="ICaption"/>
      <implements name="IMultiTouch"/>
      <implements name="IGestureControl"/>
      <implements name="ITabStopController"/>
      <implements name="IOriginalContainerSize"/>
      <implements name="IDesignerStorage"/>
      <implements name="IStyleBookOwner"/>
      <implements name="IPaintControl"/>
      <implements name="IAlignRoot"/>
      <implements name="IContainerObject"/>
      <implements name="IRoot"/>
    </interfaces>
    <members>
      <enum name="THandleState" visibility="private" alias="FMX.Forms.THandleState" file="FMX.Forms.pas" line="536">
        <element value="0" name="Normal" file="FMX.Forms.pas" line="536"/>
        <element value="1" name="NeedRecreate" file="FMX.Forms.pas" line="536"/>
        <element value="2" name="Changed" file="FMX.Forms.pas" line="536"/>
      </enum>
      <enum name="TBoundChange" visibility="private" alias="FMX.Forms.TBoundChange" file="FMX.Forms.pas" line="537">
        <element value="0" name="Location" file="FMX.Forms.pas" line="537"/>
        <element value="1" name="Size" file="FMX.Forms.pas" line="537"/>
      </enum>
      <set name="TBoundChanges" visibility="private" alias="FMX.Forms.TBoundChanges" type="TCommonCustomForm.TBoundChange" file="FMX.Forms.pas" line="538">
        <element name="Location"/>
        <element name="Size"/>
      </set>
      <field name="FDesigner" type="IDesignerHook" visibility="private" size="4" offset="128" file="FMX.Forms.pas" line="540"/>
      <field name="FCaption" type="string" visibility="private" size="4" offset="132" file="FMX.Forms.pas" line="541"/>
      <field name="FBounds" type="TRectF" visibility="private" size="16" offset="136" file="FMX.Forms.pas" line="543"/>
      <field name="FBoundChanges" type="TCommonCustomForm.TBoundChanges" visibility="private" size="1" offset="152" file="FMX.Forms.pas" line="544"/>
      <field name="FDefaultWindowRect" type="TRectF" visibility="private" size="16" offset="156" file="FMX.Forms.pas" line="545"/>
      <field name="FDefaultClientSize" type="TSizeF" visibility="private" size="8" offset="172" file="FMX.Forms.pas" line="546"/>
      <field name="FConstraints" type="TSizeConstraints" visibility="private" size="4" offset="180" file="FMX.Forms.pas" line="547"/>
      <field name="FPosition" type="TFormPosition" visibility="private" size="4" offset="184" file="FMX.Forms.pas" line="548"/>
      <field name="FTransparency" type="Boolean" visibility="private" size="1" offset="188" file="FMX.Forms.pas" line="549"/>
      <field name="FHandle" type="TWindowHandle" visibility="private" size="4" offset="192" file="FMX.Forms.pas" line="550"/>
      <field name="FContextHandle" type="NativeUInt" visibility="private" size="4" offset="196" file="FMX.Forms.pas" line="551"/>
      <field name="FBorderStyle" type="TFmxFormBorderStyle" visibility="private" size="4" offset="200" file="FMX.Forms.pas" line="552"/>
      <field name="FBorderIcons" type="TBorderIcons" visibility="private" size="1" offset="204" file="FMX.Forms.pas" line="553"/>
      <field name="FVisible" type="Boolean" visibility="private" size="1" offset="205" file="FMX.Forms.pas" line="554"/>
      <field name="FExplicitVisible" type="Boolean" visibility="private" size="1" offset="206" file="FMX.Forms.pas" line="555"/>
      <field name="FModalResult" type="TModalResult" visibility="private" size="4" offset="208" file="FMX.Forms.pas" line="556"/>
      <field name="FFormState" type="TFmxFormStates" visibility="private" size="2" offset="212" file="FMX.Forms.pas" line="557"/>
      <field name="FBiDiMode" type="TBiDiMode" visibility="private" size="1" offset="214" file="FMX.Forms.pas" line="558"/>
      <field name="FActive" type="Boolean" visibility="private" size="1" offset="215" file="FMX.Forms.pas" line="559"/>
      <field name="FTarget" type="IControl" visibility="private" size="4" offset="216" file="FMX.Forms.pas" line="560"/>
      <field name="FHovered" type="IControl" visibility="private" size="4" offset="220" file="FMX.Forms.pas" line="561"/>
      <field name="FCaptured" type="IControl" visibility="private" size="4" offset="224" file="FMX.Forms.pas" line="561"/>
      <field name="FFocused" type="IControl" visibility="private" size="4" offset="228" file="FMX.Forms.pas" line="561"/>
      <field name="FMousePos" type="TPointF" visibility="private" size="8" offset="232" file="FMX.Forms.pas" line="562"/>
      <field name="FDownPos" type="TPointF" visibility="private" size="8" offset="240" file="FMX.Forms.pas" line="562"/>
      <field name="FResizeSize" type="TPointF" visibility="private" size="8" offset="248" file="FMX.Forms.pas" line="562"/>
      <field name="FDownSize" type="TPointF" visibility="private" size="8" offset="256" file="FMX.Forms.pas" line="562"/>
      <field name="FDragging" type="Boolean" visibility="private" size="1" offset="264" file="FMX.Forms.pas" line="563"/>
      <field name="FResizing" type="Boolean" visibility="private" size="1" offset="265" file="FMX.Forms.pas" line="563"/>
      <field name="FCursor" type="TCursor" visibility="private" size="2" offset="266" file="FMX.Forms.pas" line="564"/>
      <field name="FWindowState" type="TWindowState" visibility="private" size="1" offset="268" file="FMX.Forms.pas" line="565"/>
      <field name="FShowFullScreenIcon" type="Boolean" visibility="private" size="1" offset="269" file="FMX.Forms.pas" line="566"/>
      <field name="FFullScreen" type="Boolean" visibility="private" size="1" offset="270" file="FMX.Forms.pas" line="567"/>
      <field name="FPadding" type="TBounds" visibility="private" size="4" offset="272" file="FMX.Forms.pas" line="568"/>
      <field name="FFormFactor" type="TFormFactor" visibility="private" size="4" offset="276" file="FMX.Forms.pas" line="569"/>
      <field name="FFormFamily" type="string" visibility="private" size="4" offset="280" file="FMX.Forms.pas" line="570"/>
      <field name="FOldActiveForm" type="TCommonCustomForm" visibility="private" size="4" offset="284" file="FMX.Forms.pas" line="571"/>
      <field name="FChangingFocusGuard" type="Boolean" visibility="private" size="1" offset="288" file="FMX.Forms.pas" line="572"/>
      <field name="FBorder" type="TFormBorder" visibility="private" size="4" offset="292" file="FMX.Forms.pas" line="573"/>
      <field name="FStateChangeMessageId" type="Integer" visibility="private" size="4" offset="296" file="FMX.Forms.pas" line="574"/>
      <field name="FOnClose" type="TCloseEvent" visibility="private" size="8" offset="304" file="FMX.Forms.pas" line="575"/>
      <field name="FOnCloseQuery" type="TCloseQueryEvent" visibility="private" size="8" offset="312" file="FMX.Forms.pas" line="576"/>
      <field name="FOnActivate" type="TNotifyEvent" visibility="private" size="8" offset="320" file="FMX.Forms.pas" line="577"/>
      <field name="FOnDeactivate" type="TNotifyEvent" visibility="private" size="8" offset="328" file="FMX.Forms.pas" line="578"/>
      <field name="FOnCreate" type="TNotifyEvent" visibility="private" size="8" offset="336" file="FMX.Forms.pas" line="579"/>
      <field name="FOnDestroy" type="TNotifyEvent" visibility="private" size="8" offset="344" file="FMX.Forms.pas" line="580"/>
      <field name="FOnResize" type="TNotifyEvent" visibility="private" size="8" offset="352" file="FMX.Forms.pas" line="581"/>
      <field name="FOnConstrainedResize" type="TConstrainedResizeEvent" visibility="private" size="8" offset="360" file="FMX.Forms.pas" line="582"/>
      <field name="FOnMouseDown" type="TMouseEvent" visibility="private" size="8" offset="368" file="FMX.Forms.pas" line="583"/>
      <field name="FOnMouseMove" type="TMouseMoveEvent" visibility="private" size="8" offset="376" file="FMX.Forms.pas" line="584"/>
      <field name="FOnMouseUp" type="TMouseEvent" visibility="private" size="8" offset="384" file="FMX.Forms.pas" line="585"/>
      <field name="FOnMouseWheel" type="TMouseWheelEvent" visibility="private" size="8" offset="392" file="FMX.Forms.pas" line="586"/>
      <field name="FOnKeyDown" type="TKeyEvent" visibility="private" size="8" offset="400" file="FMX.Forms.pas" line="587"/>
      <field name="FOnKeyUp" type="TKeyEvent" visibility="private" size="8" offset="408" file="FMX.Forms.pas" line="588"/>
      <field name="FOnShow" type="TNotifyEvent" visibility="private" size="8" offset="416" file="FMX.Forms.pas" line="589"/>
      <field name="FOnHide" type="TNotifyEvent" visibility="private" size="8" offset="424" file="FMX.Forms.pas" line="590"/>
      <field name="FOnFocusChanged" type="TNotifyEvent" visibility="private" size="8" offset="432" file="FMX.Forms.pas" line="591"/>
      <field name="FOnVirtualKeyboardShown" type="TVirtualKeyboardEvent" visibility="private" size="8" offset="440" file="FMX.Forms.pas" line="592"/>
      <field name="FOnVirtualKeyboardHidden" type="TVirtualKeyboardEvent" visibility="private" size="8" offset="448" file="FMX.Forms.pas" line="593"/>
      <field name="FOnTap" type="TTapEvent" visibility="private" size="8" offset="456" file="FMX.Forms.pas" line="594"/>
      <field name="FOnTouch" type="TTouchEvent" visibility="private" size="8" offset="464" file="FMX.Forms.pas" line="595"/>
      <field name="FStyleBook" type="TStyleBook" visibility="private" size="4" offset="472" file="FMX.Forms.pas" line="596">
        <attributes>
          <attribute name="TObject"/>
        </attributes>
      </field>
      <field name="FScaleChangedId" type="Integer" visibility="private" size="4" offset="476" file="FMX.Forms.pas" line="597"/>
      <field name="FStyleChangedId" type="Integer" visibility="private" size="4" offset="480" file="FMX.Forms.pas" line="598"/>
      <field name="FStyleBookChanged" type="Boolean" visibility="private" size="1" offset="484" file="FMX.Forms.pas" line="599"/>
      <field name="FPreloadedBorderStyling" type="Boolean" visibility="private" size="1" offset="485" file="FMX.Forms.pas" line="600"/>
      <field name="FOriginalContainerSize" type="TPointF" visibility="private" size="8" offset="488" file="FMX.Forms.pas" line="601"/>
      <field name="FMainMenu" type="TComponent" visibility="private" size="4" offset="496" file="FMX.Forms.pas" line="602">
        <attributes>
          <attribute name="TObject"/>
        </attributes>
      </field>
      <field name="FMainMenuNative" type="INativeControl" visibility="private" size="4" offset="500" file="FMX.Forms.pas" line="603"/>
      <field name="FFormStyle" type="TFormStyle" visibility="private" size="4" offset="504" file="FMX.Forms.pas" line="604"/>
      <field name="FParentForm" type="TCommonCustomForm" visibility="private" size="4" offset="508" file="FMX.Forms.pas" line="605">
        <attributes>
          <attribute name="TObject"/>
        </attributes>
      </field>
      <field name="FHandleState" type="TCommonCustomForm.THandleState" visibility="private" size="4" offset="512" file="FMX.Forms.pas" line="606"/>
      <field name="FGestureRecognizers" visibility="private" size="28" offset="516" file="FMX.Forms.pas" line="607">
        <array name="FGestureRecognizers" visibility="private" file="FMX.Forms.pas" line="607">
          <element type="Integer"/>
        </array>
      </field>
      <field name="FResultProc" type="TProc&lt;System.UITypes.TModalResult&gt;" visibility="private" size="4" offset="544" file="FMX.Forms.pas" line="608"/>
      <field name="FTabList" type="TTabList" visibility="private" size="4" offset="548" file="FMX.Forms.pas" line="609"/>
      <field name="FTouchManager" type="TTouchManager" visibility="private" size="4" offset="552" file="FMX.Forms.pas" line="610"/>
      <field name="FOnGesture" type="TGestureEvent" visibility="private" size="8" offset="560" file="FMX.Forms.pas" line="611"/>
      <field name="FOnSaveState" type="TNotifyEvent" visibility="private" size="8" offset="568" file="FMX.Forms.pas" line="612"/>
      <field name="FSaveState" type="TFormSaveState" visibility="private" size="4" offset="576" file="FMX.Forms.pas" line="613"/>
      <field name="FSaveStateMessageId" type="Integer" visibility="private" size="4" offset="580" file="FMX.Forms.pas" line="614"/>
      <field name="FEngageCount" type="Integer" visibility="private" size="4" offset="584" file="FMX.Forms.pas" line="615"/>
      <field name="FSharedHint" type="THint" visibility="private" size="4" offset="588" file="FMX.Forms.pas" line="616"/>
      <field name="FLastHinted" type="IControl" visibility="private" size="4" offset="592" file="FMX.Forms.pas" line="617"/>
      <field name="FHintReceiverList" type="TList&lt;FMX.Controls.IHintReceiver&gt;" visibility="private" size="4" offset="596" file="FMX.Forms.pas" line="618"/>
      <field name="FHint" type="string" visibility="private" size="4" offset="600" file="FMX.Forms.pas" line="619"/>
      <field name="FShowHint" type="Boolean" visibility="private" size="1" offset="604" file="FMX.Forms.pas" line="620"/>
      <field name="FSystemStatusBar" type="TFormSystemStatusBar" visibility="private" size="4" offset="608" file="FMX.Forms.pas" line="621"/>
      <field name="FDesignerDeviceName" type="string" visibility="private" size="4" offset="612" file="FMX.Forms.pas" line="623"/>
      <field name="FDesignerMasterStyle" type="Integer" visibility="private" size="4" offset="616" file="FMX.Forms.pas" line="624"/>
      <function name="GetDesignerMobile" visibility="private" file="FMX.Forms.pas" line="625">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <function name="GetDesignerWidth" visibility="private" file="FMX.Forms.pas" line="626">
        <parameters>
          <retval type="Integer"/>
        </parameters>
      </function>
      <function name="GetDesignerHeight" visibility="private" file="FMX.Forms.pas" line="627">
        <parameters>
          <retval type="Integer"/>
        </parameters>
      </function>
      <function name="GetDesignerDeviceName" visibility="private" file="FMX.Forms.pas" line="628">
        <parameters>
          <retval type="string"/>
        </parameters>
      </function>
      <function name="GetDesignerOrientation" visibility="private" file="FMX.Forms.pas" line="629">
        <parameters>
          <retval type="TScreenOrientation"/>
        </parameters>
      </function>
      <function name="GetDesignerOSVersion" visibility="private" file="FMX.Forms.pas" line="630">
        <parameters>
          <retval type="string"/>
        </parameters>
      </function>
      <function name="GetDesignerMasterStyle" visibility="private" file="FMX.Forms.pas" line="631">
        <parameters>
          <retval type="Integer"/>
        </parameters>
      </function>
      <procedure name="SetDesignerMasterStyle" visibility="private" file="FMX.Forms.pas" line="632">
        <parameters>
          <parameter name="Value" type="Integer"/>
        </parameters>
      </procedure>
      <procedure name="ReadDesignerMobile" visibility="private" file="FMX.Forms.pas" line="634">
        <parameters>
          <parameter name="Reader" type="TReader"/>
        </parameters>
      </procedure>
      <procedure name="ReadDesignerWidth" visibility="private" file="FMX.Forms.pas" line="635">
        <parameters>
          <parameter name="Reader" type="TReader"/>
        </parameters>
      </procedure>
      <procedure name="ReadDesignerHeight" visibility="private" file="FMX.Forms.pas" line="636">
        <parameters>
          <parameter name="Reader" type="TReader"/>
        </parameters>
      </procedure>
      <procedure name="ReadDesignerDeviceName" visibility="private" file="FMX.Forms.pas" line="637">
        <parameters>
          <parameter name="Reader" type="TReader"/>
        </parameters>
      </procedure>
      <procedure name="ReadDesignerOrientation" visibility="private" file="FMX.Forms.pas" line="638">
        <parameters>
          <parameter name="Reader" type="TReader"/>
        </parameters>
      </procedure>
      <procedure name="ReadDesignerOSVersion" visibility="private" file="FMX.Forms.pas" line="639">
        <parameters>
          <parameter name="Reader" type="TReader"/>
        </parameters>
      </procedure>
      <procedure name="ReadDesignerMasterStyle" visibility="private" file="FMX.Forms.pas" line="640">
        <parameters>
          <parameter name="Reader" type="TReader"/>
        </parameters>
      </procedure>
      <procedure name="WriteDesignerMasterStyle" visibility="private" file="FMX.Forms.pas" line="641">
        <parameters>
          <parameter name="Writer" type="TWriter"/>
        </parameters>
      </procedure>
      <procedure name="SetDesigner" visibility="private" file="FMX.Forms.pas" line="642">
        <parameters>
          <parameter name="ADesigner" type="IDesignerHook" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetLeft" visibility="private" file="FMX.Forms.pas" line="643">
        <parameters>
          <parameter name="Value" type="Integer" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetTop" visibility="private" file="FMX.Forms.pas" line="644">
        <parameters>
          <parameter name="Value" type="Integer" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetHeight" visibility="private" file="FMX.Forms.pas" line="645">
        <parameters>
          <parameter name="Value" type="Integer" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="GetHeight" visibility="private" file="FMX.Forms.pas" line="646">
        <parameters>
          <retval type="Integer"/>
        </parameters>
      </function>
      <procedure name="SetWidth" visibility="private" file="FMX.Forms.pas" line="647">
        <parameters>
          <parameter name="Value" type="Integer" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="GetWidth" visibility="private" file="FMX.Forms.pas" line="648">
        <parameters>
          <retval type="Integer"/>
        </parameters>
      </function>
      <procedure name="SetCaption" visibility="private" file="FMX.Forms.pas" line="649">
        <parameters>
          <parameter name="Value" type="string" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="GetClientHeight" visibility="private" file="FMX.Forms.pas" line="650">
        <parameters>
          <retval type="Integer"/>
        </parameters>
      </function>
      <function name="GetClientWidth" visibility="private" file="FMX.Forms.pas" line="651">
        <parameters>
          <retval type="Integer"/>
        </parameters>
      </function>
      <procedure name="SetBorderStyle" visibility="private" file="FMX.Forms.pas" line="652">
        <parameters>
          <parameter name="Value" type="TFmxFormBorderStyle" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetBorderIcons" visibility="private" file="FMX.Forms.pas" line="653">
        <parameters>
          <parameter name="Value" type="TBorderIcons" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetVisible" visibility="private" file="FMX.Forms.pas" line="654">
        <parameters>
          <parameter name="Value" type="Boolean" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetClientHeight" visibility="private" file="FMX.Forms.pas" line="655">
        <parameters>
          <parameter name="Value" type="Integer" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetClientWidth" visibility="private" file="FMX.Forms.pas" line="656">
        <parameters>
          <parameter name="Value" type="Integer" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetBiDiMode" visibility="private" file="FMX.Forms.pas" line="657">
        <parameters>
          <parameter name="Value" type="TBiDiMode" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetCursor" visibility="private" file="FMX.Forms.pas" line="658">
        <parameters>
          <parameter name="Value" type="TCursor" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetPosition" visibility="private" file="FMX.Forms.pas" line="659">
        <parameters>
          <parameter name="Value" type="TFormPosition" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetWindowState" visibility="private" file="FMX.Forms.pas" line="660">
        <parameters>
          <parameter name="Value" type="TWindowState" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="GetLeft" visibility="private" file="FMX.Forms.pas" line="661">
        <parameters>
          <retval type="Integer"/>
        </parameters>
      </function>
      <function name="GetTop" visibility="private" file="FMX.Forms.pas" line="662">
        <parameters>
          <retval type="Integer"/>
        </parameters>
      </function>
      <procedure name="ShowCaret" visibility="private" file="FMX.Forms.pas" line="663">
        <parameters>
          <parameter name="Control" type="IControl" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="HideCaret" visibility="private" file="FMX.Forms.pas" line="664">
        <parameters>
          <parameter name="Control" type="IControl" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="AdvanceTabFocus" visibility="private" file="FMX.Forms.pas" line="665">
        <parameters>
          <parameter name="MoveForward" type="Boolean" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SaveStateHandler" visibility="private" file="FMX.Forms.pas" line="666">
        <parameters>
          <parameter name="Sender" type="TObject" paramflags="const"/>
          <parameter name="Msg" type="TMessageBase" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="GetFullScreen" visibility="private" file="FMX.Forms.pas" line="667">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <procedure name="SetFullScreen" visibility="private" file="FMX.Forms.pas" line="668">
        <parameters>
          <parameter name="AValue" type="Boolean" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="GetShowFullScreenIcon" visibility="private" file="FMX.Forms.pas" line="669">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <procedure name="SetShowFullScreenIcon" visibility="private" file="FMX.Forms.pas" line="670">
        <parameters>
          <parameter name="AValue" type="Boolean" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="PreloadProperties" visibility="private" file="FMX.Forms.pas" line="671">
      </procedure>
      <procedure name="SetPadding" visibility="private" file="FMX.Forms.pas" line="672">
        <parameters>
          <parameter name="Value" type="TBounds" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="GetOriginalContainerSize" visibility="private" file="FMX.Forms.pas" line="673">
        <parameters>
          <retval type="TPointF"/>
        </parameters>
      </function>
      <procedure name="SetBorder" visibility="private" file="FMX.Forms.pas" line="674">
        <parameters>
          <parameter name="Value" type="TFormBorder" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="FullScreenSupported" visibility="private" file="FMX.Forms.pas" line="675">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <procedure name="SetFormStyle" visibility="private" file="FMX.Forms.pas" line="676">
        <parameters>
          <parameter name="Value" type="TFormStyle" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="ReadTopMost" visibility="private" file="FMX.Forms.pas" line="677">
        <parameters>
          <parameter name="Reader" type="TReader"/>
        </parameters>
      </procedure>
      <function name="ParentFormOfIControl" visibility="private" file="FMX.Forms.pas" line="678">
        <parameters>
          <parameter name="Value" type="IControl"/>
          <retval type="TCommonCustomForm"/>
        </parameters>
      </function>
      <function name="CanTransparency" visibility="private" file="FMX.Forms.pas" line="679">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <function name="CanFormStyle" visibility="private" file="FMX.Forms.pas" line="680">
        <parameters>
          <parameter name="NewValue" type="TFormStyle" paramflags="const"/>
          <retval type="TFormStyle"/>
        </parameters>
      </function>
      <procedure name="ReadShowActivated" visibility="private" file="FMX.Forms.pas" line="681">
        <parameters>
          <parameter name="Reader" type="TReader"/>
        </parameters>
      </procedure>
      <procedure name="DesignerUpdateBorder" visibility="private" file="FMX.Forms.pas" line="682">
      </procedure>
      <procedure name="ReadStaysOpen" visibility="private" file="FMX.Forms.pas" line="683">
        <parameters>
          <parameter name="Reader" type="TReader"/>
        </parameters>
      </procedure>
      <function name="SetMainMenu" visibility="private" file="FMX.Forms.pas" line="684">
        <parameters>
          <parameter name="Value" type="TComponent"/>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <procedure name="SetSystemStatusBar" visibility="private" file="FMX.Forms.pas" line="685">
        <parameters>
          <parameter name="Value" type="TFormSystemStatusBar" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="GetVisible" visibility="private" file="FMX.Forms.pas" line="686">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <procedure name="SetModalResult" visibility="private" file="FMX.Forms.pas" line="687">
        <parameters>
          <parameter name="Value" type="TModalResult"/>
        </parameters>
      </procedure>
      <function name="GetTouchManager" visibility="private" file="FMX.Forms.pas" line="688">
        <parameters>
          <retval type="TTouchManager"/>
        </parameters>
      </function>
      <procedure name="SetTouchManager" visibility="private" file="FMX.Forms.pas" line="689">
        <parameters>
          <parameter name="Value" type="TTouchManager" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="GetSaveState" visibility="private" file="FMX.Forms.pas" line="690">
        <parameters>
          <retval type="TFormSaveState"/>
        </parameters>
      </function>
      <function name="SharedHint" visibility="private" file="FMX.Forms.pas" line="691">
        <parameters>
          <retval type="THint">
            <devnotes>
               <summary>The base class for an object that can manage a hint.</summary>
            </devnotes>
          </retval>
        </parameters>
      </function>
      <procedure name="ReleaseLastHinted" visibility="private" file="FMX.Forms.pas" line="692">
      </procedure>
      <procedure name="SetLastHinted" visibility="private" file="FMX.Forms.pas" line="693">
        <parameters>
          <parameter name="AControl" type="IControl" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="GetText" visibility="private" file="FMX.Forms.pas" line="696">
        <parameters>
          <retval type="string"/>
        </parameters>
      </function>
      <procedure name="ClearFocusedControl" visibility="private" file="FMX.Forms.pas" line="698">
        <parameters>
          <parameter name="IgnoreExceptions" type="Boolean" paramflags="const">
            <value>
              False
            </value>
          </parameter>
        </parameters>
      </procedure>
      <procedure name="SetFocusedControl" visibility="private" file="FMX.Forms.pas" line="699">
        <parameters>
          <parameter name="NewFocused" type="IControl" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="FocusedControlExited" visibility="private" file="FMX.Forms.pas" line="700">
      </procedure>
      <procedure name="FocusedControlEntered" visibility="private" file="FMX.Forms.pas" line="701">
      </procedure>
      <procedure name="TriggerFormHint" visibility="private" file="FMX.Forms.pas" line="702">
      </procedure>
      <procedure name="TriggerControlHint" visibility="private" file="FMX.Forms.pas" line="703">
        <parameters>
          <parameter name="AControl" type="IControl" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetShowHint" visibility="private" file="FMX.Forms.pas" line="704">
        <parameters>
          <parameter name="Value" type="Boolean" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="RestoreGesturesRecognizer" visibility="private" file="FMX.Forms.pas" line="706">
      </procedure>
      <procedure name="SetConstraints" visibility="private" file="FMX.Forms.pas" line="708">
        <parameters>
          <parameter name="Value" type="TSizeConstraints" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="ConstraintsChanged" visibility="private" file="FMX.Forms.pas" line="709">
        <parameters>
          <parameter name="Sender" type="TObject"/>
        </parameters>
      </procedure>
      <field name="FActiveControl" type="IControl" visibility="protected" size="4" offset="620" file="FMX.Forms.pas" line="711"/>
      <field name="FUpdating" type="Integer" visibility="protected" size="4" offset="624" file="FMX.Forms.pas" line="712"/>
      <field name="FLastWidth" type="Single" visibility="protected" size="4" offset="628" file="FMX.Forms.pas" line="713"/>
      <field name="FLastHeight" type="Single" visibility="protected" size="4" offset="632" file="FMX.Forms.pas" line="713"/>
      <field name="FDisableAlign" type="Boolean" visibility="protected" size="1" offset="636" file="FMX.Forms.pas" line="714"/>
      <field name="FWinService" type="IFMXWindowService" visibility="protected" size="4" offset="640" file="FMX.Forms.pas" line="715"/>
      <field name="FCursorService" type="IFMXCursorService" visibility="protected" size="4" offset="644" file="FMX.Forms.pas" line="716"/>
      <field name="FFullScreenWindowService" type="IFMXFullScreenWindowService" visibility="protected" size="4" offset="648" file="FMX.Forms.pas" line="717"/>
      <procedure name="ReleaseForm" visibility="protected" file="FMX.Forms.pas" line="718">
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="DoRemoveObject" visibility="protected" procflags="override" file="FMX.Forms.pas" line="719">
        <parameters>
          <parameter name="AObject" type="TFmxObject" paramflags="const"/>
        </parameters>
      <devnotes><summary>


Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="DoDeleteChildren" visibility="protected" procflags="override" file="FMX.Forms.pas" line="720">
      <devnotes><summary>


Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <function name="GetBackIndex" visibility="protected" procflags="override" file="FMX.Forms.pas" line="721">
        <parameters>
          <retval type="Integer"/>
        </parameters>
      <devnotes><summary>
Returns the first item in the children list.
FMX.Forms.TCommonCustomForm.GetBackIndex inherits from FMX.Types.TFmxObject.GetBackIndex. All content below this line refers to FMX.Types.TFmxObject.GetBackIndex.
Returns the first item in the children list. This value is usually 0, but for styled objects, which have a style as the first object in the children list, this value is 1.
</summary></devnotes></function>
      <procedure name="InvalidateRect" visibility="protected" file="FMX.Forms.pas" line="722">
        <parameters>
          <parameter name="R" type="TRectF"/>
        </parameters>
      <devnotes><summary>
Schedules a repaint of the specified rectangle zone on the given form.
InvalidateRect takes in the R TRectF parameter and repaints the rectangle.
</summary></devnotes></procedure>
      <procedure name="Recreate" visibility="protected" procflags="virtual" file="FMX.Forms.pas" line="723">
      <devnotes><summary>
Re-creates this form.
Recreate sets this form state to Recreating, then destroys and re-creates its handle, finalizing by showing the form on the screen. In the end, Recreate restores the original form's state by removing the Recreating attribute.
If the form is in a csDesigning state, Recreate exits doing nothing.
</summary></devnotes></procedure>
      <procedure name="Resize" visibility="protected" procflags="virtual" file="FMX.Forms.pas" line="724">
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="ConstrainedResize" visibility="protected" procflags="virtual" file="FMX.Forms.pas" line="729">
        <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes>
        <parameters>
          <parameter name="AMinWidth" type="Single" paramflags="var"/>
          <parameter name="AMinHeight" type="Single" paramflags="var"/>
          <parameter name="AMaxWidth" type="Single" paramflags="var"/>
          <parameter name="AMaxHeight" type="Single" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="AdjustSize" visibility="protected" procflags="virtual" file="FMX.Forms.pas" line="730">
        <parameters>
          <parameter name="ASize" type="TSizeF" paramflags="var"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="SetActive" visibility="protected" procflags="virtual" file="FMX.Forms.pas" line="731">
        <parameters>
          <parameter name="Value" type="Boolean" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Sets the value of the Active property.
</summary></devnotes></procedure>
      <procedure name="DefineProperties" visibility="protected" procflags="override" file="FMX.Forms.pas" line="732">
        <parameters>
          <parameter name="Filer" type="TFiler"/>
        </parameters>
      <devnotes><summary>


Designates methods for storing an object's unpublished data on a stream such as a form file.
FMX.Forms.TCommonCustomForm.DefineProperties inherits from System.Classes.TComponent.DefineProperties. All content below this line refers to System.Classes.TComponent.DefineProperties.
Designates methods for storing an object's unpublished data on a stream such as a form file.
TComponent overrides the DefineProperties method defined in TPersistent to define &quot;fake&quot; Top and Left properties. These are defined so that components that are not controls can be manipulated at design time. However, the Top and Left properties are hidden, that is, they are not published, because only controls appear at run time.
DefineProperties is virtual; descendent classes can override it. When overriding DefineProperties, be aware that the Ancestor property of Filer might be set, and that this property can determine whether or not it is appropriate to write properties.
DefineProperties is called automatically as part of the component streaming system; do not call it directly.
</summary></devnotes></procedure>
      <function name="FindTarget" visibility="protected" procflags="virtual" file="FMX.Forms.pas" line="733">
        <parameters>
          <parameter name="P" type="TPointF"/>
          <parameter name="Data" type="TDragObject" paramflags="const"/>
          <retval type="IControl"/>
        </parameters>
      <devnotes><summary>
Returns the specified control located at the given coordinates.
FindTarget iterates through all the children of this form and searches for the control given through the Data parameter at the coordinates specified by P. If the given control was not found, FindTarget returns nil, otherwise it returns the object.
FindTarget is used internally in drag-and-drop operations.

Tip: The control searched for must be an IControl, must be Visible, and HitTest must be set to True.</summary></devnotes></function>
      <procedure name="SetFormFamily" visibility="protected" file="FMX.Forms.pas" line="734">
        <parameters>
          <parameter name="Value" type="string" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="UpdateStyleBook" visibility="protected" procflags="virtual" file="FMX.Forms.pas" line="735">
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="SetStyleBookWithoutUpdate" visibility="protected" file="FMX.Forms.pas" line="736">
        <parameters>
          <parameter name="StyleBook" type="TStyleBook" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="ShowInDesigner" visibility="protected" file="FMX.Forms.pas" line="737">
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <function name="QueryInterface" visibility="protected" procflags="override" callconv="stdcall" file="FMX.Forms.pas" line="739">
        <parameters>
          <parameter name="IID" type="TGUID" paramflags="const"/>
          <parameter name="Obj" paramflags="out"/>
          <retval type="HRESULT"/>
        </parameters>
      <devnotes><summary>
Returns a reference to a specified interface if the current component supports that interface.
FMX.Forms.TCommonCustomForm.QueryInterface inherits from System.Classes.TComponent.QueryInterface. All content below this line refers to System.Classes.TComponent.QueryInterface.
Returns a reference to a specified interface if the current component supports that interface.
QueryInterface checks whether the component supports the interface specified by IID and, if so, returns a reference to that interface as the Obj parameter. If the component does not support the interface, the Obj parameter returns nil (Delphi) or NULL (C++).
QueryInterface returns the S_OK execution code on success. HResult type 
defines the following execution codes: S_OK, S_FALSE, E_NOINTERFACE, E_UNEXPECTED, and E_NOTIMPL.

Note: For components that act as COM object wrappers, QueryInterface calls the QueryInterface method of the internal COM object.</summary></devnotes></function>
      <procedure name="Realign" visibility="protected" procflags="virtual" file="FMX.Forms.pas" line="741">
      <devnotes><summary>
Realigns all the child objects of this form and repaints the form's surface by a call to InvalidateRect. 
</summary></devnotes></procedure>
      <procedure name="ChildrenAlignChanged" visibility="protected" file="FMX.Forms.pas" line="742">
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="AddPreloadPropertyNames" visibility="protected" procflags="virtual" file="FMX.Forms.pas" line="744">
        <parameters>
          <parameter name="PropertyNames" type="TList&lt;System.string&gt;" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="SetPreloadProperties" visibility="protected" procflags="virtual" file="FMX.Forms.pas" line="745">
        <parameters>
          <parameter name="PropertyStore" type="TDictionary&lt;System.string,System.Variant&gt;" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="CreateHandle" visibility="protected" procflags="virtual" file="FMX.Forms.pas" line="747">
      <devnotes><summary>
Creates the window for this form and assigns it a handle. CreateHandle is overridden in subclasses to add extra functionality when creating the window containing this form.
</summary></devnotes></procedure>
      <procedure name="DestroyHandle" visibility="protected" procflags="virtual" file="FMX.Forms.pas" line="748">
      <devnotes><summary>
Destroys the window handle created by CreateHandle. DestroyHandle is overridden in subclasses to add extra functionality when destroying the window containing this form.
</summary></devnotes></procedure>
      <procedure name="ResizeHandle" visibility="protected" procflags="virtual" file="FMX.Forms.pas" line="749">
      <devnotes><summary>
Resizes this form according to ClientWidth and ClientHeight.
ResizeHandle is overridden in subclasses to implement functionality to resize the dimensions of this form according to the values of the ClientWidth and ClientHeight properties.
</summary></devnotes></procedure>
      <function name="GetObject" visibility="protected" file="FMX.Forms.pas" line="751">
        <parameters>
          <retval type="TFmxObject"/>
        </parameters>
      <devnotes><summary>
Returns a reference to this form object.
</summary></devnotes></function>
      <function name="GetActiveControl" visibility="protected" file="FMX.Forms.pas" line="752">
        <parameters>
          <retval type="IControl"/>
        </parameters>
      <devnotes><summary>
Retrieves the active control.
Retrieves the IControl type object stored in the FActiveControl field.
</summary></devnotes></function>
      <procedure name="SetActiveControl" visibility="protected" file="FMX.Forms.pas" line="753">
        <parameters>
          <parameter name="AControl" type="IControl" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Sets the focus to the specified AControl control.
SetActiveControl sets the focus to the specified AControl control (sets the active control), if possible.
The descendant TCustomForm class uses this protected SetActiveControl method in the setter of the ActiveControl property.
SetActiveControl internally calls FMX.Controls.TControl.SetFocus.
</summary></devnotes></procedure>
      <procedure name="SetCaptured" visibility="protected" file="FMX.Forms.pas" line="754">
        <parameters>
          <parameter name="Value" type="IControl" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Sets the value of the Captured property.
</summary></devnotes></procedure>
      <function name="NewFocusedControl" visibility="protected" file="FMX.Forms.pas" line="755">
        <parameters>
          <parameter name="Value" type="IControl" paramflags="const"/>
          <retval type="IControl"/>
        </parameters>
      <devnotes><summary>
Retrieves the control that can obtain the focus.
NewFocusedControl checks whether the specified Value control can obtain the focus. If Value cannot obtain the focus, then NewFocusedControl returns the youngest parent of Value that can obtain the focus. Otherwise, NewFocusedControl returns nil.  
</summary></devnotes></function>
      <procedure name="SetFocused" visibility="protected" file="FMX.Forms.pas" line="756">
        <parameters>
          <parameter name="Value" type="IControl" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Protected setter implementation for the Focused property.
SetFocused sets the focus to the specified control. The control must be located on this form and must exist.
</summary></devnotes></procedure>
      <procedure name="SetHovered" visibility="protected" file="FMX.Forms.pas" line="757">
        <parameters>
          <parameter name="Value" type="IControl" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Sets the Hovered property and activates the functionality informing that the mouse pointer has entered the area of the control. 
Sets the control stored in the Hovered property and activates an animation and effects informing that the mouse pointer has entered the area of the control by calling DoMouseEnter.
</summary></devnotes></procedure>
      <procedure name="SetTransparency" visibility="protected" procflags="virtual" file="FMX.Forms.pas" line="758">
        <parameters>
          <parameter name="Value" type="Boolean" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <function name="GetCaptured" visibility="protected" file="FMX.Forms.pas" line="759">
        <parameters>
          <retval type="IControl"/>
        </parameters>
      <devnotes><summary>
Protected getter implementation for the Captured property.
</summary></devnotes></function>
      <function name="GetFocused" visibility="protected" file="FMX.Forms.pas" line="760">
        <parameters>
          <retval type="IControl"/>
        </parameters>
      <devnotes><summary>
Returns the value of the Focused property.
</summary></devnotes></function>
      <function name="GetBiDiMode" visibility="protected" file="FMX.Forms.pas" line="761">
        <parameters>
          <retval type="TBiDiMode"/>
        </parameters>
      <devnotes><summary>
Protected getter implementation for the BiDiMode property.
</summary></devnotes></function>
      <function name="GetHovered" visibility="protected" file="FMX.Forms.pas" line="762">
        <parameters>
          <retval type="IControl"/>
        </parameters>
      <devnotes><summary>
Retrieves the control stored in the Hovered property.
</summary></devnotes></function>
      <procedure name="BeginInternalDrag" visibility="protected" file="FMX.Forms.pas" line="763">
        <parameters>
          <parameter name="Source" type="TObject" paramflags="const"/>
          <parameter name="ABitmap" type="TObject" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Implements functionality to start the drag-and-drop operation for the given object on the surface of the given form.
ABitmap specifies the image that will be displayed while dragging the object specified by the Source parameter.
</summary></devnotes></procedure>
      <function name="GetStyleBook" visibility="protected" file="FMX.Forms.pas" line="765">
        <parameters>
          <retval type="TStyleBook"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></function>
      <procedure name="SetStyleBook" visibility="protected" file="FMX.Forms.pas" line="766">
        <parameters>
          <parameter name="Value" type="TStyleBook" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="PaintRects" visibility="protected" procflags="virtual" file="FMX.Forms.pas" line="768">
        <parameters>
          <parameter name="UpdateRects" paramflags="const">
            <array name="UpdateRects" file="FMX.Forms.pas" line="3033">
              <element type="TRectF"/>
            </array>
          </parameter>
        </parameters>
      <devnotes><summary>
Repaints all the rectangles given through the UpdateRects parameter. UpdateRects is an array of TRectF rectangles.
</summary></devnotes></procedure>
      <function name="GetContextHandle" visibility="protected" file="FMX.Forms.pas" line="769">
        <parameters>
          <retval type="NativeUInt"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></function>
      <procedure name="SetContextHandle" visibility="protected" file="FMX.Forms.pas" line="770">
        <parameters>
          <parameter name="AContextHandle" type="NativeUInt" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <property name="ContextHandle" visibility="protected" read="FContextHandle" type="NativeUInt" file="FMX.Forms.pas" line="771"><devnotes><summary>
Used internally by the canvas of this form.
</summary></devnotes></property>
      <function name="CreateBorder" visibility="protected" procflags="virtual" file="FMX.Forms.pas" line="773">
        <parameters>
          <retval type="TFormBorder"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></function>
      <procedure name="Loaded" visibility="protected" procflags="override" file="FMX.Forms.pas" line="775">
      <devnotes><summary>
Initializes the component after the form file has been read into memory.
FMX.Forms.TCommonCustomForm.Loaded inherits from System.Classes.TComponent.Loaded. All content below this line refers to System.Classes.TComponent.Loaded.
Initializes the component after the form file has been read into memory.
Do not call the protected Loaded method. The streaming system calls this method after it loads the component's form from a stream.
When the streaming system loads a form or data module from its form file, it first constructs the form component by calling its constructor, then reads its property values from the form file. After reading all the property values for all the components, the streaming system calls the Loaded methods of each component in the order the components were created. This gives the components a chance to initialize any data that depends on the values of other components or other parts of itself.

Note:  All references to sibling components are resolved by the time Loaded is called. Loaded is the first place that sibling pointers can be used after being streamed in.
As implemented in TComponent, Loaded clears the csLoading flag in the ComponentState property, indicating that the component is no longer loading.

Warning: Loaded may be called multiple times on inherited forms. It is called every time a level of inheritance is streamed in. Do not allocate memory in an overridden Loaded method without first checking that the memory has not been allocated in a previous call.</summary></devnotes></procedure>
      <procedure name="FreeNotification" visibility="protected" procflags="override" file="FMX.Forms.pas" line="776">
        <parameters>
          <parameter name="AObject" type="TObject"/>
        </parameters>
      <devnotes><summary>


Ensures that AComponent is notified that the component is going to be destroyed.
FMX.Forms.TCommonCustomForm.FreeNotification inherits from System.Classes.TComponent.FreeNotification. All content below this line refers to System.Classes.TComponent.FreeNotification.
Ensures that AComponent is notified that the component is going to be destroyed.
Use FreeNotification to register AComponent as a component that should be notified when the component is about to be destroyed. It is only necessary to register components this way when they are in a different form or have a different owner. For example, if AComponent is in another form and uses the component to implement a property, it must call FreeNotification so that its Notification method is called when the component is destroyed.
For components with the same owner, the Notification method is called automatically when an application explicitly frees the component. This notification is not sent out when components are freed implicitly, because the Owner is already being freed.
</summary></devnotes></procedure>
      <procedure name="DoAddObject" visibility="protected" procflags="override" file="FMX.Forms.pas" line="777">
        <parameters>
          <parameter name="AObject" type="TFmxObject" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Adds the AObject object to the Children list of children attached to this parent object (self).
FMX.Forms.TCommonCustomForm.DoAddObject inherits from FMX.Types.TFmxObject.DoAddObject. All content below this line refers to FMX.Types.TFmxObject.DoAddObject.
Adds the AObject object to the Children list of children attached to this parent object (self).
DoAddObject adds the object provided in the AObject parameter to the list of children stored in the Children property of this object (self). DoAddObject changes the parent of AObject to this object (self) and sets the root of AObject to the Root object of this object (self).
Descendant classes, like TCommonCustomForm and TControl, additionally handle tab stop lists keeping ordered lists of objects to which the user can tab. If such descendant class supports the ITabStopController interface and AObject is an object of a class supporting the IControl interface, then DoAddObject of this descendant adds AObject to the TabList tab stop lists of the (self) object. 
DoAddObject is internally called from AddObject.
</summary></devnotes></procedure>
      <procedure name="Updated" visibility="protected" procflags="override" file="FMX.Forms.pas" line="778">
      <devnotes><summary>
Clears the csUpdating state in the component's ComponentState property when the component finishes updating.
FMX.Forms.TCommonCustomForm.Updated inherits from System.Classes.TComponent.Updated. All content below this line refers to System.Classes.TComponent.Updated.
Clears the csUpdating state in the component's ComponentState property when the component finishes updating.
Do not call Updated directly. It is used internally to clear the csUpdating flag of the ComponentState property. A call to Updated always follows a call to Updating, which sets the flag.
</summary></devnotes></procedure>
      <procedure name="Notification" visibility="protected" procflags="override" file="FMX.Forms.pas" line="780">
        <parameters>
          <parameter name="AComponent" type="TComponent"/>
          <parameter name="Operation" type="TOperation"/>
        </parameters>
      <devnotes><summary>


Forwards notification messages to all owned components.
FMX.Forms.TCommonCustomForm.Notification inherits from System.Classes.TComponent.Notification. All content below this line refers to System.Classes.TComponent.Notification.
Forwards notification messages to all owned components.
Do not call the Notification method in an application. Notification is called automatically when the component specified by AComponent is about to be inserted or removed, as specified by Operation. By default, components pass along the notification to their owned components, if any.
A component can, if needed, act on the notification that a component is being inserted or removed. For example, if a component has object fields or properties that contain references to other components, it can check the notifications of component removals and invalidate those references as needed.

Note: Notification is not called for components that are freed implicitly (because their Owner is freed).</summary></devnotes></procedure>
      <procedure name="ValidateRename" visibility="protected" procflags="override" file="FMX.Forms.pas" line="781">
        <parameters>
          <parameter name="AComponent" type="TComponent"/>
          <parameter name="CurName" type="string" paramflags="const"/>
          <parameter name="NewName" type="string" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Ensures that renaming an owned component does not create a name conflict.
FMX.Forms.TCommonCustomForm.ValidateRename inherits from System.Classes.TComponent.ValidateRename. All content below this line refers to System.Classes.TComponent.ValidateRename.
Ensures that renaming an owned component does not create a name conflict.
ValidateRename checks whether a component can rename one of its owned components, passed in AComponent, from its current name (CurName) to the string passed in NewName. If AComponent is nil (Delphi) or NULL (C++) or NewName is already the name of a component in the Components list, ValidateRename raises an EComponentError exception.
ValidateRename is used internally when the Name property is modified. It is not necessary to call it directly.
</summary></devnotes></procedure>
      <procedure name="GetChildren" visibility="protected" procflags="override" file="FMX.Forms.pas" line="782">
        <parameters>
          <parameter name="Proc" type="TGetChildProc"/>
          <parameter name="Root" type="TComponent"/>
        </parameters>
      <devnotes><summary>


Enumerates all child components.
FMX.Forms.TCommonCustomForm.GetChildren inherits from System.Classes.TComponent.GetChildren. All content below this line refers to System.Classes.TComponent.GetChildren.
Enumerates all child components.
GetChildren is used internally in the component streaming system. It is not necessary to call it directly. 
GetChildren expects a TGetChildProc routine that receives all enumerated components. 
Root represents the owner of the components that will be enumerated.
This method does nothing in TComponent and is expected to be overridden in descendants. 
</summary></devnotes></procedure>
      <procedure name="GetDeltaStreams" visibility="protected" procflags="override" file="FMX.Forms.pas" line="783">
        <parameters>
          <parameter name="Proc" type="TGetStreamProc"/>
        </parameters>
      <devnotes><summary>


Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <function name="GetContainerWidth" visibility="protected" file="FMX.Forms.pas" line="785">
        <parameters>
          <retval type="Single"/>
        </parameters>
      <devnotes><summary>
Returns the value of the ClientWidth property.
</summary></devnotes></function>
      <function name="GetContainerHeight" visibility="protected" file="FMX.Forms.pas" line="786">
        <parameters>
          <retval type="Single"/>
        </parameters>
      <devnotes><summary>
Returns the value of the ClientHeight property.
</summary></devnotes></function>
      <procedure name="UpdateActions" visibility="protected" procflags="virtual" file="FMX.Forms.pas" line="787">
      <devnotes><summary>
UpdateActions updates all the actions associated to the current form.
</summary></devnotes></procedure>
      <function name="GetActionLinkClass" visibility="protected" procflags="override" file="FMX.Forms.pas" line="788">
        <parameters>
          <retval type="TActionLinkClass"/>
        </parameters>
      <devnotes><summary>
Returns the associated action link class.
FMX.Forms.TCommonCustomForm.GetActionLinkClass inherits from FMX.Types.TFmxObject.GetActionLinkClass. All content below this line refers to FMX.Types.TFmxObject.GetActionLinkClass.
Returns the associated action link class.
Returns the class reference for the TActionLink class or for one of its descendants. 
In TFmxObject, GetActionLinkClass always returns nil.
In descendant classes, GetActionLinkClass should return the appropriate class type for the action link used with the class object. When a control object of the descendant from the TFmxObject class tries to assign a value to the Action property, the setter method for Action calls GetActionLinkClass. If GetActionLinkClass returns a non-nil value, then the action object is assigned to Action. If the control object does not support actions, then GetActionLinkClass should return nil. In this case, attempting to set a value to the Action property raises the following exception:  

StrEActionNoSuported = 'Class %s does not support the action'    
</summary></devnotes></function>
      <procedure name="ActionChange" visibility="protected" procflags="override" file="FMX.Forms.pas" line="789">
        <parameters>
          <parameter name="Sender" type="TBasicAction"/>
          <parameter name="CheckDefaults" type="Boolean"/>
        </parameters>
      <devnotes><summary>
Specifies the behavior of a TCommonCustomForm form when Action changes. 
Depending on the CheckDefaults value,  ActionChange uses properties of the Sender action to set new values to the  
Visible and Caption properties of TCommonCustomForm. Then ActionChange calls the inherited TControl.ActionChange method.  
Do not call ActionChange explicitly in an application. It is for internal use.
</summary></devnotes></procedure>
      <function name="CaptionStore" visibility="protected" file="FMX.Forms.pas" line="790">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></function>
      <procedure name="VirtualKeyboardChangeHandler" visibility="protected" procflags="virtual" file="FMX.Forms.pas" line="791">
        <parameters>
          <parameter name="Sender" type="TObject" paramflags="const"/>
          <parameter name="Msg" type="TMessageBase" paramflags="const"/>
        </parameters>
      <devnotes><summary>
The listener for virtual keyboard events of the form.
TCommonCustomForm uses the System.Messaging.TMessageManager.SubscribeToMessage method to subscribe the VirtualKeyboardChangeHandler listener to the TVKStateChangeMessage virtual keyboard events.
The VirtualKeyboardChangeHandler listener handles the KeyboardVisible and 
KeyboardBounds properties by calling the 
OnVirtualKeyboardShown and OnVirtualKeyboardHidden event handlers.
</summary></devnotes></procedure>
      <procedure name="IsDialogKey" visibility="protected" procflags="virtual" file="FMX.Forms.pas" line="792">
        <parameters>
          <parameter name="Key" type="Word" paramflags="const"/>
          <parameter name="KeyChar" type="Char" paramflags="const"/>
          <parameter name="Shift" type="TShiftState" paramflags="const"/>
          <parameter name="IsDialog" type="Boolean" paramflags="var"/>
        </parameters>
      <devnotes><summary>
Determines whether the pressed key should be processed only by the control having the focus or by all children controls and menus of the form.
IsDialogKey is used internally in the KeyDown method.
IsDialog returns True, if KeyChar &lt; ' ' or Shift identifies any of the CTRL, ALT, or CMD keys. That is, if the KeyChar and Shift combination identifies some control combination -- not a printable character. IsDialog returns False, if the Key and KeyChar combination identifies some printable character.  The ' ' character has the $20 ASCII value. ASCII values less than $20 identify control combinations.  
IsDialogKey has the following parameters:

Key is the scan code of the pressed keyboard key. This parameter is ignored.
KeyChar is the character code of the pressed key.
Shift indicates which shift keys--SHIFT, CTRL, ALT, and CMD (only for Mac)--were down when you press the key.
IsDialog is the return boolean parameter.
See also
FMX.Forms.TCommonCustomForm.KeyDown

</summary></devnotes></procedure>
      <procedure name="DoShow" visibility="protected" procflags="virtual" file="FMX.Forms.pas" line="795">
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="DoHide" visibility="protected" procflags="virtual" file="FMX.Forms.pas" line="796">
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="DoClose" visibility="protected" procflags="virtual" file="FMX.Forms.pas" line="797">
        <parameters>
          <parameter name="CloseAction" type="TCloseAction" paramflags="var"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="DoScaleChanged" visibility="protected" procflags="virtual" file="FMX.Forms.pas" line="798">
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="DoStyleChanged" visibility="protected" procflags="virtual" file="FMX.Forms.pas" line="799">
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="DoMouseDown" visibility="protected" procflags="virtual" file="FMX.Forms.pas" line="800">
        <parameters>
          <parameter name="Button" type="TMouseButton"/>
          <parameter name="Shift" type="TShiftState"/>
          <parameter name="X" type="Single"/>
          <parameter name="Y" type="Single"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="DoMouseMove" visibility="protected" procflags="virtual" file="FMX.Forms.pas" line="801">
        <parameters>
          <parameter name="Shift" type="TShiftState"/>
          <parameter name="X" type="Single"/>
          <parameter name="Y" type="Single"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="DoMouseUp" visibility="protected" procflags="virtual" file="FMX.Forms.pas" line="802">
        <parameters>
          <parameter name="Button" type="TMouseButton"/>
          <parameter name="Shift" type="TShiftState"/>
          <parameter name="X" type="Single"/>
          <parameter name="Y" type="Single"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="DoMouseWheel" visibility="protected" procflags="virtual" file="FMX.Forms.pas" line="803">
        <parameters>
          <parameter name="Shift" type="TShiftState"/>
          <parameter name="WheelDelta" type="Integer"/>
          <parameter name="Handled" type="Boolean" paramflags="var"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="DoFocusChanged" visibility="protected" procflags="virtual" file="FMX.Forms.pas" line="804">
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="DoPaddingChanged" visibility="protected" procflags="virtual" file="FMX.Forms.pas" line="805">
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="DoTap" visibility="protected" procflags="virtual" file="FMX.Forms.pas" line="806">
        <parameters>
          <parameter name="Point" type="TPointF" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Processes the unhandled OnTap events. 
DoTap is run automatically for all tap events that were not handled by the user. DoTap is run only if OnTap is not set or if it did not handle the tap event. 
Override DoTap in descending classes to support default behavior for tap events that were not handled by the user. 
</summary></devnotes></procedure>
      <function name="GetWindowStyle" visibility="protected" procflags="virtual" file="FMX.Forms.pas" line="808">
        <parameters>
          <retval type="TWindowStyles"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></function>
      <procedure name="DoParentFormChanged" visibility="protected" procflags="virtual" file="FMX.Forms.pas" line="809">
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="DoRootChanged" visibility="protected" procflags="override" file="FMX.Forms.pas" line="810">
      <devnotes><summary>


Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <property name="MainMenu" visibility="protected" read="FMainMenu" type="TComponent" file="FMX.Forms.pas" line="811"><devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></property>
      <procedure name="DoGesture" visibility="protected" procflags="virtual" file="FMX.Forms.pas" line="812">
        <parameters>
          <parameter name="EventInfo" type="TGestureEventInfo" paramflags="const"/>
          <parameter name="Handled" type="Boolean" paramflags="var"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="BroadcastGesture" visibility="protected" file="FMX.Forms.pas" line="814">
        <parameters>
          <parameter name="EventInfo" type="TGestureEventInfo"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="CMGesture" visibility="protected" procflags="virtual" file="FMX.Forms.pas" line="815">
        <parameters>
          <parameter name="EventInfo" type="TGestureEventInfo" paramflags="var"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <function name="TouchManager" visibility="protected" file="FMX.Forms.pas" line="816">
        <parameters>
          <retval type="TTouchManager"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></function>
      <function name="GetFirstControlWithGesture" visibility="protected" file="FMX.Forms.pas" line="817">
        <parameters>
          <parameter name="AGesture" type="TInteractiveGesture"/>
          <retval type="TComponent"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></function>
      <function name="GetFirstControlWithGestureEngine" visibility="protected" file="FMX.Forms.pas" line="818">
        <parameters>
          <retval type="TComponent"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></function>
      <function name="GetListOfInteractiveGestures" visibility="protected" file="FMX.Forms.pas" line="819">
        <parameters>
          <retval type="TInteractiveGestures"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></function>
      <procedure name="Tap" visibility="protected" procflags="virtual" file="FMX.Forms.pas" line="820">
        <parameters>
          <parameter name="Location" type="TPointF" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="MultiTouch" visibility="protected" file="FMX.Forms.pas" line="822">
        <parameters>
          <parameter name="Touches" type="TTouches" paramflags="const"/>
          <parameter name="Action" type="TTouchAction" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="Engage" visibility="protected" file="FMX.Forms.pas" line="823">
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="Disengage" visibility="protected" file="FMX.Forms.pas" line="824">
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="ScaleChangedHandler" visibility="protected" procflags="virtual" file="FMX.Forms.pas" line="826">
        <devnotes><summary>
Event handler for the event that occurs when there is a change in the scale of the control.
For instance, changing from retina to non-retina screen on OS X platforms implies a change in the scale factor of the control.
</summary></devnotes>
        <parameters>
          <parameter name="Sender" type="TObject" paramflags="const"/>
          <parameter name="Msg" type="TMessageBase" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="StyleChangedHandler" visibility="protected" procflags="virtual" file="FMX.Forms.pas" line="828">
        <devnotes><summary>
Event handler for the event that occurs when there is a style change.
Note: When there is a style change, the control sends a TStyleChangedMessage message.
</summary></devnotes>
        <parameters>
          <parameter name="Sender" type="TObject" paramflags="const"/>
          <parameter name="Msg" type="TMessageBase" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="TriggerHints" visibility="protected" file="FMX.Forms.pas" line="830">
      <devnotes><summary>
Calls the TriggerOnHint method of all the objects that are registered in the registry.
</summary></devnotes></procedure>
      <procedure name="RegisterHintReceiver" visibility="protected" file="FMX.Forms.pas" line="831">
        <parameters>
          <parameter name="AReceiver" type="IHintReceiver" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Registers a new receiver.
</summary></devnotes></procedure>
      <procedure name="UnregisterHintReceiver" visibility="protected" file="FMX.Forms.pas" line="832">
        <parameters>
          <parameter name="AReceiver" type="IHintReceiver" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Unregisters a receiver.
AReceiver specifies the receiver to remove from the registry list.
</summary></devnotes></procedure>
      <constructor name="Create" visibility="public" file="FMX.Forms.pas" line="834">
        <parameters>
          <parameter name="AOwner" type="TComponent"/>
        </parameters>
      <devnotes><summary>
Creates and initializes this form.
Create calls the inherited Create to create this form. Create
retrieves the IFMXWindowService,  IFMXCursorService,  
IFMXFullScreenWindowService, and
IFMXWindowsTouchService services.  
Create calls  InitializeNewForm to initialize such form parameters as bounds, width and height, border icons, style, border style, and client size for the form. 
AOwner specifies the owner of this form. 
An AOwner (usually the application) is responsible for freeing the created form.
Most applications do not call this constructor, but rather instantiate a descendant of TForm that is defined in the forms designer. Forms added to an application at design time are created automatically. 
</summary></devnotes></constructor>
      <constructor name="CreateNew" visibility="public" file="FMX.Forms.pas" line="835">
        <parameters>
          <parameter name="AOwner" type="TComponent"/>
          <parameter name="Dummy" type="NativeInt">
            <value>
              $0
            </value>
          </parameter>
        </parameters>
      </constructor>
      <destructor name="Destroy" visibility="public" file="FMX.Forms.pas" line="836">
        <parameters>
        </parameters>
      <devnotes><summary>
Disposes of the component and its owned components.
Disposes of the component and its owned components.
FMX.Forms.TCommonCustomForm.Destroy inherits from System.Classes.TComponent.Destroy. All content below this line refers to System.Classes.TComponent.Destroy.
Disposes of the component and its owned components.
Do not call Destroy directly. Call Free instead. Free verifies that the component is not nil, and only then calls Destroy.
Never explicitly free a component in one of its own event handlers, nor free a component from the event handler of a component that it owns or contains.
To destroy a form, call its Release method. Release waits for all the form's event handlers and the event handlers of the form's components to finish executing before destroying the form.

Note: A form owns all the controls and nonvisual components that are placed on it in design mode. When it is freed, all of these components are automatically freed as well. By default, all forms are owned by the global Application object. When an application terminates, it frees the global Application object, which frees all forms. For objects that are not components, and for components created with a nil owner, be sure to call Free after finishing with the object; otherwise the memory allocated for the object will be lost until the application terminates.</summary></devnotes></destructor>
      <procedure name="InitializeNewForm" visibility="public" procflags="virtual" file="FMX.Forms.pas" line="837">
      <devnotes><summary>
Performs several initializations required by this form.
These initializations include bounds, width and height, border icons, border style, and client size for the form. InitializeNewForm is used by the form constructors.
</summary></devnotes></procedure>
      <procedure name="AfterConstruction" visibility="public" procflags="override" file="FMX.Forms.pas" line="838">
      <devnotes><summary>
Responds after the last constructor has executed.
FMX.Forms.TCommonCustomForm.AfterConstruction inherits from System.TObject.AfterConstruction. All content below this line refers to System.TObject.AfterConstruction.
Responds after the last constructor has executed.
AfterConstruction is called automatically after the object's last constructor has executed. Do not call it explicitly in your applications. 
The AfterConstruction method implemented in TObject does nothing. Override this method when creating a class that performs an action after the object is created. For example, TCustomForm overrides AfterConstruction to generate an OnCreate event. 
</summary></devnotes></procedure>
      <procedure name="BeforeDestruction" visibility="public" procflags="override" file="FMX.Forms.pas" line="839">
      <devnotes><summary>


Performs any necessary actions before the first destructor is called.
FMX.Forms.TCommonCustomForm.BeforeDestruction inherits from System.Classes.TComponent.BeforeDestruction. All content below this line refers to System.Classes.TComponent.BeforeDestruction.
Performs any necessary actions before the first destructor is called.
BeforeDestruction is called automatically immediately before the component's first destructor executes. Do not call it explicitly in your applications.
As implemented in TComponent, BeforeDestruction checks whether the Destroying method has been called, and if not, calls it. Descendants that override this method to perform other actions before a component is destroyed should call the inherited method first to ensure that this check takes place.
</summary></devnotes></procedure>
      <function name="ObjectAtPoint" visibility="public" procflags="virtual" file="FMX.Forms.pas" line="841">
        <parameters>
          <parameter name="AScreenPoint" type="TPointF"/>
          <retval type="IControl"/>
        </parameters>
      <devnotes><summary>
Returns the object located at the given coordinates.
ObjectAtPoint iterates through all the children of this form and returns the component situated at the coordinates given through the AScreenPoint TPointF parameter.
If the object at the specified coordinates was not found, or is not an IControl, or its state is csDesigning, ObjectAtPoint returns nil. Otherwise the object is returned as IControl.
</summary></devnotes></function>
      <procedure name="CreateChildFormList" visibility="public" file="FMX.Forms.pas" line="842">
        <parameters>
          <parameter name="Parent" type="TFmxObject"/>
          <parameter name="List" type="TList&lt;FMX.Forms.TCommonCustomForm&gt;" paramflags="var"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="MouseDown" visibility="public" procflags="virtual" file="FMX.Forms.pas" line="843">
        <parameters>
          <parameter name="Button" type="TMouseButton"/>
          <parameter name="Shift" type="TShiftState"/>
          <parameter name="AFormX" type="Single"/>
          <parameter name="AFormY" type="Single"/>
        </parameters>
      <devnotes><summary>
Executes each time you press a mouse button.
MouseDown has the following parameters:

Button specifies the mouse button that has been pressed.
Shift determines the state of the CTRL, ALT, and SHIFT keys at the moment you press the mouse button.
X specifies the horizontal position of the mouse.
Y specifies the vertical position of the mouse.</summary></devnotes></procedure>
      <procedure name="MouseMove" visibility="public" procflags="virtual" file="FMX.Forms.pas" line="844">
        <parameters>
          <parameter name="Shift" type="TShiftState"/>
          <parameter name="AFormX" type="Single"/>
          <parameter name="AFormY" type="Single"/>
        </parameters>
      <devnotes><summary>
Executes each time you move the mouse over the surface of this form.
MouseMove has the following parameters:

Shift determines the state of the CTRL, ALT, and SHIFT keys at the moment you released the mouse button.
X specifies the horizontal position of the mouse.
Y specifies the vertical position of the mouse.</summary></devnotes></procedure>
      <procedure name="MouseUp" visibility="public" procflags="virtual" file="FMX.Forms.pas" line="845">
        <parameters>
          <parameter name="Button" type="TMouseButton"/>
          <parameter name="Shift" type="TShiftState"/>
          <parameter name="AFormX" type="Single"/>
          <parameter name="AFormY" type="Single"/>
          <parameter name="DoClick" type="Boolean">
            <value>
              True
            </value>
          </parameter>
        </parameters>
      <devnotes><summary>
Executes each time you release a mouse button.
MouseUp has the following parameters:

Button specifies the mouse button that has been released.
Shift determines the state of the CTRL, ALT, and SHIFT keys at the moment you released the mouse button.
X specifies the horizontal position of the mouse.
Y specifies the vertical position of the mouse.</summary></devnotes></procedure>
      <procedure name="MouseWheel" visibility="public" procflags="virtual" file="FMX.Forms.pas" line="846">
        <parameters>
          <parameter name="Shift" type="TShiftState"/>
          <parameter name="WheelDelta" type="Integer"/>
          <parameter name="Handled" type="Boolean" paramflags="var"/>
        </parameters>
      <devnotes><summary>
Executes each time you roll the mouse wheel.
MouseWheel has the following parameters:

Shift determines the state of the CTRL, ALT, and SHIFT keys at the moment you released the mouse button.
WheelDelta indicates the distance the wheel was rotated. WheelDelta is positive if the mouse was rotated upward, and negative if the mouse was rotated downward.
Handled specifies whether this form handles the mouse wheel, or other child controls do this.</summary></devnotes></procedure>
      <procedure name="MouseLeave" visibility="public" procflags="virtual" file="FMX.Forms.pas" line="847">
      <devnotes><summary>
Executes each time the mouse leaves the surface of this form.
</summary></devnotes></procedure>
      <procedure name="KeyDown" visibility="public" procflags="virtual" file="FMX.Forms.pas" line="848">
        <parameters>
          <parameter name="Key" type="Word" paramflags="var"/>
          <parameter name="KeyChar" type="Char" paramflags="var"/>
          <parameter name="Shift" type="TShiftState"/>
        </parameters>
      <devnotes><summary>
Executed when a key is pressed while this form has the input focus.
In FireMonkey framework KeyDown is the main method to process pressing of keys in forms. KeyDown is executed each time a key is pressed, when this form has the input focus. KeyDown is used internally: to activate menus and actions and to treat TAB requests to cycle through the children controls of this form. Editors can use KeyDown to add symbols into a text being edited. 
You can override KeyDown to provide additional key treating in subclasses.
KeyDown has the following parameters:



Parameters

Descriptions



Key



Is the scan code of the pressed keyboard key or $0.
The UITypes unit defines Virtual Keys providing symbolic constants for scan codes of keyboard keys.
Physical scan codes of the same key can differ under different platforms (Windows or iOS). Under FireMonkey framework, platform-specific units (for example FMX.Platform.Mac.pas) should translate native (iOS for FMX.Platform.Mac.pas unit) scan codes to the corresponding Windows codes defined in the UITypes unit. As the result Key always has scan code values defined by vkXXXX constants in UITypes. For example, 

vkReturn = $0D;  {  13 } corresponds to the RETURN keyboard key
vkEscape = $1B;  {  27 } corresponds to the ESCAPE
vkSpace  = $20;  {  32 } corresponds to the SPACE
vkF2     = $71;  { 113 } corresponds to the F2 keyboard key
Keys of digits and letters -- independently of the selected input language and case of alphabetic keys -- have values corresponding to the '0'..'9' and  'A'..'Z' symbols. For example, Key = vkP = $50 corresponds to the 'P' keyboard key.
If Key = $0, then KeyChar contains a pressed symbol according to the current keyboard's input language, keyboard mode (CAPS LOCK and NUM LOCK keys), keyboard Shift state, and Input Method Editor (IME) state.  
Combinations of the Key and Shift parameters can be translated to shortcut key combinations.    




KeyChar



Is the pressed character (digit) or #0.
If a pressed key combination can be handled as a printable character or digit, then Key = 0 and KeyChar contains a pressed symbol according to the current keyboard's input language, keyboard mode (CAPS LOCK and NUM LOCK keys), keyboard Shift state, and IME state. Editors can use this symbol to add into a text being edited. 




Shift



Determines the state of the CTRL, ALT, SHIFT, and CMD (only for Mac) keys at the moment you press the key.



KeyDown processes pressed keys according to the following algorithm: 

KeyDown first calls the IsDialogKey with the same parameters as those specified for KeyDown. The IsDialog parameter returns True if KeyChar &lt; ' ' or Shift is any of the CTRL, ALT or CMD keys. That is, if the KeyChar and Shift combination identifies some control combination -- not a printable character. Otherwise, it returns False. The ' ' character has the $20 ASCII value. ASCII values less than $20 identify control combinations.
If IsDialogKey returns True in the IsDialog parameter, then the pressed key combination is passed, in the following order, to all child controls, menus and action lists in the form until this key combination is processed:
To the control having focus.
To the context menu of the control having focus.
To all other menus and context menus in the form.
To all other controls (not having focus) in the form.
To action lists in the form and in all child components having assigned action list elements.
To menus and action lists in all other forms.
If the pressed key combination was processed during one of the previous steps, then KeyDown sets Key = 0 and KeyChar = #0 and terminates.
If Key = vkTab, then KeyDown moves the focus to the next control in the controls &quot;tab order&quot; and terminates.
If Key &lt;&gt; 0 or KeyChar &lt;&gt; #0, then KeyDown calls the KeyDown method of the control having focus and then calls the OnKeyDown event handler of the form if one is assigned.
In the finally block, KeyDown stores the current date and time in the LastKeyPress and LastUserActive properties of the current application.</summary></devnotes></procedure>
      <procedure name="KeyUp" visibility="public" procflags="virtual" file="FMX.Forms.pas" line="849">
        <parameters>
          <parameter name="Key" type="Word" paramflags="var"/>
          <parameter name="KeyChar" type="Char" paramflags="var"/>
          <parameter name="Shift" type="TShiftState"/>
        </parameters>
      <devnotes><summary>
Is executed each time when a key is released while this form has the input focus.
First, KeyUp calls the OnKeyUp event handler (if one is defined) of the control having input focus, then KeyUp calls the OnKeyUp event handler. In the finally block, KeyUp stores the current date and time in the LastKeyPress and LastUserActive properties of the current application.
KeyUp has the following parameters:

Key is the scan code of the pressed keyboard key. The UITypes unit defines Virtual Keys providing symbolic constants for scan codes of keyboard keys.
KeyChar is the character representation of the pressed key.
Shift determines the state of the CTRL, ALT, SHIFT, and CMD (only for Mac) keys at the moment you press the key.
You can override KeyUp to provide additional ways to handle keys in subclasses.
</summary></devnotes></procedure>
      <procedure name="MouseCapture" visibility="public" file="FMX.Forms.pas" line="850">
      <devnotes><summary>
Sets the mouse capture to this window, which belongs to the current thread.
</summary></devnotes></procedure>
      <procedure name="ReleaseCapture" visibility="public" file="FMX.Forms.pas" line="851">
      <devnotes><summary>
Releases the mouse capture from this window that belongs to the current thread and restores normal mouse input processing.
</summary></devnotes></procedure>
      <procedure name="RecreateResources" visibility="public" procflags="virtual" file="FMX.Forms.pas" line="853">
        <devnotes><summary>
Recreates the context where the form renders itself.
</summary></devnotes>
      </procedure>
      <procedure name="HandleNeed" visibility="public" file="FMX.Forms.pas" line="854" symflags="deprecated">
      </procedure>
      <procedure name="HandleNeeded" visibility="public" file="FMX.Forms.pas" line="857">
        <devnotes><summary>
The HandleNeeded method requests the form to create its handle at this moment and all the resources associated to it.


</summary></devnotes>
      </procedure>
      <procedure name="Activate" visibility="public" file="FMX.Forms.pas" line="859">
      <devnotes><summary>
Activation event dispatcher.
The form component calls Activate when it gets the focus either because of a change in the active windows within an application or because of the application becoming active. Activate fires an OnActivate event.
</summary></devnotes></procedure>
      <procedure name="Deactivate" visibility="public" file="FMX.Forms.pas" line="860">
      <devnotes><summary>
Deactivation event dispatcher.
The form component calls Deactivate when it loses the focus either because of a change in the active windows within an application or because of the application becoming inactive. Deactivate fires an OnDeactivate event.
</summary></devnotes></procedure>
      <procedure name="DragEnter" visibility="public" procflags="virtual" file="FMX.Forms.pas" line="861">
        <parameters>
          <parameter name="Data" type="TDragObject" paramflags="const"/>
          <parameter name="Point" type="TPointF" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Executes when you drag an object while entering the surface of this form.
Override DragEnter to add additional code that executes when you enter the surface of this form while dragging an object.
Data is the object being dragged.
Point is the position of the mouse.
</summary></devnotes></procedure>
      <procedure name="DragOver" visibility="public" procflags="virtual" file="FMX.Forms.pas" line="862">
        <parameters>
          <parameter name="Data" type="TDragObject" paramflags="const"/>
          <parameter name="Point" type="TPointF" paramflags="const"/>
          <parameter name="Operation" type="TDragOperation" paramflags="var"/>
        </parameters>
      <devnotes><summary>
Executes when you drag an object over the surface of this form.
Override DragOver to add additional code that executes when you drag an object over the surface of this form. DragOver sets the Accept parameter to True to indicate that you can drop the dragged object on this form. It sets Accept to False to indicate that you cannot drop the dragged object on this form.
The Data parameter is the object being dragged. 
Point indicates the current position of the mouse.
</summary></devnotes></procedure>
      <procedure name="DragDrop" visibility="public" procflags="virtual" file="FMX.Forms.pas" line="863">
        <parameters>
          <parameter name="Data" type="TDragObject" paramflags="const"/>
          <parameter name="Point" type="TPointF" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Executes when you drop an object over the surface of this form.
Override DragDrop to add additional code that executes when you drop an object over the surface of this form.
The Data parameter is the object that was dropped onto this form. The Point parameter has the mouse coordinates where the object was dropped. 
</summary></devnotes></procedure>
      <procedure name="DragLeave" visibility="public" procflags="virtual" file="FMX.Forms.pas" line="864">
      <devnotes><summary>
Executes when you drag an object while leaving the surface of this form.
Override DragLeave to add additional code that executes when you leave the surface of this form while dragging an object.
</summary></devnotes></procedure>
      <procedure name="EnterMenuLoop" visibility="public" file="FMX.Forms.pas" line="865">
      <devnotes><summary>
Starts the menu loop for the main menu bars that this form might contain.
EnterMenuLoop iterates through all the child controls of this form and, if one of them is a TMenuBar, then starts its menu loop.
</summary></devnotes></procedure>
      <procedure name="StartWindowDrag" visibility="public" procflags="virtual" file="FMX.Forms.pas" line="867">
      <devnotes><summary>
Signals that this form's window is about to be dragged. StartWindowDrag exits if this form has a csDesigning component state.
</summary></devnotes></procedure>
      <procedure name="StartWindowResize" visibility="public" procflags="virtual" file="FMX.Forms.pas" line="868">
      <devnotes><summary>
Signals that this form's window is about to be resized. StartWindowResize exits if this form has a csDesigning component state.
</summary></devnotes></procedure>
      <procedure name="AddRecognizer" visibility="public" file="FMX.Forms.pas" line="870">
        <parameters>
          <parameter name="Recognizer" type="TInteractiveGesture" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="RemoveRecognizer" visibility="public" file="FMX.Forms.pas" line="871">
        <parameters>
          <parameter name="Recognizer" type="TInteractiveGesture" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <function name="GetRecognizers" visibility="public" file="FMX.Forms.pas" line="872">
        <parameters>
          <retval type="TInteractiveGestures"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></function>
      <procedure name="SetBounds" visibility="public" procflags="overload virtual" file="FMX.Forms.pas" line="874">
        <parameters>
          <parameter name="ALeft" type="Integer"/>
          <parameter name="ATop" type="Integer"/>
          <parameter name="AWidth" type="Integer"/>
          <parameter name="AHeight" type="Integer"/>
        </parameters>
      <devnotes><summary>
Sets the boundaries for this form.
SetBounds has the following parameters:

ALeft--the left boundary
ATop--the top boundary
AWidth--the right boundary
AHeight--the bottom boundary

</summary></devnotes></procedure>
      <procedure name="SetBounds" visibility="public" procflags="overload" file="FMX.Forms.pas" line="875">
        <parameters>
          <parameter name="ARect" type="TRect" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Sets the boundaries for this form.
SetBounds has the following parameters:

ALeft--the left boundary
ATop--the top boundary
AWidth--the right boundary
AHeight--the bottom boundary

</summary></devnotes></procedure>
      <procedure name="SetBoundsF" visibility="public" procflags="overload virtual" file="FMX.Forms.pas" line="877">
        <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes>
        <parameters>
          <parameter name="ALeft" type="Single" paramflags="const"/>
          <parameter name="ATop" type="Single" paramflags="const"/>
          <parameter name="AWidth" type="Single" paramflags="const"/>
          <parameter name="AHeight" type="Single" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetBoundsF" visibility="public" procflags="overload" file="FMX.Forms.pas" line="879">
        <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes>
        <parameters>
          <parameter name="ARect" type="TRectF" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="GetBounds" visibility="public" procflags="virtual" file="FMX.Forms.pas" line="880">
        <parameters>
          <retval type="TRect"/>
        </parameters>
      <devnotes><summary>
Bounds of form - position and size.


</summary></devnotes></function>
      <function name="GetBoundsF" visibility="public" procflags="virtual" file="FMX.Forms.pas" line="881">
        <parameters>
          <retval type="TRectF"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></function>
      <function name="ClientToScreen" visibility="public" file="FMX.Forms.pas" line="882">
        <parameters>
          <parameter name="AFormPoint" type="TPointF" paramflags="const"/>
          <retval type="TPointF"/>
        </parameters>
      <devnotes><summary>
Converts the given mouse coordinates to screen coordinates. The local coordinates on the surface of this form are given through the Point parameter.
</summary></devnotes></function>
      <function name="ScreenToClient" visibility="public" file="FMX.Forms.pas" line="883">
        <parameters>
          <parameter name="AScreenPoint" type="TPointF" paramflags="const"/>
          <retval type="TPointF"/>
        </parameters>
      <devnotes><summary>
Transforms the global screen coordinates to local client area coordinates. The global screen coordinates are given through the Point parameter.
</summary></devnotes></function>
      <function name="CanShow" visibility="public" procflags="virtual" file="FMX.Forms.pas" line="884">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Retrieves whether the form is not visible.
CanShow returns True if  Visible is False (when the form is not visible).
</summary></devnotes></function>
      <function name="CloseQuery" visibility="public" procflags="virtual" file="FMX.Forms.pas" line="885">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Close-attempt event dispatcher.
CloseQuery is called automatically when an attempt is made to close the form. CloseQuery can allow the form to close by returning True, or prevent the form from closing by returning False.
As implemented in TCommonCustomForm, CloseQuery calls the OnCloseQuery event handler, if it exists. If no such event handler exists, CloseQuery returns True.
</summary></devnotes></function>
      <function name="ClientRect" visibility="public" file="FMX.Forms.pas" line="886">
        <parameters>
          <retval type="TRectF"/>
        </parameters>
      <devnotes><summary>
Returns a TRectF with the coordinates of the client area. The width of the rectangle is the same as ClientWidth and the height of the rectangle is ClientHeight.
</summary></devnotes></function>
      <procedure name="RecreateOsMenu" visibility="public" file="FMX.Forms.pas" line="887">
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="Release" visibility="public" procflags="override" file="FMX.Forms.pas" line="889" symflags="deprecated">
      </procedure>
      <function name="Close" visibility="public" file="FMX.Forms.pas" line="892">
        <devnotes><summary>
Closes the form and returns the close action that the form uses.
Call Close to close a form.
Attempts to close a form can be aborted by the CloseQuery event dispatcher or the OnCloseQuery event handler.

Note: When the main form of the application closes, the application terminates.</summary></devnotes>
        <parameters>
          <retval type="TCloseAction"/>
        </parameters>
      </function>
      <procedure name="Show" visibility="public" file="FMX.Forms.pas" line="893">
      <devnotes><summary>
Displays the form onscreen. 
The form is displayed onscreen, with the specified Position.


Attention: On macOS, the Secondary window created by a modal windows must also be shown using ShowModal. Do not call Show for a window that is being shown from a window shown using ShowModal.
</summary></devnotes></procedure>
      <procedure name="Hide" visibility="public" file="FMX.Forms.pas" line="894">
      <devnotes><summary>
Hides the form.
Hide sets the Visible property to False.
</summary></devnotes></procedure>
      <procedure name="BringToFront" visibility="public" procflags="override" file="FMX.Forms.pas" line="895">
      <devnotes><summary>
Brings this FMX visual object on top of other overlapping visual controls that are on the same form.
FMX.Forms.TCommonCustomForm.BringToFront inherits from FMX.Types.TFmxObject.BringToFront. All content below this line refers to FMX.Types.TFmxObject.BringToFront.
Brings this FMX visual object on top of other overlapping visual controls that are on the same form.
You can call BringToFront at run time as in the following code snippet:

  Label1.BringToFront;

or, at design time, by right-clicking the FMX visual control and selecting Control &gt; Bring to Front from the pop-up menu.
</summary></devnotes></procedure>
      <procedure name="SendToBack" visibility="public" procflags="override" file="FMX.Forms.pas" line="896">
      <devnotes><summary>
Sends this FMX visual object to the background letting other overlapping visual controls that are on the same form to be on top of it.
FMX.Forms.TCommonCustomForm.SendToBack inherits from FMX.Types.TFmxObject.SendToBack. All content below this line refers to FMX.Types.TFmxObject.SendToBack.
Sends this FMX visual object to the background letting other overlapping visual controls that are on the same form to be on top of it.
You can call SendToBack at run time as in the following code snippet:

  Label1.SendToBack;

or, at design time by right-clicking the FMX visual control and selecting  Control &gt; Send To Back from the pop-up menu.
</summary></devnotes></procedure>
      <function name="ShowModal" visibility="public" procflags="overload" file="FMX.Forms.pas" line="897">
        <parameters>
          <retval type="TModalResult"/>
        </parameters>
      <devnotes><summary>
Shows the form as a modal dialog box.
Use ShowModal to show the form as a modal dialog box. When a modal form is opened the application cannot continue to run until the modal form is closed. Thus, ShowModal does not return until the form has closed. When the form has closed, it returns the value of the ModalResult property.
To close a modal form, set its ModalResult property to a nonzero value.


Tip: If the form contains buttons with a ModalResult property set to a value other than mrNone, the form automatically closes when the user clicks one of these buttons and returns the ModalResult value as the return value of ShowModal.
Warning: Modal dialog boxes are not supported in Android apps. We recommend do not use modal dialog boxes on either of the mobile platforms (iOS and Android) because unexpected behavior can result. Avoiding usage of modal dialog boxes eliminates potential problems in debugging and supporting your mobile apps.
Attention: On macOS, secondary windows shown from a modal window must also be shown modally using ShowModal, otherwise secondary windows do not gain focus.
</summary></devnotes></function>
      <procedure name="ShowModal" visibility="public" procflags="overload" file="FMX.Forms.pas" line="898">
        <parameters>
          <parameter name="ResultProc" type="TProc&lt;System.UITypes.TModalResult&gt;" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Shows the form as a modal dialog box.
Use ShowModal to show the form as a modal dialog box. When a modal form is opened the application cannot continue to run until the modal form is closed. Thus, ShowModal does not return until the form has closed. When the form has closed, it returns the value of the ModalResult property.
To close a modal form, set its ModalResult property to a nonzero value.


Tip: If the form contains buttons with a ModalResult property set to a value other than mrNone, the form automatically closes when the user clicks one of these buttons and returns the ModalResult value as the return value of ShowModal.
Warning: Modal dialog boxes are not supported in Android apps. We recommend do not use modal dialog boxes on either of the mobile platforms (iOS and Android) because unexpected behavior can result. Avoiding usage of modal dialog boxes eliminates potential problems in debugging and supporting your mobile apps.
Attention: On macOS, secondary windows shown from a modal window must also be shown modally using ShowModal, otherwise secondary windows do not gain focus.
</summary></devnotes></procedure>
      <function name="CloseModal" visibility="public" file="FMX.Forms.pas" line="900">
        <devnotes><summary>
Prepares a modal form for closing and returns the close action that the form uses.
Do not call CloseModal in your application. CloseModal is used by the the FireMonkey framework when a modal form needs to be closed. CloseModal does not close the form by itself; it simply calls the registered close events and updates the ModalResult property. 
</summary></devnotes>
        <parameters>
          <retval type="TCloseAction"/>
        </parameters>
      </function>
      <function name="IsPopupForm" visibility="public" procflags="overload virtual" file="FMX.Forms.pas" line="901">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></function>
      <function name="IsPopupForm" visibility="public" procflags="class overload" file="FMX.Forms.pas" line="902">
        <parameters>
          <parameter name="AForm" type="TCommonCustomForm" paramflags="const"/>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></function>
      <procedure name="Invalidate" visibility="public" file="FMX.Forms.pas" line="903">
      <devnotes><summary>
Schedules a repaint of this form.
Invalidate informs the form that its entire surface needs to be repainted. Calling Invalidate can prevent flicker caused by a series of partial repaints. There is no performance penalty for calling Invalidate multiple times before the form is actually repainted.
</summary></devnotes></procedure>
      <procedure name="BeginUpdate" visibility="public" procflags="virtual" file="FMX.Forms.pas" line="904">
      <devnotes><summary>
Starts updating all the child controls in this form.
BeginUpdate starts updating all the child controls placed on this form, thus speeding any operations you might perform on the form or on multiple children. BeginUpdate signals the beginning of an update operation and must be followed by EndUpdate when all the updates have been completed.
</summary></devnotes></procedure>
      <procedure name="EndUpdate" visibility="public" procflags="virtual" file="FMX.Forms.pas" line="905">
      <devnotes><summary>
Ends updating all the child controls in this form.
EndUpdate ends updating all the child controls placed on this form, finalizing any updates you might have performed on the form or on multiple children. EndUpdate signals the end of an update operation and must be preceded by BeginUpdate and by the updates themselves.
</summary></devnotes></procedure>
      <function name="GetTabList" visibility="public" file="FMX.Forms.pas" line="907">
        <parameters>
          <retval type="ITabList"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></function>
      <function name="IsHandleAllocated" visibility="public" file="FMX.Forms.pas" line="909">
        <devnotes><summary>
Returns true only if the handle is allocated.


</summary></devnotes>
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <property name="Handle" visibility="public" read="FHandle" type="TWindowHandle" file="FMX.Forms.pas" line="910"><devnotes><summary>
Specifies the handle of this form.
</summary></devnotes></property>
      <property name="ParentForm" visibility="public" read="FParentForm" type="TCommonCustomForm" file="FMX.Forms.pas" line="911"><devnotes><summary>
Specifies the parent form of this form.
The ParentForm parent form must be an instance of a TCommonCustomForm descendant. ParentForm contains the parent component of the current TCommonCustomForm form. ParentForm is responsible for deleting the current TCommonCustomForm form.
The value of ParentForm is set when you change the Parent property. If Parent is a form, then ParentForm is set to the value of Parent. Otherwise, ParentForm is set to the value of the form, to which the Parent belongs. 
</summary></devnotes></property>
      <property name="FormStyle" visibility="public" read="FFormStyle" write="SetFormStyle" type="TFormStyle" default="0" file="FMX.Forms.pas" line="912"><devnotes><summary>
Determines the form style.
FormStyle is one of the Normal, Popup, or StayOnTop values defined in TFormStyle.
</summary></devnotes></property>
      <property name="ModalResult" visibility="public" read="FModalResult" write="SetModalResult" type="TModalResult" file="FMX.Forms.pas" line="913"><devnotes><summary>
Represents the return value of a form that is used as a modal dialog box.
Use ModalResult to close the form when it is displayed modally.
By default, ModalResult is mrNone. Set ModalResult to any nonzero value to close the form. The ModalResult value  becomes the return value of the ShowModal function called to display the form.
The following table lists the constants defined in the System.UITypes unit to be used for the ModalResult property of the TModalResult type.



Constant

Value

Meaning



mrNone



0



None. Used as a default value before the user exits.




mrOk



idOK = 1



The user exited with the OK button.




mrCancel



idCancel = 2



The user exited with the CANCEL button.




mrAbort



idAbort = 3



The user exited with the ABORT button.




mrRetry



idRetry = 4



The user exited with the RETRY button.




mrIgnore



idIgnore = 5



The user exited with the IGNORE button.




mrYes



idYes = 6



The user exited with the YES button.




mrNo



idNo = 7



The user exited with the NO button.




mrClose



idClose = 8



The user exited with the CLOSE button.




mrHelp



idHelp = 9



The user exited with the HELP button.




mrTryAgain



idTryAgain = 10



The user exited with the TRY AGAIN button.




mrContinue



idContinue = 11



The user exited with the CONTINUE button.




mrAll



mrContinue + 1 (12 or $C)



The user exited with the ALL button.




mrNoToAll



mrAll +1 (13 or $D)



The user exited with the NO TO ALL button.




mrYesToAll



mrNoToAll +1 (14 or $E)



The user exited with the YES TO ALL button.


You can check a ModalResult value  using the global IsAbortResult, IsAnAllResult, IsNegativeResult, or IsPositiveResult functions and use the StripAllFromResult function to convert ModalResult values that refer to &quot;ALL&quot; buttons to identifying values corresponding simple buttons (Ok, No, or Yes). 

Note: This property can be modified automatically setting corresponding ModalResult properties of controls in the modal form.</summary></devnotes></property>
      <property name="FormState" visibility="public" read="FFormState" type="TFmxFormStates" file="FMX.Forms.pas" line="914"><devnotes><summary>
Indicates transitional state information about the form.
Read FormState to determine the state of the form. FormState indicates when the form is in various transitional states or when certain operations have occurred. The following table lists the values that can be included in a form's state:





Value

Meaning



Recreating



The form is recreating its handle and its window is being shown on the screen.




Modal



The form was created as a modal window.




</summary></devnotes></property>
      <property name="Designer" visibility="public" read="FDesigner" write="SetDesigner" type="IDesignerHook" file="FMX.Forms.pas" line="915"><devnotes><summary>
Specifies the designer interface for the form.
The Designer property is used internally at design time. Never assign a value to this property. This is done automatically by the form designer. Only use this property when designing classes for use in the form designer, such as property editors and component editors.
</summary></devnotes></property>
      <property name="Captured" visibility="public" read="FCaptured" type="IControl" file="FMX.Forms.pas" line="916"><devnotes><summary>
Specifies the control that has captured the mouse. Captured is read-only.
</summary></devnotes></property>
      <property name="Focused" visibility="public" read="FFocused" write="SetFocused" type="IControl" file="FMX.Forms.pas" line="917"><devnotes><summary>
Specifies the control that has the focus set on it.
</summary></devnotes></property>
      <property name="Hovered" visibility="public" read="FHovered" type="IControl" file="FMX.Forms.pas" line="918"><devnotes><summary>
Identifies the control over which the mouse pointer is hovering.
Used internally for mouse hovering-over purposes.
</summary></devnotes></property>
      <property name="Active" visibility="public" read="FActive" write="SetActive" type="Boolean" file="FMX.Forms.pas" line="919"><devnotes><summary>
Specifies whether the form has focus.
Use Active to determine whether the form has focus. The Active form receives all keyboard input. If it has a title bar, it is drawn using the active colors specified by the operating system.
If Active is True, the form has focus; if Active is False, the form does not have focus.
</summary></devnotes></property>
      <property name="BiDiMode" visibility="public" read="GetBiDiMode" write="SetBiDiMode" type="TBiDiMode" default="0" file="FMX.Forms.pas" line="920"><devnotes><summary>
Indicates the layout of this form when running under Middle Eastern versions of the operating system.
Use BiDiMode to specify the bi-directional mode for the application. The bi-directional mode controls the direction in which text appears (left-to-right or right-to-left), the placement of vertical scroll bars, and the default alignment of text when the application runs in Middle Eastern locales.
</summary></devnotes></property>
      <property name="Caption" visibility="public" read="FCaption" write="SetCaption" stored="CaptionStore" type="string" default="0" file="FMX.Forms.pas" line="921"><devnotes><summary>
Specifies a text string that identifies the form to the user.
Use Caption to specify the text string that labels the form, identifying it to the user.
</summary></devnotes></property>
      <property name="Cursor" visibility="public" read="FCursor" write="SetCursor" type="TCursor" default="0" file="FMX.Forms.pas" line="922"><devnotes><summary>
Specifies the mouse cursor that will be used on this form.
</summary></devnotes></property>
      <property name="Border" visibility="public" read="FBorder" write="SetBorder" type="TFormBorder" file="FMX.Forms.pas" line="923"><devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></property>
      <property name="BorderStyle" visibility="public" read="FBorderStyle" write="SetBorderStyle" type="TFmxFormBorderStyle" default="2" file="FMX.Forms.pas" line="924"><devnotes><summary>
Specifies the appearance and behavior of the form border.
Use BorderStyle to get or set the appearance and behavior of the form border. BorderStyle can be any of the following TFmxFormBorderStyle values:



Value

Meaning



Single



Not resizable; minimize/maximize menu




None



Not resizable; no visible border line




Sizeable



Standard resizable border




ToolWindow



Similar to Single, but with a smaller caption




SizeToolWin



Similar to Sizeable, but with a smaller caption


Notes:

In iOS applications, None makes your form run in fullscreen mode. With any other value, your iOS app shows the iOS status bar.
In Android applications, the BorderStyle property does not control fullscreen display. Instead, you should set the theme property on the  Project &gt; Options &gt; Version Info  page of your Android project:
Setting the theme = TitleBar means that your Android app includes a title or status bar.
Setting the theme = NoTitleBar means that your Android app runs in fullscreen mode, without a title or status bar.</summary></devnotes></property>
      <property name="BorderIcons" visibility="public" read="FBorderIcons" write="SetBorderIcons" type="TBorderIcons" default="7" file="FMX.Forms.pas" line="926"><devnotes><summary>
Specifies which icons appear on the title bar of the form.
Use BorderIcons to get or set the icons that appear on the title bar of the form. BorderIcons can include any of the following TBorderIcons values:



Value

Meaning



biSystemMenu



The form has a Control menu (also known as a System menu).




biMinimize



The form has a Minimize button.




biMaximize



The form has a Maximize button.




biHelp



Has no effect in FireMonkey.



</summary></devnotes></property>
      <property name="Bounds" visibility="public" read="GetBounds" write="SetBounds" type="TRect" file="FMX.Forms.pas" line="929">
        <devnotes><summary>
Bounds of form - position and size.


</summary></devnotes>
      </property>
      <property name="BoundsF" visibility="public" read="GetBoundsF" write="SetBoundsF" type="TRectF" file="FMX.Forms.pas" line="931">
        <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes>
      </property>
      <property name="ClientHeight" visibility="public" read="GetClientHeight" write="SetClientHeight" type="Integer" file="FMX.Forms.pas" line="932"><devnotes><summary>
Specifies the height (in pixels) of the form's client area.
Use ClientHeight to determine the height (in pixels) of the form's client area. The client area is the usable area inside the form's border, excluding the title bar, scroll bars, and so on.
Set ClientHeight to change the height of the form's window based on the desired client area. To change the height of the form's window based on the total size of the window (including the border, menu, status bar and so on), use the Height property instead.
</summary></devnotes></property>
      <property name="ClientWidth" visibility="public" read="GetClientWidth" write="SetClientWidth" type="Integer" file="FMX.Forms.pas" line="933"><devnotes><summary>
Specifies the width (in pixels) of the form's client area.
Use ClientWidth to determine the width (in pixels) of the form's client area. The client area is the usable area inside the form's border. Set ClientWidth to change the width of the form's window based on the desired client area. To change the width of the form's window based on the total size of the window (including the border, status bar, and so on), use the Width property instead.
</summary></devnotes></property>
      <property name="OriginalContainerSize" visibility="public" read="GetOriginalContainerSize" type="TPointF" file="FMX.Forms.pas" line="934"><devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></property>
      <property name="Padding" visibility="public" read="FPadding" write="SetPadding" type="TBounds" file="FMX.Forms.pas" line="935"><devnotes><summary>
Specifies the padding of the form. 
The Padding of a form specifies how close, in pixels, the child of the form can come to each of its edges (top, left, bottom, right). Padding adds space to the inner side of the form.
The child of the form is repositioned and resized, if necessary, to fit the Padding. 

</summary></devnotes></property>
      <property name="Position" visibility="public" read="FPosition" write="SetPosition" type="TFormPosition" default="2" file="FMX.Forms.pas" line="936"><devnotes><summary>
Represents the size and placement of the form.
Use Position to get or set the size and placement of the form. Position can have one of the following TFormPosition values:



Value

Meaning



Designed



The form appears positioned on the screen and with the same height and width as it had at design time.




Default



The form appears in a position on the screen and with a height and width determined by the operating system. Each time you run the application, the form moves slightly down and to the right. The right side of the form is always near the rightmost side of the screen, and the bottom of the form is always near the bottom of the screen, regardless of the screen's resolution.
The operating system only supports this for overlapped windows. For a pop-up or child window (that has a BorderStyle of None, for example), the window is positioned in the upper-left corner of the screen.
On OS X, the default position for new windows is the upper-left corner of the screen.




DefaultPosOnly



The form displays with the size you created it at design time, but the operating system chooses its position on the screen. Each time you run the application, the form moves slightly down and to the right. When the form can no longer move down and to the right and keep the same size while remaining entirely visible on the screen, the form displays in the upper-left corner of the screen.
The operating system only supports this for overlapped windows. For a pop-up or child window (that has a BorderStyle of None, for example), the window is positioned in the upper-left corner of the screen.
On OS X, the default position for new windows is the upper-left corner of the screen.




DefaultSizeOnly



The form appears in the position you left it at design time, but the operating system chooses its size. The right side of the form is always near the rightmost side of the screen, and the bottom of the form is always near the bottom of the screen, regardless of the screen's resolution.




ScreenCenter



The form remains the size you left it at design time, but is positioned in the center of the screen.




DesktopCenter



The form remains the size you left it at design time, but is positioned in the center of the screen. No adjustments are made for multi-monitor applications.




MainFormCenter



The form remains the size you left it at design time, but is positioned in the center of the application's main form. No adjustments are made for multi-monitor applications. This position should only be used with secondary forms. If set for a main form, it acts like ScreenCenter.




OwnerFormCenter



The form remains the size you left it at design time, but is positioned in the center of the owner form. If there is no owner form, this position acts like MainFormCenter.


Note that, if Position is set to Default, DefaultPosOnly, or DefaultSizeOnly, and BorderStyle is set to None, the form will be positioned at (0,0). 
</summary></devnotes></property>
      <property name="StyleBook" visibility="public" read="FStyleBook" write="SetStyleBook" type="TStyleBook" file="FMX.Forms.pas" line="937"><devnotes><summary>
Specifies the style book for this form. For more information on how to customize the looks of a FireMonkey application with styles, refer to the Customizing FireMonkey Applications with Styles help topic.
</summary></devnotes></property>
      <property name="SystemStatusBar" visibility="public" read="FSystemStatusBar" write="SetSystemStatusBar" type="TFormSystemStatusBar" file="FMX.Forms.pas" line="939">
        <devnotes><summary>
System status bar settings on mobile platforms.


</summary></devnotes>
      </property>
      <property name="Transparency" visibility="public" read="FTransparency" write="SetTransparency" type="Boolean" default="0" file="FMX.Forms.pas" line="940"><devnotes><summary>
Indicates whether the form is transparent or not.
Use Transparency to determine whether the form is displayed as a totally transparent one. However, note that in this situation, all the controls will not be transparent and will be displayed normally. Only the form's background will be set to a transparent state.
If you set Transparency to True, the form will not display its title bar, nor its border. This means that you need to apply programmatic methods (involving setting of the Top and Left properties) to move the form on the screen surface.
</summary></devnotes></property>
      <property name="Width" visibility="public" read="GetWidth" write="SetWidth" stored="False" type="Integer" file="FMX.Forms.pas" line="941"><devnotes><summary>
Specifies the horizontal size of the form (in pixels).
Use the Width property to read or change the width of the form.
</summary></devnotes></property>
      <property name="Height" visibility="public" read="GetHeight" write="SetHeight" stored="False" type="Integer" file="FMX.Forms.pas" line="942"><devnotes><summary>
Specifies the vertical size of the form (in pixels).
Use the Height property to read or change the height of the form.
</summary></devnotes></property>
      <property name="Constraints" visibility="public" read="FConstraints" write="SetConstraints" type="TSizeConstraints" file="FMX.Forms.pas" line="943"><devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></property>
      <property name="Visible" visibility="public" read="GetVisible" write="SetVisible" type="Boolean" default="0" file="FMX.Forms.pas" line="944"><devnotes><summary>
Indicates whether the form is visible.
Use Visible to determine whether the form is visible.
If Visible is True, the form is visible unless it is completely obscured by other forms. If Visible is False, the form is not visible.
The Show and ShowModal methods set Visible to True and bring the form to the front of all open windows.
</summary></devnotes></property>
      <property name="WindowState" visibility="public" read="FWindowState" write="SetWindowState" type="TWindowState" default="0" file="FMX.Forms.pas" line="945"><devnotes><summary>
Represents how the form appears on the screen.
Set WindowState to minimize, maximize, or restore the form window. Read WindowState to determine whether the form is minimized, maximized, or in a normal state.
Possible values for the WindowState property are:

wsMaximized
wsMinimized
wsNormal</summary></devnotes></property>
      <property name="WindowStyle" visibility="public" read="GetWindowStyle" type="TWindowStyles" file="FMX.Forms.pas" line="946"><devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></property>
      <property name="FullScreen" visibility="public" read="GetFullScreen" write="SetFullScreen" type="Boolean" default="0" file="FMX.Forms.pas" line="947"><devnotes><summary>
Indicates whether the form is in fullscreen mode.
Use FullScreen to specify whether the form is in fullscreen mode. 
</summary></devnotes></property>
      <property name="ShowFullScreenIcon" visibility="public" read="GetShowFullScreenIcon" write="SetShowFullScreenIcon" type="Boolean" default="1" file="FMX.Forms.pas" line="948"><devnotes><summary>
Indicates whether the Mac fullscreen icon is visible.
Use ShowFullScreenIcon to specify whether the Mac fullscreen icon  or  is visible. 

Note: ShowFullScreenIcon has no visible effect in Windows.</summary></devnotes></property>
      <property name="FormFactor" visibility="public" read="FFormFactor" write="FFormFactor" type="TFormFactor" file="FMX.Forms.pas" line="949"><devnotes><summary>
Specifies the form factor for this FireMonkey form, that is, the TFormFactor properties: width, height, orientations, and devices.
</summary></devnotes></property>
      <property name="FormFamily" visibility="public" read="FFormFamily" write="SetFormFamily" type="string" default="0" file="FMX.Forms.pas" line="950"><devnotes><summary>
Is a string property that specifies the form family this form is part of. 
The logic can choose a different form as the main form depending on size, if an app has several forms with the same .FormFamily value as the app's main form.  
</summary></devnotes></property>
      <property name="SaveState" visibility="public" read="GetSaveState" type="TFormSaveState" file="FMX.Forms.pas" line="951"><devnotes><summary>
Specifies the save state of the FireMonkey form.  
The SaveState property is an instance of the TFormSaveState class, used to save the state of a form so this state can be restored once the application is restarted.
</summary></devnotes></property>
      <property name="ShowHint" visibility="public" read="FShowHint" write="SetShowHint" type="Boolean" default="1" file="FMX.Forms.pas" line="953">
        <devnotes><summary>
Determines whether help hints are enabled or disabled for first level child controls in the form.
For more information about the rules for enabling hints for a control, see   Using Hints to Show Contextual Help in a FireMonkey Application.
 TCommonCustomForm.ShowHint is a Boolean property set as True by default. When you place a child control in the form, and set the  TControl.Hint property, the hint is displayed because the TControl.ParentShowHint is True by default.
If the  TCommonCustomForm.ShowHint property of the form is set to False, the hint is not displayed in the child control.
To show the hint for a control, even when the  TCommonCustomForm.ShowHint property of the form is set to False, set  TControl.ShowHint for the control to True.
</summary></devnotes>
      </property>
      <event name="OnCreate" visibility="public" read="FOnCreate" write="FOnCreate" type="TNotifyEvent" file="FMX.Forms.pas" line="954"><devnotes><summary>
Occurs when the form is created.
Use OnCreate to perform special processing when the form is created and is invoked by the constructor. Either implement this event or override the constructor of the form; do not perform both actions. Any objects created in the OnCreate event should be freed by the OnDestroy event.
When a form is being created and its Visible property is True, the following events occur in the order listed:

OnCreate
OnActivate</summary></devnotes></event>
      <event name="OnDestroy" visibility="public" read="FOnDestroy" write="FOnDestroy" type="TNotifyEvent" file="FMX.Forms.pas" line="955"><devnotes><summary>
Occurs when the form is destroyed.
Use OnDestroy to perform special processing when the form is destroyed. Either implement this event or override the destructor of the class, but not both. This event should destroy any objects created in the OnCreate event.
</summary></devnotes></event>
      <event name="OnClose" visibility="public" read="FOnClose" write="FOnClose" type="TCloseEvent" file="FMX.Forms.pas" line="956"><devnotes><summary>
Occurs when the form closes.
Use OnClose to perform special processing when the form closes. The OnClose event specifies which event handler to call when a form is about to close. The handler specified by OnClose might, for example, test that all fields in a data entry form have valid contents before allowing the form to close.
A form is closed by the Close method or when the user chooses Close from the form's system menu.
The TCloseEvent type points to a method that handles the closing of a form. The value of the Action parameter determines whether the form actually closes. 
The following table lists the possible values of Action:




Value

Meaning



caNone



The form is not allowed to close, so nothing happens.




caHide



The form is not closed, but just hidden. Your application can still access a hidden form. This is the default value for Action.




caFree



The form is closed and all allocated memory for the form is freed.




caMinimize



The form is minimized, rather than closed.



By default, Action is set to caHide.
To close the form and free it in an OnClose event, set Action to caFree.

Note: When the application shuts down, the main form receives an OnClose event, but any child forms do not receive the OnClose event.</summary></devnotes></event>
      <event name="OnCloseQuery" visibility="public" read="FOnCloseQuery" write="FOnCloseQuery" type="TCloseQueryEvent" file="FMX.Forms.pas" line="957"><devnotes><summary>
Occurs when there is an attempt to close the form.
Use OnCloseQuery to specify the conditions under which the form can close. An OnCloseQuery event handler returns a Boolean CanClose value that determines whether a form is allowed to close. Its default value is True. 
You can use an OnCloseQuery event handler to ask users whether they are sure they want the form closed immediately. For example, you can use the handler to display a message box that prompts the user to save a file before closing the form.
The TCloseQueryEvent type points to the method that determines whether a form can be closed. The value of the CanClose parameter determines whether the form can be closed or not.
</summary></devnotes></event>
      <event name="OnActivate" visibility="public" read="FOnActivate" write="FOnActivate" type="TNotifyEvent" file="FMX.Forms.pas" line="958"><devnotes><summary>
Occurs when the form becomes active.
Use OnActivate to perform special processing when the form receives focus. A form becomes active when the focus is transferred to it (when the user clicks in the form, for example).
</summary></devnotes></event>
      <event name="OnDeactivate" visibility="public" read="FOnDeactivate" write="FOnDeactivate" type="TNotifyEvent" file="FMX.Forms.pas" line="959"><devnotes><summary>
Occurs when the form loses focus.
Use OnDeactivate to perform special processing when the active form becomes inactive and another form in the same application becomes the active one.
</summary></devnotes></event>
      <event name="OnKeyDown" visibility="public" read="FOnKeyDown" write="FOnKeyDown" type="TKeyEvent" file="FMX.Forms.pas" line="960"><devnotes><summary>
Occurs when a key is pressed while the form has focus.
OnKeyDown also occurs when KeyDown is called.
Write an event handler for OnKeyDown to specify what happens when the form is in focus and a key is pressed.
</summary></devnotes></event>
      <event name="OnKeyUp" visibility="public" read="FOnKeyUp" write="FOnKeyUp" type="TKeyEvent" file="FMX.Forms.pas" line="961"><devnotes><summary>
Occurs when a key is released while the form has focus.
OnKeyUp also occurs when KeyUp is called.
Write an event handler for OnKeyUp to specify what happens when the form is in focus and a key is released.
</summary></devnotes></event>
      <event name="OnMouseDown" visibility="public" read="FOnMouseDown" write="FOnMouseDown" type="TMouseEvent" file="FMX.Forms.pas" line="962"><devnotes><summary>
Occurs when a mouse button is pressed over the form. 
OnMouseDown also occurs when MouseDown is called.
Write an event handler for OnMouseDown to specify what happens when one of the mouse buttons is pressed over the form.
</summary></devnotes></event>
      <event name="OnMouseMove" visibility="public" read="FOnMouseMove" write="FOnMouseMove" type="TMouseMoveEvent" file="FMX.Forms.pas" line="963"><devnotes><summary>
Occurs when the mouse cursor moves while over the form area. 
OnMouseMove also occurs when MouseMove is called.
Write an event handler for OnMouseMove to specify what happens when the mouse pointer is moved while over the form area.
</summary></devnotes></event>
      <event name="OnMouseUp" visibility="public" read="FOnMouseUp" write="FOnMouseUp" type="TMouseEvent" file="FMX.Forms.pas" line="964"><devnotes><summary>
Occurs when the mouse button that was pressed over the form is released. 
OnMouseUp also occurs when MouseUp is called.
Write an event handler for OnMouseUp to specify what happens when the button of the mouse that was pressed over the form is released.
</summary></devnotes></event>
      <event name="OnMouseWheel" visibility="public" read="FOnMouseWheel" write="FOnMouseWheel" type="TMouseWheelEvent" file="FMX.Forms.pas" line="965"><devnotes><summary>
Occurs when the mouse wheel moves while the form has focus. 
OnMouseWheel also occurs when MouseWheel is called.

Note: On OS X platforms, this function can be called when the mouse wheel is moved while the mouse pointer is over the window. It is not necessary for the window to have focus. 
Write an event handler for OnMouseWheel to specify what happens when the mouse wheel is moved while the form is in focus.
</summary></devnotes></event>
      <event name="OnResize" visibility="public" read="FOnResize" write="FOnResize" type="TNotifyEvent" file="FMX.Forms.pas" line="966"><devnotes><summary>
Occurs immediately after the form is resized.
Use OnResize to make any final adjustments after the form is resized.
OnResize is an event handler of type TNotifyEvent.
</summary></devnotes></event>
      <event name="OnConstrainedResize" visibility="public" read="FOnConstrainedResize" write="FOnConstrainedResize" type="TConstrainedResizeEvent" file="FMX.Forms.pas" line="967"><devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></event>
      <event name="OnShow" visibility="public" read="FOnShow" write="FOnShow" type="TNotifyEvent" file="FMX.Forms.pas" line="968"><devnotes><summary>
Occurs when the form is shown (that is, when its Visible property is set to True).
Use OnShow to perform special processing when the form is shown (that is, when the form's Visible property is set to True).
</summary></devnotes></event>
      <event name="OnHide" visibility="public" read="FOnHide" write="FOnHide" type="TNotifyEvent" file="FMX.Forms.pas" line="969"><devnotes><summary>
Occurs when the form is hidden (that is, when its Visible property is set to False).
Use OnHide to perform special processing when the form is hidden (that is, when the form's Visible property is set to False).
</summary></devnotes></event>
      <event name="OnFocusChanged" visibility="public" read="FOnFocusChanged" write="FOnFocusChanged" type="TNotifyEvent" file="FMX.Forms.pas" line="970"><devnotes><summary>
Occurs when the current Form loses the focus.
Use OnFocusChanged to manage custom actions in case the focus changes from the current form to another control.
</summary></devnotes></event>
      <event name="OnVirtualKeyboardShown" visibility="public" read="FOnVirtualKeyboardShown" write="FOnVirtualKeyboardShown" type="TVirtualKeyboardEvent" file="FMX.Forms.pas" line="971"><devnotes><summary>
Occurs when the virtual keyboard of the form is shown.
Use OnVirtualKeyboardShown to perform special processing when the virtual keyboard of the form is shown.
The Sender parameter of the  event handler identifies the form that called the event handler. The Bounds parameter of the  event handler specifies the screen coordinates of the window of the virtual keyboard.
</summary></devnotes></event>
      <event name="OnVirtualKeyboardHidden" visibility="public" read="FOnVirtualKeyboardHidden" write="FOnVirtualKeyboardHidden" type="TVirtualKeyboardEvent" file="FMX.Forms.pas" line="972"><devnotes><summary>
Occurs when the virtual keyboard of the form is hidden.
Use OnVirtualKeyboardHidden to perform special processing when the virtual keyboard of the form is hidden.
The Sender parameter of the  event handler identifies the form that called the event handler. The Bounds parameter of the  event handler specifies the screen coordinates of the window of the virtual keyboard.
</summary></devnotes></event>
      <event name="OnSaveState" visibility="public" read="FOnSaveState" write="FOnSaveState" type="TNotifyEvent" file="FMX.Forms.pas" line="973"><devnotes><summary>
Occurs when the form is about to go to background on mobile devices or when the form is about to be closed on desktop. 
Any form-related data should be saved during the OnSaveState event so this data can be restored once the application is restarted.
</summary></devnotes></event>
      <property name="Touch" visibility="public" read="GetTouchManager" write="SetTouchManager" type="TTouchManager" file="FMX.Forms.pas" line="974"><devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></property>
      <event name="OnGesture" visibility="public" read="FOnGesture" write="FOnGesture" type="TGestureEvent" file="FMX.Forms.pas" line="975"><devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></event>
      <event name="OnTap" visibility="public" read="FOnTap" write="FOnTap" type="TTapEvent" file="FMX.Forms.pas" line="976"><devnotes><summary>
Occurs when a user taps the form using a finger or a similar device (not a mouse).
Write an event handler for OnTap to specify what happens when the user taps the form.
</summary></devnotes></event>
      <event name="OnTouch" visibility="public" read="FOnTouch" write="FOnTouch" type="TTouchEvent" file="FMX.Forms.pas" line="977"><devnotes><summary>
Occurs when the user touches the form area.
You can implement an event handler to manage custom actions when OnTouch occurs.
Note: The number of touch points is platform-specific.
</summary></devnotes></event>
      <property name="Left" visibility="published" read="GetLeft" write="SetLeft" type="Integer" file="FMX.Forms.pas" line="980"><devnotes><summary>
Specifies the X coordinate of the upper-left corner of the form, relative to the screen.
Use Left to locate the top of the form or reposition the form to a different X coordinate. The Left property, like the Top property, is the position of the form relative to its container (the screen), in pixels.
</summary></devnotes></property>
      <property name="Top" visibility="published" read="GetTop" write="SetTop" type="Integer" file="FMX.Forms.pas" line="981"><devnotes><summary>
Specifies the Y coordinate of the upper-left corner of the form, relative to the screen.
Use Top to locate the top of the form or reposition the form to a different Y coordinate. The Top property, like the Left property, is the position of the form relative to its container (the screen), in pixels.
</summary></devnotes></property>
    </members>
  <devnotes><summary>
TCommonCustomForm represents the base class for all forms, whether they are 2D or 3D.
TCommonCustomForm is the base class for all TCustomForm and TCustomForm3D, and all their derived objects such as TForm and TForm3D.
</summary></devnotes></class>
  <class name="TCustomForm" file="FMX.Forms.pas" line="986">
    
    <interfaces>
      <implements name="IScene"/>
    </interfaces>
    <members>
      <field name="FCanvas" type="TCanvas" visibility="private" size="4" offset="704" file="FMX.Forms.pas" line="988"/>
      <field name="FTempCanvas" type="TCanvas" visibility="private" size="4" offset="708" file="FMX.Forms.pas" line="989"/>
      <field name="FFill" type="TBrush" visibility="private" size="4" offset="712" file="FMX.Forms.pas" line="990"/>
      <field name="FDrawing" type="Boolean" visibility="private" size="1" offset="716" file="FMX.Forms.pas" line="991"/>
      <field name="FUpdateRects" type=":TCustomForm.:1" visibility="private" size="4" offset="720" file="FMX.Forms.pas" line="992"/>
      <field name="FStyleLookup" type="string" visibility="private" size="4" offset="724" file="FMX.Forms.pas" line="993"/>
      <field name="FNeedStyleLookup" type="Boolean" visibility="private" size="1" offset="728" file="FMX.Forms.pas" line="994"/>
      <field name="FResourceLink" type="TFmxObject" visibility="private" size="4" offset="732" file="FMX.Forms.pas" line="995"/>
      <field name="FOnPaint" type="TOnPaintEvent" visibility="private" size="8" offset="736" file="FMX.Forms.pas" line="996"/>
      <field name="FControls" type="TControlList" visibility="private" size="4" offset="744" file="FMX.Forms.pas" line="997"/>
      <field name="FQuality" type="TCanvasQuality" visibility="private" size="4" offset="748" file="FMX.Forms.pas" line="998"/>
      <field name="FDisableUpdating" type="Integer" visibility="private" size="4" offset="752" file="FMX.Forms.pas" line="999"/>
      <procedure name="SetFill" visibility="private" file="FMX.Forms.pas" line="1000">
        <parameters>
          <parameter name="Value" type="TBrush" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="FillChanged" visibility="private" file="FMX.Forms.pas" line="1001">
        <parameters>
          <parameter name="Sender" type="TObject"/>
        </parameters>
      </procedure>
      <function name="GetCanvas" visibility="private" file="FMX.Forms.pas" line="1003">
        <parameters>
          <retval type="TCanvas"/>
        </parameters>
      </function>
      <function name="GetUpdateRectsCount" visibility="private" file="FMX.Forms.pas" line="1004">
        <parameters>
          <retval type="Integer"/>
        </parameters>
      </function>
      <function name="GetUpdateRect" visibility="private" file="FMX.Forms.pas" line="1005">
        <parameters>
          <parameter name="Index" type="Integer" paramflags="const"/>
          <retval type="TRectF"/>
        </parameters>
      </function>
      <function name="GetSceneScale" visibility="private" file="FMX.Forms.pas" line="1006">
        <parameters>
          <retval type="Single"/>
        </parameters>
      </function>
      <function name="LocalToScreen" visibility="private" file="FMX.Forms.pas" line="1007">
        <parameters>
          <parameter name="P" type="TPointF" paramflags="const"/>
          <retval type="TPointF"/>
        </parameters>
      </function>
      <function name="ScreenToLocal" visibility="private" file="FMX.Forms.pas" line="1008">
        <parameters>
          <parameter name="P" type="TPointF" paramflags="const"/>
          <retval type="TPointF"/>
        </parameters>
      </function>
      <procedure name="SetStyleLookup" visibility="private" file="FMX.Forms.pas" line="1009">
        <parameters>
          <parameter name="Value" type="string" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="AddUpdateRect" visibility="private" file="FMX.Forms.pas" line="1010">
        <parameters>
          <parameter name="R" type="TRectF" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="DisableUpdating" visibility="private" file="FMX.Forms.pas" line="1011">
      </procedure>
      <procedure name="EnableUpdating" visibility="private" file="FMX.Forms.pas" line="1012">
      </procedure>
      <procedure name="ChangeScrollingState" visibility="private" file="FMX.Forms.pas" line="1013">
        <parameters>
          <parameter name="AControl" type="TControl" paramflags="const"/>
          <parameter name="Active" type="Boolean" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="IsStyleLookupStored" visibility="private" file="FMX.Forms.pas" line="1014">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <function name="GetActiveHDControl" visibility="private" file="FMX.Forms.pas" line="1015">
        <parameters>
          <retval type="TControl"/>
        </parameters>
      </function>
      <procedure name="SetActiveHDControl" visibility="private" file="FMX.Forms.pas" line="1016">
        <parameters>
          <parameter name="Value" type="TControl" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetQuality" visibility="private" file="FMX.Forms.pas" line="1017">
        <parameters>
          <parameter name="Value" type="TCanvasQuality" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="AddUpdateRects" visibility="private" file="FMX.Forms.pas" line="1018">
        <parameters>
          <parameter name="UpdateRects" paramflags="const">
            <array name="UpdateRects" file="FMX.Forms.pas" line="6172">
              <element type="TRectF"/>
            </array>
          </parameter>
        </parameters>
      </procedure>
      <procedure name="PrepareForPaint" visibility="private" file="FMX.Forms.pas" line="1019">
      </procedure>
      <procedure name="Notification" visibility="protected" procflags="override" file="FMX.Forms.pas" line="1021">
        <parameters>
          <parameter name="AComponent" type="TComponent"/>
          <parameter name="Operation" type="TOperation"/>
        </parameters>
      <devnotes><summary>




Forwards notification messages to all owned components.
FMX.Forms.TCustomForm.Notification inherits from System.Classes.TComponent.Notification. All content below this line refers to System.Classes.TComponent.Notification.
Forwards notification messages to all owned components.
Do not call the Notification method in an application. Notification is called automatically when the component specified by AComponent is about to be inserted or removed, as specified by Operation. By default, components pass along the notification to their owned components, if any.
A component can, if needed, act on the notification that a component is being inserted or removed. For example, if a component has object fields or properties that contain references to other components, it can check the notifications of component removals and invalidate those references as needed.

Note: Notification is not called for components that are freed implicitly (because their Owner is freed).</summary></devnotes></procedure>
      <procedure name="DoAddObject" visibility="protected" procflags="override" file="FMX.Forms.pas" line="1022">
        <parameters>
          <parameter name="AObject" type="TFmxObject" paramflags="const"/>
        </parameters>
      <devnotes><summary>


Adds the AObject object to the Children list of children attached to this parent object (self).
FMX.Forms.TCustomForm.DoAddObject inherits from FMX.Types.TFmxObject.DoAddObject. All content below this line refers to FMX.Types.TFmxObject.DoAddObject.
Adds the AObject object to the Children list of children attached to this parent object (self).
DoAddObject adds the object provided in the AObject parameter to the list of children stored in the Children property of this object (self). DoAddObject changes the parent of AObject to this object (self) and sets the root of AObject to the Root object of this object (self).
Descendant classes, like TCommonCustomForm and TControl, additionally handle tab stop lists keeping ordered lists of objects to which the user can tab. If such descendant class supports the ITabStopController interface and AObject is an object of a class supporting the IControl interface, then DoAddObject of this descendant adds AObject to the TabList tab stop lists of the (self) object. 
DoAddObject is internally called from AddObject.
</summary></devnotes></procedure>
      <procedure name="DoRemoveObject" visibility="protected" procflags="override" file="FMX.Forms.pas" line="1023">
        <parameters>
          <parameter name="AObject" type="TFmxObject" paramflags="const"/>
        </parameters>
      <devnotes><summary>




Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="DoDeleteChildren" visibility="protected" procflags="override" file="FMX.Forms.pas" line="1024">
      <devnotes><summary>




Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="ChangeChildren" visibility="protected" procflags="override" file="FMX.Forms.pas" line="1025">
      <devnotes><summary>


Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="UpdateStyleBook" visibility="protected" procflags="override" file="FMX.Forms.pas" line="1026">
      <devnotes><summary>


Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="ApplyStyleLookup" visibility="protected" procflags="virtual" file="FMX.Forms.pas" line="1028">
      <devnotes><summary>
Applies the style for this form.
</summary></devnotes></procedure>
      <procedure name="AddPreloadPropertyNames" visibility="protected" procflags="override" file="FMX.Forms.pas" line="1030">
        <parameters>
          <parameter name="PropertyNames" type="TList&lt;System.string&gt;" paramflags="const"/>
        </parameters>
      <devnotes><summary>


Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="SetPreloadProperties" visibility="protected" procflags="override" file="FMX.Forms.pas" line="1031">
        <parameters>
          <parameter name="PropertyStore" type="TDictionary&lt;System.string,System.Variant&gt;" paramflags="const"/>
        </parameters>
      <devnotes><summary>


Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="DoPaint" visibility="protected" procflags="virtual" file="FMX.Forms.pas" line="1033">
        <parameters>
          <parameter name="Canvas" type="TCanvas" paramflags="const"/>
          <parameter name="ARect" type="TRectF" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Fires an OnPaint event.
</summary></devnotes></procedure>
      <function name="GetStyleObject" visibility="protected" file="FMX.Forms.pas" line="1035">
        <parameters>
          <retval type="TFmxObject"/>
        </parameters>
      <devnotes><summary>
Gets the style resource object linked to this form.
GetStyleObject is called when the style is applied through a call to the ApplyStyleLookup method.
GetStyleObject internally calls LookupStyleObject.
</summary></devnotes></function>
      <procedure name="PaintBackground" visibility="protected" procflags="virtual" file="FMX.Forms.pas" line="1036">
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="CreateHandle" visibility="protected" procflags="override" file="FMX.Forms.pas" line="1038">
      <devnotes><summary>
Creates the window for this form and assigns it a handle.
FMX.Forms.TCustomForm.CreateHandle inherits from FMX.Forms.TCommonCustomForm.CreateHandle. All content below this line refers to FMX.Forms.TCommonCustomForm.CreateHandle.
Creates the window for this form and assigns it a handle. CreateHandle is overridden in subclasses to add extra functionality when creating the window containing this form.
</summary></devnotes></procedure>
      <procedure name="DestroyHandle" visibility="protected" procflags="override" file="FMX.Forms.pas" line="1039">
      <devnotes><summary>
Destroys the window handle created by CreateHandle.
FMX.Forms.TCustomForm.DestroyHandle inherits from FMX.Forms.TCommonCustomForm.DestroyHandle. All content below this line refers to FMX.Forms.TCommonCustomForm.DestroyHandle.
Destroys the window handle created by CreateHandle. DestroyHandle is overridden in subclasses to add extra functionality when destroying the window containing this form.
</summary></devnotes></procedure>
      <procedure name="ResizeHandle" visibility="protected" procflags="override" file="FMX.Forms.pas" line="1040">
      <devnotes><summary>
Resizes this form according to ClientWidth and ClientHeight.
FMX.Forms.TCustomForm.ResizeHandle inherits from FMX.Forms.TCommonCustomForm.ResizeHandle. All content below this line refers to FMX.Forms.TCommonCustomForm.ResizeHandle.
Resizes this form according to ClientWidth and ClientHeight.
ResizeHandle is overridden in subclasses to implement functionality to resize the dimensions of this form according to the values of the ClientWidth and ClientHeight properties.
</summary></devnotes></procedure>
      <procedure name="PaintRects" visibility="protected" procflags="override" file="FMX.Forms.pas" line="1041">
        <parameters>
          <parameter name="UpdateRects" paramflags="const">
            <array name="UpdateRects" file="FMX.Forms.pas" line="6241">
              <element type="TRectF"/>
            </array>
          </parameter>
        </parameters>
      <devnotes><summary>
Repaints all the rectangles given through the UpdateRects parameter.
FMX.Forms.TCustomForm.PaintRects inherits from FMX.Forms.TCommonCustomForm.PaintRects. All content below this line refers to FMX.Forms.TCommonCustomForm.PaintRects.
Repaints all the rectangles given through the UpdateRects parameter. UpdateRects is an array of TRectF rectangles.
</summary></devnotes></procedure>
      <procedure name="RecreateCanvas" visibility="protected" file="FMX.Forms.pas" line="1042">
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="RecalcControlsUpdateRect" visibility="protected" file="FMX.Forms.pas" line="1044">
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="Realign" visibility="protected" procflags="override" file="FMX.Forms.pas" line="1045">
      <devnotes><summary>
Realigns all the child objects of this form and repaints the form's surface by a call to InvalidateRect. 
FMX.Forms.TCustomForm.Realign inherits from FMX.Forms.TCommonCustomForm.Realign. All content below this line refers to FMX.Forms.TCommonCustomForm.Realign.
Realigns all the child objects of this form and repaints the form's surface by a call to InvalidateRect. 
</summary></devnotes></procedure>
      <procedure name="DoScaleChanged" visibility="protected" procflags="override" file="FMX.Forms.pas" line="1046">
      <devnotes><summary>


Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="DoStyleChanged" visibility="protected" procflags="override" file="FMX.Forms.pas" line="1047">
      <devnotes><summary>


Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <function name="GetWindowStyle" visibility="protected" procflags="override" file="FMX.Forms.pas" line="1049">
        <parameters>
          <retval type="TWindowStyles"/>
        </parameters>
      <devnotes><summary>


Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></function>
      <procedure name="StyleChangedHandler" visibility="protected" procflags="override" file="FMX.Forms.pas" line="1050">
        <parameters>
          <parameter name="Sender" type="TObject" paramflags="const"/>
          <parameter name="Msg" type="TMessageBase" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Event handler for the event that occurs when there is a style change.
FMX.Forms.TCustomForm.StyleChangedHandler inherits from FMX.Forms.TCommonCustomForm.StyleChangedHandler. All content below this line refers to FMX.Forms.TCommonCustomForm.StyleChangedHandler.
Event handler for the event that occurs when there is a style change.
Note: When there is a style change, the control sends a TStyleChangedMessage message.

 See Also
FMX.Forms.TCommonCustomForm.ScaleChangedHandler
FMX.Controls.TStyleChangedMessage

</summary></devnotes></procedure>
      <constructor name="Create" visibility="public" file="FMX.Forms.pas" line="1052">
        <parameters>
          <parameter name="AOwner" type="TComponent"/>
        </parameters>
      <devnotes><summary>
Creates and initializes this form.
FMX.Forms.TCustomForm.Create inherits from FMX.Forms.TCommonCustomForm.Create. All content below this line refers to FMX.Forms.TCommonCustomForm.Create.
Creates and initializes this form.
Create calls the inherited Create to create this form. Create
retrieves the IFMXWindowService,  IFMXCursorService,  
IFMXFullScreenWindowService, and
IFMXWindowsTouchService services.  
Create calls  InitializeNewForm to initialize such form parameters as bounds, width and height, border icons, style, border style, and client size for the form. 
AOwner specifies the owner of this form. 
An AOwner (usually the application) is responsible for freeing the created form.
Most applications do not call this constructor, but rather instantiate a descendant of TForm that is defined in the forms designer. Forms added to an application at design time are created automatically. 
</summary></devnotes></constructor>
      <constructor name="CreateNew" visibility="public" file="FMX.Forms.pas" line="1053">
        <parameters>
          <parameter name="AOwner" type="TComponent"/>
          <parameter name="Dummy" type="NativeInt">
            <value>
              $0
            </value>
          </parameter>
        </parameters>
      </constructor>
      <destructor name="Destroy" visibility="public" file="FMX.Forms.pas" line="1054">
        <parameters>
        </parameters>
      <devnotes><summary>


Disposes of the component and its owned components.
Disposes of the component and its owned components.
FMX.Forms.TCustomForm.Destroy inherits from System.Classes.TComponent.Destroy. All content below this line refers to System.Classes.TComponent.Destroy.
Disposes of the component and its owned components.
Do not call Destroy directly. Call Free instead. Free verifies that the component is not nil, and only then calls Destroy.
Never explicitly free a component in one of its own event handlers, nor free a component from the event handler of a component that it owns or contains.
To destroy a form, call its Release method. Release waits for all the form's event handlers and the event handlers of the form's components to finish executing before destroying the form.

Note: A form owns all the controls and nonvisual components that are placed on it in design mode. When it is freed, all of these components are automatically freed as well. By default, all forms are owned by the global Application object. When an application terminates, it frees the global Application object, which frees all forms. For objects that are not components, and for components created with a nil owner, be sure to call Free after finishing with the object; otherwise the memory allocated for the object will be lost until the application terminates.</summary></devnotes></destructor>
      <procedure name="InitializeNewForm" visibility="public" procflags="override" file="FMX.Forms.pas" line="1055">
      <devnotes><summary>
Performs several initializations required by this form.
FMX.Forms.TCustomForm.InitializeNewForm inherits from FMX.Forms.TCommonCustomForm.InitializeNewForm. All content below this line refers to FMX.Forms.TCommonCustomForm.InitializeNewForm.
Performs several initializations required by this form.
These initializations include bounds, width and height, border icons, border style, and client size for the form. InitializeNewForm is used by the form constructors.
</summary></devnotes></procedure>
      <procedure name="EndUpdate" visibility="public" procflags="override" file="FMX.Forms.pas" line="1056">
      <devnotes><summary>
Ends updating all the child controls in this form.
FMX.Forms.TCustomForm.EndUpdate inherits from FMX.Forms.TCommonCustomForm.EndUpdate. All content below this line refers to FMX.Forms.TCommonCustomForm.EndUpdate.
Ends updating all the child controls in this form.
EndUpdate ends updating all the child controls placed on this form, finalizing any updates you might have performed on the form or on multiple children. EndUpdate signals the end of an update operation and must be preceded by BeginUpdate and by the updates themselves.
</summary></devnotes></procedure>
      <procedure name="PaintTo" visibility="public" file="FMX.Forms.pas" line="1057">
        <parameters>
          <parameter name="Canvas" type="TCanvas" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="RecreateResources" visibility="public" procflags="override" file="FMX.Forms.pas" line="1058">
      <devnotes><summary>
Recreates the canvas  where the form renders itself.
</summary></devnotes></procedure>
      <property name="Action" visibility="public" read="GetAction" write="SetAction" type="TBasicAction" hoisted="true" file="FMX.Forms.pas" line="1059"/>
      <property name="Canvas" visibility="public" read="GetCanvas" type="TCanvas" file="FMX.Forms.pas" line="1060"><devnotes><summary>
Provides access to the drawing area of the form.
Use Canvas to draw directly on the client area of the form.
</summary></devnotes></property>
      <property name="Fill" visibility="public" read="FFill" write="SetFill" type="TBrush" file="FMX.Forms.pas" line="1061"><devnotes><summary>
Specifies the way the background on this form is filled.
Use Fill to get or set the brush that defines the way the background of this form is painted (gradient, solid, and so on).

Tip: Using a brush for Fill overrides the functionality of the Transparency property.</summary></devnotes></property>
      <property name="Quality" visibility="public" read="FQuality" write="SetQuality" type="TCanvasQuality" file="FMX.Forms.pas" line="1062"><devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></property>
      <property name="ActiveControl" visibility="public" read="GetActiveHDControl" write="SetActiveHDControl" type="TControl" file="FMX.Forms.pas" line="1063"><devnotes><summary>
Specifies the active control on the form.
Use ActiveControl to get or set the active control (having the focus) on the form. Only one control can have the focus at a given time, in an application.
If the form does not have the focus, ActiveControl is the control, on the form, that receives the focus when the form itself receives the focus.
</summary></devnotes></property>
      <property name="StyleLookup" visibility="public" read="FStyleLookup" write="SetStyleLookup" stored="IsStyleLookupStored" type="string" default="0" file="FMX.Forms.pas" line="1064"><devnotes><summary>
Specifies the name of the style to look up and apply to this form. The FireMonkey Component Design help topic shows, among other useful things related to component designing, how to apply a style to a TPanel component.
</summary></devnotes></property>
      <event name="OnPaint" visibility="public" read="FOnPaint" write="FOnPaint" type="TOnPaintEvent" file="FMX.Forms.pas" line="1065"><devnotes><summary>
Occurs when the form is redrawn.
Use OnPaint to perform special processing when the form is redrawn. Any special painting on the form should be done in this event. OnPaint occurs before any controls on the form are painted.

Tip: Notice that calling BeginScene in the OnPaint event handlers has no effect, because BeginScene is called before the OnPaint event handler runs. This guarantees that painting always occurs in OnPaint without requiring extra and probably unexpected code to allow drawing to have an effect.</summary></devnotes></event>
    </members>
  <devnotes><summary>
TCustomForm represents the base class from which you derive other windows such as dialog boxes and forms.
Create a subclass derived from TCustomForm if you want to create new forms such as dialog boxes. A derived form can contain one or more FireMonkey objects, such as TLabel, TComboBox, and so on.
Note that every descendant of TCustomForm is a 2D FireMonkey form or dialog box.
</summary></devnotes></class>
  <class name="TCustomPopupForm" file="FMX.Forms.pas" line="1068">
    
    <members>
      <enum name="TAniState" visibility="private" alias="FMX.Forms.TAniState" file="FMX.Forms.pas" line="1070">
        <element value="0" name="asNone" file="FMX.Forms.pas" line="1070"/>
        <element value="1" name="asShow" file="FMX.Forms.pas" line="1070"/>
        <element value="2" name="asClose" file="FMX.Forms.pas" line="1070"/>
      </enum>
      <field name="FAutoFree" type="Boolean" visibility="private" size="1" offset="760" file="FMX.Forms.pas" line="1072"/>
      <field name="FPlacement" type="TPlacement" visibility="private" size="1" offset="761" file="FMX.Forms.pas" line="1073"/>
      <field name="FRealPlacement" type="TPlacement" visibility="private" size="1" offset="762" file="FMX.Forms.pas" line="1074"/>
      <field name="FPlacementTarget" type="TControl" visibility="private" size="4" offset="764" file="FMX.Forms.pas" line="1075">
        <attributes>
          <attribute name="TObject"/>
        </attributes>
      </field>
      <field name="FOffset" type="TPointF" visibility="private" size="8" offset="768" file="FMX.Forms.pas" line="1076"/>
      <field name="FSize" type="TSizeF" visibility="private" size="8" offset="776" file="FMX.Forms.pas" line="1077"/>
      <field name="FPlacementRectangle" type="TBounds" visibility="private" size="4" offset="784" file="FMX.Forms.pas" line="1078"/>
      <field name="FScreenPlacementRect" type="TRectF" visibility="private" size="16" offset="788" file="FMX.Forms.pas" line="1079"/>
      <field name="FPlacementChanged" type="Boolean" visibility="private" size="1" offset="804" file="FMX.Forms.pas" line="1080"/>
      <field name="FTimer" type="TTimer" visibility="private" size="4" offset="808" file="FMX.Forms.pas" line="1081"/>
      <field name="FAniState" type="TCustomPopupForm.TAniState" visibility="private" size="4" offset="812" file="FMX.Forms.pas" line="1082"/>
      <field name="FAniDuration" type="Single" visibility="private" size="4" offset="816" file="FMX.Forms.pas" line="1083"/>
      <field name="FMaxAniPosition" type="Single" visibility="private" size="4" offset="820" file="FMX.Forms.pas" line="1084"/>
      <field name="FAniPosition" type="Single" visibility="private" size="4" offset="824" file="FMX.Forms.pas" line="1085"/>
      <field name="FShowTime" type="TDateTime" visibility="private" size="8" offset="832" file="FMX.Forms.pas" line="1086"/>
      <field name="FCloseTime" type="TDateTime" visibility="private" size="8" offset="840" file="FMX.Forms.pas" line="1087"/>
      <field name="FOnAniTimer" type="TNotifyEvent" visibility="private" size="8" offset="848" file="FMX.Forms.pas" line="1088"/>
      <field name="FFirstShow" type="Boolean" visibility="private" size="1" offset="856" file="FMX.Forms.pas" line="1089"/>
      <field name="FDragWithParent" type="Boolean" visibility="private" size="1" offset="857" file="FMX.Forms.pas" line="1090"/>
      <field name="FHideWhenPlacementTargetInvisible" type="Boolean" visibility="private" size="1" offset="858" file="FMX.Forms.pas" line="1091"/>
      <field name="FBeforeClose" type="TNotifyEvent" visibility="private" size="8" offset="864" file="FMX.Forms.pas" line="1092"/>
      <field name="FBeforeShow" type="TNotifyEvent" visibility="private" size="8" offset="872" file="FMX.Forms.pas" line="1093"/>
      <field name="FScreenContentRect" type="TRectF" visibility="private" size="16" offset="880" file="FMX.Forms.pas" line="1094"/>
      <field name="FContentPadding" type="TBounds" visibility="private" size="4" offset="896" file="FMX.Forms.pas" line="1095"/>
      <field name="FContentControl" type="TControl" visibility="private" size="4" offset="900" file="FMX.Forms.pas" line="1096"/>
      <field name="FOnRealPlacementChanged" type="TNotifyEvent" visibility="private" size="8" offset="904" file="FMX.Forms.pas" line="1097"/>
      <field name="FPreferedDisplayIndex" type="Integer" visibility="private" size="4" offset="912" file="FMX.Forms.pas" line="1098"/>
      <procedure name="SetOffset" visibility="private" file="FMX.Forms.pas" line="1099">
        <parameters>
          <parameter name="Value" type="TPointF" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetSize" visibility="private" file="FMX.Forms.pas" line="1100">
        <parameters>
          <parameter name="Value" type="TSizeF" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetPlacementRectangle" visibility="private" file="FMX.Forms.pas" line="1101">
        <parameters>
          <parameter name="Value" type="TBounds" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetPlacement" visibility="private" file="FMX.Forms.pas" line="1102">
        <parameters>
          <parameter name="Value" type="TPlacement" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="TimerProc" visibility="private" file="FMX.Forms.pas" line="1103">
        <parameters>
          <parameter name="Sender" type="TObject"/>
        </parameters>
      </procedure>
      <procedure name="SetPlacementTarget" visibility="private" file="FMX.Forms.pas" line="1104">
        <parameters>
          <parameter name="Value" type="TControl" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetDragWithParent" visibility="private" file="FMX.Forms.pas" line="1105">
        <parameters>
          <parameter name="Value" type="Boolean" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetContentPadding" visibility="private" file="FMX.Forms.pas" line="1106">
        <parameters>
          <parameter name="Value" type="TBounds" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetContentControl" visibility="private" file="FMX.Forms.pas" line="1107">
        <parameters>
          <parameter name="Value" type="TControl" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetPreferedDisplayIndex" visibility="private" file="FMX.Forms.pas" line="1108">
        <parameters>
          <parameter name="Value" type="Integer" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="DoBeforeShow" visibility="protected" procflags="virtual" file="FMX.Forms.pas" line="1110">
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="DoBeforeClose" visibility="protected" procflags="virtual" file="FMX.Forms.pas" line="1111">
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="DoClose" visibility="protected" procflags="override" file="FMX.Forms.pas" line="1112">
        <parameters>
          <parameter name="CloseAction" type="TCloseAction" paramflags="var"/>
        </parameters>
      <devnotes><summary>


Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="DoPaddingChanged" visibility="protected" procflags="override" file="FMX.Forms.pas" line="1113">
      <devnotes><summary>


Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="DoApplyPlacement" visibility="protected" procflags="virtual" file="FMX.Forms.pas" line="1114">
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="Loaded" visibility="protected" procflags="override" file="FMX.Forms.pas" line="1115">
      <devnotes><summary>


Initializes the component after the form file has been read into memory.
FMX.Forms.TCustomPopupForm.Loaded inherits from System.Classes.TComponent.Loaded. All content below this line refers to System.Classes.TComponent.Loaded.
Initializes the component after the form file has been read into memory.
Do not call the protected Loaded method. The streaming system calls this method after it loads the component's form from a stream.
When the streaming system loads a form or data module from its form file, it first constructs the form component by calling its constructor, then reads its property values from the form file. After reading all the property values for all the components, the streaming system calls the Loaded methods of each component in the order the components were created. This gives the components a chance to initialize any data that depends on the values of other components or other parts of itself.

Note:  All references to sibling components are resolved by the time Loaded is called. Loaded is the first place that sibling pointers can be used after being streamed in.
As implemented in TComponent, Loaded clears the csLoading flag in the ComponentState property, indicating that the component is no longer loading.

Warning: Loaded may be called multiple times on inherited forms. It is called every time a level of inheritance is streamed in. Do not allocate memory in an overridden Loaded method without first checking that the memory has not been allocated in a previous call.</summary></devnotes></procedure>
      <procedure name="Updated" visibility="protected" procflags="override" file="FMX.Forms.pas" line="1116">
      <devnotes><summary>


Clears the csUpdating state in the component's ComponentState property when the component finishes updating.
FMX.Forms.TCustomPopupForm.Updated inherits from System.Classes.TComponent.Updated. All content below this line refers to System.Classes.TComponent.Updated.
Clears the csUpdating state in the component's ComponentState property when the component finishes updating.
Do not call Updated directly. It is used internally to clear the csUpdating flag of the ComponentState property. A call to Updated always follows a call to Updating, which sets the flag.
</summary></devnotes></procedure>
      <procedure name="Notification" visibility="protected" procflags="override" file="FMX.Forms.pas" line="1117">
        <parameters>
          <parameter name="AComponent" type="TComponent"/>
          <parameter name="Operation" type="TOperation"/>
        </parameters>
      <devnotes><summary>






Forwards notification messages to all owned components.
FMX.Forms.TCustomPopupForm.Notification inherits from System.Classes.TComponent.Notification. All content below this line refers to System.Classes.TComponent.Notification.
Forwards notification messages to all owned components.
Do not call the Notification method in an application. Notification is called automatically when the component specified by AComponent is about to be inserted or removed, as specified by Operation. By default, components pass along the notification to their owned components, if any.
A component can, if needed, act on the notification that a component is being inserted or removed. For example, if a component has object fields or properties that contain references to other components, it can check the notifications of component removals and invalidate those references as needed.

Note: Notification is not called for components that are freed implicitly (because their Owner is freed).</summary></devnotes></procedure>
      <procedure name="DoAniTimer" visibility="protected" procflags="virtual" file="FMX.Forms.pas" line="1118">
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="Realign" visibility="protected" procflags="override" file="FMX.Forms.pas" line="1119">
      <devnotes><summary>


Realigns all the child objects of this form and repaints the form's surface by a call to InvalidateRect. 
FMX.Forms.TCustomPopupForm.Realign inherits from FMX.Forms.TCommonCustomForm.Realign. All content below this line refers to FMX.Forms.TCommonCustomForm.Realign.
Realigns all the child objects of this form and repaints the form's surface by a call to InvalidateRect. 
</summary></devnotes></procedure>
      <procedure name="DoRealPlacementChanged" visibility="protected" procflags="virtual" file="FMX.Forms.pas" line="1120">
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <function name="IsVisibleOnScreen" visibility="protected" file="FMX.Forms.pas" line="1121">
        <parameters>
          <parameter name="AControl" type="TControl" paramflags="const"/>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></function>
      <constructor name="CreateNew" visibility="public" file="FMX.Forms.pas" line="1123">
        <parameters>
          <parameter name="AOwner" type="TComponent"/>
          <parameter name="Dummy" type="NativeInt">
            <value>
              $0
            </value>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="Create" visibility="public" file="FMX.Forms.pas" line="1124">
        <parameters>
          <parameter name="AOwner" type="TComponent"/>
          <parameter name="AStyleBook" type="TStyleBook">
            <value>
              nil
            </value>
          </parameter>
          <parameter name="APlacementTarget" type="TControl">
            <value>
              nil
            </value>
          </parameter>
          <parameter name="AutoFree" type="Boolean">
            <value>
              True
            </value>
          </parameter>
        </parameters>
      <devnotes><summary>
Creates and initializes this pop-up form.
Create calls CreateNew, which creates this pop-up form and sets initial values to several properties of the created pop-up form. Then Create initializes the PlacementTarget, 
Parent, and StyleBook properties for the created pop-up form.  
AOwner specifies the owner of this pop-up form. The AOwner is responsible for freeing the created pop-up form.
AStyleBook specifies the style book to set for the StyleBook property of this pop-up form.  
APlacementTarget specifies the PlacementTarget property for this pop-up form.
</summary></devnotes></constructor>
      <destructor name="Destroy" visibility="public" file="FMX.Forms.pas" line="1126">
        <parameters>
        </parameters>
      <devnotes><summary>




Disposes of the component and its owned components.
Disposes of the component and its owned components.
FMX.Forms.TCustomPopupForm.Destroy inherits from System.Classes.TComponent.Destroy. All content below this line refers to System.Classes.TComponent.Destroy.
Disposes of the component and its owned components.
Do not call Destroy directly. Call Free instead. Free verifies that the component is not nil, and only then calls Destroy.
Never explicitly free a component in one of its own event handlers, nor free a component from the event handler of a component that it owns or contains.
To destroy a form, call its Release method. Release waits for all the form's event handlers and the event handlers of the form's components to finish executing before destroying the form.

Note: A form owns all the controls and nonvisual components that are placed on it in design mode. When it is freed, all of these components are automatically freed as well. By default, all forms are owned by the global Application object. When an application terminates, it frees the global Application object, which frees all forms. For objects that are not components, and for components created with a nil owner, be sure to call Free after finishing with the object; otherwise the memory allocated for the object will be lost until the application terminates.</summary></devnotes></destructor>
      <procedure name="ApplyPlacement" visibility="public" file="FMX.Forms.pas" line="1127">
      <devnotes><summary>
Positions the current pop-up form.
ApplyPlacement positions the TCustomPopupForm pop-up form using the current Size and Placement properties. 
</summary></devnotes></procedure>
      <function name="CanShow" visibility="public" procflags="override" file="FMX.Forms.pas" line="1128">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Retrieves whether the form is not visible.
First CanShow calls the inherited 
TCommonCustomForm.CanShow. If TCommonCustomForm.CanShow returns False, CanShow exits returning False. If TCommonCustomForm.CanShow returns True, CanShow initiates animation 
(AniDuration, AniPosition, DoAniTimer) and
exits returning True.  
</summary></devnotes></function>
      <function name="CloseQuery" visibility="public" procflags="override" file="FMX.Forms.pas" line="1129">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Close-attempt event dispatcher.
FMX.Forms.TCustomPopupForm.CloseQuery inherits from FMX.Forms.TCommonCustomForm.CloseQuery. All content below this line refers to FMX.Forms.TCommonCustomForm.CloseQuery.
Close-attempt event dispatcher.
CloseQuery is called automatically when an attempt is made to close the form. CloseQuery can allow the form to close by returning True, or prevent the form from closing by returning False.
As implemented in TCommonCustomForm, CloseQuery calls the OnCloseQuery event handler, if it exists. If no such event handler exists, CloseQuery returns True.
</summary></devnotes></function>
      <property name="AniDuration" visibility="public" read="FAniDuration" write="FAniDuration" type="Single" default="0" file="FMX.Forms.pas" line="1130"><devnotes><summary>
Sets the animation duration for the pop-up form to close or to show.
AniDuration is measured in seconds.
AniDuration defines a duration time for execution of the custom event handler assigned to the OnAniTimer event of the current TCustomPopupForm pop-up form. 

Note: AniDuration does not influence onto an animation duration of an external animation (for example TFloatAnimation animation) if such is assigned to the TCustomPopupForm pop-up form. AniDuration is used for the custom event handler assigned to the OnAniTimer event.</summary></devnotes></property>
      <property name="AniPosition" visibility="public" read="FAniPosition" type="Single" default="0" file="FMX.Forms.pas" line="1131"><devnotes><summary>
Read-only property returning values between 0 and 1. You can use AniPosition in an OnAniTimer event handler.
The AniPosition value changes during AniDuration time of a custom animation execution from 0 to 1 (during opening of the current pop-up form) and from 1 to 0 (during closing) respectively.
AniPosition might be used as a parameter in intermediate values of animated properties in an OnAniTimer event handler. For example, you can use AniPosition to calculate an intermediate position or intermediate opacity during custom animation. Where AniPosition = 0 corresponds to a starting moment and AniPosition = 1 to a termination of opening animation.
For example, in the sample below the form Width (as a component of the form Size) changes from 0 (when AniPosition = 0) to 200 (when AniPosition = 1) during appearing of the pop-up form and vice versa on the form closing:

...
procedure TForm1.AniTimerProc(Sender: TObject);
begin
  if Sender is TCustomPopupForm then
  begin
//    You can use AniPosition whether to define Opacity or Size
//    TCustomPopupForm(Sender).ContentControl.Opacity := TCustomPopupForm(Sender).AniPosition;
    TCustomPopupForm(Sender).Size := TSize.Create(Round(200 * TCustomPopupForm(Sender).AniPosition), 100);
  end;
end;

procedure TForm1.Button1Click(Sender: TObject);
var
  R: TRectangle;
begin
  R := TRectangle.Create(Self);
  F := TCustomPopupForm.Create(Self);
  F.AniDuration := 0.5;
  F.ContentControl := R;
  F.OnAniTimer := AniTimerProc;
  F.PlacementTarget := Button1;
  F.Show;
end;
...

Commented line shows how to use AniPosition to animate a form transparency. 
See also discussion in TPopup.OnAniTimer.
</summary></devnotes></property>
      <property name="AutoFree" visibility="public" read="FAutoFree" type="Boolean" file="FMX.Forms.pas" line="1132"><devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></property>
      <property name="ContentControl" visibility="public" read="FContentControl" write="SetContentControl" type="TControl" file="FMX.Forms.pas" line="1133"><devnotes><summary>
Specifies the control that is shown on the pop-up form.
If a pop-up form does not contain any visible control, then the pop-up form is totally transparent. Therefore, some visible control should be placed onto the pop-up form. This control is specified by the ContentControl property. 

Note: A ContentCtrl control can be associated to a PopupForm pop-up form using the Parent property of the control, like in the following example: ContentCtrl.Parent := ParentForm. However, we recommend using the ContentControl property like ParentForm.ContentControl := ContentCtrl, because  TCustomPopupForm handling ContentControl takes into account the current scale and rotation of the ContentCtrl control.  
</summary></devnotes></property>
      <property name="ContentPadding" visibility="public" read="FContentPadding" write="SetContentPadding" type="TBounds" file="FMX.Forms.pas" line="1134"><devnotes><summary>
Specifies the padding of the pop-up form. 
The ContentPadding of a pop-up form specifies how close, in pixels, the children of the form can come to each of the form edges (top, left, bottom, right). See also Padding.
The adhering of the pop-up form is executed to the boundaries of this indented 'padding rectangle'. 

</summary></devnotes></property>
      <property name="DragWithParent" visibility="public" read="FDragWithParent" write="SetDragWithParent" type="Boolean" file="FMX.Forms.pas" line="1136">
        <devnotes><summary>
Specifies whether the current TCustomPopupForm can be dragged after it is shown.
For example, if DragWithParent is True, TCustomPopupForm is dragged together with its parent form when the parent form is the target of a drag-and-drop operation. When Placement is Mouse or MouseCenter, then the pop-up form moves following the mouse cursor. On mobile devices, after changing the orientation (portrait/landscape) the pop-up form can change its position in order not to be partially positioned outside of the screen boundaries. 
The default is True. 
</summary></devnotes>
      </property>
      <property name="HideWhenPlacementTargetInvisible" visibility="public" read="FHideWhenPlacementTargetInvisible" write="FHideWhenPlacementTargetInvisible" type="Boolean" file="FMX.Forms.pas" line="1139">
        <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes>
      </property>
      <property name="Offset" visibility="public" read="FOffset" write="SetOffset" type="TPointF" file="FMX.Forms.pas" line="1140"><devnotes><summary>
The offset of the padding rectangle  relative to the rectangle of the pop-up form.
Defines the number of pixels, by which the pop-up form is displaced  relatively to the main form position; this number is obtained taking into account all positioning properties used in the TCustomPopupForm class. The Offset direction depends on a Placement value. The Offset property is used, for example, in multi-level menus, when pop-up forms of submenus are placed overlapping a form of a previous level.     

</summary></devnotes></property>
      <property name="Placement" visibility="public" read="FPlacement" write="SetPlacement" type="TPlacement" file="FMX.Forms.pas" line="1141"><devnotes><summary>
Gets or sets how the TCustomPopupForm is positioned relative to rectangles specified by the PlacementRectangle or PlacementTarget properties, relative to the screen, or relative to the mouse (pointing device) position.
TPlacement defines possible values of Placement.
TPlacement also specifies the behavior of the TCustomPopupForm, when it overlaps screen boundaries. The default value is Bottom.
This figure demonstrates the TopCenter value.

In the figure, ScreenPlacementRect is the colored Fuchsia rectangle of the Show popup button. 
Use Placement, PlacementTarget, and PlacementRectangle to set the positioning of TCustomPopupForm. 
</summary></devnotes></property>
      <property name="PlacementRectangle" visibility="public" read="FPlacementRectangle" write="SetPlacementRectangle" type="TBounds" file="FMX.Forms.pas" line="1142"><devnotes><summary>
Gets or sets a rectangle, relative to which the TCustomPopupForm is positioned. 
Screen coordinates of PlacementRectangle are calculated relative to PlacementTarget (if specified). Otherwise, relative to the top left corner of the screen. The following rules are used:

If PlacementRectangle is not specified (width or height equals to zero 0), but PlacementTarget is specified, then the coordinates and size of PlacementTarget are used.
If neither PlacementRectangle nor PlacementTarget are specified, then adhering of the top left corner of the form is implemented to the mouse cursor.
Use Placement, PlacementTarget, and PlacementRectangle to set the target origin and the alignment point of the TCustomPopupForm. 
</summary></devnotes></property>
      <property name="PlacementTarget" visibility="public" read="FPlacementTarget" write="SetPlacementTarget" type="TControl" file="FMX.Forms.pas" line="1143"><devnotes><summary>
The target control, relative to which the TCustomPopupForm is positioned. 
If PlacementTarget is not set, and the TCustomPopupForm has a ParentForm, then the TCustomPopupForm is positioned relative to its parent. If PlacementTarget and ParentForm are not set, TCustomPopupForm is positioned relative to the main window. 
Use Placement, 
RealPlacement, and PlacementRectangle to set the target origin and the alignment point of TCustomPopupForm. 
</summary></devnotes></property>
      <property name="PreferedDisplayIndex" visibility="public" read="FPreferedDisplayIndex" write="SetPreferedDisplayIndex" type="Integer" file="FMX.Forms.pas" line="1144"><devnotes><summary>
Specifies the index of the display that shows the pop-up form.
Specifies the index of the display in the Displays array that shows the current pop-up form.
PreferedDisplayIndex is used for context menus. When an application opens several submenus of context menus, all these submenus should be shown on the same display, even if a new pop-up submenu can be shown on a neighbor display.
If a specified PreferedDisplayIndex does not exist, then a pop-up form is shown on a display that is the closest to the place where the form should appear according to all specified positioning parameters Placement, PlacementTarget, and PlacementRectangle. 
</summary></devnotes></property>
      <property name="RealPlacement" visibility="public" read="FRealPlacement" type="TPlacement" file="FMX.Forms.pas" line="1145"><devnotes><summary>
Used internally.
The CreateNew constructor initializes RealPlacement equal to Placement. At run time RealPlacement can be changed according to the real environment properties. For example, if a run-time environment supports the mouse, then RealPlacement can be set to  
TPlacement.Mouse, otherwise to
TPlacement.Absolute. 
</summary></devnotes></property>
      <property name="ScreenContentRect" visibility="public" read="FScreenContentRect" type="TRectF" file="FMX.Forms.pas" line="1146"><devnotes><summary>
Screen coordinates of the rectangle relative to which controls in the pop-up form are positioned.
ScreenContentRect is the rectangle inside which all controls of the pop-up form are positioned. 
Notice that some 'decorative elements', like 'triangular peaks' on  TCalloutPanel rectangles, can be positioned outside the ScreenContentRect.

</summary></devnotes></property>
      <property name="ScreenPlacementRect" visibility="public" read="FScreenPlacementRect" type="TRectF" file="FMX.Forms.pas" line="1147"><devnotes><summary>
Screen coordinates of the rectangle relative to which the pop-up form is positioned.
ScreenPlacementRect is defined taking into account PlacementRectangle and PlacementTarget.

In the figure, ScreenPlacementRect is the colored Fuchsia rectangle of the Show popup button.  
</summary></devnotes></property>
      <property name="Size" visibility="public" read="FSize" write="SetSize" type="TSizeF" file="FMX.Forms.pas" line="1148"><devnotes><summary>
The working area size of the current pop-up form.
Size defines the width and height of the working area of the current TCustomPopupForm pop-up form. Size defines the rectangle to which all controls of the form are aligned. 
In the following picture the Size rectangular of the pop-up form is specified with the green dashes. The physical rectangle of the pop-up form window (defined by Width and Height) is  marked with red dashes. 

As you see from the picture, the physical rectangle is not used for positioning. 
ClientWidth and ClientHeight of the working area  of the form are defined automatically according to the specified Size and Padding. If PlacementRectangle is defined and Placement is Absolute, then Size is ignored. 
Use a TSizeF object to set the Size of a pop-up form.  
For example, the following code will set up the working area width to 200 and height to 250: 

  Form1.Size := TSizeF.Create(200, 250);
</summary></devnotes></property>
      <event name="OnAniTimer" visibility="public" read="FOnAniTimer" write="FOnAniTimer" type="TNotifyEvent" file="FMX.Forms.pas" line="1149"><devnotes><summary>
Periodically occurs during TCustomPopupForm custom animation execution.
The OnAniTimer event periodically occurs during  AniDuration time while an animation executes during appearing and closing of the current pop-up form.
Write an OnAniTimer event handler to provide animation functionality during appearing and closing of a pop-up form. See the example in TPopup.OnAniTimer. 
AniDuration defines the custom animation duration in seconds. OnAniTimer can use AniPosition and other properties. 
</summary></devnotes></event>
      <event name="BeforeShow" visibility="public" read="FBeforeShow" write="FBeforeShow" type="TNotifyEvent" file="FMX.Forms.pas" line="1150"><devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></event>
      <event name="BeforeClose" visibility="public" read="FBeforeClose" write="FBeforeClose" type="TNotifyEvent" file="FMX.Forms.pas" line="1151"><devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></event>
      <event name="OnRealPlacementChanged" visibility="public" read="FOnRealPlacementChanged" write="FOnRealPlacementChanged" type="TNotifyEvent" file="FMX.Forms.pas" line="1152"><devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></event>
    </members>
  <devnotes><summary>
TCustomPopupForm represents the base class for FMX pop-up forms.
Create a subclass derived from TCustomPopupForm if you want to create new pop-up forms. A derived pop-up form can contain one or more FireMonkey objects, such as TLabel, TComboBox, and so on.
Note that every descendant of TCustomPopupForm is a 2D FireMonkey pop-up form.
</summary></devnotes></class>
  <class name="TForm" file="FMX.Forms.pas" line="1155">
    
    <members>
      <property name="Action" visibility="published" read="GetAction" write="SetAction" type="TBasicAction" hoisted="true" file="FMX.Forms.pas" line="1157"/>
      <property name="ActiveControl" visibility="published" read="GetActiveHDControl" write="SetActiveHDControl" type="TControl" hoisted="true" file="FMX.Forms.pas" line="1158"/>
      <property name="BiDiMode" visibility="published" read="GetBiDiMode" write="SetBiDiMode" type="TBiDiMode" default="0" hoisted="true" file="FMX.Forms.pas" line="1159"/>
      <property name="Border" visibility="published" read="FBorder" write="SetBorder" type="TFormBorder" hoisted="true" file="FMX.Forms.pas" line="1160"/>
      <property name="BorderIcons" visibility="published" read="FBorderIcons" write="SetBorderIcons" type="TBorderIcons" default="7" hoisted="true" file="FMX.Forms.pas" line="1161"/>
      <property name="BorderStyle" visibility="published" read="FBorderStyle" write="SetBorderStyle" type="TFmxFormBorderStyle" default="2" hoisted="true" file="FMX.Forms.pas" line="1162"/>
      <property name="Caption" visibility="published" read="FCaption" write="SetCaption" stored="CaptionStore" type="string" default="0" hoisted="true" file="FMX.Forms.pas" line="1163"/>
      <property name="ClientHeight" visibility="published" read="GetClientHeight" write="SetClientHeight" type="Integer" hoisted="true" file="FMX.Forms.pas" line="1164"/>
      <property name="ClientWidth" visibility="published" read="GetClientWidth" write="SetClientWidth" type="Integer" hoisted="true" file="FMX.Forms.pas" line="1165"/>
      <property name="Cursor" visibility="published" read="FCursor" write="SetCursor" type="TCursor" default="0" hoisted="true" file="FMX.Forms.pas" line="1166"/>
      <property name="Fill" visibility="published" read="FFill" write="SetFill" type="TBrush" hoisted="true" file="FMX.Forms.pas" line="1167"/>
      <property name="Height" visibility="published" read="GetHeight" write="SetHeight" stored="False" type="Integer" hoisted="true" file="FMX.Forms.pas" line="1168"/>
      <property name="Left" visibility="published" read="GetLeft" write="SetLeft" type="Integer" hoisted="true" file="FMX.Forms.pas" line="1169"/>
      <property name="Padding" visibility="published" read="FPadding" write="SetPadding" type="TBounds" hoisted="true" file="FMX.Forms.pas" line="1170"/>
      <property name="Position" visibility="published" read="FPosition" write="SetPosition" type="TFormPosition" default="2" hoisted="true" file="FMX.Forms.pas" line="1171"/>
      <property name="Quality" visibility="published" read="FQuality" write="SetQuality" type="TCanvasQuality" default="0" hoisted="true" file="FMX.Forms.pas" line="1172"/>
      <property name="SystemStatusBar" visibility="published" read="FSystemStatusBar" write="SetSystemStatusBar" type="TFormSystemStatusBar" hoisted="true" file="FMX.Forms.pas" line="1173"/>
      <property name="StyleBook" visibility="published" read="FStyleBook" write="SetStyleBook" type="TStyleBook" hoisted="true" file="FMX.Forms.pas" line="1174"/>
      <property name="StyleLookup" visibility="published" read="FStyleLookup" write="SetStyleLookup" stored="IsStyleLookupStored" type="string" default="0" hoisted="true" file="FMX.Forms.pas" line="1175"/>
      <property name="Transparency" visibility="published" read="FTransparency" write="SetTransparency" type="Boolean" default="0" hoisted="true" file="FMX.Forms.pas" line="1176"/>
      <property name="Top" visibility="published" read="GetTop" write="SetTop" type="Integer" hoisted="true" file="FMX.Forms.pas" line="1177"/>
      <property name="FormStyle" visibility="published" read="FFormStyle" write="SetFormStyle" type="TFormStyle" default="0" hoisted="true" file="FMX.Forms.pas" line="1178"/>
      <property name="Visible" visibility="published" read="GetVisible" write="SetVisible" type="Boolean" default="0" hoisted="true" file="FMX.Forms.pas" line="1179"/>
      <property name="WindowState" visibility="published" read="FWindowState" write="SetWindowState" type="TWindowState" default="0" hoisted="true" file="FMX.Forms.pas" line="1180"/>
      <property name="Width" visibility="published" read="GetWidth" write="SetWidth" stored="False" type="Integer" hoisted="true" file="FMX.Forms.pas" line="1181"/>
      <property name="Constraints" visibility="published" read="FConstraints" write="SetConstraints" type="TSizeConstraints" hoisted="true" file="FMX.Forms.pas" line="1182"/>
      <property name="FormFactor" visibility="published" read="FFormFactor" write="FFormFactor" type="TFormFactor" hoisted="true" file="FMX.Forms.pas" line="1183"/>
      <property name="FormFamily" visibility="published" read="FFormFamily" write="SetFormFamily" type="string" default="0" hoisted="true" file="FMX.Forms.pas" line="1184"/>
      <property name="FullScreen" visibility="published" read="GetFullScreen" write="SetFullScreen" type="Boolean" default="0" hoisted="true" file="FMX.Forms.pas" line="1185"/>
      <property name="ShowFullScreenIcon" visibility="published" read="GetShowFullScreenIcon" write="SetShowFullScreenIcon" type="Boolean" default="0" hoisted="true" file="FMX.Forms.pas" line="1186"/>
      <property name="ShowHint" visibility="published" read="FShowHint" write="SetShowHint" type="Boolean" default="1" hoisted="true" file="FMX.Forms.pas" line="1187"/>
      <event name="OnActivate" visibility="published" read="FOnActivate" write="FOnActivate" type="TNotifyEvent" hoisted="true" file="FMX.Forms.pas" line="1189"/>
      <event name="OnCreate" visibility="published" read="FOnCreate" write="FOnCreate" type="TNotifyEvent" hoisted="true" file="FMX.Forms.pas" line="1190"/>
      <event name="OnClose" visibility="published" read="FOnClose" write="FOnClose" type="TCloseEvent" hoisted="true" file="FMX.Forms.pas" line="1191"/>
      <event name="OnCloseQuery" visibility="published" read="FOnCloseQuery" write="FOnCloseQuery" type="TCloseQueryEvent" hoisted="true" file="FMX.Forms.pas" line="1192"/>
      <event name="OnDeactivate" visibility="published" read="FOnDeactivate" write="FOnDeactivate" type="TNotifyEvent" hoisted="true" file="FMX.Forms.pas" line="1193"/>
      <event name="OnDestroy" visibility="published" read="FOnDestroy" write="FOnDestroy" type="TNotifyEvent" hoisted="true" file="FMX.Forms.pas" line="1194"/>
      <event name="OnKeyDown" visibility="published" read="FOnKeyDown" write="FOnKeyDown" type="TKeyEvent" hoisted="true" file="FMX.Forms.pas" line="1195"/>
      <event name="OnKeyUp" visibility="published" read="FOnKeyUp" write="FOnKeyUp" type="TKeyEvent" hoisted="true" file="FMX.Forms.pas" line="1196"/>
      <event name="OnMouseDown" visibility="published" read="FOnMouseDown" write="FOnMouseDown" type="TMouseEvent" hoisted="true" file="FMX.Forms.pas" line="1197"/>
      <event name="OnMouseMove" visibility="published" read="FOnMouseMove" write="FOnMouseMove" type="TMouseMoveEvent" hoisted="true" file="FMX.Forms.pas" line="1198"/>
      <event name="OnMouseUp" visibility="published" read="FOnMouseUp" write="FOnMouseUp" type="TMouseEvent" hoisted="true" file="FMX.Forms.pas" line="1199"/>
      <event name="OnMouseWheel" visibility="published" read="FOnMouseWheel" write="FOnMouseWheel" type="TMouseWheelEvent" hoisted="true" file="FMX.Forms.pas" line="1200"/>
      <event name="OnResize" visibility="published" read="FOnResize" write="FOnResize" type="TNotifyEvent" hoisted="true" file="FMX.Forms.pas" line="1201"/>
      <event name="OnConstrainedResize" visibility="published" read="FOnConstrainedResize" write="FOnConstrainedResize" type="TConstrainedResizeEvent" hoisted="true" file="FMX.Forms.pas" line="1202"/>
      <event name="OnPaint" visibility="published" read="FOnPaint" write="FOnPaint" type="TOnPaintEvent" hoisted="true" file="FMX.Forms.pas" line="1203"/>
      <event name="OnShow" visibility="published" read="FOnShow" write="FOnShow" type="TNotifyEvent" hoisted="true" file="FMX.Forms.pas" line="1204"/>
      <event name="OnHide" visibility="published" read="FOnHide" write="FOnHide" type="TNotifyEvent" hoisted="true" file="FMX.Forms.pas" line="1205"/>
      <event name="OnFocusChanged" visibility="published" read="FOnFocusChanged" write="FOnFocusChanged" type="TNotifyEvent" hoisted="true" file="FMX.Forms.pas" line="1206"/>
      <event name="OnVirtualKeyboardShown" visibility="published" read="FOnVirtualKeyboardShown" write="FOnVirtualKeyboardShown" type="TVirtualKeyboardEvent" hoisted="true" file="FMX.Forms.pas" line="1207"/>
      <event name="OnVirtualKeyboardHidden" visibility="published" read="FOnVirtualKeyboardHidden" write="FOnVirtualKeyboardHidden" type="TVirtualKeyboardEvent" hoisted="true" file="FMX.Forms.pas" line="1208"/>
      <property name="Touch" visibility="published" read="GetTouchManager" write="SetTouchManager" type="TTouchManager" hoisted="true" file="FMX.Forms.pas" line="1209"/>
      <event name="OnGesture" visibility="published" read="FOnGesture" write="FOnGesture" type="TGestureEvent" hoisted="true" file="FMX.Forms.pas" line="1210"/>
      <event name="OnSaveState" visibility="published" read="FOnSaveState" write="FOnSaveState" type="TNotifyEvent" hoisted="true" file="FMX.Forms.pas" line="1211"/>
      <event name="OnTap" visibility="published" read="FOnTap" write="FOnTap" type="TTapEvent" hoisted="true" file="FMX.Forms.pas" line="1212"/>
      <event name="OnTouch" visibility="published" read="FOnTouch" write="FOnTouch" type="TTouchEvent" hoisted="true" file="FMX.Forms.pas" line="1213"/>
    </members>
  <devnotes><summary>
TForm represents a standard FireMonkey application window (form).
When you create forms in the Form designer at design time, they are implemented as descendants of TForm. Forms can represent the application's main window, or dialog boxes or various preferences-related windows. A form can contain any other FireMonkey objects, such as TButton, TCheckBox,  TComboBox objects, and so on.
</summary></devnotes></class>
  <class name="TFrame" file="FMX.Forms.pas" line="1218">
    
    <interfaces>
      <implements name="IControl"/>
    </interfaces>
    <members>
      <field name="FInLoaded" type="Boolean" visibility="private" size="1" offset="904" file="FMX.Forms.pas" line="1220"/>
      <procedure name="Paint" visibility="protected" procflags="override" file="FMX.Forms.pas" line="1222">
      <devnotes><summary>
Renders the control's surface. 
FMX.Forms.TFrame.Paint inherits from FMX.Controls.TControl.Paint. All content below this line refers to FMX.Controls.TControl.Paint.
Renders the control's surface. 
The Paint method is called by DoPaint when a control is being painted by the PaintTo method. Before DoPaint, Painting is called. AfterPaint is called immediately after. 
FireMonkey internally calls Paint to paint the control when the window is being painted. You must not call Paint explicitly.
The base class TControl implements an empty Paint. The descendants of TControl override Paint to provide specific rendering of the respective controls.
For example, Paint methods in classes of the FMX.Objects unit draw and fill shapes using the properties defined in these classes. See the descriptions of these classes to find the properties of the respective shapes. 
</summary></devnotes></procedure>
      <procedure name="Loaded" visibility="protected" procflags="override" file="FMX.Forms.pas" line="1223">
      <devnotes><summary>
Initializes the component after the form file has been read into memory.
FMX.Forms.TFrame.Loaded inherits from FMX.Controls.TControl.Loaded. All content below this line refers to FMX.Controls.TControl.Loaded.
Initializes the component after the form file has been read into memory. 
Loaded inherits TComponent.Loaded, realigns the children, if any, and updates the tab list.
For details, see TComponent.Loaded.
</summary></devnotes></procedure>
      <procedure name="Resize" visibility="protected" procflags="override" file="FMX.Forms.pas" line="1224">
      <devnotes><summary>
OnResize event dispatcher. 
FMX.Forms.TFrame.Resize inherits from FMX.Controls.TControl.Resize. All content below this line refers to FMX.Controls.TControl.Resize.
OnResize event dispatcher. 
A control calls Resize when the dimensions of the control change.
Derived classes can override the protected Resize method to implement specific responses to control resizing.
</summary></devnotes></procedure>
      <procedure name="DoResized" visibility="protected" procflags="override" file="FMX.Forms.pas" line="1225">
      <devnotes><summary>


Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <function name="CheckHitTest" visibility="protected" procflags="override" file="FMX.Forms.pas" line="1226">
        <parameters>
          <parameter name="AHitTest" type="Boolean" paramflags="const"/>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>


Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></function>
      <function name="GetVisible" visibility="protected" file="FMX.Forms.pas" line="1228">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Getter function for the Visible property.
FMX.Forms.TFrame.GetVisible inherits from FMX.Controls.TControl.GetVisible. All content below this line refers to FMX.Controls.TControl.GetVisible.
Getter function for the Visible property.
</summary></devnotes></function>
      <constructor name="Create" visibility="public" file="FMX.Forms.pas" line="1230">
        <parameters>
          <parameter name="AOwner" type="TComponent"/>
        </parameters>
      <devnotes><summary>
Allocates memory and constructs a safely initialized instance of a component.
Allocates memory and constructs a safely initialized instance of a component.
Allocates memory and constructs a safely initialized instance of a component.
FMX.Forms.TFrame.Create inherits from System.Classes.TComponent.Create. All content below this line refers to System.Classes.TComponent.Create.
Allocates memory and constructs a safely initialized instance of a component.
All objects have a Create method that constructs the object. TComponent redefines Create so that, for components, Create also:

Establishes the relationship of a component and its Owner, as indicated by the AOwner parameter.
Sets the ComponentStyle property to csInheritable, meaning that the component can be inherited by a descendent form type.
It is not necessary to explicitly create components added in the Form Designer. These components are created automatically when the application is run, and they are destroyed when the application is closed.
For components created programmatically, that is, not created in the Form Designer, call Create and pass in an owner component as the AOwner parameter. The owner disposes of the component when it is destroyed. If the component is not owned, then use Free when it needs to be destroyed.

Tip:  When passing in Self as the Owner parameter, consider what Self references. If a component creates another component in one of its methods, then Self refers to the first component and not the component being created, which is then owned by the first component.
Note:  The TComponent constructor is virtual in part to allow polymorphic instantiation of class references. This is critical to the streaming system and to the Form Designer. Do not forget to use the override directive when declaring a new component's Create constructor.</summary></devnotes></constructor>
      <procedure name="AfterConstruction" visibility="public" procflags="override" file="FMX.Forms.pas" line="1231">
      <devnotes><summary>
Responds after the last constructor has executed.
FMX.Forms.TFrame.AfterConstruction inherits from System.TObject.AfterConstruction. All content below this line refers to System.TObject.AfterConstruction.
Responds after the last constructor has executed.
AfterConstruction is called automatically after the object's last constructor has executed. Do not call it explicitly in your applications. 
The AfterConstruction method implemented in TObject does nothing. Override this method when creating a class that performs an action after the object is created. For example, TCustomForm overrides AfterConstruction to generate an OnCreate event. 
</summary></devnotes></procedure>
      <procedure name="GetChildren" visibility="public" procflags="override" file="FMX.Forms.pas" line="1232">
        <parameters>
          <parameter name="Proc" type="TGetChildProc"/>
          <parameter name="Root" type="TComponent"/>
        </parameters>
      <devnotes><summary>


Enumerates all child components.
FMX.Forms.TFrame.GetChildren inherits from System.Classes.TComponent.GetChildren. All content below this line refers to System.Classes.TComponent.GetChildren.
Enumerates all child components.
GetChildren is used internally in the component streaming system. It is not necessary to call it directly. 
GetChildren expects a TGetChildProc routine that receives all enumerated components. 
Root represents the owner of the components that will be enumerated.
This method does nothing in TComponent and is expected to be overridden in descendants. 
</summary></devnotes></procedure>
      <function name="ShouldTestMouseHits" visibility="public" procflags="override" file="FMX.Forms.pas" line="1233">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Indicates whether a control should be ignored in ObjectAtPoint.
FMX.Forms.TFrame.ShouldTestMouseHits inherits from FMX.Controls.TControl.ShouldTestMouseHits. All content below this line refers to FMX.Controls.TControl.ShouldTestMouseHits.
Indicates whether a control should be ignored in ObjectAtPoint.
False if the control should be ignored in ObjectAtPoint. ShouldTestMouseHits normally returns the same value as the value of Visible property of the control.
TFrame overrides this method to allow itself to be painted in design time regardless of the value of its Visible property.

 See Also
FMX.Forms.TFrame
FMX.Controls.TControl.ObjectAtPoint
FMX.Controls.TControl.Visible

</summary></devnotes></function>
      <property name="Action" visibility="published" read="GetAction" write="SetAction" type="TBasicAction" hoisted="true" file="FMX.Forms.pas" line="1235"/>
      <property name="Align" visibility="published" read="FAlign" write="SetAlign" type="TAlignLayout" default="0" hoisted="true" file="FMX.Forms.pas" line="1236"/>
      <property name="ClipChildren" visibility="published" read="FClipChildren" write="SetClipChildren" type="Boolean" default="0" hoisted="true" file="FMX.Forms.pas" line="1237"/>
      <property name="ClipParent" visibility="published" read="FClipParent" write="FClipParent" type="Boolean" default="0" hoisted="true" file="FMX.Forms.pas" line="1238"/>
      <property name="Cursor" visibility="published" read="GetCursor" write="SetCursor" type="TCursor" default="0" hoisted="true" file="FMX.Forms.pas" line="1239"/>
      <property name="DragMode" visibility="published" read="GetDragMode" write="SetDragMode" type="TDragMode" default="0" hoisted="true" file="FMX.Forms.pas" line="1240"/>
      <property name="EnableDragHighlight" visibility="published" read="FEnableDragHighlight" write="FEnableDragHighlight" type="Boolean" default="1" hoisted="true" file="FMX.Forms.pas" line="1241"/>
      <property name="Enabled" visibility="published" read="FEnabled" write="SetEnabled" stored="EnabledStored" type="Boolean" default="1" hoisted="true" file="FMX.Forms.pas" line="1242"/>
      <property name="Locked" visibility="published" read="FLocked" write="SetLocked" type="Boolean" default="0" hoisted="true" file="FMX.Forms.pas" line="1243"/>
      <property name="Height" visibility="published" read="GetHeight" write="SetHeight" stored="False" type="Single" hoisted="true" file="FMX.Forms.pas" line="1244"/>
      <property name="Hint" visibility="published" read="FHint" write="SetHint" stored="HintStored" type="string" default="0" hoisted="true" file="FMX.Forms.pas" line="1245"/>
      <property name="HitTest" visibility="published" read="FHitTest" write="SetHitTest" type="Boolean" default="1" hoisted="true" file="FMX.Forms.pas" line="1246"/>
      <property name="Padding" visibility="published" read="GetPadding" write="SetPadding" type="TBounds" hoisted="true" file="FMX.Forms.pas" line="1247"/>
      <property name="Opacity" visibility="published" read="FOpacity" write="SetOpacity" stored="IsOpacityStored" type="Single" hoisted="true" file="FMX.Forms.pas" line="1248"/>
      <property name="Margins" visibility="published" read="GetMargins" write="SetMargins" type="TBounds" hoisted="true" file="FMX.Forms.pas" line="1249"/>
      <property name="PopupMenu" visibility="published" read="FPopupMenu" write="SetPopupMenu" stored="IsPopupMenuStored" type="TCustomPopupMenu" hoisted="true" file="FMX.Forms.pas" line="1250"/>
      <property name="Position" visibility="published" read="FPosition" write="SetPosition" stored="IsPositionStored" type="TPosition" hoisted="true" file="FMX.Forms.pas" line="1251"/>
      <property name="RotationAngle" visibility="published" read="GetRotationAngle" write="SetRotationAngle" type="Single" default="0" hoisted="true" file="FMX.Forms.pas" line="1252"/>
      <property name="RotationCenter" visibility="published" read="GetRotationCenter" write="SetRotationCenter" type="TPosition" hoisted="true" file="FMX.Forms.pas" line="1253"/>
      <property name="Scale" visibility="published" read="GetScale" write="SetScale" type="TPosition" hoisted="true" file="FMX.Forms.pas" line="1254"/>
      <property name="Size" visibility="published" read="FSize" write="SetSize" stored="IsSizeStored" type="TControlSize" hoisted="true" file="FMX.Forms.pas" line="1255"/>
      <property name="Visible" visibility="published" read="FVisible" write="SetVisible" stored="VisibleStored" type="Boolean" default="1" hoisted="true" file="FMX.Forms.pas" line="1256"/>
      <property name="Width" visibility="published" read="GetWidth" write="SetWidth" stored="False" type="Single" hoisted="true" file="FMX.Forms.pas" line="1257"/>
      <property name="TabStop" visibility="published" read="GetTabStop" write="SetTabStop" type="Boolean" default="1" hoisted="true" file="FMX.Forms.pas" line="1258"/>
      <property name="TabOrder" visibility="published" read="GetTabOrder" write="SetTabOrder" type="TTabOrder" default="-1" hoisted="true" file="FMX.Forms.pas" line="1259"/>
      <property name="ParentShowHint" visibility="published" read="FParentShowHint" write="SetParentShowHint" type="Boolean" default="1" hoisted="true" file="FMX.Forms.pas" line="1260"/>
      <property name="ShowHint" visibility="published" read="FShowHint" write="SetShowHint" stored="IsShowHintStored" type="Boolean" hoisted="true" file="FMX.Forms.pas" line="1261"/>
      <event name="OnDragEnter" visibility="published" read="FOnDragEnter" write="FOnDragEnter" type="TDragEnterEvent" hoisted="true" file="FMX.Forms.pas" line="1263"/>
      <event name="OnDragLeave" visibility="published" read="FOnDragLeave" write="FOnDragLeave" type="TNotifyEvent" hoisted="true" file="FMX.Forms.pas" line="1264"/>
      <event name="OnDragOver" visibility="published" read="FOnDragOver" write="FOnDragOver" type="TDragOverEvent" hoisted="true" file="FMX.Forms.pas" line="1265"/>
      <event name="OnDragDrop" visibility="published" read="FOnDragDrop" write="FOnDragDrop" type="TDragDropEvent" hoisted="true" file="FMX.Forms.pas" line="1266"/>
      <event name="OnDragEnd" visibility="published" read="FOnDragEnd" write="FOnDragEnd" type="TNotifyEvent" hoisted="true" file="FMX.Forms.pas" line="1267"/>
      <event name="OnKeyDown" visibility="published" read="FOnKeyDown" write="FOnKeyDown" type="TKeyEvent" hoisted="true" file="FMX.Forms.pas" line="1269"/>
      <event name="OnKeyUp" visibility="published" read="FOnKeyUp" write="FOnKeyUp" type="TKeyEvent" hoisted="true" file="FMX.Forms.pas" line="1270"/>
      <event name="OnCanFocus" visibility="published" read="FOnCanFocus" write="FOnCanFocus" type="TCanFocusEvent" hoisted="true" file="FMX.Forms.pas" line="1272"/>
      <event name="OnClick" visibility="published" read="FOnClick" write="SetOnClick" stored="OnClickStored" type="TNotifyEvent" hoisted="true" file="FMX.Forms.pas" line="1273"/>
      <event name="OnDblClick" visibility="published" read="FOnDblClick" write="FOnDblClick" type="TNotifyEvent" hoisted="true" file="FMX.Forms.pas" line="1274"/>
      <event name="OnEnter" visibility="published" read="FOnEnter" write="FOnEnter" type="TNotifyEvent" hoisted="true" file="FMX.Forms.pas" line="1276"/>
      <event name="OnExit" visibility="published" read="FOnExit" write="FOnExit" type="TNotifyEvent" hoisted="true" file="FMX.Forms.pas" line="1277"/>
      <event name="OnMouseDown" visibility="published" read="FOnMouseDown" write="FOnMouseDown" type="TMouseEvent" hoisted="true" file="FMX.Forms.pas" line="1278"/>
      <event name="OnMouseMove" visibility="published" read="FOnMouseMove" write="FOnMouseMove" type="TMouseMoveEvent" hoisted="true" file="FMX.Forms.pas" line="1279"/>
      <event name="OnMouseUp" visibility="published" read="FOnMouseUp" write="FOnMouseUp" type="TMouseEvent" hoisted="true" file="FMX.Forms.pas" line="1280"/>
      <event name="OnMouseWheel" visibility="published" read="FOnMouseWheel" write="FOnMouseWheel" type="TMouseWheelEvent" hoisted="true" file="FMX.Forms.pas" line="1281"/>
      <event name="OnMouseEnter" visibility="published" read="FOnMouseEnter" write="FOnMouseEnter" type="TNotifyEvent" hoisted="true" file="FMX.Forms.pas" line="1282"/>
      <event name="OnMouseLeave" visibility="published" read="FOnMouseLeave" write="FOnMouseLeave" type="TNotifyEvent" hoisted="true" file="FMX.Forms.pas" line="1283"/>
      <event name="OnPainting" visibility="published" read="FOnPainting" write="FOnPainting" type="TOnPaintEvent" hoisted="true" file="FMX.Forms.pas" line="1285"/>
      <event name="OnPaint" visibility="published" read="FOnPaint" write="FOnPaint" type="TOnPaintEvent" hoisted="true" file="FMX.Forms.pas" line="1286"/>
      <event name="OnResize" visibility="published" read="FOnResize" write="FOnResize" type="TNotifyEvent" hoisted="true" file="FMX.Forms.pas" line="1287"/>
      <event name="OnResized" visibility="published" read="FOnResized" write="FOnResized" type="TNotifyEvent" hoisted="true" file="FMX.Forms.pas" line="1288"/>
    </members>
  <devnotes><summary>
TFrame is a container for components; it can be nested within forms or other frames.
When you create frames, they are implemented as descendants of TFrame.
A frame, like a form, is a container for other components. It uses the same ownership mechanism as forms for automatic instantiation and destruction of the components on it, and the same parent-child relationships for synchronization of component properties. But frames can be nested within forms or other frames, and they can be saved on the Component palette for easy reuse. After a frame is created and saved, it continues to function as a unit and to inherit changes from the components (including other frames) it contains. Moreover, an embedded frame continues to inherit changes made to the frame from which it is derived.
</summary></devnotes></class>
  <class name="TScreen" file="FMX.Forms.pas" line="1293">
    
    <members>
      <field name="FManagingDataModules" type="Boolean" visibility="private" size="1" offset="64" file="FMX.Forms.pas" line="1295"/>
      <field name="FForms" type="TList&lt;System.Pointer&gt;" visibility="private" size="4" offset="68" file="FMX.Forms.pas" line="1296"/>
      <field name="FDataModules" type="TList&lt;System.Pointer&gt;" visibility="private" size="4" offset="72" file="FMX.Forms.pas" line="1297"/>
      <field name="FPopupForms" type="TList&lt;System.Pointer&gt;" visibility="private" size="4" offset="76" file="FMX.Forms.pas" line="1298"/>
      <field name="FSaveForm" type="TCommonCustomForm" visibility="private" size="4" offset="80" file="FMX.Forms.pas" line="1299"/>
      <field name="FMouseSvc" type="IFMXMouseService" visibility="private" size="4" offset="84" file="FMX.Forms.pas" line="1300"/>
      <field name="FMultiDisplaySvc" type="IInterface" visibility="private" size="4" offset="88" file="FMX.Forms.pas" line="1301"/>
      <field name="FPopupList" type="TList&lt;FMX.Forms.TCommonCustomForm&gt;" visibility="private" size="4" offset="92" file="FMX.Forms.pas" line="1302"/>
      <field name="FClosingPopupList" type="Boolean" visibility="private" size="1" offset="96" file="FMX.Forms.pas" line="1303"/>
      <procedure name="AddDataModule" visibility="private" file="FMX.Forms.pas" line="1304">
        <parameters>
          <parameter name="DataModule" type="TDataModule"/>
        </parameters>
      </procedure>
      <procedure name="AddForm" visibility="private" file="FMX.Forms.pas" line="1305">
        <parameters>
          <parameter name="AForm" type="TCommonCustomForm" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="GetForm" visibility="private" file="FMX.Forms.pas" line="1306">
        <parameters>
          <parameter name="Index" type="Integer"/>
          <retval type="TCommonCustomForm"/>
        </parameters>
      </function>
      <function name="GetFormCount" visibility="private" file="FMX.Forms.pas" line="1307">
        <parameters>
          <retval type="Integer"/>
        </parameters>
      </function>
      <procedure name="RemoveDataModule" visibility="private" file="FMX.Forms.pas" line="1308">
        <parameters>
          <parameter name="DataModule" type="TDataModule"/>
        </parameters>
      </procedure>
      <procedure name="RemoveForm" visibility="private" file="FMX.Forms.pas" line="1309">
        <parameters>
          <parameter name="AForm" type="TCommonCustomForm" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="GetDataModule" visibility="private" file="FMX.Forms.pas" line="1310">
        <parameters>
          <parameter name="Index" type="Integer"/>
          <retval type="TDataModule"/>
        </parameters>
      </function>
      <function name="GetDataModuleCount" visibility="private" file="FMX.Forms.pas" line="1311">
        <parameters>
          <retval type="Integer"/>
        </parameters>
      </function>
      <function name="GetPopupForms" visibility="private" file="FMX.Forms.pas" line="1312">
        <parameters>
          <parameter name="Index" type="Integer"/>
          <retval type="TCommonCustomForm"/>
        </parameters>
      </function>
      <function name="GetPopupFormCount" visibility="private" file="FMX.Forms.pas" line="1313">
        <parameters>
          <retval type="Integer"/>
        </parameters>
      </function>
      <function name="GetActiveForm" visibility="private" file="FMX.Forms.pas" line="1314">
        <parameters>
          <retval type="TCommonCustomForm"/>
        </parameters>
      </function>
      <procedure name="SetActiveForm" visibility="private" file="FMX.Forms.pas" line="1315">
        <parameters>
          <parameter name="Value" type="TCommonCustomForm" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="GetFocusControl" visibility="private" file="FMX.Forms.pas" line="1316">
        <parameters>
          <retval type="IControl"/>
        </parameters>
      </function>
      <function name="GetFocusObject" visibility="private" file="FMX.Forms.pas" line="1317">
        <parameters>
          <retval type="TFmxObject"/>
        </parameters>
      </function>
      <function name="GetDesktopRect" visibility="private" file="FMX.Forms.pas" line="1318">
        <parameters>
          <retval type="TRectF"/>
        </parameters>
      </function>
      <function name="GetWorkAreaRect" visibility="private" file="FMX.Forms.pas" line="1319">
        <parameters>
          <retval type="TRectF"/>
        </parameters>
      </function>
      <function name="GetDisplayCount" visibility="private" file="FMX.Forms.pas" line="1320">
        <parameters>
          <retval type="Integer"/>
        </parameters>
      </function>
      <function name="GetDisplay" visibility="private" file="FMX.Forms.pas" line="1321">
        <parameters>
          <parameter name="Index" type="Integer" paramflags="const"/>
          <retval type="TDisplay">
            <devnotes>
               <summary>Information about display.</summary>
            </devnotes>
          </retval>
        </parameters>
      </function>
      <function name="GetDesktopHeight" visibility="private" file="FMX.Forms.pas" line="1322">
        <parameters>
          <retval type="Single"/>
        </parameters>
      </function>
      <function name="GetDesktopLeft" visibility="private" file="FMX.Forms.pas" line="1323">
        <parameters>
          <retval type="Single"/>
        </parameters>
      </function>
      <function name="GetDesktopTop" visibility="private" file="FMX.Forms.pas" line="1324">
        <parameters>
          <retval type="Single"/>
        </parameters>
      </function>
      <function name="GetDesktopWidth" visibility="private" file="FMX.Forms.pas" line="1325">
        <parameters>
          <retval type="Single"/>
        </parameters>
      </function>
      <function name="GetWorkAreaHeight" visibility="private" file="FMX.Forms.pas" line="1326">
        <parameters>
          <retval type="Single"/>
        </parameters>
      </function>
      <function name="GetWorkAreaLeft" visibility="private" file="FMX.Forms.pas" line="1327">
        <parameters>
          <retval type="Single"/>
        </parameters>
      </function>
      <function name="GetWorkAreaTop" visibility="private" file="FMX.Forms.pas" line="1328">
        <parameters>
          <retval type="Single"/>
        </parameters>
      </function>
      <function name="GetWorkAreaWidth" visibility="private" file="FMX.Forms.pas" line="1329">
        <parameters>
          <retval type="Single"/>
        </parameters>
      </function>
      <function name="GetHeight" visibility="private" file="FMX.Forms.pas" line="1330">
        <parameters>
          <retval type="Single"/>
        </parameters>
      </function>
      <function name="GetWidth" visibility="private" file="FMX.Forms.pas" line="1331">
        <parameters>
          <retval type="Single"/>
        </parameters>
      </function>
      <property name="FocusObject" visibility="protected" read="GetFocusObject" type="TFmxObject" file="FMX.Forms.pas" line="1333"/>
      <procedure name="CloseFormList" visibility="protected" file="FMX.Forms.pas" line="1334">
        <parameters>
          <parameter name="List" type="TList&lt;FMX.Forms.TCommonCustomForm&gt;" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="CreatePopupList" visibility="protected" file="FMX.Forms.pas" line="1335">
        <parameters>
          <parameter name="SaveForm" type="TCommonCustomForm" paramflags="const"/>
          <retval type="TList&lt;FMX.Forms.TCommonCustomForm&gt;"/>
        </parameters>
      </function>
      <constructor name="Create" visibility="public" file="FMX.Forms.pas" line="1337">
        <parameters>
          <parameter name="AOwner" type="TComponent"/>
        </parameters>
      </constructor>
      <destructor name="Destroy" visibility="public" file="FMX.Forms.pas" line="1338">
        <parameters>
        </parameters>
      </destructor>
      <function name="IndexFormOfObject" visibility="public" file="FMX.Forms.pas" line="1339">
        <parameters>
          <parameter name="AObject" type="TFmxObject" paramflags="const"/>
          <parameter name="VisibleOnly" type="Boolean" paramflags="const">
            <value>
              True
            </value>
          </parameter>
          <retval type="Integer"/>
        </parameters>
      </function>
      <function name="NextActiveForm" visibility="public" file="FMX.Forms.pas" line="1340">
        <parameters>
          <parameter name="OldActiveForm" type="TCommonCustomForm" paramflags="const"/>
          <retval type="TCommonCustomForm"/>
        </parameters>
      </function>
      <function name="MousePos" visibility="public" file="FMX.Forms.pas" line="1341">
        <parameters>
          <retval type="TPointF"/>
        </parameters>
      </function>
      <function name="Size" visibility="public" file="FMX.Forms.pas" line="1343">
        <devnotes>
           <summary>The size of primary display.</summary>
        </devnotes>
        <parameters>
          <retval type="TSizeF"/>
        </parameters>
      </function>
      <property name="Height" visibility="public" read="GetHeight" type="Single" default="0" file="FMX.Forms.pas" line="1344"/>
      <property name="Width" visibility="public" read="GetWidth" type="Single" default="0" file="FMX.Forms.pas" line="1345"/>
      <function name="MultiDisplaySupported" visibility="public" file="FMX.Forms.pas" line="1346">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <procedure name="UpdateDisplayInformation" visibility="public" file="FMX.Forms.pas" line="1347">
      </procedure>
      <function name="GetDesktopCenterRect" visibility="public" file="FMX.Forms.pas" line="1350">
        <devnotes>
           <summary> Tries to return a rectangular having the specified Size and positioned in the center of the desktop.
           See also IFMXMultiDisplayService.GetDesktopCenterRect </summary>
        </devnotes>
        <parameters>
          <parameter name="Size" type="TSizeF" paramflags="const"/>
          <retval type="TRectF"/>
        </parameters>
      </function>
      <property name="DisplayCount" visibility="public" read="GetDisplayCount" type="Integer" file="FMX.Forms.pas" line="1351"/>
      <property name="Displays[const Index]" visibility="public" read="GetDisplay" type="TDisplay" file="FMX.Forms.pas" line="1352"/>
      <function name="DisplayFromPoint" visibility="public" procflags="overload" file="FMX.Forms.pas" line="1353">
        <parameters>
          <parameter name="Point" type="TPoint" paramflags="const"/>
          <retval type="TDisplay">
            <devnotes>
               <summary>Information about display.</summary>
            </devnotes>
          </retval>
        </parameters>
      </function>
      <function name="DisplayFromPoint" visibility="public" procflags="overload" file="FMX.Forms.pas" line="1354">
        <parameters>
          <parameter name="Point" type="TPointF" paramflags="const"/>
          <retval type="TDisplay">
            <devnotes>
               <summary>Information about display.</summary>
            </devnotes>
          </retval>
        </parameters>
      </function>
      <function name="DisplayFromRect" visibility="public" procflags="overload" file="FMX.Forms.pas" line="1355">
        <parameters>
          <parameter name="Rect" type="TRect" paramflags="const"/>
          <retval type="TDisplay">
            <devnotes>
               <summary>Information about display.</summary>
            </devnotes>
          </retval>
        </parameters>
      </function>
      <function name="DisplayFromRect" visibility="public" procflags="overload" file="FMX.Forms.pas" line="1356">
        <parameters>
          <parameter name="Rect" type="TRectF" paramflags="const"/>
          <retval type="TDisplay">
            <devnotes>
               <summary>Information about display.</summary>
            </devnotes>
          </retval>
        </parameters>
      </function>
      <function name="DisplayFromForm" visibility="public" procflags="overload" file="FMX.Forms.pas" line="1357">
        <parameters>
          <parameter name="Form" type="TCommonCustomForm" paramflags="const"/>
          <retval type="TDisplay">
            <devnotes>
               <summary>Information about display.</summary>
            </devnotes>
          </retval>
        </parameters>
      </function>
      <function name="DisplayFromForm" visibility="public" procflags="overload" file="FMX.Forms.pas" line="1358">
        <parameters>
          <parameter name="Form" type="TCommonCustomForm" paramflags="const"/>
          <parameter name="Point" type="TPoint" paramflags="const"/>
          <retval type="TDisplay">
            <devnotes>
               <summary>Information about display.</summary>
            </devnotes>
          </retval>
        </parameters>
      </function>
      <function name="DisplayFromForm" visibility="public" procflags="overload" file="FMX.Forms.pas" line="1359">
        <parameters>
          <parameter name="Form" type="TCommonCustomForm" paramflags="const"/>
          <parameter name="Point" type="TPointF" paramflags="const"/>
          <retval type="TDisplay">
            <devnotes>
               <summary>Information about display.</summary>
            </devnotes>
          </retval>
        </parameters>
      </function>
      <property name="DesktopRect" visibility="public" read="GetDesktopRect" type="TRectF" file="FMX.Forms.pas" line="1360"/>
      <property name="DesktopTop" visibility="public" read="GetDesktopTop" type="Single" default="0" file="FMX.Forms.pas" line="1361"/>
      <property name="DesktopLeft" visibility="public" read="GetDesktopLeft" type="Single" default="0" file="FMX.Forms.pas" line="1362"/>
      <property name="DesktopHeight" visibility="public" read="GetDesktopHeight" type="Single" default="0" file="FMX.Forms.pas" line="1363"/>
      <property name="DesktopWidth" visibility="public" read="GetDesktopWidth" type="Single" default="0" file="FMX.Forms.pas" line="1364"/>
      <property name="WorkAreaRect" visibility="public" read="GetWorkAreaRect" type="TRectF" file="FMX.Forms.pas" line="1365"/>
      <property name="WorkAreaHeight" visibility="public" read="GetWorkAreaHeight" type="Single" default="0" file="FMX.Forms.pas" line="1366"/>
      <property name="WorkAreaLeft" visibility="public" read="GetWorkAreaLeft" type="Single" default="0" file="FMX.Forms.pas" line="1367"/>
      <property name="WorkAreaTop" visibility="public" read="GetWorkAreaTop" type="Single" default="0" file="FMX.Forms.pas" line="1368"/>
      <property name="WorkAreaWidth" visibility="public" read="GetWorkAreaWidth" type="Single" default="0" file="FMX.Forms.pas" line="1369"/>
      <property name="FormCount" visibility="public" read="GetFormCount" type="Integer" file="FMX.Forms.pas" line="1371"/>
      <property name="Forms[Index]" visibility="public" read="GetForm" type="TCommonCustomForm" file="FMX.Forms.pas" line="1372"/>
      <property name="DataModuleCount" visibility="public" read="GetDataModuleCount" type="Integer" file="FMX.Forms.pas" line="1373"/>
      <property name="DataModules[Index]" visibility="public" read="GetDataModule" type="TDataModule" file="FMX.Forms.pas" line="1374"/>
      <property name="PopupFormCount" visibility="public" read="GetPopupFormCount" type="Integer" file="FMX.Forms.pas" line="1376"/>
      <property name="PopupForms[Index]" visibility="public" read="GetPopupForms" type="TCommonCustomForm" file="FMX.Forms.pas" line="1377"/>
      <function name="Contains" visibility="public" file="FMX.Forms.pas" line="1379">
        <parameters>
          <parameter name="AComponent" type="TComponent" paramflags="const"/>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <function name="IsParent" visibility="public" file="FMX.Forms.pas" line="1380">
        <parameters>
          <parameter name="AForm" type="TCommonCustomForm"/>
          <parameter name="AParent" type="TCommonCustomForm"/>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <function name="PrepareClosePopups" visibility="public" file="FMX.Forms.pas" line="1381">
        <parameters>
          <parameter name="SaveForm" type="TCommonCustomForm" paramflags="const"/>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <function name="ClosePopupForms" visibility="public" file="FMX.Forms.pas" line="1382">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <property name="ActiveForm" visibility="public" read="GetActiveForm" write="SetActiveForm" type="TCommonCustomForm" file="FMX.Forms.pas" line="1384"/>
      <property name="FocusControl" visibility="public" read="GetFocusControl" type="IControl" file="FMX.Forms.pas" line="1385"/>
      <function name="GetObjectByTarget" visibility="public" file="FMX.Forms.pas" line="1386">
        <parameters>
          <parameter name="Target" type="TObject" paramflags="const"/>
          <retval type="TFmxObject"/>
        </parameters>
      </function>
    </members>
  </class>
  <interface name="IDesignerForm" GUID="{5D785E12-F0A8-416B-AC6A-20747833CE5D}" ancestor="IInterface" file="FMX.Forms.pas" line="1390">
  </interface>
  <variable name="Screen" type="TScreen" file="FMX.Forms.pas" line="1395"/>
  <variable name="Application" type="TApplication" file="FMX.Forms.pas" line="1396"/>
  <function name="ApplicationState" visibility="public" file="FMX.Forms.pas" line="1433">
    <parameters>
      <retval type="TApplicationState"/>
    </parameters>
  </function>
  <procedure name="FinalizeForms" visibility="public" file="FMX.Forms.pas" line="8190">
  </procedure>
</namespace>