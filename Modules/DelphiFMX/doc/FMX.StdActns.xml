<?xml version="1.0" ?><namespace name="FMX.StdActns" platform="Win32">
  <const name="DefaultMaxValue" type="Comp" file="FMX.StdActns.pas" line="20">
    <value>
      100
    </value>
  </const>
  <class name="THintAction" file="FMX.StdActns.pas" line="25">
    
    <ancestor name="TCustomAction" namespace="FMX.ActnList">
      <methodref name="GetText" visibility="private" procflags="inline"/>
      <methodref name="SetText" visibility="private" procflags="inline"/>
      <methodref name="GetCustomActionList" visibility="private"/>
      <methodref name="SetCustomActionList" visibility="private"/>
      <methodref name="ReaderCaptionProc" visibility="private"/>
      <methodref name="WriterCaptionProc" visibility="private"/>
      <methodref name="ReaderImageIndexProc" visibility="private"/>
      <methodref name="WriterImageIndexProc" visibility="private"/>
      <methodref name="SetUnsupportedArchitectures" visibility="private"/>
      <methodref name="SetUnsupportedPlatforms" visibility="private"/>
      <methodref name="SetCustomText" visibility="private"/>
      <methodref name="SetHideIfUnsupportedInterface" visibility="private"/>
      <methodref name="UpdateSupported" visibility="protected"/>
      <methodref name="IsSupportedInterface" visibility="protected" procflags="virtual"/>
      <methodref name="CreateShortCutList" visibility="protected" procflags="override"/>
      <methodref name="DefineProperties" visibility="protected" procflags="override"/>
      <methodref name="SetTarget" visibility="protected" procflags="virtual"/>
      <methodref name="SetEnabled" visibility="protected" procflags="override"/>
      <methodref name="SetVisible" visibility="protected" procflags="override"/>
      <methodref name="Loaded" visibility="protected" procflags="override"/>
      <methodref name="CustomTextChanged" visibility="protected" procflags="virtual"/>
      <propertyref name="CustomText" visibility="protected"/>
      <methodref name="Create" visibility="public" procflags="constructor override"/>
      <methodref name="Execute" visibility="public" procflags="override"/>
      <methodref name="Update" visibility="public" procflags="override"/>
      <methodref name="IsDialogKey" visibility="public"/>
      <propertyref name="Text" visibility="public"/>
      <propertyref name="Caption" visibility="public"/>
      <propertyref name="ActionList" visibility="public"/>
      <propertyref name="HideIfUnsupportedInterface" visibility="public"/>
      <propertyref name="ShortCutPressed" visibility="public"/>
      <propertyref name="Target" visibility="public"/>
      <propertyref name="UnsupportedArchitectures" visibility="public"/>
      <propertyref name="UnsupportedPlatforms" visibility="public"/>
      <propertyref name="Supported" visibility="public"/>
      <ancestor name="TContainedAction" namespace="System.Actions">
        <methodref name="GetIndex" visibility="private">
        </methodref>
        <methodref name="SetIndex" visibility="private">
        </methodref>
        <methodref name="SetCategory" visibility="private">
        </methodref>
        <methodref name="GetSecondaryShortCuts" visibility="private">
        </methodref>
        <methodref name="SetSecondaryShortCuts" visibility="private">
        </methodref>
        <methodref name="IsSecondaryShortCutsStored" visibility="private">
        </methodref>
        <methodref name="SetActionList" visibility="private">
        </methodref>
        <methodref name="ReadState" visibility="protected" procflags="override">
        </methodref>
        <methodref name="SecondaryShortCutsCreated" visibility="protected">
        </methodref>
        <methodref name="CreateShortCutList" visibility="protected" procflags="virtual">
        </methodref>
        <propertyref name="SavedEnabledState" visibility="protected">
        </propertyref>
        <methodref name="AssignTo" visibility="protected" procflags="override">
        </methodref>
        <methodref name="HandleShortCut" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="SetAutoCheck" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="SetCaption" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="SetName" visibility="protected" procflags="override">
        </methodref>
        <methodref name="SetChecked" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="SetEnabled" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="SetGroupIndex" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="SetHelpContext" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="SetHelpKeyword" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="SetHelpType" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="SetHint" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="SetVisible" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="SetShortCut" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="SetImageIndex" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="SetStatusAction" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="Create" visibility="public" procflags="constructor override">
        </methodref>
        <methodref name="Destroy" visibility="public" procflags="destructor override">
        </methodref>
        <methodref name="GetParentComponent" visibility="public" procflags="override">
        </methodref>
        <methodref name="HasParent" visibility="public" procflags="override">
        </methodref>
        <methodref name="SetParentComponent" visibility="public" procflags="override">
        </methodref>
        <propertyref name="ActionList" visibility="public">
        </propertyref>
        <methodref name="Suspended" visibility="public" procflags="override">
        </methodref>
        <propertyref name="Index" visibility="public">
        </propertyref>
        <propertyref name="DisableIfNoHandler" visibility="public">
        </propertyref>
        <propertyref name="AutoCheck" visibility="public">
        </propertyref>
        <propertyref name="Caption" visibility="public">
        </propertyref>
        <propertyref name="Checked" visibility="public">
        </propertyref>
        <propertyref name="Enabled" visibility="public">
        </propertyref>
        <propertyref name="GroupIndex" visibility="public">
        </propertyref>
        <propertyref name="HelpContext" visibility="public">
        </propertyref>
        <propertyref name="HelpKeyword" visibility="public">
        </propertyref>
        <propertyref name="HelpType" visibility="public">
        </propertyref>
        <propertyref name="Hint" visibility="public">
        </propertyref>
        <propertyref name="Visible" visibility="public">
        </propertyref>
        <propertyref name="ShortCut" visibility="public">
        </propertyref>
        <propertyref name="SecondaryShortCuts" visibility="public">
        </propertyref>
        <propertyref name="ImageIndex" visibility="public">
        </propertyref>
        <methodref name="DoHint" visibility="public" procflags="dynamic">
        </methodref>
        <eventref name="OnHint" visibility="public">
        </eventref>
        <propertyref name="StatusAction" visibility="public">
        </propertyref>
        <propertyref name="Category" visibility="published">
        </propertyref>
        <ancestor name="TBasicAction" namespace="System.Classes">
          <methodref name="GetClientCount" visibility="private">
          </methodref>
          <methodref name="GetClient" visibility="private">
          </methodref>
          <methodref name="SetActionComponent" visibility="private">
          </methodref>
          <methodref name="Change" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="SetOnExecute" visibility="protected" procflags="virtual">
          </methodref>
          <eventref name="OnChange" visibility="protected">
          </eventref>
          <methodref name="Notification" visibility="protected" procflags="override">
          </methodref>
          <propertyref name="ClientCount" visibility="protected">
          </propertyref>
          <propertyref name="Clients" visibility="protected">
          </propertyref>
          <methodref name="RegisterChanges" visibility="protected">
          </methodref>
          <methodref name="UnRegisterChanges" visibility="protected">
          </methodref>
          <methodref name="Create" visibility="public" procflags="constructor override">
          </methodref>
          <methodref name="Destroy" visibility="public" procflags="destructor override">
          </methodref>
          <methodref name="Suspended" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="HandlesTarget" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="UpdateTarget" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="ExecuteTarget" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="Execute" visibility="public" procflags="dynamic">
          </methodref>
          <methodref name="Update" visibility="public" procflags="virtual">
          </methodref>
          <propertyref name="ActionComponent" visibility="public">
          </propertyref>
          <eventref name="OnExecute" visibility="public">
          </eventref>
          <eventref name="OnUpdate" visibility="public">
          </eventref>
          <ancestor name="TComponent" namespace="System.Classes">
            <interfaces>
              <implements name="IInterfaceComponentReference"/>
              <implements name="IInterface"/>
            </interfaces>
            <methodref name="GetComObject" visibility="private">
            </methodref>
            <methodref name="GetComponent" visibility="private">
            </methodref>
            <methodref name="GetComponentCount" visibility="private">
            </methodref>
            <methodref name="GetComponentIndex" visibility="private">
            </methodref>
            <methodref name="Insert" visibility="private">
            </methodref>
            <methodref name="ReadLeft" visibility="private">
            </methodref>
            <methodref name="ReadTop" visibility="private">
            </methodref>
            <methodref name="Remove" visibility="private">
            </methodref>
            <methodref name="RemoveNotification" visibility="private">
            </methodref>
            <methodref name="SetComponentIndex" visibility="private">
            </methodref>
            <methodref name="SetReference" visibility="private">
            </methodref>
            <methodref name="WriteLeft" visibility="private">
            </methodref>
            <methodref name="WriteTop" visibility="private">
            </methodref>
            <methodref name="IntfGetComponent" visibility="private">
            </methodref>
            <methodref name="DoGetDeltaStreams" visibility="private">
            </methodref>
            <methodref name="ReadDeltaStream" visibility="private">
            </methodref>
            <methodref name="ReadDeltaState" visibility="private">
            </methodref>
            <methodref name="FindSortedComponent" visibility="private">
            </methodref>
            <methodref name="AddSortedComponent" visibility="private">
            </methodref>
            <methodref name="RemoveSortedComponent" visibility="private" procflags="inline">
            </methodref>
            <methodref name="Create@" visibility="class private" procflags="class constructor noself">
            </methodref>
            <methodref name="AsyncSchedule" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="ChangeName" visibility="protected">
            </methodref>
            <methodref name="DefineProperties" visibility="protected" procflags="override">
            </methodref>
            <methodref name="GetChildren" visibility="protected" procflags="dynamic">
            </methodref>
            <methodref name="GetChildOwner" visibility="protected" procflags="dynamic">
            </methodref>
            <methodref name="GetChildParent" visibility="protected" procflags="dynamic">
            </methodref>
            <methodref name="GetOwner" visibility="protected" procflags="override">
            </methodref>
            <methodref name="Loaded" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="Notification" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="GetDeltaStreams" visibility="protected" procflags="dynamic">
            </methodref>
            <methodref name="ReadState" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="CanObserve" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="ObserverAdded" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="GetObservers" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="SetAncestor" visibility="protected">
            </methodref>
            <methodref name="SetDesigning" visibility="protected">
            </methodref>
            <methodref name="SetInline" visibility="protected">
            </methodref>
            <methodref name="SetDesignInstance" visibility="protected">
            </methodref>
            <methodref name="SetName" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="SetChildOrder" visibility="protected" procflags="dynamic">
            </methodref>
            <methodref name="SetParentComponent" visibility="protected" procflags="dynamic">
            </methodref>
            <methodref name="Updating" visibility="protected" procflags="dynamic">
            </methodref>
            <methodref name="Updated" visibility="protected" procflags="dynamic">
            </methodref>
            <methodref name="UpdateRegistry" visibility="protected" procflags="class virtual">
            </methodref>
            <methodref name="ValidateRename" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="ValidateContainer" visibility="protected" procflags="dynamic">
            </methodref>
            <methodref name="ValidateInsert" visibility="protected" procflags="dynamic">
            </methodref>
            <methodref name="WriteState" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="RemoveFreeNotifications" visibility="protected">
            </methodref>
            <methodref name="QueryInterface" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="_AddRef" visibility="protected">
            </methodref>
            <methodref name="_Release" visibility="protected">
            </methodref>
            <methodref name="GetTypeInfoCount" visibility="protected">
            </methodref>
            <methodref name="GetTypeInfo" visibility="protected">
            </methodref>
            <methodref name="GetIDsOfNames" visibility="protected">
            </methodref>
            <methodref name="Invoke" visibility="protected">
            </methodref>
            <eventref name="OnGetDeltaStreams" visibility="protected">
            </eventref>
            <methodref name="Create" visibility="public" procflags="constructor virtual">
            </methodref>
            <methodref name="Destroy" visibility="public" procflags="destructor override">
            </methodref>
            <methodref name="BeforeDestruction" visibility="public" procflags="override">
            </methodref>
            <methodref name="BeginInvoke" visibility="public" procflags="overload">
            </methodref>
            <methodref name="BeginInvoke" visibility="public" procflags="overload">
            </methodref>
            <methodref name="BeginInvoke" visibility="public" procflags="overload">
            </methodref>
            <methodref name="BeginInvoke" visibility="public" procflags="overload">
            </methodref>
            <methodref name="BeginInvoke" visibility="public" procflags="overload">
            </methodref>
            <methodref name="BeginInvoke" visibility="public" procflags="overload">
            </methodref>
            <methodref name="BeginInvoke" visibility="public" procflags="overload">
            </methodref>
            <methodref name="BeginInvoke" visibility="public" procflags="overload">
            </methodref>
            <methodref name="EndInvoke" visibility="public" procflags="overload">
            </methodref>
            <methodref name="EndInvoke" visibility="public" procflags="overload">
            </methodref>
            <methodref name="EndFunctionInvoke" visibility="public">
            </methodref>
            <methodref name="DestroyComponents" visibility="public">
            </methodref>
            <methodref name="Destroying" visibility="public">
            </methodref>
            <methodref name="ExecuteAction" visibility="public" procflags="dynamic">
            </methodref>
            <methodref name="FindComponent" visibility="public">
            </methodref>
            <methodref name="FreeNotification" visibility="public">
            </methodref>
            <methodref name="RemoveFreeNotification" visibility="public">
            </methodref>
            <methodref name="FreeOnRelease" visibility="public">
            </methodref>
            <methodref name="GetEnumerator" visibility="public" procflags="inline">
            </methodref>
            <methodref name="GetParentComponent" visibility="public" procflags="dynamic">
            </methodref>
            <methodref name="GetNamePath" visibility="public" procflags="override">
            </methodref>
            <methodref name="HasParent" visibility="public" procflags="dynamic">
            </methodref>
            <methodref name="InsertComponent" visibility="public">
            </methodref>
            <methodref name="RemoveComponent" visibility="public">
            </methodref>
            <methodref name="SetSubComponent" visibility="public">
            </methodref>
            <methodref name="SafeCallException" visibility="public" procflags="override">
            </methodref>
            <methodref name="UpdateAction" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="IsImplementorOf" visibility="public">
            </methodref>
            <methodref name="ReferenceInterface" visibility="public">
            </methodref>
            <propertyref name="ComObject" visibility="public">
            </propertyref>
            <propertyref name="Components" visibility="public">
            </propertyref>
            <propertyref name="ComponentCount" visibility="public">
            </propertyref>
            <propertyref name="ComponentIndex" visibility="public">
            </propertyref>
            <propertyref name="ComponentState" visibility="public">
            </propertyref>
            <propertyref name="ComponentStyle" visibility="public">
            </propertyref>
            <propertyref name="DesignInfo" visibility="public">
            </propertyref>
            <propertyref name="Owner" visibility="public">
            </propertyref>
            <propertyref name="VCLComObject" visibility="public">
            </propertyref>
            <propertyref name="Observers" visibility="public">
            </propertyref>
            <propertyref name="Name" visibility="published">
            </propertyref>
            <propertyref name="Tag" visibility="published">
            </propertyref>
            <ancestor name="TPersistent" namespace="System.Classes">
              <methodref name="AssignError" visibility="private">
              </methodref>
              <methodref name="AssignTo" visibility="protected" procflags="virtual">
              </methodref>
              <methodref name="DefineProperties" visibility="protected" procflags="virtual">
              </methodref>
              <methodref name="GetOwner" visibility="protected" procflags="dynamic">
              </methodref>
              <methodref name="Destroy" visibility="public" procflags="destructor override">
              </methodref>
              <methodref name="Assign" visibility="public" procflags="virtual">
              </methodref>
              <methodref name="GetNamePath" visibility="public" procflags="dynamic">
              </methodref>
              <ancestor name="TObject" namespace="System">
                <methodref name="Create" visibility="public" procflags="constructor">
                </methodref>
                <methodref name="Free" visibility="public">
                </methodref>
                <methodref name="DisposeOf" visibility="public" procflags="inline">
                </methodref>
                <methodref name="InitInstance" visibility="public" procflags="class">
                </methodref>
                <methodref name="CleanupInstance" visibility="public">
                </methodref>
                <methodref name="ClassType" visibility="public" procflags="inline">
                </methodref>
                <methodref name="ClassName" visibility="public" procflags="class">
                </methodref>
                <methodref name="ClassNameIs" visibility="public" procflags="class">
                </methodref>
                <methodref name="ClassParent" visibility="public" procflags="class inline">
                </methodref>
                <methodref name="ClassInfo" visibility="public" procflags="class inline">
                </methodref>
                <methodref name="InstanceSize" visibility="public" procflags="class inline">
                </methodref>
                <methodref name="InheritsFrom" visibility="public" procflags="class">
                </methodref>
                <methodref name="MethodAddress" visibility="public" procflags="class overload">
                </methodref>
                <methodref name="MethodAddress" visibility="public" procflags="class overload">
                </methodref>
                <methodref name="MethodName" visibility="public" procflags="class">
                </methodref>
                <methodref name="QualifiedClassName" visibility="public" procflags="class">
                </methodref>
                <methodref name="FieldAddress" visibility="public" procflags="overload">
                </methodref>
                <methodref name="FieldAddress" visibility="public" procflags="overload">
                </methodref>
                <methodref name="GetInterface" visibility="public">
                </methodref>
                <methodref name="GetInterfaceEntry" visibility="public" procflags="class">
                </methodref>
                <methodref name="GetInterfaceTable" visibility="public" procflags="class inline">
                </methodref>
                <methodref name="UnitName" visibility="public" procflags="class">
                </methodref>
                <methodref name="UnitScope" visibility="public" procflags="class">
                </methodref>
                <methodref name="Equals" visibility="public" procflags="virtual">
                </methodref>
                <methodref name="GetHashCode" visibility="public" procflags="virtual">
                </methodref>
                <methodref name="ToString" visibility="public" procflags="virtual">
                </methodref>
                <methodref name="SafeCallException" visibility="public" procflags="virtual">
                </methodref>
                <methodref name="AfterConstruction" visibility="public" procflags="virtual">
                </methodref>
                <methodref name="BeforeDestruction" visibility="public" procflags="virtual">
                </methodref>
                <methodref name="Dispatch" visibility="public" procflags="virtual">
                </methodref>
                <methodref name="DefaultHandler" visibility="public" procflags="virtual">
                </methodref>
                <methodref name="NewInstance" visibility="public" procflags="class virtual">
                </methodref>
                <methodref name="FreeInstance" visibility="public" procflags="virtual">
                </methodref>
                <methodref name="Destroy" visibility="public" procflags="destructor virtual">
                </methodref>
                <methodref name="GetDisposed" visibility="protected" procflags="inline">
                </methodref>
                <methodref name="CheckDisposed" visibility="protected" procflags="inline">
                </methodref>
                <propertyref name="Disposed" visibility="protected">
                </propertyref>
              </ancestor>
            </ancestor>
          </ancestor>
        </ancestor>
      </ancestor>
    </ancestor>
    <members>
      <constructor name="Create" visibility="public" file="FMX.StdActns.pas" line="28">
        <devnotes><summary>
Instantiates and initializes a FireMonkey TCustomAction object.
FMX.StdActns.THintAction.Create inherits from FMX.ActnList.TCustomAction.Create. All content below this line refers to FMX.ActnList.TCustomAction.Create.
Instantiates and initializes a FireMonkey TCustomAction object.
Applications do not need to call the constructor directly. Actions are created automatically when you add them to an action list component using New Action in the Action List editor at design time.
If you want to create an action at run time, assign a TActionList component to its ActionList property after calling Create.
AOwner is the component that is responsible for freeing the action. It becomes the value of the Owner property.
Create calls an inherited System.Actions.TContainedAction.Create constructor and then initializes the Supported property with True .
</summary></devnotes>
        <parameters>
          <parameter name="AOwner" type="TComponent"/>
        </parameters>
      </constructor>
      <function name="Execute" visibility="public" procflags="override" file="FMX.StdActns.pas" line="30">
        <devnotes><summary>
Responds when a client control &quot;fires&quot;.
FMX.StdActns.THintAction.Execute inherits from FMX.ActnList.TCustomAction.Execute. All content below this line refers to FMX.ActnList.TCustomAction.Execute.
Responds when a client control &quot;fires&quot;.
Execute is called automatically when a client control &quot;fires&quot; (for example, when the user clicks a button or selects a menu item).
Execute first ensures that the action is updated. Then Execute calls the inherited System.Classes.TBasicAction.Execute method. System.Classes.TBasicAction.Execute calls the OnExecute event handler, if one is assigned. Execute returns True if an event handler is called and the action is Enabled. Otherwise, Execute returns False.
</summary></devnotes>
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <property name="Hint" visibility="published" read="FHint" write="SetHint" type="string" default="0" hoisted="true" file="FMX.StdActns.pas" line="32"/>
    </members>
  </class>
  <class name="TSysCommonAction" file="FMX.StdActns.pas" line="35">
    
    <members>
      <field name="FOnCanActionExec" type="TCanActionExecEvent" visibility="private" size="8" offset="184" file="FMX.StdActns.pas" line="37"/>
      <function name="GetDefaultText" visibility="protected" file="FMX.StdActns.pas" line="39">
        <parameters>
          <parameter name="Template" type="string" paramflags="const"/>
          <retval type="string"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></function>
      <function name="CanActionExec" visibility="protected" procflags="virtual" file="FMX.StdActns.pas" line="40">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></function>
      <function name="Update" visibility="public" procflags="override" file="FMX.StdActns.pas" line="42">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>


Provides an opportunity to execute centralized code when an application is idle.
FMX.StdActns.TSysCommonAction.Update inherits from System.Classes.TBasicAction.Update. All content below this line refers to System.Classes.TBasicAction.Update.
Provides an opportunity to execute centralized code when an application is idle.
Update triggers the OnUpdate event handler. Update returns True if an event handler was found, False otherwise. When the application is idle, the OnUpdate event occurs for every action. This provides an opportunity for applications to execute centralized code for enabling and disabling, checking and unchecking, and so on.
</summary></devnotes></function>
      <property name="CustomText" visibility="published" read="FCustomText" write="SetCustomText" type="string" default="0" hoisted="true" file="FMX.StdActns.pas" line="44"/>
      <property name="Enabled" visibility="published" read="FEnabled" write="SetEnabled" type="Boolean" default="1" hoisted="true" file="FMX.StdActns.pas" line="45"/>
      <property name="HelpContext" visibility="published" read="FHelpContext" write="SetHelpContext" type="THelpContext" default="0" hoisted="true" file="FMX.StdActns.pas" line="46"/>
      <property name="HelpKeyword" visibility="published" read="FHelpKeyword" write="SetHelpKeyword" type="string" default="0" hoisted="true" file="FMX.StdActns.pas" line="47"/>
      <property name="HelpType" visibility="published" read="FHelpType" write="SetHelpType" type="THelpType" default="0" hoisted="true" file="FMX.StdActns.pas" line="48"/>
      <property name="Hint" visibility="published" read="FHint" write="SetHint" type="string" default="0" hoisted="true" file="FMX.StdActns.pas" line="49"/>
      <property name="ImageIndex" visibility="published" read="FImageIndex" write="SetImageIndex" type="TImageIndex" default="-1" hoisted="true" file="FMX.StdActns.pas" line="50"/>
      <property name="ShortCut" visibility="published" read="FShortCut" write="SetShortCut" type="TShortCut" default="0" hoisted="true" file="FMX.StdActns.pas" line="51"/>
      <property name="SecondaryShortCuts" visibility="published" read="GetSecondaryShortCuts" write="SetSecondaryShortCuts" stored="IsSecondaryShortCutsStored" type="TCustomShortCutList" hoisted="true" file="FMX.StdActns.pas" line="52"/>
      <property name="Visible" visibility="published" read="FVisible" write="SetVisible" type="Boolean" default="1" hoisted="true" file="FMX.StdActns.pas" line="53"/>
      <property name="UnsupportedArchitectures" visibility="published" read="FUnsupportedArchitectures" write="SetUnsupportedArchitectures" type="TArchitectures" default="0" hoisted="true" file="FMX.StdActns.pas" line="54"/>
      <event name="OnCanActionExec" visibility="published" read="FOnCanActionExec" write="FOnCanActionExec" type="TCanActionExecEvent" file="FMX.StdActns.pas" line="55"><devnotes><summary>
The event handler of this event can be used for confirmation that the user really wants to accomplish an action.
In descendant classes, the OnCanActionExec event handler can be used to get the user confirmation about executing the corresponding action. For example, in TFileExit, the event handler of this event can be used for confirmation that the user really wants to close an application. You can analyze the value of the ShortCutPressed property to define whether the event is activated by pressing a keyboard key or by mouse clicking.
</summary></devnotes></event>
      <event name="OnUpdate" visibility="published" read="FOnUpdate" write="FOnUpdate" type="TNotifyEvent" hoisted="true" file="FMX.StdActns.pas" line="56"/>
      <event name="OnHint" visibility="published" read="FOnHint" write="FOnHint" type="THintEvent" hoisted="true" file="FMX.StdActns.pas" line="57"/>
    </members>
  <devnotes><summary>
A base class for standard actions that provides system functionality.
TSysCommonAction extends the TCustomAction class redeclaring properties and events, used in system actions, with the published visibility. 
These are the following: CustomText,  Enabled,  HelpContext,  HelpKeyword,  HelpType,  Hint,  SecondaryShortCuts,  ShortCut,  Visible,  UnsupportedArchitectures,  OnCanActionExec,  OnUpdate.
The published scope of properties and events provides the possibility to use the Object Inspector for editing values of these properties and defining event handlers at design time.
Standard actions descending from TSysCommonAction are the following:

TFileExit
TWindowClose
TFileHideApp
TFileHideAppOthers.</summary></devnotes></class>
  <class name="TFileExit" file="FMX.StdActns.pas" line="60">
    
    <members>
      <function name="IsSupportedInterface" visibility="protected" procflags="override" file="FMX.StdActns.pas" line="62">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Returns True if this action can be realized on the current platform.
FMX.StdActns.TFileExit.IsSupportedInterface inherits from FMX.ActnList.TCustomAction.IsSupportedInterface. All content below this line refers to FMX.ActnList.TCustomAction.IsSupportedInterface.
Returns True if this action can be realized on the current platform.
As implemented in TCustomAction, IsSupportedInterface always returns True. 
IsSupportedInterface is virtual and can be overridden in descendent classes.
</summary></devnotes></function>
      <constructor name="Create" visibility="public" file="FMX.StdActns.pas" line="64">
        <parameters>
          <parameter name="AOwner" type="TComponent"/>
        </parameters>
      <devnotes><summary>
Instantiates and initializes a FireMonkey TCustomAction object.
FMX.StdActns.TFileExit.Create inherits from FMX.ActnList.TCustomAction.Create. All content below this line refers to FMX.ActnList.TCustomAction.Create.
Instantiates and initializes a FireMonkey TCustomAction object.
Applications do not need to call the constructor directly. Actions are created automatically when you add them to an action list component using New Action in the Action List editor at design time.
If you want to create an action at run time, assign a TActionList component to its ActionList property after calling Create.
AOwner is the component that is responsible for freeing the action. It becomes the value of the Owner property.
Create calls an inherited System.Actions.TContainedAction.Create constructor and then initializes the Supported property with True .
</summary></devnotes></constructor>
      <function name="HandlesTarget" visibility="public" procflags="override" file="FMX.StdActns.pas" line="65">
        <parameters>
          <parameter name="Target" type="TObject"/>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Introduces an interface for verifying that the type and state of a target component or control are appropriate for the action.
FMX.StdActns.TFileExit.HandlesTarget inherits from System.Classes.TBasicAction.HandlesTarget. All content below this line refers to System.Classes.TBasicAction.HandlesTarget.
Introduces an interface for verifying that the type and state of a target component or control are appropriate for the action.
HandlesTarget does nothing in TBasicAction. HandlesTarget was introduced in TBasicAction so that descendants can override it to check the type and state of a target. HandlesTarget can verify any information about a target that is relevant for the action. HandlesTarget returns True if the target meets the specified criteria, False otherwise.
</summary></devnotes></function>
      <procedure name="ExecuteTarget" visibility="public" procflags="override" file="FMX.StdActns.pas" line="66">
        <parameters>
          <parameter name="Target" type="TObject"/>
        </parameters>
      <devnotes><summary>
Introduces an interface for invoking an action on a target client component or control.
FMX.StdActns.TFileExit.ExecuteTarget inherits from System.Classes.TBasicAction.ExecuteTarget. All content below this line refers to System.Classes.TBasicAction.ExecuteTarget.
Introduces an interface for invoking an action on a target client component or control.
ExecuteTarget does nothing in TBasicAction. ExecuteTarget was introduced in TBasicAction so that descendants can override it to initiate the action on the target. For example, an edit action that performs copying might copy the contents of an edit control to the clipboard.
</summary></devnotes></procedure>
      <procedure name="CustomTextChanged" visibility="public" procflags="override" file="FMX.StdActns.pas" line="67">
      <devnotes><summary>
Introduces an interface for a function that is called when the CustomText property for the action changes.
FMX.StdActns.TFileExit.CustomTextChanged inherits from FMX.ActnList.TCustomAction.CustomTextChanged. All content below this line refers to FMX.ActnList.TCustomAction.CustomTextChanged.
Introduces an interface for a function that is called when the CustomText property for the action changes.
As implemented in TCustomAction, CustomTextChanged does nothing. 
Descendant classes can override CustomTextChanged to provide business functionality.
The announced purpose of this method is to update the Text property when the CustomText property is changed.  
</summary></devnotes></procedure>
      <property name="ShortCut" visibility="published" read="FShortCut" write="SetShortCut" type="TShortCut" default="4177" hoisted="true" file="FMX.StdActns.pas" line="69"/>
      <property name="UnsupportedPlatforms" visibility="published" read="FUnsupportedPlatforms" write="SetUnsupportedPlatforms" type="TPlatforms" default="4" hoisted="true" file="FMX.StdActns.pas" line="70"/>
    </members>
  <devnotes><summary>
The standard action for shutting down the current application.
Add TFileExit to an action list to let users shut down the application using a menu, control, toolbar button, or shortcut. Clients (controls, menu commands, toolbar buttons) linked to this action cause the application to shut down. 
TFileExit is not immediate, it calls the method like Terminate that closes the main form. 
The default ShortCut for TFileExit is CMD+Q.
</summary></devnotes></class>
  <class name="TWindowClose" file="FMX.StdActns.pas" line="73">
    
    <members>
      <function name="HandlesTarget" visibility="public" procflags="override" file="FMX.StdActns.pas" line="75">
        <parameters>
          <parameter name="Target" type="TObject"/>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Introduces an interface for verifying that the type and state of a target component or control are appropriate for the action.
FMX.StdActns.TWindowClose.HandlesTarget inherits from System.Classes.TBasicAction.HandlesTarget. All content below this line refers to System.Classes.TBasicAction.HandlesTarget.
Introduces an interface for verifying that the type and state of a target component or control are appropriate for the action.
HandlesTarget does nothing in TBasicAction. HandlesTarget was introduced in TBasicAction so that descendants can override it to check the type and state of a target. HandlesTarget can verify any information about a target that is relevant for the action. HandlesTarget returns True if the target meets the specified criteria, False otherwise.
</summary></devnotes></function>
      <procedure name="ExecuteTarget" visibility="public" procflags="override" file="FMX.StdActns.pas" line="76">
        <parameters>
          <parameter name="Target" type="TObject"/>
        </parameters>
      <devnotes><summary>
Introduces an interface for invoking an action on a target client component or control.
FMX.StdActns.TWindowClose.ExecuteTarget inherits from System.Classes.TBasicAction.ExecuteTarget. All content below this line refers to System.Classes.TBasicAction.ExecuteTarget.
Introduces an interface for invoking an action on a target client component or control.
ExecuteTarget does nothing in TBasicAction. ExecuteTarget was introduced in TBasicAction so that descendants can override it to initiate the action on the target. For example, an edit action that performs copying might copy the contents of an edit control to the clipboard.
</summary></devnotes></procedure>
      <procedure name="CustomTextChanged" visibility="public" procflags="override" file="FMX.StdActns.pas" line="77">
      <devnotes><summary>
Introduces an interface for a function that is called when the CustomText property for the action changes.
FMX.StdActns.TWindowClose.CustomTextChanged inherits from FMX.ActnList.TCustomAction.CustomTextChanged. All content below this line refers to FMX.ActnList.TCustomAction.CustomTextChanged.
Introduces an interface for a function that is called when the CustomText property for the action changes.
As implemented in TCustomAction, CustomTextChanged does nothing. 
Descendant classes can override CustomTextChanged to provide business functionality.
The announced purpose of this method is to update the Text property when the CustomText property is changed.  
</summary></devnotes></procedure>
      <function name="Update" visibility="public" procflags="override" file="FMX.StdActns.pas" line="78">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>




Provides an opportunity to execute centralized code when an application is idle.
FMX.StdActns.TWindowClose.Update inherits from System.Classes.TBasicAction.Update. All content below this line refers to System.Classes.TBasicAction.Update.
Provides an opportunity to execute centralized code when an application is idle.
Update triggers the OnUpdate event handler. Update returns True if an event handler was found, False otherwise. When the application is idle, the OnUpdate event occurs for every action. This provides an opportunity for applications to execute centralized code for enabling and disabling, checking and unchecking, and so on.
</summary></devnotes></function>
      <constructor name="Create" visibility="public" file="FMX.StdActns.pas" line="79">
        <parameters>
          <parameter name="AOwner" type="TComponent"/>
        </parameters>
      <devnotes><summary>
Instantiates and initializes a FireMonkey TCustomAction object.
FMX.StdActns.TWindowClose.Create inherits from FMX.ActnList.TCustomAction.Create. All content below this line refers to FMX.ActnList.TCustomAction.Create.
Instantiates and initializes a FireMonkey TCustomAction object.
Applications do not need to call the constructor directly. Actions are created automatically when you add them to an action list component using New Action in the Action List editor at design time.
If you want to create an action at run time, assign a TActionList component to its ActionList property after calling Create.
AOwner is the component that is responsible for freeing the action. It becomes the value of the Owner property.
Create calls an inherited System.Actions.TContainedAction.Create constructor and then initializes the Supported property with True .
</summary></devnotes></constructor>
      <property name="ShortCut" visibility="published" read="FShortCut" write="SetShortCut" type="TShortCut" default="4183" hoisted="true" file="FMX.StdActns.pas" line="81"/>
      <property name="UnsupportedPlatforms" visibility="published" read="FUnsupportedPlatforms" write="SetUnsupportedPlatforms" type="TPlatforms" default="0" hoisted="true" file="FMX.StdActns.pas" line="82"/>
      <event name="OnExecute" visibility="published" read="FOnExecute" write="SetOnExecute" type="TNotifyEvent" hoisted="true" file="FMX.StdActns.pas" line="83"/>
    </members>
  <devnotes><summary>
The standard action for closing an active modeless form. 
TWindowClose is not immediate, it calls the Close method that closes the active modeless form. 
The default ShortCut for TWindowClose is CMD+W.
</summary></devnotes></class>
  <class name="TFileHideApp" file="FMX.StdActns.pas" line="86">
    
    <members>
      <field name="FHideAppService" type="IFMXHideAppService" visibility="private" size="4" offset="192" file="FMX.StdActns.pas" line="88"/>
      <function name="IsSupportedInterface" visibility="protected" procflags="override" file="FMX.StdActns.pas" line="90">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Returns True if this action can be realized on the current platform.
FMX.StdActns.TFileHideApp.IsSupportedInterface inherits from FMX.ActnList.TCustomAction.IsSupportedInterface. All content below this line refers to FMX.ActnList.TCustomAction.IsSupportedInterface.
Returns True if this action can be realized on the current platform.
As implemented in TCustomAction, IsSupportedInterface always returns True. 
IsSupportedInterface is virtual and can be overridden in descendent classes.
</summary></devnotes></function>
      <function name="HandlesTarget" visibility="public" procflags="override" file="FMX.StdActns.pas" line="92">
        <parameters>
          <parameter name="Target" type="TObject"/>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Introduces an interface for verifying that the type and state of a target component or control are appropriate for the action.
FMX.StdActns.TFileHideApp.HandlesTarget inherits from System.Classes.TBasicAction.HandlesTarget. All content below this line refers to System.Classes.TBasicAction.HandlesTarget.
Introduces an interface for verifying that the type and state of a target component or control are appropriate for the action.
HandlesTarget does nothing in TBasicAction. HandlesTarget was introduced in TBasicAction so that descendants can override it to check the type and state of a target. HandlesTarget can verify any information about a target that is relevant for the action. HandlesTarget returns True if the target meets the specified criteria, False otherwise.
</summary></devnotes></function>
      <procedure name="ExecuteTarget" visibility="public" procflags="override" file="FMX.StdActns.pas" line="93">
        <parameters>
          <parameter name="Target" type="TObject"/>
        </parameters>
      <devnotes><summary>
Introduces an interface for invoking an action on a target client component or control.
FMX.StdActns.TFileHideApp.ExecuteTarget inherits from System.Classes.TBasicAction.ExecuteTarget. All content below this line refers to System.Classes.TBasicAction.ExecuteTarget.
Introduces an interface for invoking an action on a target client component or control.
ExecuteTarget does nothing in TBasicAction. ExecuteTarget was introduced in TBasicAction so that descendants can override it to initiate the action on the target. For example, an edit action that performs copying might copy the contents of an edit control to the clipboard.
</summary></devnotes></procedure>
      <procedure name="CustomTextChanged" visibility="public" procflags="override" file="FMX.StdActns.pas" line="94">
      <devnotes><summary>
Introduces an interface for a function that is called when the CustomText property for the action changes.
FMX.StdActns.TFileHideApp.CustomTextChanged inherits from FMX.ActnList.TCustomAction.CustomTextChanged. All content below this line refers to FMX.ActnList.TCustomAction.CustomTextChanged.
Introduces an interface for a function that is called when the CustomText property for the action changes.
As implemented in TCustomAction, CustomTextChanged does nothing. 
Descendant classes can override CustomTextChanged to provide business functionality.
The announced purpose of this method is to update the Text property when the CustomText property is changed.  
</summary></devnotes></procedure>
      <function name="Update" visibility="public" procflags="override" file="FMX.StdActns.pas" line="95">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>




Provides an opportunity to execute centralized code when an application is idle.
FMX.StdActns.TFileHideApp.Update inherits from System.Classes.TBasicAction.Update. All content below this line refers to System.Classes.TBasicAction.Update.
Provides an opportunity to execute centralized code when an application is idle.
Update triggers the OnUpdate event handler. Update returns True if an event handler was found, False otherwise. When the application is idle, the OnUpdate event occurs for every action. This provides an opportunity for applications to execute centralized code for enabling and disabling, checking and unchecking, and so on.
</summary></devnotes></function>
      <constructor name="Create" visibility="public" file="FMX.StdActns.pas" line="96">
        <parameters>
          <parameter name="AOwner" type="TComponent"/>
        </parameters>
      <devnotes><summary>
Instantiates and initializes a FireMonkey TCustomAction object.
FMX.StdActns.TFileHideApp.Create inherits from FMX.ActnList.TCustomAction.Create. All content below this line refers to FMX.ActnList.TCustomAction.Create.
Instantiates and initializes a FireMonkey TCustomAction object.
Applications do not need to call the constructor directly. Actions are created automatically when you add them to an action list component using New Action in the Action List editor at design time.
If you want to create an action at run time, assign a TActionList component to its ActionList property after calling Create.
AOwner is the component that is responsible for freeing the action. It becomes the value of the Owner property.
Create calls an inherited System.Actions.TContainedAction.Create constructor and then initializes the Supported property with True .
</summary></devnotes></constructor>
      <property name="ShortCut" visibility="published" read="FShortCut" write="SetShortCut" type="TShortCut" default="4168" hoisted="true" file="FMX.StdActns.pas" line="98"/>
      <property name="UnsupportedPlatforms" visibility="published" read="FUnsupportedPlatforms" write="SetUnsupportedPlatforms" type="TPlatforms" default="61" hoisted="true" file="FMX.StdActns.pas" line="99"/>
      <event name="OnExecute" visibility="published" read="FOnExecute" write="SetOnExecute" type="TNotifyEvent" hoisted="true" file="FMX.StdActns.pas" line="100"/>
    </members>
  <devnotes><summary>
The standard action for hiding and showing (if hidden) a running macOS application. 
TFileHideApp hides all windows of the receiver application, and the next application in line is activated. If the windows of the receiver application are hidden, then TFileHideApp restores the hidden windows to the screen and makes the receiver active.
The default ShortCut for TFileHideApp is CMD+H.

In the current version, TFileHideApp is implemented only for macOS.</summary></devnotes></class>
  <class name="TFileHideAppOthers" file="FMX.StdActns.pas" line="103">
    
    <members>
      <procedure name="ExecuteTarget" visibility="public" procflags="override" file="FMX.StdActns.pas" line="106">
        <parameters>
          <parameter name="Target" type="TObject"/>
        </parameters>
      <devnotes><summary>


Introduces an interface for invoking an action on a target client component or control.
FMX.StdActns.TFileHideAppOthers.ExecuteTarget inherits from System.Classes.TBasicAction.ExecuteTarget. All content below this line refers to System.Classes.TBasicAction.ExecuteTarget.
Introduces an interface for invoking an action on a target client component or control.
ExecuteTarget does nothing in TBasicAction. ExecuteTarget was introduced in TBasicAction so that descendants can override it to initiate the action on the target. For example, an edit action that performs copying might copy the contents of an edit control to the clipboard.
</summary></devnotes></procedure>
      <procedure name="CustomTextChanged" visibility="public" procflags="override" file="FMX.StdActns.pas" line="107">
      <devnotes><summary>


Introduces an interface for a function that is called when the CustomText property for the action changes.
FMX.StdActns.TFileHideAppOthers.CustomTextChanged inherits from FMX.ActnList.TCustomAction.CustomTextChanged. All content below this line refers to FMX.ActnList.TCustomAction.CustomTextChanged.
Introduces an interface for a function that is called when the CustomText property for the action changes.
As implemented in TCustomAction, CustomTextChanged does nothing. 
Descendant classes can override CustomTextChanged to provide business functionality.
The announced purpose of this method is to update the Text property when the CustomText property is changed.  
</summary></devnotes></procedure>
      <constructor name="Create" visibility="public" file="FMX.StdActns.pas" line="108">
        <parameters>
          <parameter name="AOwner" type="TComponent"/>
        </parameters>
      <devnotes><summary>


Instantiates and initializes a FireMonkey TCustomAction object.
FMX.StdActns.TFileHideAppOthers.Create inherits from FMX.ActnList.TCustomAction.Create. All content below this line refers to FMX.ActnList.TCustomAction.Create.
Instantiates and initializes a FireMonkey TCustomAction object.
Applications do not need to call the constructor directly. Actions are created automatically when you add them to an action list component using New Action in the Action List editor at design time.
If you want to create an action at run time, assign a TActionList component to its ActionList property after calling Create.
AOwner is the component that is responsible for freeing the action. It becomes the value of the Owner property.
Create calls an inherited System.Actions.TContainedAction.Create constructor and then initializes the Supported property with True .
</summary></devnotes></constructor>
      <property name="ShortCut" visibility="published" read="FShortCut" write="SetShortCut" type="TShortCut" default="36936" hoisted="true" file="FMX.StdActns.pas" line="110"/>
    </members>
  <devnotes><summary>
The standard action for hiding all macOS applications, except the receiver.
The default ShortCut for TFileHideApp is ALT+CMD+H.

In the current version, TFileHideAppOthers is implemented only for macOS.</summary></devnotes></class>
  <class name="TObjectViewAction" file="FMX.StdActns.pas" line="113">
    
    <members>
      <procedure name="SetFmxObject" visibility="private" file="FMX.StdActns.pas" line="115">
        <parameters>
          <parameter name="Value" type="TFmxObject" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="GetFmxObject" visibility="private" file="FMX.StdActns.pas" line="116">
        <parameters>
          <retval type="TFmxObject"/>
        </parameters>
      </function>
      <procedure name="SetComponent" visibility="protected" procflags="override" file="FMX.StdActns.pas" line="118">
        <parameters>
          <parameter name="Value" type="TComponent" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Setter for the Component property.
FMX.StdActns.TObjectViewAction.SetComponent inherits from FMX.ActnList.TCustomViewAction.SetComponent. All content below this line refers to FMX.ActnList.TCustomViewAction.SetComponent.
Setter for the Component property.


</summary></devnotes></procedure>
      <function name="ComponentText" visibility="protected" procflags="override" file="FMX.StdActns.pas" line="119">
        <parameters>
          <retval type="string"/>
        </parameters>
      <devnotes><summary>


Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></function>
      <procedure name="DoCreateComponent" visibility="protected" procflags="override" file="FMX.StdActns.pas" line="120">
        <parameters>
          <parameter name="NewComponent" type="TComponent" paramflags="var"/>
        </parameters>
      <devnotes><summary>


Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <property name="FmxObject" visibility="public" read="GetFmxObject" write="SetFmxObject" type="TFmxObject" file="FMX.StdActns.pas" line="122"><devnotes><summary>
Keeps an FMX object (of the component) that executes an action and whose image becomes visible during the execution of the action.
</summary></devnotes></property>
    </members>
  <devnotes><summary>
A base class for actions that show a specified component when executed.
FMX.StdActns.TObjectViewAction inherits from FMX.ActnList.TCustomViewAction. All content below this line refers to FMX.ActnList.TCustomViewAction.
A base class for actions that show a specified component when executed.
Descendants of TCustomViewAction can be associated with a component that is made visible when the action executes.
TCustomViewAction extends TCustomAction declaring the component that the action shows when it executes.
TObjectViewAction extends the TCustomViewAction class that defines the FmxObject property and keeps the component value that should be the TFmxObject type object in this case. 
Descendants of TObjectViewAction are associated with the TFmxObject type component that is made visible when the action executes.  
TVirtualKeyboard and TViewAction are standard actions that descend from TObjectViewAction.
Contrary to ordinary actions (like TAction, TControlAction, TCustomValueRangeAction, and so on) TCustomViewAction (and its descendants) does not distribute changes in values of Caption, Enabled, Checked, GroupIndex, ShortCut, Visible, and OnExecute properties to the respective properties of clients linked with action links. 

 See Also
FMX.ActnList.TCustomViewAction.Component
FMX.Types.TFmxObject
FMX.StdActns.TObjectViewAction
FMX.ActnList.TActionLink
System.Actions.TContainedAction.Caption
System.Actions.TContainedAction.Enabled
System.Actions.TContainedAction.Checked
System.Actions.TContainedAction.GroupIndex
System.Actions.TContainedAction.ShortCut
System.Actions.TContainedAction.Visible
System.Classes.TBasicAction.OnExecute

</summary></devnotes></class>
  <class name="TVirtualKeyboard" file="FMX.StdActns.pas" line="125">
    
    <members>
      <field name="FService" type="IFMXVirtualKeyboardService" visibility="private" size="4" offset="216" file="FMX.StdActns.pas" line="127"/>
      <function name="IsSupportedInterface" visibility="public" procflags="override" file="FMX.StdActns.pas" line="130">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Returns True if this action can be realized on the current platform.
FMX.StdActns.TVirtualKeyboard.IsSupportedInterface inherits from FMX.ActnList.TCustomAction.IsSupportedInterface. All content below this line refers to FMX.ActnList.TCustomAction.IsSupportedInterface.
Returns True if this action can be realized on the current platform.
As implemented in TCustomAction, IsSupportedInterface always returns True. 
IsSupportedInterface is virtual and can be overridden in descendent classes.
</summary></devnotes></function>
      <procedure name="ExecuteTarget" visibility="public" procflags="override" file="FMX.StdActns.pas" line="131">
        <parameters>
          <parameter name="Target" type="TObject"/>
        </parameters>
      <devnotes><summary>
Introduces an interface for invoking an action on a target client component or control.
FMX.StdActns.TVirtualKeyboard.ExecuteTarget inherits from System.Classes.TBasicAction.ExecuteTarget. All content below this line refers to System.Classes.TBasicAction.ExecuteTarget.
Introduces an interface for invoking an action on a target client component or control.
ExecuteTarget does nothing in TBasicAction. ExecuteTarget was introduced in TBasicAction so that descendants can override it to initiate the action on the target. For example, an edit action that performs copying might copy the contents of an edit control to the clipboard.
</summary></devnotes></procedure>
      <function name="Update" visibility="public" procflags="override" file="FMX.StdActns.pas" line="132">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>


Provides an opportunity to execute centralized code when an application is idle.
FMX.StdActns.TVirtualKeyboard.Update inherits from System.Classes.TBasicAction.Update. All content below this line refers to System.Classes.TBasicAction.Update.
Provides an opportunity to execute centralized code when an application is idle.
Update triggers the OnUpdate event handler. Update returns True if an event handler was found, False otherwise. When the application is idle, the OnUpdate event occurs for every action. This provides an opportunity for applications to execute centralized code for enabling and disabling, checking and unchecking, and so on.
</summary></devnotes></function>
      <property name="Text" visibility="published" read="GetText" write="SetText" type="string" default="0" hoisted="true" file="FMX.StdActns.pas" line="134"/>
      <property name="Enabled" visibility="published" read="FEnabled" write="SetEnabled" type="Boolean" default="1" hoisted="true" file="FMX.StdActns.pas" line="135"/>
      <property name="HelpContext" visibility="published" read="FHelpContext" write="SetHelpContext" type="THelpContext" default="0" hoisted="true" file="FMX.StdActns.pas" line="136"/>
      <property name="HelpKeyword" visibility="published" read="FHelpKeyword" write="SetHelpKeyword" type="string" default="0" hoisted="true" file="FMX.StdActns.pas" line="137"/>
      <property name="HelpType" visibility="published" read="FHelpType" write="SetHelpType" type="THelpType" default="0" hoisted="true" file="FMX.StdActns.pas" line="138"/>
      <property name="ImageIndex" visibility="published" read="FImageIndex" write="SetImageIndex" type="TImageIndex" default="-1" hoisted="true" file="FMX.StdActns.pas" line="139"/>
      <property name="ShortCut" visibility="published" read="FShortCut" write="SetShortCut" type="TShortCut" default="0" hoisted="true" file="FMX.StdActns.pas" line="140"/>
      <property name="SecondaryShortCuts" visibility="published" read="GetSecondaryShortCuts" write="SetSecondaryShortCuts" stored="IsSecondaryShortCutsStored" type="TCustomShortCutList" hoisted="true" file="FMX.StdActns.pas" line="141"/>
      <property name="Visible" visibility="published" read="FVisible" write="SetVisible" type="Boolean" default="1" hoisted="true" file="FMX.StdActns.pas" line="142"/>
      <property name="UnsupportedArchitectures" visibility="published" read="FUnsupportedArchitectures" write="SetUnsupportedArchitectures" type="TArchitectures" default="0" hoisted="true" file="FMX.StdActns.pas" line="143"/>
      <property name="UnsupportedPlatforms" visibility="published" read="FUnsupportedPlatforms" write="SetUnsupportedPlatforms" type="TPlatforms" default="0" hoisted="true" file="FMX.StdActns.pas" line="144"/>
      <event name="OnUpdate" visibility="published" read="FOnUpdate" write="FOnUpdate" type="TNotifyEvent" hoisted="true" file="FMX.StdActns.pas" line="145"/>
      <property name="FmxObject" visibility="published" read="GetFmxObject" write="SetFmxObject" type="TFmxObject" hoisted="true" file="FMX.StdActns.pas" line="146"/>
    </members>
  <devnotes><summary>
Shows a component stored in the FmxObject property and shows the on-screen virtual keyboard over the surface of this component.
TVirtualKeyboard standard action is executed by clients (controls, menu commands, toolbar buttons) linked to this action, and it shows the component stored in the FmxObject property. TVirtualKeyboard shows the on-screen virtual keyboard over the surface of the shown component. 
TVirtualKeyboard extends TCustomViewAction by redeclaring some public properties and events as having published visibility, which makes them editable in the Object Inspector. 
The following properties are the most important: Enabled, FmxObject, ImageIndex, SecondaryShortCuts, ShortCut, Text, ShortCut, and Visible. 
Contrary to ordinary actions (like TAction, TControlAction, TCustomValueRangeAction, and so on) TVirtualKeyboard, as a descendant of TCustomViewAction, does not distribute changes of Visible, Enabled, Checked, GroupIndex, and OnExecute to the linked clients. 
Virtual keyboard components are supported by so-called Platform Services. Therefore, this standard action might not be supported for some platforms. For more information, see UnsupportedArchitectures and UnsupportedPlatforms. 
To display the on-screen keyboard provided by the TVirtualKeyboard component, do the following:

Add a TActionList and a TButton to the form.
Double-click the TActionList to open the Action List editor.
Click the arrowhead beside the  icon, select New Standard Action &gt; Edit &gt; TVirtualKeyboard, and then click OK.
In the Object Inspector, set the Action property of the TButton to be the TVirtualKeyboard you just added to the TActionList.
Run the project.
The type of the TVirtualKeyboard is set by the KeyboardType property.

Code Examples
FMX.ScrollableForm Sample
FMX.KeyboardTypes Sample
FMX.KeyboardToolbar Sample</summary></devnotes></class>
  <class name="TViewAction" file="FMX.StdActns.pas" line="151">
    
    <members>
      <procedure name="SetComponent" visibility="protected" procflags="override" file="FMX.StdActns.pas" line="154">
        <parameters>
          <parameter name="Value" type="TComponent" paramflags="const"/>
        </parameters>
      <devnotes><summary>


Setter for the Component property.
FMX.StdActns.TViewAction.SetComponent inherits from FMX.ActnList.TCustomViewAction.SetComponent. All content below this line refers to FMX.ActnList.TCustomViewAction.SetComponent.
Setter for the Component property.


</summary></devnotes></procedure>
      <procedure name="ExecuteTarget" visibility="public" procflags="override" file="FMX.StdActns.pas" line="156">
        <parameters>
          <parameter name="Target" type="TObject"/>
        </parameters>
      <devnotes><summary>
Introduces an interface for invoking an action on a target client component or control.
FMX.StdActns.TViewAction.ExecuteTarget inherits from System.Classes.TBasicAction.ExecuteTarget. All content below this line refers to System.Classes.TBasicAction.ExecuteTarget.
Introduces an interface for invoking an action on a target client component or control.
ExecuteTarget does nothing in TBasicAction. ExecuteTarget was introduced in TBasicAction so that descendants can override it to initiate the action on the target. For example, an edit action that performs copying might copy the contents of an edit control to the clipboard.
</summary></devnotes></procedure>
      <function name="Update" visibility="public" procflags="override" file="FMX.StdActns.pas" line="157">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>


Provides an opportunity to execute centralized code when an application is idle.
FMX.StdActns.TViewAction.Update inherits from System.Classes.TBasicAction.Update. All content below this line refers to System.Classes.TBasicAction.Update.
Provides an opportunity to execute centralized code when an application is idle.
Update triggers the OnUpdate event handler. Update returns True if an event handler was found, False otherwise. When the application is idle, the OnUpdate event occurs for every action. This provides an opportunity for applications to execute centralized code for enabling and disabling, checking and unchecking, and so on.
</summary></devnotes></function>
      <property name="Text" visibility="published" read="GetText" write="SetText" type="string" default="0" hoisted="true" file="FMX.StdActns.pas" line="159"/>
      <property name="Enabled" visibility="published" read="FEnabled" write="SetEnabled" type="Boolean" default="1" hoisted="true" file="FMX.StdActns.pas" line="160"/>
      <property name="HelpContext" visibility="published" read="FHelpContext" write="SetHelpContext" type="THelpContext" default="0" hoisted="true" file="FMX.StdActns.pas" line="161"/>
      <property name="HelpKeyword" visibility="published" read="FHelpKeyword" write="SetHelpKeyword" type="string" default="0" hoisted="true" file="FMX.StdActns.pas" line="162"/>
      <property name="HelpType" visibility="published" read="FHelpType" write="SetHelpType" type="THelpType" default="0" hoisted="true" file="FMX.StdActns.pas" line="163"/>
      <property name="ImageIndex" visibility="published" read="FImageIndex" write="SetImageIndex" type="TImageIndex" default="-1" hoisted="true" file="FMX.StdActns.pas" line="164"/>
      <property name="ShortCut" visibility="published" read="FShortCut" write="SetShortCut" type="TShortCut" default="0" hoisted="true" file="FMX.StdActns.pas" line="165"/>
      <property name="SecondaryShortCuts" visibility="published" read="GetSecondaryShortCuts" write="SetSecondaryShortCuts" stored="IsSecondaryShortCutsStored" type="TCustomShortCutList" hoisted="true" file="FMX.StdActns.pas" line="166"/>
      <property name="Visible" visibility="published" read="FVisible" write="SetVisible" type="Boolean" default="1" hoisted="true" file="FMX.StdActns.pas" line="167"/>
      <property name="UnsupportedArchitectures" visibility="published" read="FUnsupportedArchitectures" write="SetUnsupportedArchitectures" type="TArchitectures" default="0" hoisted="true" file="FMX.StdActns.pas" line="168"/>
      <property name="UnsupportedPlatforms" visibility="published" read="FUnsupportedPlatforms" write="SetUnsupportedPlatforms" type="TPlatforms" default="0" hoisted="true" file="FMX.StdActns.pas" line="169"/>
      <event name="OnUpdate" visibility="published" read="FOnUpdate" write="FOnUpdate" type="TNotifyEvent" hoisted="true" file="FMX.StdActns.pas" line="170"/>
      <property name="FmxObject" visibility="published" read="GetFmxObject" write="SetFmxObject" type="TFmxObject" hoisted="true" file="FMX.StdActns.pas" line="171"/>
      <event name="OnCreateComponent" visibility="published" read="FOnCreateComponent" write="FOnCreateComponent" type="TOnCreateComponent" hoisted="true" file="FMX.StdActns.pas" line="172"/>
      <event name="OnBeforeShow" visibility="published" read="FOnBeforeShow" write="FOnBeforeShow" type="TOnBeforeShow" hoisted="true" file="FMX.StdActns.pas" line="173"/>
      <event name="OnAfterShow" visibility="published" read="FOnAfterShow" write="FOnAfterShow" type="TNotifyEvent" hoisted="true" file="FMX.StdActns.pas" line="174"/>
    </members>
  <devnotes><summary>
Shows a component stored in the FmxObject property.
TViewAction standard action is executed by clients (controls, menu commands, toolbar buttons) linked to this action and it shows the TFmxObject type component stored in the FmxObject property. 
TViewAction extends TCustomViewAction by redeclaring some public properties and events as having published visibility, which makes them editable in the Object Inspector. 
The following properties are the most important: Enabled, FmxObject, ImageIndex, SecondaryShortCuts, ShortCut, Text, ShortCut, and Visible.  
Contrary to ordinary actions (like TAction, TControlAction, TCustomValueRangeAction, and so on) TViewAction, as the TCustomViewAction descendant, does not distribute changes in Visible, Enabled, Checked, GroupIndex, and OnExecute to the linked clients. 
</summary></devnotes></class>
  <class name="TBaseValueRange" file="FMX.StdActns.pas" line="180">
    
    <ancestor name="TPersistent" namespace="System.Classes">
      <methodref name="AssignError" visibility="private">
      </methodref>
      <methodref name="AssignTo" visibility="protected" procflags="virtual">
      </methodref>
      <methodref name="DefineProperties" visibility="protected" procflags="virtual">
      </methodref>
      <methodref name="GetOwner" visibility="protected" procflags="dynamic">
      </methodref>
      <methodref name="Destroy" visibility="public" procflags="destructor override">
      </methodref>
      <methodref name="Assign" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="GetNamePath" visibility="public" procflags="dynamic">
      </methodref>
      <ancestor name="TObject" namespace="System">
        <methodref name="Create" visibility="public" procflags="constructor">
        </methodref>
        <methodref name="Free" visibility="public">
        </methodref>
        <methodref name="DisposeOf" visibility="public" procflags="inline">
        </methodref>
        <methodref name="InitInstance" visibility="public" procflags="class">
        </methodref>
        <methodref name="CleanupInstance" visibility="public">
        </methodref>
        <methodref name="ClassType" visibility="public" procflags="inline">
        </methodref>
        <methodref name="ClassName" visibility="public" procflags="class">
        </methodref>
        <methodref name="ClassNameIs" visibility="public" procflags="class">
        </methodref>
        <methodref name="ClassParent" visibility="public" procflags="class inline">
        </methodref>
        <methodref name="ClassInfo" visibility="public" procflags="class inline">
        </methodref>
        <methodref name="InstanceSize" visibility="public" procflags="class inline">
        </methodref>
        <methodref name="InheritsFrom" visibility="public" procflags="class">
        </methodref>
        <methodref name="MethodAddress" visibility="public" procflags="class overload">
        </methodref>
        <methodref name="MethodAddress" visibility="public" procflags="class overload">
        </methodref>
        <methodref name="MethodName" visibility="public" procflags="class">
        </methodref>
        <methodref name="QualifiedClassName" visibility="public" procflags="class">
        </methodref>
        <methodref name="FieldAddress" visibility="public" procflags="overload">
        </methodref>
        <methodref name="FieldAddress" visibility="public" procflags="overload">
        </methodref>
        <methodref name="GetInterface" visibility="public">
        </methodref>
        <methodref name="GetInterfaceEntry" visibility="public" procflags="class">
        </methodref>
        <methodref name="GetInterfaceTable" visibility="public" procflags="class inline">
        </methodref>
        <methodref name="UnitName" visibility="public" procflags="class">
        </methodref>
        <methodref name="UnitScope" visibility="public" procflags="class">
        </methodref>
        <methodref name="Equals" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="GetHashCode" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="ToString" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="SafeCallException" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="AfterConstruction" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="BeforeDestruction" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="Dispatch" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="DefaultHandler" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="NewInstance" visibility="public" procflags="class virtual">
        </methodref>
        <methodref name="FreeInstance" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="Destroy" visibility="public" procflags="destructor virtual">
        </methodref>
        <methodref name="GetDisposed" visibility="protected" procflags="inline">
        </methodref>
        <methodref name="CheckDisposed" visibility="protected" procflags="inline">
        </methodref>
        <propertyref name="Disposed" visibility="protected">
        </propertyref>
      </ancestor>
    </ancestor>
    <members>
      <field name="FMax" type="Double" visibility="private" size="8" offset="8" file="FMX.StdActns.pas" line="182"/>
      <field name="FMin" type="Double" visibility="private" size="8" offset="16" file="FMX.StdActns.pas" line="183"/>
      <field name="FViewportSize" type="Double" visibility="private" size="8" offset="24" file="FMX.StdActns.pas" line="184"/>
      <field name="FFrequency" type="Double" visibility="private" size="8" offset="32" file="FMX.StdActns.pas" line="185"/>
      <field name="FValue" type="Double" visibility="private" size="8" offset="40" file="FMX.StdActns.pas" line="186"/>
      <property name="Min" visibility="public" read="FMin" write="FMin" type="Double" default="0" file="FMX.StdActns.pas" line="189"><devnotes><summary>
Minimum permissible value of the floating-point Value range. 
</summary></devnotes></property>
      <property name="Max" visibility="public" read="FMax" write="FMax" type="Double" default="0" file="FMX.StdActns.pas" line="190"><devnotes><summary>
Maximum permissible value of the floating-point Value range. 
</summary></devnotes></property>
      <property name="Value" visibility="public" read="FValue" write="FValue" type="Double" default="0" file="FMX.StdActns.pas" line="191"><devnotes><summary>
A changeable floating-point parameter. 
The TBaseValueRange class associates a floating-point number Value to its Min and Max ranges.
</summary></devnotes></property>
      <property name="Frequency" visibility="public" read="FFrequency" write="FFrequency" type="Double" default="0" file="FMX.StdActns.pas" line="192"><devnotes><summary>
The step of possible Value variations. 
Value can be multiple of Frequency, Min, or Max. For example, if

Min = 0.1
Max = 2.1
ViewportSize = 0
Frequency = 1

then Value can be:

0.1
1
2
2.1

but it cannot be:

Value = 1.1
</summary></devnotes></property>
      <property name="ViewportSize" visibility="public" read="FViewportSize" write="FViewportSize" type="Double" default="0" file="FMX.StdActns.pas" line="193"><devnotes><summary>
Used by controls such as TScrollBar to define the thumb size. 
Note that the effective maximum value of Value decreases according to Max - ViewportSize. 
</summary></devnotes></property>
      <procedure name="Assign" visibility="public" procflags="override" file="FMX.StdActns.pas" line="194">
        <parameters>
          <parameter name="Source" type="TPersistent"/>
        </parameters>
      <devnotes><summary>
Copies the contents of another similar object.
FMX.StdActns.TBaseValueRange.Assign inherits from System.Classes.TPersistent.Assign. All content below this line refers to System.Classes.TPersistent.Assign.
Copies the contents of another similar object.
Assign copies properties and other attributes of the specified Source object to the current object. The standard form of a call to Assign is:

Destination.Assign(Source); {Delphi}

Destination-&gt;Assign(Source); // C++

which tells the current object to copy the contents of the Source object to itself.
Most objects override Assign to handle the assignment of properties from similar objects. When overriding Assign, call the inherited method if the destination object cannot handle the assignment of properties from the class of the Source parameter.
If no overridden Assign method can handle the assignment of properties from Source, the method implemented in TPersistent calls the source object's AssignTo method. This allows the source object to handle the assignment. If the Source object is nil (Delphi) or NULL (C++), Assign raises an EConvertError exception.
In general, the statement

Destination := Source; {Delphi}

Destination = Source; // C++

is not the same as the statement

Destination.Assign(Source); {Delphi}

Destination-&gt;Assign(Source); // C++

The assignment operator makes Destination reference the same object as Source, whereas the Assign method copies the contents of the object referenced by Source into the object referenced by Destination.

Note: The types of some properties are also objects. If these properties have written methods that use Assign to set the value of the property, then in these cases the assignment operator does the same thing as the Assign method.</summary></devnotes></procedure>
      <function name="Equals" visibility="public" procflags="override" file="FMX.StdActns.pas" line="195">
        <parameters>
          <parameter name="Obj" type="TObject"/>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Checks whether the current instance and the Obj parameter are equal.
FMX.StdActns.TBaseValueRange.Equals inherits from System.TObject.Equals. All content below this line refers to System.TObject.Equals.
Checks whether the current instance and the Obj parameter are equal.
The function has one Obj parameter of the TObject type.
By default, the Equals method shows whether the addresses corresponding to the current object and the Obj object are identical. The method returns a boolean value that represents the equality between the two addresses. 


Note: Equals is supposed to be overridden in user-derived classes, to provide consumer objects with an equality determining function. 
For example, in the FMX.Types.TBounds class, Equals also returns True if the Rect properties of the current object and of the Obj object are equal. In the FMX.StdActns.TBaseValueRange class, Equals also returns True if all the properties of the current object and of the Obj object are equal. 

</summary></devnotes></function>
      <function name="Same" visibility="public" procflags="virtual" file="FMX.StdActns.pas" line="196">
        <parameters>
          <parameter name="Obj" type="TBaseValueRange"/>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Checks whether the values of all properties of the current object are close to the values of the corresponding properties of the specified Obj object. 
This function is similar to Equals, but it uses the SameValue function to compare values. That is, if between the values there is a difference that is less than the possible rounding error, then the SameValue function estimates the values as equal and Same returns True.
</summary></devnotes></function>
    </members>
  </class>
  <classref name="TCustomValueRangeClass" ref="TCustomValueRange" file="FMX.StdActns.pas" line="200"/>
  <class name="TCustomValueRange" file="FMX.StdActns.pas" line="205">
    
    <ancestor name="TBaseValueRange" namespace="FMX.StdActns">
      <propertyref name="Min" visibility="public"/>
      <propertyref name="Max" visibility="public"/>
      <propertyref name="Value" visibility="public"/>
      <propertyref name="Frequency" visibility="public"/>
      <propertyref name="ViewportSize" visibility="public"/>
      <methodref name="Assign" visibility="public" procflags="override"/>
      <methodref name="Equals" visibility="public" procflags="override"/>
      <methodref name="Same" visibility="public" procflags="virtual"/>
      <ancestor name="TPersistent" namespace="System.Classes">
        <methodref name="AssignError" visibility="private">
        </methodref>
        <methodref name="AssignTo" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="DefineProperties" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="GetOwner" visibility="protected" procflags="dynamic">
        </methodref>
        <methodref name="Destroy" visibility="public" procflags="destructor override">
        </methodref>
        <methodref name="Assign" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="GetNamePath" visibility="public" procflags="dynamic">
        </methodref>
        <ancestor name="TObject" namespace="System">
          <methodref name="Create" visibility="public" procflags="constructor">
          </methodref>
          <methodref name="Free" visibility="public">
          </methodref>
          <methodref name="DisposeOf" visibility="public" procflags="inline">
          </methodref>
          <methodref name="InitInstance" visibility="public" procflags="class">
          </methodref>
          <methodref name="CleanupInstance" visibility="public">
          </methodref>
          <methodref name="ClassType" visibility="public" procflags="inline">
          </methodref>
          <methodref name="ClassName" visibility="public" procflags="class">
          </methodref>
          <methodref name="ClassNameIs" visibility="public" procflags="class">
          </methodref>
          <methodref name="ClassParent" visibility="public" procflags="class inline">
          </methodref>
          <methodref name="ClassInfo" visibility="public" procflags="class inline">
          </methodref>
          <methodref name="InstanceSize" visibility="public" procflags="class inline">
          </methodref>
          <methodref name="InheritsFrom" visibility="public" procflags="class">
          </methodref>
          <methodref name="MethodAddress" visibility="public" procflags="class overload">
          </methodref>
          <methodref name="MethodAddress" visibility="public" procflags="class overload">
          </methodref>
          <methodref name="MethodName" visibility="public" procflags="class">
          </methodref>
          <methodref name="QualifiedClassName" visibility="public" procflags="class">
          </methodref>
          <methodref name="FieldAddress" visibility="public" procflags="overload">
          </methodref>
          <methodref name="FieldAddress" visibility="public" procflags="overload">
          </methodref>
          <methodref name="GetInterface" visibility="public">
          </methodref>
          <methodref name="GetInterfaceEntry" visibility="public" procflags="class">
          </methodref>
          <methodref name="GetInterfaceTable" visibility="public" procflags="class inline">
          </methodref>
          <methodref name="UnitName" visibility="public" procflags="class">
          </methodref>
          <methodref name="UnitScope" visibility="public" procflags="class">
          </methodref>
          <methodref name="Equals" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="GetHashCode" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="ToString" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="SafeCallException" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="AfterConstruction" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="BeforeDestruction" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="Dispatch" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="DefaultHandler" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="NewInstance" visibility="public" procflags="class virtual">
          </methodref>
          <methodref name="FreeInstance" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="Destroy" visibility="public" procflags="destructor virtual">
          </methodref>
          <methodref name="GetDisposed" visibility="protected" procflags="inline">
          </methodref>
          <methodref name="CheckDisposed" visibility="protected" procflags="inline">
          </methodref>
          <propertyref name="Disposed" visibility="protected">
          </propertyref>
        </ancestor>
      </ancestor>
    </ancestor>
    <members>
      <field name="FInitialized" type="Boolean" visibility="private" size="1" offset="48" file="FMX.StdActns.pas" line="207"/>
      <field name="FOwner" type="TComponent" visibility="private" size="4" offset="52" file="FMX.StdActns.pas" line="208">
        <attributes>
          <attribute name="TObject"/>
        </attributes>
      </field>
      <field name="FOwnerAction" type="TCustomAction" visibility="private" size="4" offset="56" file="FMX.StdActns.pas" line="209"/>
      <field name="FNew" type="TBaseValueRange" visibility="private" size="4" offset="60" file="FMX.StdActns.pas" line="210"/>
      <field name="FOld" type="TBaseValueRange" visibility="private" size="4" offset="64" file="FMX.StdActns.pas" line="211"/>
      <field name="FTmp" type="TBaseValueRange" visibility="private" size="4" offset="68" file="FMX.StdActns.pas" line="212"/>
      <field name="FRelativeValue" type="Double" visibility="private" size="8" offset="72" file="FMX.StdActns.pas" line="213"/>
      <field name="FUpdateCount" type="Integer" visibility="private" size="4" offset="80" file="FMX.StdActns.pas" line="214"/>
      <field name="FChanging" type="Boolean" visibility="private" size="1" offset="84" file="FMX.StdActns.pas" line="215"/>
      <field name="FIsChanged" type="Boolean" visibility="private" size="1" offset="85" file="FMX.StdActns.pas" line="216"/>
      <field name="FBeforeChange" type="TNotifyEvent" visibility="private" size="8" offset="88" file="FMX.StdActns.pas" line="217"/>
      <field name="FAfterChange" type="TNotifyEvent" visibility="private" size="8" offset="96" file="FMX.StdActns.pas" line="218"/>
      <field name="FOnChanged" type="TNotifyEvent" visibility="private" size="8" offset="104" file="FMX.StdActns.pas" line="219"/>
      <field name="FTracking" type="Boolean" visibility="private" size="1" offset="112" file="FMX.StdActns.pas" line="220"/>
      <field name="FOnTrackingChange" type="TNotifyEvent" visibility="private" size="8" offset="120" file="FMX.StdActns.pas" line="221"/>
      <field name="FIncrement" type="Double" visibility="private" size="8" offset="128" file="FMX.StdActns.pas" line="222"/>
      <field name="FLastValue" type="Double" visibility="private" size="8" offset="136" file="FMX.StdActns.pas" line="223"/>
      <procedure name="IntChanged" visibility="private" file="FMX.StdActns.pas" line="224">
      </procedure>
      <function name="GetMax" visibility="private" procflags="inline" file="FMX.StdActns.pas" line="225">
        <parameters>
          <retval type="Double"/>
        </parameters>
      </function>
      <procedure name="SetMax" visibility="private" file="FMX.StdActns.pas" line="226">
        <parameters>
          <parameter name="AValue" type="Double" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="GetMin" visibility="private" procflags="inline" file="FMX.StdActns.pas" line="227">
        <parameters>
          <retval type="Double"/>
        </parameters>
      </function>
      <procedure name="SetMin" visibility="private" file="FMX.StdActns.pas" line="228">
        <parameters>
          <parameter name="AValue" type="Double" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="GetValue" visibility="private" procflags="inline" file="FMX.StdActns.pas" line="229">
        <parameters>
          <retval type="Double"/>
        </parameters>
      </function>
      <procedure name="SetValue" visibility="private" file="FMX.StdActns.pas" line="230">
        <parameters>
          <parameter name="AValue" type="Double" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="GetFrequency" visibility="private" procflags="inline" file="FMX.StdActns.pas" line="231">
        <parameters>
          <retval type="Double"/>
        </parameters>
      </function>
      <procedure name="SetFrequency" visibility="private" file="FMX.StdActns.pas" line="232">
        <parameters>
          <parameter name="AValue" type="Double" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="GetViewportSize" visibility="private" procflags="inline" file="FMX.StdActns.pas" line="233">
        <parameters>
          <retval type="Double"/>
        </parameters>
      </function>
      <procedure name="SetViewportSize" visibility="private" file="FMX.StdActns.pas" line="234">
        <parameters>
          <parameter name="AValue" type="Double" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetRelativeValue" visibility="private" file="FMX.StdActns.pas" line="235">
        <parameters>
          <parameter name="AValue" type="Double" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetTracking" visibility="private" file="FMX.StdActns.pas" line="236">
        <parameters>
          <parameter name="Value" type="Boolean" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetIncrement" visibility="private" file="FMX.StdActns.pas" line="237">
        <parameters>
          <parameter name="Value" type="Double" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="DoBeforeChange" visibility="protected" procflags="virtual" file="FMX.StdActns.pas" line="239">
      <devnotes><summary>
This virtual method fires the BeforeChange event. 
In descendant classes, you can override this method to provide specific actions instead of calling an assigned BeforeChange event handler. 
</summary></devnotes></procedure>
      <procedure name="DoChanged" visibility="protected" procflags="virtual" file="FMX.StdActns.pas" line="240">
      <devnotes><summary>
This virtual method fires the OnChanged event. 
In descendant classes, you can override this method to provide specific actions instead of calling an assigned OnChanged event handler. 
</summary></devnotes></procedure>
      <procedure name="DoAfterChange" visibility="protected" procflags="virtual" file="FMX.StdActns.pas" line="241">
      <devnotes><summary>
This virtual method fires the AfterChange event. 
In descendant classes, you can override this method to provide specific actions instead of calling an assigned AfterChange event handler. 
</summary></devnotes></procedure>
      <procedure name="DoTrackingChange" visibility="protected" procflags="virtual" file="FMX.StdActns.pas" line="242">
      <devnotes><summary>
This virtual method fires the OnTrackingChange event. 
In descendant classes, you can override this method to provide specific actions instead of calling an assigned OnTrackingChange event handler. 
</summary></devnotes></procedure>
      <property name="Initialized" visibility="protected" read="FInitialized" type="Boolean" file="FMX.StdActns.pas" line="243"><devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></property>
      <function name="GetOwner" visibility="protected" procflags="override" file="FMX.StdActns.pas" line="244">
        <parameters>
          <retval type="TPersistent"/>
        </parameters>
      <devnotes><summary>
Returns the owner of an object.
FMX.StdActns.TCustomValueRange.GetOwner inherits from System.Classes.TPersistent.GetOwner. All content below this line refers to System.Classes.TPersistent.GetOwner.
Returns the owner of an object.
GetOwner is used by the GetNamePath method to find the owner of a persistent object. GetNamePath and GetOwner are introduced in TPersistent so descendants such as collections can appear in the Object Inspector. As implemented in TPersistent, GetOwner returns nil (Delphi) or NULL (C++). 
For TOwnedCollection, GetOwner returns the owner of the collection. For TCollectionItem collection items, GetOwner returns the collection object into which the collection item has been inserted. For TComponent, GetOwner returns the value of the Owner property.
</summary></devnotes></function>
      <function name="MaxStored" visibility="protected" procflags="virtual" file="FMX.StdActns.pas" line="246">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Returns True if the corresponding property value differs from the default. 
The MaxStored  virtual function returns True if the Max  property value differs from the default. That is, if Max  &lt;&gt; DefaultMaxValue. The StdActns unit declares this constant as: 

DefaultMaxValue = 100.0
</summary></devnotes></function>
      <function name="MinStored" visibility="protected" procflags="virtual" file="FMX.StdActns.pas" line="247">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Returns True if the corresponding property value differs from the default. 
The MinStored  virtual function returns True if the Min  property value differs from the default. That is, if Min  &lt;&gt; 0.
</summary></devnotes></function>
      <function name="ValueStored" visibility="protected" procflags="virtual" file="FMX.StdActns.pas" line="248">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Returns True if the corresponding property value differs from the default. 
The ValueStored  virtual function returns True if the Value  property value differs from the default. That is, if Value  &lt;&gt; 0.
</summary></devnotes></function>
      <function name="FrequencyStored" visibility="protected" procflags="virtual" file="FMX.StdActns.pas" line="249">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Returns True if the corresponding property value differs from the default. 
The FrequencyStored  virtual function returns True if the Frequency  property value differs from the default. That is, if Frequency  &lt;&gt; 0.
</summary></devnotes></function>
      <function name="ViewportSizeStored" visibility="protected" procflags="virtual" file="FMX.StdActns.pas" line="250">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Returns True if the corresponding property value differs from the default. 
The ViewportSizeStored  virtual function returns True if the ViewportSize  property value differs from the default. That is, if ViewportSize  &lt;&gt; 0.
</summary></devnotes></function>
      <constructor name="Create" visibility="public" file="FMX.StdActns.pas" line="252">
        <parameters>
          <parameter name="AOwner" type="TComponent"/>
        </parameters>
      <devnotes><summary>
Constructs an object and initializes its data before the object is first used.
FMX.StdActns.TCustomValueRange.Create inherits from System.TObject.Create. All content below this line refers to System.TObject.Create.
Constructs an object and initializes its data before the object is first used.
Create constructs an object. The purpose, size, and behavior of objects differ greatly. The Create constructor defined by TObject allocates memory but does not initialize data. 
Descendant objects usually define a constructor that creates the particular kind of object and initializes its data.

Note: If an exception escapes from a constructor, the object's destructor is called to clean up the failed instance.</summary></devnotes></constructor>
      <destructor name="Destroy" visibility="public" file="FMX.StdActns.pas" line="253">
        <parameters>
        </parameters>
      <devnotes><summary>
Destroys the TPersistent instance and frees its memory.
FMX.StdActns.TCustomValueRange.Destroy inherits from System.Classes.TPersistent.Destroy. All content below this line refers to System.Classes.TPersistent.Destroy.
Destroys the TPersistent instance and frees its memory.
Do not call Destroy directly. Call Free instead. Free checks that the object reference is not nil before calling Destroy.
</summary></devnotes></destructor>
      <procedure name="Assign" visibility="public" procflags="override" file="FMX.StdActns.pas" line="254">
        <parameters>
          <parameter name="Source" type="TPersistent"/>
        </parameters>
      <devnotes><summary>


Copies the contents of another similar object.
FMX.StdActns.TCustomValueRange.Assign inherits from System.Classes.TPersistent.Assign. All content below this line refers to System.Classes.TPersistent.Assign.
Copies the contents of another similar object.
Assign copies properties and other attributes of the specified Source object to the current object. The standard form of a call to Assign is:

Destination.Assign(Source); {Delphi}

Destination-&gt;Assign(Source); // C++

which tells the current object to copy the contents of the Source object to itself.
Most objects override Assign to handle the assignment of properties from similar objects. When overriding Assign, call the inherited method if the destination object cannot handle the assignment of properties from the class of the Source parameter.
If no overridden Assign method can handle the assignment of properties from Source, the method implemented in TPersistent calls the source object's AssignTo method. This allows the source object to handle the assignment. If the Source object is nil (Delphi) or NULL (C++), Assign raises an EConvertError exception.
In general, the statement

Destination := Source; {Delphi}

Destination = Source; // C++

is not the same as the statement

Destination.Assign(Source); {Delphi}

Destination-&gt;Assign(Source); // C++

The assignment operator makes Destination reference the same object as Source, whereas the Assign method copies the contents of the object referenced by Source into the object referenced by Destination.

Note: The types of some properties are also objects. If these properties have written methods that use Assign to set the value of the property, then in these cases the assignment operator does the same thing as the Assign method.</summary></devnotes></procedure>
      <function name="GetNamePath" visibility="public" procflags="override" file="FMX.StdActns.pas" line="255">
        <parameters>
          <retval type="string"/>
        </parameters>
      <devnotes><summary>
Returns the name of the object as it appears in the Object Inspector.
FMX.StdActns.TCustomValueRange.GetNamePath inherits from System.Classes.TPersistent.GetNamePath. All content below this line refers to System.Classes.TPersistent.GetNamePath.
Returns the name of the object as it appears in the Object Inspector.
GetNamePath is for internal use only. It determines the text that the Object Inspector displays for the name of the object being edited. GetNamePath is introduced in TPersistent so descendants such as collections can appear in the Object Inspector. Do not call GetNamePath directly.
For components, GetNamePath returns the component name. For TCollectionItem objects it returns the name of the hosting component, the name of the property, and the index into the collection surrounded by brackets.
</summary></devnotes></function>
      <function name="IsEmpty" visibility="public" procflags="virtual" file="FMX.StdActns.pas" line="259">
        <devnotes><summary>
Checks whether any of the current object properties has an assigned value. 
Returns True if any of the Value, Min, Max, ViewportSize, and Frequency properties of the current object has an assigned value.
</summary></devnotes>
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <procedure name="Clear" visibility="public" procflags="virtual" file="FMX.StdActns.pas" line="263">
        <devnotes><summary>
Assigns the default values to all properties (Value, Min, Max, and so on). 
In TCustomValueRange, Clear assigns the following default values:

Value = 0,
Min = 0,
Max = 100.0,
ViewportSize = 0,
Frequency = 0.</summary></devnotes>
      </procedure>
      <property name="Tracking" visibility="public" read="FTracking" write="SetTracking" type="Boolean" file="FMX.StdActns.pas" line="268">
        <devnotes><summary>
Controls whether the BeforeChange and AfterChange events are fired on each property change. 
If Tracking = True, then the BeforeChange and AfterChange events are fired on each property change. If Tracking = False, then the BeforeChange and AfterChange events are not fired.

Note: The OnChanged and OnTrackingChange events are fired independently from the Tracking value.</summary></devnotes>
      </property>
      <procedure name="Changed" visibility="public" file="FMX.StdActns.pas" line="279">
        <devnotes><summary>
Recalculates values of properties, fires proper events, and sets IsChanged to False. 
Changed is called immediately after the value of any property (Value, Min, Max, ViewportSize, and Frequency) of the current object has been changed. It recalculates values, raises the proper events (if needed), and sets IsChanged to False. If the Owner component of the action is loading (csLoading) or UpdateCount &gt; 0, then no operations are performed and IsChanged is set to True. After loading the Owner component is finished, the component should check the IsChanged property's value and call the Changed method (if needed).
If IgnoreLoading = True, then Changed does not check the loading state (csLoading). 
</summary></devnotes>
        <parameters>
          <parameter name="IgnoreLoading" type="Boolean" paramflags="const">
            <value>
              False
            </value>
          </parameter>
        </parameters>
      </procedure>
      <property name="IsChanged" visibility="public" read="FIsChanged" type="Boolean" file="FMX.StdActns.pas" line="280"><devnotes><summary>
Handles whether some properties have been changed, but values are still not recalculated. 
</summary></devnotes></property>
      <property name="New" visibility="public" read="FNew" type="TBaseValueRange" file="FMX.StdActns.pas" line="284">
        <devnotes><summary>
Keeps the new values of ValueRange properties. 
New is the TBaseValueRange type property that keeps the new values of the Value, Min, Max, ViewportSize, and Frequency properties of the current object, declared in the TBaseValueRange class. It can be used in the BeforeChange event handler.
</summary></devnotes>
      </property>
      <property name="Min" visibility="public" read="GetMin" write="SetMin" stored="MinStored" type="Double" file="FMX.StdActns.pas" line="285"><devnotes><summary>
Minimum permissible value of the floating-point Value range.
FMX.StdActns.TCustomValueRange.Min inherits from FMX.StdActns.TBaseValueRange.Min. All content below this line refers to FMX.StdActns.TBaseValueRange.Min.
Minimum permissible value of the floating-point Value range. 
</summary></devnotes></property>
      <property name="Max" visibility="public" read="GetMax" write="SetMax" stored="MaxStored" type="Double" file="FMX.StdActns.pas" line="286"><devnotes><summary>
Maximum permissible value of the floating-point Value range.
FMX.StdActns.TCustomValueRange.Max inherits from FMX.StdActns.TBaseValueRange.Max. All content below this line refers to FMX.StdActns.TBaseValueRange.Max.
Maximum permissible value of the floating-point Value range. 
</summary></devnotes></property>
      <property name="Value" visibility="public" read="GetValue" write="SetValue" stored="ValueStored" type="Double" file="FMX.StdActns.pas" line="287"><devnotes><summary>
A changeable floating-point parameter.
FMX.StdActns.TCustomValueRange.Value inherits from FMX.StdActns.TBaseValueRange.Value. All content below this line refers to FMX.StdActns.TBaseValueRange.Value.
A changeable floating-point parameter. 
The TBaseValueRange class associates a floating-point number Value to its Min and Max ranges.
</summary></devnotes></property>
      <property name="Frequency" visibility="public" read="GetFrequency" write="SetFrequency" stored="FrequencyStored" type="Double" file="FMX.StdActns.pas" line="288"><devnotes><summary>
The step of possible Value variations.
FMX.StdActns.TCustomValueRange.Frequency inherits from FMX.StdActns.TBaseValueRange.Frequency. All content below this line refers to FMX.StdActns.TBaseValueRange.Frequency.
The step of possible Value variations. 
Value can be multiple of Frequency, Min, or Max. For example, if

Min = 0.1
Max = 2.1
ViewportSize = 0
Frequency = 1

then Value can be:

0.1
1
2
2.1

but it cannot be:

Value = 1.1
</summary></devnotes></property>
      <property name="ViewportSize" visibility="public" read="GetViewportSize" write="SetViewportSize" stored="ViewportSizeStored" type="Double" file="FMX.StdActns.pas" line="289"><devnotes><summary>
Used by controls such as TScrollBar to define the thumb size.
FMX.StdActns.TCustomValueRange.ViewportSize inherits from FMX.StdActns.TBaseValueRange.ViewportSize. All content below this line refers to FMX.StdActns.TBaseValueRange.ViewportSize.
Used by controls such as TScrollBar to define the thumb size. 
Note that the effective maximum value of Value decreases according to Max - ViewportSize. 
</summary></devnotes></property>
      <property name="RelativeValue" visibility="public" read="FRelativeValue" write="SetRelativeValue" stored="False" type="Double" file="FMX.StdActns.pas" line="290"><devnotes><summary>
The Value-based position of the thumb in the scrollable control. 
The RelativeValue property is calculated relatively to Value, according to the following expression:

RelativeValue = (Value-Min)/(Max-Min-ViewportSize)

It can be in the range from 0 through 1. It can be used for positioning a thumb in a scrollable control, whose parameters are defined by the ValueRange properties (Value, Min, Max, ViewportSize, and Frequency).
</summary></devnotes></property>
      <property name="LastValue" visibility="public" read="FLastValue" write="FLastValue" type="Double" default="0" file="FMX.StdActns.pas" line="292"><devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></property>
      <property name="Increment" visibility="public" read="FIncrement" write="SetIncrement" type="Double" default="0" file="FMX.StdActns.pas" line="293"><devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></property>
      <function name="Inc" visibility="public" file="FMX.StdActns.pas" line="294">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></function>
      <function name="Dec" visibility="public" file="FMX.StdActns.pas" line="295">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></function>
      <property name="Owner" visibility="public" read="FOwner" type="TComponent" file="FMX.StdActns.pas" line="297"><devnotes><summary>
The owner component of this class instance.


</summary></devnotes></property>
      <procedure name="BeginUpdate" visibility="public" file="FMX.StdActns.pas" line="298">
      <devnotes><summary>
Called when the ValueRange properties start to update. 
The BeginUpdate method is called when the object starts to change values of the ValueRange properties (Value, Min, Max, ViewportSize, and Frequency).
BeginUpdate increments the UpdateCount property's value by 1.
</summary></devnotes></procedure>
      <procedure name="EndUpdate" visibility="public" file="FMX.StdActns.pas" line="299">
      <devnotes><summary>
Called when the ValueRange properties have finished updating. 
The EndUpdate method is called when the object accomplishes to change values of the ValueRange properties (Value, Min, Max, ViewportSize, and Frequency).
EndUpdate decrements the UpdateCount property value by 1.
</summary></devnotes></procedure>
      <property name="UpdateCount" visibility="public" read="FUpdateCount" type="Integer" file="FMX.StdActns.pas" line="300"><devnotes><summary>
Counter of how many times update changes of the ValueRange properties have been started and not accomplished. 
If UpdateCount &gt; 0, then no update changes will be actually implemented, and
all (Value, Min, Max, ViewportSize, and Frequency) properties will have old values. Update changes will be actually implemented only after calls to the EndUpdate method decrement UpdateCount to 0.
To set new values to these properties, use the New property.
</summary></devnotes></property>
      <property name="Changing" visibility="public" read="FChanging" type="Boolean" file="FMX.StdActns.pas" line="304">
        <devnotes><summary>
This property identifies that the TCustomValueRange type object is recalculating property values. 
</summary></devnotes>
      </property>
      <event name="BeforeChange" visibility="public" read="FBeforeChange" write="FBeforeChange" type="TNotifyEvent" file="FMX.StdActns.pas" line="313">
        <devnotes><summary>
This event is fired before new values of the ValueRange properties become effective.  
The BeforeChange event is fired before new values of the ValueRange properties (Value, Min, Max, ViewportSize, and Frequency) become effective. For example, Min still contains an old value, while the new value is kept only in the New.Min parameter. The BeforeChange event is fired if Tracking = True. 
</summary></devnotes>
      </event>
      <event name="OnChanged" visibility="public" read="FOnChanged" write="FOnChanged" type="TNotifyEvent" file="FMX.StdActns.pas" line="320">
        <devnotes><summary>
This event is fired after a value of any ValueRange property has changed. 
The OnChanged event is fired independently from the Tracking value, after a value of any of the ValueRange properties (Value, Min, Max, ViewportSize, and Frequency) has changed.
</summary></devnotes>
      </event>
      <event name="AfterChange" visibility="public" read="FAfterChange" write="FAfterChange" type="TNotifyEvent" file="FMX.StdActns.pas" line="328">
        <devnotes><summary>
This event is fired after a value of any ValueRange property has changed, but only if Tracking = True. 
The AfterChange event is fired after a value of any of the ValueRange properties (Value, Min, Max, ViewportSize, and Frequency) has changed, but only if Tracking = True.
</summary></devnotes>
      </event>
      <event name="OnTrackingChange" visibility="public" read="FOnTrackingChange" write="FOnTrackingChange" type="TNotifyEvent" file="FMX.StdActns.pas" line="332">
        <devnotes><summary>
This event is fired after a value of the Tracking property has changed, independently from UpdateCount. 
</summary></devnotes>
      </event>
    </members>
  </class>
  <class name="TValueRange" file="FMX.StdActns.pas" line="337">
    
    <ancestor name="TCustomValueRange" namespace="FMX.StdActns">
      <methodref name="IntChanged" visibility="private"/>
      <methodref name="GetMax" visibility="private" procflags="inline"/>
      <methodref name="SetMax" visibility="private"/>
      <methodref name="GetMin" visibility="private" procflags="inline"/>
      <methodref name="SetMin" visibility="private"/>
      <methodref name="GetValue" visibility="private" procflags="inline"/>
      <methodref name="SetValue" visibility="private"/>
      <methodref name="GetFrequency" visibility="private" procflags="inline"/>
      <methodref name="SetFrequency" visibility="private"/>
      <methodref name="GetViewportSize" visibility="private" procflags="inline"/>
      <methodref name="SetViewportSize" visibility="private"/>
      <methodref name="SetRelativeValue" visibility="private"/>
      <methodref name="SetTracking" visibility="private"/>
      <methodref name="SetIncrement" visibility="private"/>
      <methodref name="DoBeforeChange" visibility="protected" procflags="virtual"/>
      <methodref name="DoChanged" visibility="protected" procflags="virtual"/>
      <methodref name="DoAfterChange" visibility="protected" procflags="virtual"/>
      <methodref name="DoTrackingChange" visibility="protected" procflags="virtual"/>
      <propertyref name="Initialized" visibility="protected"/>
      <methodref name="GetOwner" visibility="protected" procflags="override"/>
      <methodref name="MaxStored" visibility="protected" procflags="virtual"/>
      <methodref name="MinStored" visibility="protected" procflags="virtual"/>
      <methodref name="ValueStored" visibility="protected" procflags="virtual"/>
      <methodref name="FrequencyStored" visibility="protected" procflags="virtual"/>
      <methodref name="ViewportSizeStored" visibility="protected" procflags="virtual"/>
      <methodref name="Create" visibility="public" procflags="constructor virtual"/>
      <methodref name="Destroy" visibility="public" procflags="destructor override"/>
      <methodref name="Assign" visibility="public" procflags="override"/>
      <methodref name="GetNamePath" visibility="public" procflags="override"/>
      <methodref name="IsEmpty" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="Clear" visibility="public" procflags="virtual">
      </methodref>
      <propertyref name="Tracking" visibility="public">
      </propertyref>
      <methodref name="Changed" visibility="public">
      </methodref>
      <propertyref name="IsChanged" visibility="public"/>
      <propertyref name="New" visibility="public">
      </propertyref>
      <propertyref name="Min" visibility="public"/>
      <propertyref name="Max" visibility="public"/>
      <propertyref name="Value" visibility="public"/>
      <propertyref name="Frequency" visibility="public"/>
      <propertyref name="ViewportSize" visibility="public"/>
      <propertyref name="RelativeValue" visibility="public"/>
      <propertyref name="LastValue" visibility="public"/>
      <propertyref name="Increment" visibility="public"/>
      <methodref name="Inc" visibility="public"/>
      <methodref name="Dec" visibility="public"/>
      <propertyref name="Owner" visibility="public"/>
      <methodref name="BeginUpdate" visibility="public"/>
      <methodref name="EndUpdate" visibility="public"/>
      <propertyref name="UpdateCount" visibility="public"/>
      <propertyref name="Changing" visibility="public">
      </propertyref>
      <eventref name="BeforeChange" visibility="public">
      </eventref>
      <eventref name="OnChanged" visibility="public">
      </eventref>
      <eventref name="AfterChange" visibility="public">
      </eventref>
      <eventref name="OnTrackingChange" visibility="public">
      </eventref>
      <ancestor name="TBaseValueRange" namespace="FMX.StdActns">
        <propertyref name="Min" visibility="public"/>
        <propertyref name="Max" visibility="public"/>
        <propertyref name="Value" visibility="public"/>
        <propertyref name="Frequency" visibility="public"/>
        <propertyref name="ViewportSize" visibility="public"/>
        <methodref name="Assign" visibility="public" procflags="override"/>
        <methodref name="Equals" visibility="public" procflags="override"/>
        <methodref name="Same" visibility="public" procflags="virtual"/>
        <ancestor name="TPersistent" namespace="System.Classes">
          <methodref name="AssignError" visibility="private">
          </methodref>
          <methodref name="AssignTo" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="DefineProperties" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="GetOwner" visibility="protected" procflags="dynamic">
          </methodref>
          <methodref name="Destroy" visibility="public" procflags="destructor override">
          </methodref>
          <methodref name="Assign" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="GetNamePath" visibility="public" procflags="dynamic">
          </methodref>
          <ancestor name="TObject" namespace="System">
            <methodref name="Create" visibility="public" procflags="constructor">
            </methodref>
            <methodref name="Free" visibility="public">
            </methodref>
            <methodref name="DisposeOf" visibility="public" procflags="inline">
            </methodref>
            <methodref name="InitInstance" visibility="public" procflags="class">
            </methodref>
            <methodref name="CleanupInstance" visibility="public">
            </methodref>
            <methodref name="ClassType" visibility="public" procflags="inline">
            </methodref>
            <methodref name="ClassName" visibility="public" procflags="class">
            </methodref>
            <methodref name="ClassNameIs" visibility="public" procflags="class">
            </methodref>
            <methodref name="ClassParent" visibility="public" procflags="class inline">
            </methodref>
            <methodref name="ClassInfo" visibility="public" procflags="class inline">
            </methodref>
            <methodref name="InstanceSize" visibility="public" procflags="class inline">
            </methodref>
            <methodref name="InheritsFrom" visibility="public" procflags="class">
            </methodref>
            <methodref name="MethodAddress" visibility="public" procflags="class overload">
            </methodref>
            <methodref name="MethodAddress" visibility="public" procflags="class overload">
            </methodref>
            <methodref name="MethodName" visibility="public" procflags="class">
            </methodref>
            <methodref name="QualifiedClassName" visibility="public" procflags="class">
            </methodref>
            <methodref name="FieldAddress" visibility="public" procflags="overload">
            </methodref>
            <methodref name="FieldAddress" visibility="public" procflags="overload">
            </methodref>
            <methodref name="GetInterface" visibility="public">
            </methodref>
            <methodref name="GetInterfaceEntry" visibility="public" procflags="class">
            </methodref>
            <methodref name="GetInterfaceTable" visibility="public" procflags="class inline">
            </methodref>
            <methodref name="UnitName" visibility="public" procflags="class">
            </methodref>
            <methodref name="UnitScope" visibility="public" procflags="class">
            </methodref>
            <methodref name="Equals" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="GetHashCode" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="ToString" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="SafeCallException" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="AfterConstruction" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="BeforeDestruction" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="Dispatch" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="DefaultHandler" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="NewInstance" visibility="public" procflags="class virtual">
            </methodref>
            <methodref name="FreeInstance" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="Destroy" visibility="public" procflags="destructor virtual">
            </methodref>
            <methodref name="GetDisposed" visibility="protected" procflags="inline">
            </methodref>
            <methodref name="CheckDisposed" visibility="protected" procflags="inline">
            </methodref>
            <propertyref name="Disposed" visibility="protected">
            </propertyref>
          </ancestor>
        </ancestor>
      </ancestor>
    </ancestor>
    <members>
      <property name="Min" visibility="published" read="GetMin" write="SetMin" stored="MinStored" type="Double" hoisted="true" file="FMX.StdActns.pas" line="339"/>
      <property name="Max" visibility="published" read="GetMax" write="SetMax" stored="MaxStored" type="Double" hoisted="true" file="FMX.StdActns.pas" line="340"/>
      <property name="Value" visibility="published" read="GetValue" write="SetValue" stored="ValueStored" type="Double" hoisted="true" file="FMX.StdActns.pas" line="341"/>
      <property name="Frequency" visibility="published" read="GetFrequency" write="SetFrequency" stored="FrequencyStored" type="Double" hoisted="true" file="FMX.StdActns.pas" line="342"/>
      <property name="ViewportSize" visibility="published" read="GetViewportSize" write="SetViewportSize" stored="ViewportSizeStored" type="Double" hoisted="true" file="FMX.StdActns.pas" line="343"/>
      <property name="RelativeValue" visibility="published" read="FRelativeValue" write="SetRelativeValue" stored="False" type="Double" hoisted="true" file="FMX.StdActns.pas" line="344"/>
    </members>
  </class>
  <class name="TCustomValueRangeAction" file="FMX.StdActns.pas" line="349">
    
    <ancestor name="TCustomControlAction" namespace="FMX.Controls">
      <methodref name="SetPopupMenu" visibility="private"/>
      <methodref name="Notification" visibility="protected" procflags="override"/>
      <methodref name="Create" visibility="public" procflags="constructor override"/>
      <propertyref name="PopupMenu" visibility="public"/>
      <ancestor name="TCustomAction" namespace="FMX.ActnList">
        <methodref name="GetText" visibility="private" procflags="inline"/>
        <methodref name="SetText" visibility="private" procflags="inline"/>
        <methodref name="GetCustomActionList" visibility="private"/>
        <methodref name="SetCustomActionList" visibility="private"/>
        <methodref name="ReaderCaptionProc" visibility="private"/>
        <methodref name="WriterCaptionProc" visibility="private"/>
        <methodref name="ReaderImageIndexProc" visibility="private"/>
        <methodref name="WriterImageIndexProc" visibility="private"/>
        <methodref name="SetUnsupportedArchitectures" visibility="private"/>
        <methodref name="SetUnsupportedPlatforms" visibility="private"/>
        <methodref name="SetCustomText" visibility="private"/>
        <methodref name="SetHideIfUnsupportedInterface" visibility="private"/>
        <methodref name="UpdateSupported" visibility="protected"/>
        <methodref name="IsSupportedInterface" visibility="protected" procflags="virtual"/>
        <methodref name="CreateShortCutList" visibility="protected" procflags="override"/>
        <methodref name="DefineProperties" visibility="protected" procflags="override"/>
        <methodref name="SetTarget" visibility="protected" procflags="virtual"/>
        <methodref name="SetEnabled" visibility="protected" procflags="override"/>
        <methodref name="SetVisible" visibility="protected" procflags="override"/>
        <methodref name="Loaded" visibility="protected" procflags="override"/>
        <methodref name="CustomTextChanged" visibility="protected" procflags="virtual"/>
        <propertyref name="CustomText" visibility="protected"/>
        <methodref name="Create" visibility="public" procflags="constructor override"/>
        <methodref name="Execute" visibility="public" procflags="override"/>
        <methodref name="Update" visibility="public" procflags="override"/>
        <methodref name="IsDialogKey" visibility="public"/>
        <propertyref name="Text" visibility="public"/>
        <propertyref name="Caption" visibility="public"/>
        <propertyref name="ActionList" visibility="public"/>
        <propertyref name="HideIfUnsupportedInterface" visibility="public"/>
        <propertyref name="ShortCutPressed" visibility="public"/>
        <propertyref name="Target" visibility="public"/>
        <propertyref name="UnsupportedArchitectures" visibility="public"/>
        <propertyref name="UnsupportedPlatforms" visibility="public"/>
        <propertyref name="Supported" visibility="public"/>
        <ancestor name="TContainedAction" namespace="System.Actions">
          <methodref name="GetIndex" visibility="private">
          </methodref>
          <methodref name="SetIndex" visibility="private">
          </methodref>
          <methodref name="SetCategory" visibility="private">
          </methodref>
          <methodref name="GetSecondaryShortCuts" visibility="private">
          </methodref>
          <methodref name="SetSecondaryShortCuts" visibility="private">
          </methodref>
          <methodref name="IsSecondaryShortCutsStored" visibility="private">
          </methodref>
          <methodref name="SetActionList" visibility="private">
          </methodref>
          <methodref name="ReadState" visibility="protected" procflags="override">
          </methodref>
          <methodref name="SecondaryShortCutsCreated" visibility="protected">
          </methodref>
          <methodref name="CreateShortCutList" visibility="protected" procflags="virtual">
          </methodref>
          <propertyref name="SavedEnabledState" visibility="protected">
          </propertyref>
          <methodref name="AssignTo" visibility="protected" procflags="override">
          </methodref>
          <methodref name="HandleShortCut" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="SetAutoCheck" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="SetCaption" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="SetName" visibility="protected" procflags="override">
          </methodref>
          <methodref name="SetChecked" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="SetEnabled" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="SetGroupIndex" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="SetHelpContext" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="SetHelpKeyword" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="SetHelpType" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="SetHint" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="SetVisible" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="SetShortCut" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="SetImageIndex" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="SetStatusAction" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="Create" visibility="public" procflags="constructor override">
          </methodref>
          <methodref name="Destroy" visibility="public" procflags="destructor override">
          </methodref>
          <methodref name="GetParentComponent" visibility="public" procflags="override">
          </methodref>
          <methodref name="HasParent" visibility="public" procflags="override">
          </methodref>
          <methodref name="SetParentComponent" visibility="public" procflags="override">
          </methodref>
          <propertyref name="ActionList" visibility="public">
          </propertyref>
          <methodref name="Suspended" visibility="public" procflags="override">
          </methodref>
          <propertyref name="Index" visibility="public">
          </propertyref>
          <propertyref name="DisableIfNoHandler" visibility="public">
          </propertyref>
          <propertyref name="AutoCheck" visibility="public">
          </propertyref>
          <propertyref name="Caption" visibility="public">
          </propertyref>
          <propertyref name="Checked" visibility="public">
          </propertyref>
          <propertyref name="Enabled" visibility="public">
          </propertyref>
          <propertyref name="GroupIndex" visibility="public">
          </propertyref>
          <propertyref name="HelpContext" visibility="public">
          </propertyref>
          <propertyref name="HelpKeyword" visibility="public">
          </propertyref>
          <propertyref name="HelpType" visibility="public">
          </propertyref>
          <propertyref name="Hint" visibility="public">
          </propertyref>
          <propertyref name="Visible" visibility="public">
          </propertyref>
          <propertyref name="ShortCut" visibility="public">
          </propertyref>
          <propertyref name="SecondaryShortCuts" visibility="public">
          </propertyref>
          <propertyref name="ImageIndex" visibility="public">
          </propertyref>
          <methodref name="DoHint" visibility="public" procflags="dynamic">
          </methodref>
          <eventref name="OnHint" visibility="public">
          </eventref>
          <propertyref name="StatusAction" visibility="public">
          </propertyref>
          <propertyref name="Category" visibility="published">
          </propertyref>
          <ancestor name="TBasicAction" namespace="System.Classes">
            <methodref name="GetClientCount" visibility="private">
            </methodref>
            <methodref name="GetClient" visibility="private">
            </methodref>
            <methodref name="SetActionComponent" visibility="private">
            </methodref>
            <methodref name="Change" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="SetOnExecute" visibility="protected" procflags="virtual">
            </methodref>
            <eventref name="OnChange" visibility="protected">
            </eventref>
            <methodref name="Notification" visibility="protected" procflags="override">
            </methodref>
            <propertyref name="ClientCount" visibility="protected">
            </propertyref>
            <propertyref name="Clients" visibility="protected">
            </propertyref>
            <methodref name="RegisterChanges" visibility="protected">
            </methodref>
            <methodref name="UnRegisterChanges" visibility="protected">
            </methodref>
            <methodref name="Create" visibility="public" procflags="constructor override">
            </methodref>
            <methodref name="Destroy" visibility="public" procflags="destructor override">
            </methodref>
            <methodref name="Suspended" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="HandlesTarget" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="UpdateTarget" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="ExecuteTarget" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="Execute" visibility="public" procflags="dynamic">
            </methodref>
            <methodref name="Update" visibility="public" procflags="virtual">
            </methodref>
            <propertyref name="ActionComponent" visibility="public">
            </propertyref>
            <eventref name="OnExecute" visibility="public">
            </eventref>
            <eventref name="OnUpdate" visibility="public">
            </eventref>
            <ancestor name="TComponent" namespace="System.Classes">
              <interfaces>
                <implements name="IInterfaceComponentReference"/>
                <implements name="IInterface"/>
              </interfaces>
              <methodref name="GetComObject" visibility="private">
              </methodref>
              <methodref name="GetComponent" visibility="private">
              </methodref>
              <methodref name="GetComponentCount" visibility="private">
              </methodref>
              <methodref name="GetComponentIndex" visibility="private">
              </methodref>
              <methodref name="Insert" visibility="private">
              </methodref>
              <methodref name="ReadLeft" visibility="private">
              </methodref>
              <methodref name="ReadTop" visibility="private">
              </methodref>
              <methodref name="Remove" visibility="private">
              </methodref>
              <methodref name="RemoveNotification" visibility="private">
              </methodref>
              <methodref name="SetComponentIndex" visibility="private">
              </methodref>
              <methodref name="SetReference" visibility="private">
              </methodref>
              <methodref name="WriteLeft" visibility="private">
              </methodref>
              <methodref name="WriteTop" visibility="private">
              </methodref>
              <methodref name="IntfGetComponent" visibility="private">
              </methodref>
              <methodref name="DoGetDeltaStreams" visibility="private">
              </methodref>
              <methodref name="ReadDeltaStream" visibility="private">
              </methodref>
              <methodref name="ReadDeltaState" visibility="private">
              </methodref>
              <methodref name="FindSortedComponent" visibility="private">
              </methodref>
              <methodref name="AddSortedComponent" visibility="private">
              </methodref>
              <methodref name="RemoveSortedComponent" visibility="private" procflags="inline">
              </methodref>
              <methodref name="Create@" visibility="class private" procflags="class constructor noself">
              </methodref>
              <methodref name="AsyncSchedule" visibility="protected" procflags="virtual">
              </methodref>
              <methodref name="ChangeName" visibility="protected">
              </methodref>
              <methodref name="DefineProperties" visibility="protected" procflags="override">
              </methodref>
              <methodref name="GetChildren" visibility="protected" procflags="dynamic">
              </methodref>
              <methodref name="GetChildOwner" visibility="protected" procflags="dynamic">
              </methodref>
              <methodref name="GetChildParent" visibility="protected" procflags="dynamic">
              </methodref>
              <methodref name="GetOwner" visibility="protected" procflags="override">
              </methodref>
              <methodref name="Loaded" visibility="protected" procflags="virtual">
              </methodref>
              <methodref name="Notification" visibility="protected" procflags="virtual">
              </methodref>
              <methodref name="GetDeltaStreams" visibility="protected" procflags="dynamic">
              </methodref>
              <methodref name="ReadState" visibility="protected" procflags="virtual">
              </methodref>
              <methodref name="CanObserve" visibility="protected" procflags="virtual">
              </methodref>
              <methodref name="ObserverAdded" visibility="protected" procflags="virtual">
              </methodref>
              <methodref name="GetObservers" visibility="protected" procflags="virtual">
              </methodref>
              <methodref name="SetAncestor" visibility="protected">
              </methodref>
              <methodref name="SetDesigning" visibility="protected">
              </methodref>
              <methodref name="SetInline" visibility="protected">
              </methodref>
              <methodref name="SetDesignInstance" visibility="protected">
              </methodref>
              <methodref name="SetName" visibility="protected" procflags="virtual">
              </methodref>
              <methodref name="SetChildOrder" visibility="protected" procflags="dynamic">
              </methodref>
              <methodref name="SetParentComponent" visibility="protected" procflags="dynamic">
              </methodref>
              <methodref name="Updating" visibility="protected" procflags="dynamic">
              </methodref>
              <methodref name="Updated" visibility="protected" procflags="dynamic">
              </methodref>
              <methodref name="UpdateRegistry" visibility="protected" procflags="class virtual">
              </methodref>
              <methodref name="ValidateRename" visibility="protected" procflags="virtual">
              </methodref>
              <methodref name="ValidateContainer" visibility="protected" procflags="dynamic">
              </methodref>
              <methodref name="ValidateInsert" visibility="protected" procflags="dynamic">
              </methodref>
              <methodref name="WriteState" visibility="protected" procflags="virtual">
              </methodref>
              <methodref name="RemoveFreeNotifications" visibility="protected">
              </methodref>
              <methodref name="QueryInterface" visibility="protected" procflags="virtual">
              </methodref>
              <methodref name="_AddRef" visibility="protected">
              </methodref>
              <methodref name="_Release" visibility="protected">
              </methodref>
              <methodref name="GetTypeInfoCount" visibility="protected">
              </methodref>
              <methodref name="GetTypeInfo" visibility="protected">
              </methodref>
              <methodref name="GetIDsOfNames" visibility="protected">
              </methodref>
              <methodref name="Invoke" visibility="protected">
              </methodref>
              <eventref name="OnGetDeltaStreams" visibility="protected">
              </eventref>
              <methodref name="Create" visibility="public" procflags="constructor virtual">
              </methodref>
              <methodref name="Destroy" visibility="public" procflags="destructor override">
              </methodref>
              <methodref name="BeforeDestruction" visibility="public" procflags="override">
              </methodref>
              <methodref name="BeginInvoke" visibility="public" procflags="overload">
              </methodref>
              <methodref name="BeginInvoke" visibility="public" procflags="overload">
              </methodref>
              <methodref name="BeginInvoke" visibility="public" procflags="overload">
              </methodref>
              <methodref name="BeginInvoke" visibility="public" procflags="overload">
              </methodref>
              <methodref name="BeginInvoke" visibility="public" procflags="overload">
              </methodref>
              <methodref name="BeginInvoke" visibility="public" procflags="overload">
              </methodref>
              <methodref name="BeginInvoke" visibility="public" procflags="overload">
              </methodref>
              <methodref name="BeginInvoke" visibility="public" procflags="overload">
              </methodref>
              <methodref name="EndInvoke" visibility="public" procflags="overload">
              </methodref>
              <methodref name="EndInvoke" visibility="public" procflags="overload">
              </methodref>
              <methodref name="EndFunctionInvoke" visibility="public">
              </methodref>
              <methodref name="DestroyComponents" visibility="public">
              </methodref>
              <methodref name="Destroying" visibility="public">
              </methodref>
              <methodref name="ExecuteAction" visibility="public" procflags="dynamic">
              </methodref>
              <methodref name="FindComponent" visibility="public">
              </methodref>
              <methodref name="FreeNotification" visibility="public">
              </methodref>
              <methodref name="RemoveFreeNotification" visibility="public">
              </methodref>
              <methodref name="FreeOnRelease" visibility="public">
              </methodref>
              <methodref name="GetEnumerator" visibility="public" procflags="inline">
              </methodref>
              <methodref name="GetParentComponent" visibility="public" procflags="dynamic">
              </methodref>
              <methodref name="GetNamePath" visibility="public" procflags="override">
              </methodref>
              <methodref name="HasParent" visibility="public" procflags="dynamic">
              </methodref>
              <methodref name="InsertComponent" visibility="public">
              </methodref>
              <methodref name="RemoveComponent" visibility="public">
              </methodref>
              <methodref name="SetSubComponent" visibility="public">
              </methodref>
              <methodref name="SafeCallException" visibility="public" procflags="override">
              </methodref>
              <methodref name="UpdateAction" visibility="public" procflags="virtual">
              </methodref>
              <methodref name="IsImplementorOf" visibility="public">
              </methodref>
              <methodref name="ReferenceInterface" visibility="public">
              </methodref>
              <propertyref name="ComObject" visibility="public">
              </propertyref>
              <propertyref name="Components" visibility="public">
              </propertyref>
              <propertyref name="ComponentCount" visibility="public">
              </propertyref>
              <propertyref name="ComponentIndex" visibility="public">
              </propertyref>
              <propertyref name="ComponentState" visibility="public">
              </propertyref>
              <propertyref name="ComponentStyle" visibility="public">
              </propertyref>
              <propertyref name="DesignInfo" visibility="public">
              </propertyref>
              <propertyref name="Owner" visibility="public">
              </propertyref>
              <propertyref name="VCLComObject" visibility="public">
              </propertyref>
              <propertyref name="Observers" visibility="public">
              </propertyref>
              <propertyref name="Name" visibility="published">
              </propertyref>
              <propertyref name="Tag" visibility="published">
              </propertyref>
              <ancestor name="TPersistent" namespace="System.Classes">
                <methodref name="AssignError" visibility="private">
                </methodref>
                <methodref name="AssignTo" visibility="protected" procflags="virtual">
                </methodref>
                <methodref name="DefineProperties" visibility="protected" procflags="virtual">
                </methodref>
                <methodref name="GetOwner" visibility="protected" procflags="dynamic">
                </methodref>
                <methodref name="Destroy" visibility="public" procflags="destructor override">
                </methodref>
                <methodref name="Assign" visibility="public" procflags="virtual">
                </methodref>
                <methodref name="GetNamePath" visibility="public" procflags="dynamic">
                </methodref>
                <ancestor name="TObject" namespace="System">
                  <methodref name="Create" visibility="public" procflags="constructor">
                  </methodref>
                  <methodref name="Free" visibility="public">
                  </methodref>
                  <methodref name="DisposeOf" visibility="public" procflags="inline">
                  </methodref>
                  <methodref name="InitInstance" visibility="public" procflags="class">
                  </methodref>
                  <methodref name="CleanupInstance" visibility="public">
                  </methodref>
                  <methodref name="ClassType" visibility="public" procflags="inline">
                  </methodref>
                  <methodref name="ClassName" visibility="public" procflags="class">
                  </methodref>
                  <methodref name="ClassNameIs" visibility="public" procflags="class">
                  </methodref>
                  <methodref name="ClassParent" visibility="public" procflags="class inline">
                  </methodref>
                  <methodref name="ClassInfo" visibility="public" procflags="class inline">
                  </methodref>
                  <methodref name="InstanceSize" visibility="public" procflags="class inline">
                  </methodref>
                  <methodref name="InheritsFrom" visibility="public" procflags="class">
                  </methodref>
                  <methodref name="MethodAddress" visibility="public" procflags="class overload">
                  </methodref>
                  <methodref name="MethodAddress" visibility="public" procflags="class overload">
                  </methodref>
                  <methodref name="MethodName" visibility="public" procflags="class">
                  </methodref>
                  <methodref name="QualifiedClassName" visibility="public" procflags="class">
                  </methodref>
                  <methodref name="FieldAddress" visibility="public" procflags="overload">
                  </methodref>
                  <methodref name="FieldAddress" visibility="public" procflags="overload">
                  </methodref>
                  <methodref name="GetInterface" visibility="public">
                  </methodref>
                  <methodref name="GetInterfaceEntry" visibility="public" procflags="class">
                  </methodref>
                  <methodref name="GetInterfaceTable" visibility="public" procflags="class inline">
                  </methodref>
                  <methodref name="UnitName" visibility="public" procflags="class">
                  </methodref>
                  <methodref name="UnitScope" visibility="public" procflags="class">
                  </methodref>
                  <methodref name="Equals" visibility="public" procflags="virtual">
                  </methodref>
                  <methodref name="GetHashCode" visibility="public" procflags="virtual">
                  </methodref>
                  <methodref name="ToString" visibility="public" procflags="virtual">
                  </methodref>
                  <methodref name="SafeCallException" visibility="public" procflags="virtual">
                  </methodref>
                  <methodref name="AfterConstruction" visibility="public" procflags="virtual">
                  </methodref>
                  <methodref name="BeforeDestruction" visibility="public" procflags="virtual">
                  </methodref>
                  <methodref name="Dispatch" visibility="public" procflags="virtual">
                  </methodref>
                  <methodref name="DefaultHandler" visibility="public" procflags="virtual">
                  </methodref>
                  <methodref name="NewInstance" visibility="public" procflags="class virtual">
                  </methodref>
                  <methodref name="FreeInstance" visibility="public" procflags="virtual">
                  </methodref>
                  <methodref name="Destroy" visibility="public" procflags="destructor virtual">
                  </methodref>
                  <methodref name="GetDisposed" visibility="protected" procflags="inline">
                  </methodref>
                  <methodref name="CheckDisposed" visibility="protected" procflags="inline">
                  </methodref>
                  <propertyref name="Disposed" visibility="protected">
                  </propertyref>
                </ancestor>
              </ancestor>
            </ancestor>
          </ancestor>
        </ancestor>
      </ancestor>
    </ancestor>
    <members>
      <field name="FValueRange" type="TCustomValueRange" visibility="private" size="4" offset="192" file="FMX.StdActns.pas" line="351"/>
      <function name="GetValueRange" visibility="private" file="FMX.StdActns.pas" line="352">
        <parameters>
          <retval type="TCustomValueRange">
            <devnotes>
               <summary>Extends the TBaseValueRange class providing methods and
               properties used to control the correctness of the Value handling within
               its Min to Max range.</summary>
            </devnotes>
          </retval>
        </parameters>
      </function>
      <procedure name="SetValueRange" visibility="private" file="FMX.StdActns.pas" line="353">
        <parameters>
          <parameter name="Value" type="TCustomValueRange" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="CreateValueRange" visibility="protected" procflags="virtual" file="FMX.StdActns.pas" line="355">
        <parameters>
          <retval type="TCustomValueRange">
            <devnotes>
               <summary>Extends the TBaseValueRange class providing methods and
               properties used to control the correctness of the Value handling within
               its Min to Max range.</summary>
            </devnotes>
          </retval>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></function>
      <procedure name="Loaded" visibility="protected" procflags="override" file="FMX.StdActns.pas" line="356">
      <devnotes><summary>


Initializes the component after the form file has been read into memory.
FMX.StdActns.TCustomValueRangeAction.Loaded inherits from System.Classes.TComponent.Loaded. All content below this line refers to System.Classes.TComponent.Loaded.
Initializes the component after the form file has been read into memory.
Do not call the protected Loaded method. The streaming system calls this method after it loads the component's form from a stream.
When the streaming system loads a form or data module from its form file, it first constructs the form component by calling its constructor, then reads its property values from the form file. After reading all the property values for all the components, the streaming system calls the Loaded methods of each component in the order the components were created. This gives the components a chance to initialize any data that depends on the values of other components or other parts of itself.

Note:  All references to sibling components are resolved by the time Loaded is called. Loaded is the first place that sibling pointers can be used after being streamed in.
As implemented in TComponent, Loaded clears the csLoading flag in the ComponentState property, indicating that the component is no longer loading.

Warning: Loaded may be called multiple times on inherited forms. It is called every time a level of inheritance is streamed in. Do not allocate memory in an overridden Loaded method without first checking that the memory has not been allocated in a previous call.</summary></devnotes></procedure>
      <constructor name="Create" visibility="public" file="FMX.StdActns.pas" line="358">
        <parameters>
          <parameter name="AOwner" type="TComponent"/>
        </parameters>
      <devnotes><summary>


Instantiates and initializes a FireMonkey TCustomAction object.
FMX.StdActns.TCustomValueRangeAction.Create inherits from FMX.ActnList.TCustomAction.Create. All content below this line refers to FMX.ActnList.TCustomAction.Create.
Instantiates and initializes a FireMonkey TCustomAction object.
Applications do not need to call the constructor directly. Actions are created automatically when you add them to an action list component using New Action in the Action List editor at design time.
If you want to create an action at run time, assign a TActionList component to its ActionList property after calling Create.
AOwner is the component that is responsible for freeing the action. It becomes the value of the Owner property.
Create calls an inherited System.Actions.TContainedAction.Create constructor and then initializes the Supported property with True .
</summary></devnotes></constructor>
      <destructor name="Destroy" visibility="public" file="FMX.StdActns.pas" line="359">
        <parameters>
        </parameters>
      <devnotes><summary>
Destroys the instance of the contained action.
FMX.StdActns.TCustomValueRangeAction.Destroy inherits from System.Actions.TContainedAction.Destroy. All content below this line refers to System.Actions.TContainedAction.Destroy.
Destroys the instance of the contained action.
If the action is contained in an action list or action manager, Destroy removes the action from that list. Then it calls the inherited Destroy method.


</summary></devnotes></destructor>
      <property name="ValueRange" visibility="public" read="GetValueRange" write="SetValueRange" type="TCustomValueRange" file="FMX.StdActns.pas" line="360"><devnotes><summary>
Provides access to a floating-point value and its permitted ranges.
ValueRange provides access to the Value, Min, Max, Frequency, ViewportSize, and
RelativeValue properties and to the methods handling consistency of these properties.
</summary></devnotes></property>
    </members>
  </class>
  <class name="TValueRangeAction" file="FMX.StdActns.pas" line="365">
    
    <ancestor name="TCustomValueRangeAction" namespace="FMX.StdActns">
      <methodref name="GetValueRange" visibility="private"/>
      <methodref name="SetValueRange" visibility="private"/>
      <methodref name="CreateValueRange" visibility="protected" procflags="virtual"/>
      <methodref name="Loaded" visibility="protected" procflags="override"/>
      <methodref name="Create" visibility="public" procflags="constructor override"/>
      <methodref name="Destroy" visibility="public" procflags="destructor override"/>
      <propertyref name="ValueRange" visibility="public"/>
      <ancestor name="TCustomControlAction" namespace="FMX.Controls">
        <methodref name="SetPopupMenu" visibility="private"/>
        <methodref name="Notification" visibility="protected" procflags="override"/>
        <methodref name="Create" visibility="public" procflags="constructor override"/>
        <propertyref name="PopupMenu" visibility="public"/>
        <ancestor name="TCustomAction" namespace="FMX.ActnList">
          <methodref name="GetText" visibility="private" procflags="inline"/>
          <methodref name="SetText" visibility="private" procflags="inline"/>
          <methodref name="GetCustomActionList" visibility="private"/>
          <methodref name="SetCustomActionList" visibility="private"/>
          <methodref name="ReaderCaptionProc" visibility="private"/>
          <methodref name="WriterCaptionProc" visibility="private"/>
          <methodref name="ReaderImageIndexProc" visibility="private"/>
          <methodref name="WriterImageIndexProc" visibility="private"/>
          <methodref name="SetUnsupportedArchitectures" visibility="private"/>
          <methodref name="SetUnsupportedPlatforms" visibility="private"/>
          <methodref name="SetCustomText" visibility="private"/>
          <methodref name="SetHideIfUnsupportedInterface" visibility="private"/>
          <methodref name="UpdateSupported" visibility="protected"/>
          <methodref name="IsSupportedInterface" visibility="protected" procflags="virtual"/>
          <methodref name="CreateShortCutList" visibility="protected" procflags="override"/>
          <methodref name="DefineProperties" visibility="protected" procflags="override"/>
          <methodref name="SetTarget" visibility="protected" procflags="virtual"/>
          <methodref name="SetEnabled" visibility="protected" procflags="override"/>
          <methodref name="SetVisible" visibility="protected" procflags="override"/>
          <methodref name="Loaded" visibility="protected" procflags="override"/>
          <methodref name="CustomTextChanged" visibility="protected" procflags="virtual"/>
          <propertyref name="CustomText" visibility="protected"/>
          <methodref name="Create" visibility="public" procflags="constructor override"/>
          <methodref name="Execute" visibility="public" procflags="override"/>
          <methodref name="Update" visibility="public" procflags="override"/>
          <methodref name="IsDialogKey" visibility="public"/>
          <propertyref name="Text" visibility="public"/>
          <propertyref name="Caption" visibility="public"/>
          <propertyref name="ActionList" visibility="public"/>
          <propertyref name="HideIfUnsupportedInterface" visibility="public"/>
          <propertyref name="ShortCutPressed" visibility="public"/>
          <propertyref name="Target" visibility="public"/>
          <propertyref name="UnsupportedArchitectures" visibility="public"/>
          <propertyref name="UnsupportedPlatforms" visibility="public"/>
          <propertyref name="Supported" visibility="public"/>
          <ancestor name="TContainedAction" namespace="System.Actions">
            <methodref name="GetIndex" visibility="private">
            </methodref>
            <methodref name="SetIndex" visibility="private">
            </methodref>
            <methodref name="SetCategory" visibility="private">
            </methodref>
            <methodref name="GetSecondaryShortCuts" visibility="private">
            </methodref>
            <methodref name="SetSecondaryShortCuts" visibility="private">
            </methodref>
            <methodref name="IsSecondaryShortCutsStored" visibility="private">
            </methodref>
            <methodref name="SetActionList" visibility="private">
            </methodref>
            <methodref name="ReadState" visibility="protected" procflags="override">
            </methodref>
            <methodref name="SecondaryShortCutsCreated" visibility="protected">
            </methodref>
            <methodref name="CreateShortCutList" visibility="protected" procflags="virtual">
            </methodref>
            <propertyref name="SavedEnabledState" visibility="protected">
            </propertyref>
            <methodref name="AssignTo" visibility="protected" procflags="override">
            </methodref>
            <methodref name="HandleShortCut" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="SetAutoCheck" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="SetCaption" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="SetName" visibility="protected" procflags="override">
            </methodref>
            <methodref name="SetChecked" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="SetEnabled" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="SetGroupIndex" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="SetHelpContext" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="SetHelpKeyword" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="SetHelpType" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="SetHint" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="SetVisible" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="SetShortCut" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="SetImageIndex" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="SetStatusAction" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="Create" visibility="public" procflags="constructor override">
            </methodref>
            <methodref name="Destroy" visibility="public" procflags="destructor override">
            </methodref>
            <methodref name="GetParentComponent" visibility="public" procflags="override">
            </methodref>
            <methodref name="HasParent" visibility="public" procflags="override">
            </methodref>
            <methodref name="SetParentComponent" visibility="public" procflags="override">
            </methodref>
            <propertyref name="ActionList" visibility="public">
            </propertyref>
            <methodref name="Suspended" visibility="public" procflags="override">
            </methodref>
            <propertyref name="Index" visibility="public">
            </propertyref>
            <propertyref name="DisableIfNoHandler" visibility="public">
            </propertyref>
            <propertyref name="AutoCheck" visibility="public">
            </propertyref>
            <propertyref name="Caption" visibility="public">
            </propertyref>
            <propertyref name="Checked" visibility="public">
            </propertyref>
            <propertyref name="Enabled" visibility="public">
            </propertyref>
            <propertyref name="GroupIndex" visibility="public">
            </propertyref>
            <propertyref name="HelpContext" visibility="public">
            </propertyref>
            <propertyref name="HelpKeyword" visibility="public">
            </propertyref>
            <propertyref name="HelpType" visibility="public">
            </propertyref>
            <propertyref name="Hint" visibility="public">
            </propertyref>
            <propertyref name="Visible" visibility="public">
            </propertyref>
            <propertyref name="ShortCut" visibility="public">
            </propertyref>
            <propertyref name="SecondaryShortCuts" visibility="public">
            </propertyref>
            <propertyref name="ImageIndex" visibility="public">
            </propertyref>
            <methodref name="DoHint" visibility="public" procflags="dynamic">
            </methodref>
            <eventref name="OnHint" visibility="public">
            </eventref>
            <propertyref name="StatusAction" visibility="public">
            </propertyref>
            <propertyref name="Category" visibility="published">
            </propertyref>
            <ancestor name="TBasicAction" namespace="System.Classes">
              <methodref name="GetClientCount" visibility="private">
              </methodref>
              <methodref name="GetClient" visibility="private">
              </methodref>
              <methodref name="SetActionComponent" visibility="private">
              </methodref>
              <methodref name="Change" visibility="protected" procflags="virtual">
              </methodref>
              <methodref name="SetOnExecute" visibility="protected" procflags="virtual">
              </methodref>
              <eventref name="OnChange" visibility="protected">
              </eventref>
              <methodref name="Notification" visibility="protected" procflags="override">
              </methodref>
              <propertyref name="ClientCount" visibility="protected">
              </propertyref>
              <propertyref name="Clients" visibility="protected">
              </propertyref>
              <methodref name="RegisterChanges" visibility="protected">
              </methodref>
              <methodref name="UnRegisterChanges" visibility="protected">
              </methodref>
              <methodref name="Create" visibility="public" procflags="constructor override">
              </methodref>
              <methodref name="Destroy" visibility="public" procflags="destructor override">
              </methodref>
              <methodref name="Suspended" visibility="public" procflags="virtual">
              </methodref>
              <methodref name="HandlesTarget" visibility="public" procflags="virtual">
              </methodref>
              <methodref name="UpdateTarget" visibility="public" procflags="virtual">
              </methodref>
              <methodref name="ExecuteTarget" visibility="public" procflags="virtual">
              </methodref>
              <methodref name="Execute" visibility="public" procflags="dynamic">
              </methodref>
              <methodref name="Update" visibility="public" procflags="virtual">
              </methodref>
              <propertyref name="ActionComponent" visibility="public">
              </propertyref>
              <eventref name="OnExecute" visibility="public">
              </eventref>
              <eventref name="OnUpdate" visibility="public">
              </eventref>
              <ancestor name="TComponent" namespace="System.Classes">
                <interfaces>
                  <implements name="IInterfaceComponentReference"/>
                  <implements name="IInterface"/>
                </interfaces>
                <methodref name="GetComObject" visibility="private">
                </methodref>
                <methodref name="GetComponent" visibility="private">
                </methodref>
                <methodref name="GetComponentCount" visibility="private">
                </methodref>
                <methodref name="GetComponentIndex" visibility="private">
                </methodref>
                <methodref name="Insert" visibility="private">
                </methodref>
                <methodref name="ReadLeft" visibility="private">
                </methodref>
                <methodref name="ReadTop" visibility="private">
                </methodref>
                <methodref name="Remove" visibility="private">
                </methodref>
                <methodref name="RemoveNotification" visibility="private">
                </methodref>
                <methodref name="SetComponentIndex" visibility="private">
                </methodref>
                <methodref name="SetReference" visibility="private">
                </methodref>
                <methodref name="WriteLeft" visibility="private">
                </methodref>
                <methodref name="WriteTop" visibility="private">
                </methodref>
                <methodref name="IntfGetComponent" visibility="private">
                </methodref>
                <methodref name="DoGetDeltaStreams" visibility="private">
                </methodref>
                <methodref name="ReadDeltaStream" visibility="private">
                </methodref>
                <methodref name="ReadDeltaState" visibility="private">
                </methodref>
                <methodref name="FindSortedComponent" visibility="private">
                </methodref>
                <methodref name="AddSortedComponent" visibility="private">
                </methodref>
                <methodref name="RemoveSortedComponent" visibility="private" procflags="inline">
                </methodref>
                <methodref name="Create@" visibility="class private" procflags="class constructor noself">
                </methodref>
                <methodref name="AsyncSchedule" visibility="protected" procflags="virtual">
                </methodref>
                <methodref name="ChangeName" visibility="protected">
                </methodref>
                <methodref name="DefineProperties" visibility="protected" procflags="override">
                </methodref>
                <methodref name="GetChildren" visibility="protected" procflags="dynamic">
                </methodref>
                <methodref name="GetChildOwner" visibility="protected" procflags="dynamic">
                </methodref>
                <methodref name="GetChildParent" visibility="protected" procflags="dynamic">
                </methodref>
                <methodref name="GetOwner" visibility="protected" procflags="override">
                </methodref>
                <methodref name="Loaded" visibility="protected" procflags="virtual">
                </methodref>
                <methodref name="Notification" visibility="protected" procflags="virtual">
                </methodref>
                <methodref name="GetDeltaStreams" visibility="protected" procflags="dynamic">
                </methodref>
                <methodref name="ReadState" visibility="protected" procflags="virtual">
                </methodref>
                <methodref name="CanObserve" visibility="protected" procflags="virtual">
                </methodref>
                <methodref name="ObserverAdded" visibility="protected" procflags="virtual">
                </methodref>
                <methodref name="GetObservers" visibility="protected" procflags="virtual">
                </methodref>
                <methodref name="SetAncestor" visibility="protected">
                </methodref>
                <methodref name="SetDesigning" visibility="protected">
                </methodref>
                <methodref name="SetInline" visibility="protected">
                </methodref>
                <methodref name="SetDesignInstance" visibility="protected">
                </methodref>
                <methodref name="SetName" visibility="protected" procflags="virtual">
                </methodref>
                <methodref name="SetChildOrder" visibility="protected" procflags="dynamic">
                </methodref>
                <methodref name="SetParentComponent" visibility="protected" procflags="dynamic">
                </methodref>
                <methodref name="Updating" visibility="protected" procflags="dynamic">
                </methodref>
                <methodref name="Updated" visibility="protected" procflags="dynamic">
                </methodref>
                <methodref name="UpdateRegistry" visibility="protected" procflags="class virtual">
                </methodref>
                <methodref name="ValidateRename" visibility="protected" procflags="virtual">
                </methodref>
                <methodref name="ValidateContainer" visibility="protected" procflags="dynamic">
                </methodref>
                <methodref name="ValidateInsert" visibility="protected" procflags="dynamic">
                </methodref>
                <methodref name="WriteState" visibility="protected" procflags="virtual">
                </methodref>
                <methodref name="RemoveFreeNotifications" visibility="protected">
                </methodref>
                <methodref name="QueryInterface" visibility="protected" procflags="virtual">
                </methodref>
                <methodref name="_AddRef" visibility="protected">
                </methodref>
                <methodref name="_Release" visibility="protected">
                </methodref>
                <methodref name="GetTypeInfoCount" visibility="protected">
                </methodref>
                <methodref name="GetTypeInfo" visibility="protected">
                </methodref>
                <methodref name="GetIDsOfNames" visibility="protected">
                </methodref>
                <methodref name="Invoke" visibility="protected">
                </methodref>
                <eventref name="OnGetDeltaStreams" visibility="protected">
                </eventref>
                <methodref name="Create" visibility="public" procflags="constructor virtual">
                </methodref>
                <methodref name="Destroy" visibility="public" procflags="destructor override">
                </methodref>
                <methodref name="BeforeDestruction" visibility="public" procflags="override">
                </methodref>
                <methodref name="BeginInvoke" visibility="public" procflags="overload">
                </methodref>
                <methodref name="BeginInvoke" visibility="public" procflags="overload">
                </methodref>
                <methodref name="BeginInvoke" visibility="public" procflags="overload">
                </methodref>
                <methodref name="BeginInvoke" visibility="public" procflags="overload">
                </methodref>
                <methodref name="BeginInvoke" visibility="public" procflags="overload">
                </methodref>
                <methodref name="BeginInvoke" visibility="public" procflags="overload">
                </methodref>
                <methodref name="BeginInvoke" visibility="public" procflags="overload">
                </methodref>
                <methodref name="BeginInvoke" visibility="public" procflags="overload">
                </methodref>
                <methodref name="EndInvoke" visibility="public" procflags="overload">
                </methodref>
                <methodref name="EndInvoke" visibility="public" procflags="overload">
                </methodref>
                <methodref name="EndFunctionInvoke" visibility="public">
                </methodref>
                <methodref name="DestroyComponents" visibility="public">
                </methodref>
                <methodref name="Destroying" visibility="public">
                </methodref>
                <methodref name="ExecuteAction" visibility="public" procflags="dynamic">
                </methodref>
                <methodref name="FindComponent" visibility="public">
                </methodref>
                <methodref name="FreeNotification" visibility="public">
                </methodref>
                <methodref name="RemoveFreeNotification" visibility="public">
                </methodref>
                <methodref name="FreeOnRelease" visibility="public">
                </methodref>
                <methodref name="GetEnumerator" visibility="public" procflags="inline">
                </methodref>
                <methodref name="GetParentComponent" visibility="public" procflags="dynamic">
                </methodref>
                <methodref name="GetNamePath" visibility="public" procflags="override">
                </methodref>
                <methodref name="HasParent" visibility="public" procflags="dynamic">
                </methodref>
                <methodref name="InsertComponent" visibility="public">
                </methodref>
                <methodref name="RemoveComponent" visibility="public">
                </methodref>
                <methodref name="SetSubComponent" visibility="public">
                </methodref>
                <methodref name="SafeCallException" visibility="public" procflags="override">
                </methodref>
                <methodref name="UpdateAction" visibility="public" procflags="virtual">
                </methodref>
                <methodref name="IsImplementorOf" visibility="public">
                </methodref>
                <methodref name="ReferenceInterface" visibility="public">
                </methodref>
                <propertyref name="ComObject" visibility="public">
                </propertyref>
                <propertyref name="Components" visibility="public">
                </propertyref>
                <propertyref name="ComponentCount" visibility="public">
                </propertyref>
                <propertyref name="ComponentIndex" visibility="public">
                </propertyref>
                <propertyref name="ComponentState" visibility="public">
                </propertyref>
                <propertyref name="ComponentStyle" visibility="public">
                </propertyref>
                <propertyref name="DesignInfo" visibility="public">
                </propertyref>
                <propertyref name="Owner" visibility="public">
                </propertyref>
                <propertyref name="VCLComObject" visibility="public">
                </propertyref>
                <propertyref name="Observers" visibility="public">
                </propertyref>
                <propertyref name="Name" visibility="published">
                </propertyref>
                <propertyref name="Tag" visibility="published">
                </propertyref>
                <ancestor name="TPersistent" namespace="System.Classes">
                  <methodref name="AssignError" visibility="private">
                  </methodref>
                  <methodref name="AssignTo" visibility="protected" procflags="virtual">
                  </methodref>
                  <methodref name="DefineProperties" visibility="protected" procflags="virtual">
                  </methodref>
                  <methodref name="GetOwner" visibility="protected" procflags="dynamic">
                  </methodref>
                  <methodref name="Destroy" visibility="public" procflags="destructor override">
                  </methodref>
                  <methodref name="Assign" visibility="public" procflags="virtual">
                  </methodref>
                  <methodref name="GetNamePath" visibility="public" procflags="dynamic">
                  </methodref>
                  <ancestor name="TObject" namespace="System">
                    <methodref name="Create" visibility="public" procflags="constructor">
                    </methodref>
                    <methodref name="Free" visibility="public">
                    </methodref>
                    <methodref name="DisposeOf" visibility="public" procflags="inline">
                    </methodref>
                    <methodref name="InitInstance" visibility="public" procflags="class">
                    </methodref>
                    <methodref name="CleanupInstance" visibility="public">
                    </methodref>
                    <methodref name="ClassType" visibility="public" procflags="inline">
                    </methodref>
                    <methodref name="ClassName" visibility="public" procflags="class">
                    </methodref>
                    <methodref name="ClassNameIs" visibility="public" procflags="class">
                    </methodref>
                    <methodref name="ClassParent" visibility="public" procflags="class inline">
                    </methodref>
                    <methodref name="ClassInfo" visibility="public" procflags="class inline">
                    </methodref>
                    <methodref name="InstanceSize" visibility="public" procflags="class inline">
                    </methodref>
                    <methodref name="InheritsFrom" visibility="public" procflags="class">
                    </methodref>
                    <methodref name="MethodAddress" visibility="public" procflags="class overload">
                    </methodref>
                    <methodref name="MethodAddress" visibility="public" procflags="class overload">
                    </methodref>
                    <methodref name="MethodName" visibility="public" procflags="class">
                    </methodref>
                    <methodref name="QualifiedClassName" visibility="public" procflags="class">
                    </methodref>
                    <methodref name="FieldAddress" visibility="public" procflags="overload">
                    </methodref>
                    <methodref name="FieldAddress" visibility="public" procflags="overload">
                    </methodref>
                    <methodref name="GetInterface" visibility="public">
                    </methodref>
                    <methodref name="GetInterfaceEntry" visibility="public" procflags="class">
                    </methodref>
                    <methodref name="GetInterfaceTable" visibility="public" procflags="class inline">
                    </methodref>
                    <methodref name="UnitName" visibility="public" procflags="class">
                    </methodref>
                    <methodref name="UnitScope" visibility="public" procflags="class">
                    </methodref>
                    <methodref name="Equals" visibility="public" procflags="virtual">
                    </methodref>
                    <methodref name="GetHashCode" visibility="public" procflags="virtual">
                    </methodref>
                    <methodref name="ToString" visibility="public" procflags="virtual">
                    </methodref>
                    <methodref name="SafeCallException" visibility="public" procflags="virtual">
                    </methodref>
                    <methodref name="AfterConstruction" visibility="public" procflags="virtual">
                    </methodref>
                    <methodref name="BeforeDestruction" visibility="public" procflags="virtual">
                    </methodref>
                    <methodref name="Dispatch" visibility="public" procflags="virtual">
                    </methodref>
                    <methodref name="DefaultHandler" visibility="public" procflags="virtual">
                    </methodref>
                    <methodref name="NewInstance" visibility="public" procflags="class virtual">
                    </methodref>
                    <methodref name="FreeInstance" visibility="public" procflags="virtual">
                    </methodref>
                    <methodref name="Destroy" visibility="public" procflags="destructor virtual">
                    </methodref>
                    <methodref name="GetDisposed" visibility="protected" procflags="inline">
                    </methodref>
                    <methodref name="CheckDisposed" visibility="protected" procflags="inline">
                    </methodref>
                    <propertyref name="Disposed" visibility="protected">
                    </propertyref>
                  </ancestor>
                </ancestor>
              </ancestor>
            </ancestor>
          </ancestor>
        </ancestor>
      </ancestor>
    </ancestor>
    <members>
      <function name="CreateValueRange" visibility="protected" procflags="override" file="FMX.StdActns.pas" line="367">
        <parameters>
          <retval type="TCustomValueRange">
            <devnotes>
               <summary>Extends the TBaseValueRange class providing methods and
               properties used to control the correctness of the Value handling within
               its Min to Max range.</summary>
            </devnotes>
          </retval>
        </parameters>
      <devnotes><summary>


Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></function>
      <property name="AutoCheck" visibility="published" read="FAutoCheck" write="SetAutoCheck" type="Boolean" default="0" hoisted="true" file="FMX.StdActns.pas" line="369"/>
      <property name="Text" visibility="published" read="GetText" write="SetText" type="string" default="0" hoisted="true" file="FMX.StdActns.pas" line="370"/>
      <property name="Checked" visibility="published" read="FChecked" write="SetChecked" type="Boolean" default="0" hoisted="true" file="FMX.StdActns.pas" line="371"/>
      <property name="Enabled" visibility="published" read="FEnabled" write="SetEnabled" type="Boolean" default="1" hoisted="true" file="FMX.StdActns.pas" line="372"/>
      <property name="GroupIndex" visibility="published" read="FGroupIndex" write="SetGroupIndex" type="Integer" default="0" hoisted="true" file="FMX.StdActns.pas" line="373"/>
      <property name="HelpContext" visibility="published" read="FHelpContext" write="SetHelpContext" type="THelpContext" default="0" hoisted="true" file="FMX.StdActns.pas" line="374"/>
      <property name="HelpKeyword" visibility="published" read="FHelpKeyword" write="SetHelpKeyword" type="string" default="0" hoisted="true" file="FMX.StdActns.pas" line="375"/>
      <property name="HelpType" visibility="published" read="FHelpType" write="SetHelpType" type="THelpType" default="0" hoisted="true" file="FMX.StdActns.pas" line="376"/>
      <property name="ShortCut" visibility="published" read="FShortCut" write="SetShortCut" type="TShortCut" default="0" hoisted="true" file="FMX.StdActns.pas" line="377"/>
      <property name="SecondaryShortCuts" visibility="published" read="GetSecondaryShortCuts" write="SetSecondaryShortCuts" stored="IsSecondaryShortCutsStored" type="TCustomShortCutList" hoisted="true" file="FMX.StdActns.pas" line="378"/>
      <property name="Visible" visibility="published" read="FVisible" write="SetVisible" type="Boolean" default="1" hoisted="true" file="FMX.StdActns.pas" line="379"/>
      <property name="UnsupportedArchitectures" visibility="published" read="FUnsupportedArchitectures" write="SetUnsupportedArchitectures" type="TArchitectures" default="0" hoisted="true" file="FMX.StdActns.pas" line="380"/>
      <property name="UnsupportedPlatforms" visibility="published" read="FUnsupportedPlatforms" write="SetUnsupportedPlatforms" type="TPlatforms" default="0" hoisted="true" file="FMX.StdActns.pas" line="381"/>
      <event name="OnExecute" visibility="published" read="FOnExecute" write="SetOnExecute" type="TNotifyEvent" hoisted="true" file="FMX.StdActns.pas" line="382"/>
      <event name="OnUpdate" visibility="published" read="FOnUpdate" write="FOnUpdate" type="TNotifyEvent" hoisted="true" file="FMX.StdActns.pas" line="383"/>
      <property name="PopupMenu" visibility="published" read="FPopupMenu" write="SetPopupMenu" type="TCustomPopupMenu" hoisted="true" file="FMX.StdActns.pas" line="384"/>
      <property name="ValueRange" visibility="published" read="GetValueRange" write="SetValueRange" type="TCustomValueRange" hoisted="true" file="FMX.StdActns.pas" line="385"/>
    </members>
  </class>
  <class name="TValueRangeActionLink" file="FMX.StdActns.pas" line="391">
    
    <ancestor name="TControlActionLink" namespace="FMX.Controls">
      <methodref name="GetClient" visibility="private"/>
      <methodref name="AssignClient" visibility="protected" procflags="override"/>
      <methodref name="IsEnabledLinked" visibility="protected" procflags="override"/>
      <methodref name="IsHelpLinked" visibility="protected" procflags="override"/>
      <methodref name="IsHintLinked" visibility="protected" procflags="override"/>
      <methodref name="IsVisibleLinked" visibility="protected" procflags="override"/>
      <methodref name="IsOnExecuteLinked" visibility="protected" procflags="override"/>
      <methodref name="IsPopupMenuLinked" visibility="protected" procflags="virtual"/>
      <methodref name="DoShowHint" visibility="protected" procflags="virtual">
      </methodref>
      <methodref name="SetHint" visibility="protected" procflags="override">
      </methodref>
      <methodref name="SetEnabled" visibility="protected" procflags="override"/>
      <methodref name="SetHelpContext" visibility="protected" procflags="override"/>
      <methodref name="SetHelpKeyword" visibility="protected" procflags="override"/>
      <methodref name="SetHelpType" visibility="protected" procflags="override"/>
      <methodref name="SetVisible" visibility="protected" procflags="override"/>
      <methodref name="SetOnExecute" visibility="protected" procflags="override"/>
      <methodref name="SetPopupMenu" visibility="protected" procflags="virtual"/>
      <propertyref name="Client" visibility="public"/>
      <ancestor name="TActionLink" namespace="FMX.ActnList">
        <methodref name="UpdateImages" visibility="private"/>
        <methodref name="AssignClient" visibility="protected" procflags="override"/>
        <methodref name="SetAction" visibility="protected" procflags="override"/>
        <methodref name="IsCaptionLinked" visibility="protected" procflags="override"/>
        <methodref name="IsCheckedLinked" visibility="protected" procflags="override"/>
        <methodref name="IsEnabledLinked" visibility="protected" procflags="override"/>
        <methodref name="IsGroupIndexLinked" visibility="protected" procflags="override"/>
        <methodref name="IsOnExecuteLinked" visibility="protected" procflags="override"/>
        <methodref name="IsShortCutLinked" visibility="protected" procflags="override"/>
        <methodref name="IsVisibleLinked" visibility="protected" procflags="override"/>
        <methodref name="IsImageIndexLinked" visibility="protected" procflags="override"/>
        <methodref name="SetCaption" visibility="protected" procflags="override"/>
        <methodref name="SetChecked" visibility="protected" procflags="override"/>
        <methodref name="SetGroupIndex" visibility="protected" procflags="override"/>
        <methodref name="SetImageIndex" visibility="protected" procflags="override"/>
        <methodref name="Change" visibility="protected" procflags="override"/>
        <propertyref name="Glyph" visibility="protected">
        </propertyref>
        <methodref name="IsViewActionClient" visibility="public"/>
        <propertyref name="Client" visibility="public"/>
        <propertyref name="Images" visibility="public">
        </propertyref>
        <propertyref name="CaptionLinked" visibility="public"/>
        <propertyref name="HintLinked" visibility="public">
        </propertyref>
        <propertyref name="CheckedLinked" visibility="public"/>
        <propertyref name="EnabledLinked" visibility="public"/>
        <propertyref name="GroupIndexLinked" visibility="public"/>
        <propertyref name="ShortCutLinked" visibility="public"/>
        <propertyref name="VisibleLinked" visibility="public"/>
        <propertyref name="OnExecuteLinked" visibility="public"/>
        <ancestor name="TContainedActionLink" namespace="System.Actions">
          <methodref name="DefaultIsLinked" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="IsCaptionLinked" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="IsCheckedLinked" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="IsEnabledLinked" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="IsGroupIndexLinked" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="IsHelpContextLinked" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="IsHelpLinked" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="IsHintLinked" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="IsImageIndexLinked" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="IsShortCutLinked" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="IsVisibleLinked" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="IsStatusActionLinked" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="SetAutoCheck" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="SetCaption" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="SetChecked" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="SetEnabled" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="SetGroupIndex" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="SetHelpContext" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="SetHelpKeyword" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="SetHelpType" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="SetHint" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="SetImageIndex" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="SetShortCut" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="SetVisible" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="SetStatusAction" visibility="protected" procflags="virtual">
          </methodref>
          <ancestor name="TBasicActionLink" namespace="System.Classes">
            <methodref name="AssignClient" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="Change" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="IsOnExecuteLinked" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="SetAction" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="SetOnExecute" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="Create" visibility="public" procflags="constructor virtual">
            </methodref>
            <methodref name="Destroy" visibility="public" procflags="destructor override">
            </methodref>
            <methodref name="Execute" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="Update" visibility="public" procflags="virtual">
            </methodref>
            <propertyref name="Action" visibility="public">
            </propertyref>
            <eventref name="OnChange" visibility="public">
            </eventref>
            <ancestor name="TObject" namespace="System">
              <methodref name="Create" visibility="public" procflags="constructor">
              </methodref>
              <methodref name="Free" visibility="public">
              </methodref>
              <methodref name="DisposeOf" visibility="public" procflags="inline">
              </methodref>
              <methodref name="InitInstance" visibility="public" procflags="class">
              </methodref>
              <methodref name="CleanupInstance" visibility="public">
              </methodref>
              <methodref name="ClassType" visibility="public" procflags="inline">
              </methodref>
              <methodref name="ClassName" visibility="public" procflags="class">
              </methodref>
              <methodref name="ClassNameIs" visibility="public" procflags="class">
              </methodref>
              <methodref name="ClassParent" visibility="public" procflags="class inline">
              </methodref>
              <methodref name="ClassInfo" visibility="public" procflags="class inline">
              </methodref>
              <methodref name="InstanceSize" visibility="public" procflags="class inline">
              </methodref>
              <methodref name="InheritsFrom" visibility="public" procflags="class">
              </methodref>
              <methodref name="MethodAddress" visibility="public" procflags="class overload">
              </methodref>
              <methodref name="MethodAddress" visibility="public" procflags="class overload">
              </methodref>
              <methodref name="MethodName" visibility="public" procflags="class">
              </methodref>
              <methodref name="QualifiedClassName" visibility="public" procflags="class">
              </methodref>
              <methodref name="FieldAddress" visibility="public" procflags="overload">
              </methodref>
              <methodref name="FieldAddress" visibility="public" procflags="overload">
              </methodref>
              <methodref name="GetInterface" visibility="public">
              </methodref>
              <methodref name="GetInterfaceEntry" visibility="public" procflags="class">
              </methodref>
              <methodref name="GetInterfaceTable" visibility="public" procflags="class inline">
              </methodref>
              <methodref name="UnitName" visibility="public" procflags="class">
              </methodref>
              <methodref name="UnitScope" visibility="public" procflags="class">
              </methodref>
              <methodref name="Equals" visibility="public" procflags="virtual">
              </methodref>
              <methodref name="GetHashCode" visibility="public" procflags="virtual">
              </methodref>
              <methodref name="ToString" visibility="public" procflags="virtual">
              </methodref>
              <methodref name="SafeCallException" visibility="public" procflags="virtual">
              </methodref>
              <methodref name="AfterConstruction" visibility="public" procflags="virtual">
              </methodref>
              <methodref name="BeforeDestruction" visibility="public" procflags="virtual">
              </methodref>
              <methodref name="Dispatch" visibility="public" procflags="virtual">
              </methodref>
              <methodref name="DefaultHandler" visibility="public" procflags="virtual">
              </methodref>
              <methodref name="NewInstance" visibility="public" procflags="class virtual">
              </methodref>
              <methodref name="FreeInstance" visibility="public" procflags="virtual">
              </methodref>
              <methodref name="Destroy" visibility="public" procflags="destructor virtual">
              </methodref>
              <methodref name="GetDisposed" visibility="protected" procflags="inline">
              </methodref>
              <methodref name="CheckDisposed" visibility="protected" procflags="inline">
              </methodref>
              <propertyref name="Disposed" visibility="protected">
              </propertyref>
            </ancestor>
          </ancestor>
        </ancestor>
      </ancestor>
    </ancestor>
    <members>
      <function name="IsValueRangeLinked" visibility="protected" file="FMX.StdActns.pas" line="393">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <procedure name="SetValueRange" visibility="protected" procflags="virtual" file="FMX.StdActns.pas" line="394">
        <parameters>
          <parameter name="AValue" type="TBaseValueRange" paramflags="const"/>
        </parameters>
      </procedure>
    </members>
  </class>
  <interface name="IValueRange" GUID="{6DFA65EF-A8BF-4D58-9655-664B50C30312}" ancestor="IInterface" file="FMX.StdActns.pas" line="399">
    <devnotes>
       <summary>This interface declares methods for setting and getting the
       ValueRange property.</summary>
    </devnotes>
    <function name="GetValueRange" visibility="public" procflags="abstract virtual" file="FMX.StdActns.pas" line="401">
      <parameters>
        <retval type="TCustomValueRange">
          <devnotes>
             <summary>Extends the TBaseValueRange class providing methods and
             properties used to control the correctness of the Value handling within
             its Min to Max range.</summary>
          </devnotes>
        </retval>
      </parameters>
    </function>
    <procedure name="SetValueRange" visibility="public" procflags="abstract virtual" file="FMX.StdActns.pas" line="402">
      <parameters>
        <parameter name="AValue" type="TCustomValueRange" paramflags="const"/>
      </parameters>
    </procedure>
    <property name="ValueRange" visibility="public" read="GetValueRange" write="SetValueRange" type="TCustomValueRange" file="FMX.StdActns.pas" line="403"/>
  </interface>
</namespace>