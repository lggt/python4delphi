<?xml version="1.0" ?><namespace name="FMX.Objects" platform="Win32">
  <class name="TShape" file="FMX.Objects.pas" line="26">
    
    <members>
      <field name="FFill" type="TBrush" visibility="private" size="4" offset="904" file="FMX.Objects.pas" line="28"/>
      <field name="FStroke" type="TStrokeBrush" visibility="private" size="4" offset="908" file="FMX.Objects.pas" line="29"/>
      <procedure name="SetFill" visibility="private" file="FMX.Objects.pas" line="30">
        <parameters>
          <parameter name="Value" type="TBrush" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetStroke" visibility="private" file="FMX.Objects.pas" line="31">
        <parameters>
          <parameter name="Value" type="TStrokeBrush" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="Painting" visibility="protected" procflags="override" file="FMX.Objects.pas" line="33">
      <devnotes><summary>
Calls the inherited Painting method, which calls the event handler of the OnPainting event. Then Painting initializes the fill and stroke properties of the current canvas.
Painting initializes the Fill and Stroke properties of the current canvas with values defined for the proper properties of the shape object. 
</summary></devnotes></procedure>
      <procedure name="FillChanged" visibility="protected" procflags="virtual" file="FMX.Objects.pas" line="34">
        <parameters>
          <parameter name="Sender" type="TObject"/>
        </parameters>
      <devnotes><summary>
Forces the shape to repaint its image on the screen.
FillChanged is the event handler of the FMX.Graphics.TBrush.OnChanged event of the Fill property.


</summary></devnotes></procedure>
      <procedure name="StrokeChanged" visibility="protected" procflags="virtual" file="FMX.Objects.pas" line="35">
        <parameters>
          <parameter name="Sender" type="TObject"/>
        </parameters>
      <devnotes><summary>
Forces the shape to repaint its image on the screen.
StrokeChanged is the event handler of the FMX.Graphics.TBrush.OnChanged event of the Stroke property.


</summary></devnotes></procedure>
      <function name="GetShapeRect" visibility="protected" file="FMX.Objects.pas" line="36">
        <parameters>
          <retval type="TRectF"/>
        </parameters>
      <devnotes><summary>
Retrieves the ShapeRect rectangle for drawing the shape.


</summary></devnotes></function>
      <function name="DoGetUpdateRect" visibility="protected" procflags="override" file="FMX.Objects.pas" line="37">
        <parameters>
          <retval type="TRectF"/>
        </parameters>
      <devnotes><summary>


Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></function>
      <constructor name="Create" visibility="public" file="FMX.Objects.pas" line="39">
        <parameters>
          <parameter name="AOwner" type="TComponent"/>
        </parameters>
      <devnotes><summary>
Creates an instance of TShape with the specified component as owner. 
</summary></devnotes></constructor>
      <destructor name="Destroy" visibility="public" file="FMX.Objects.pas" line="40">
        <parameters>
        </parameters>
      <devnotes><summary>
Destroys the object instance and frees its memory.
Do not call Destroy directly in an application. Call Free instead. Free verifies that the object instance is not nil before calling Destroy.
</summary></devnotes></destructor>
      <property name="Fill" visibility="public" read="FFill" write="SetFill" type="TBrush" file="FMX.Objects.pas" line="41"><devnotes><summary>
Determines the color and pattern used to fill the shape background.
The value of Fill is an FMX.Graphics.TBrush object. It can define the gradient, brush pattern, brush color, opacity, and other parameters to fill the shape background.
</summary></devnotes></property>
      <property name="Stroke" visibility="public" read="FStroke" write="SetStroke" type="TStrokeBrush" file="FMX.Objects.pas" line="42"><devnotes><summary>
Determines the color and pattern of the drawing pen used to draw lines and shape contours of the graphical primitives.
The value of Stroke is an FMX.Graphics.TStrokeBrush object. To customize the outline pen, change the Thickness, Cap, Dash, and Join properties of the TStrokeBrush object.
</summary></devnotes></property>
      <property name="ShapeRect" visibility="public" read="GetShapeRect" type="TRectF" file="FMX.Objects.pas" line="43"><devnotes><summary>
Specifies the rectangle for drawing the shape.
The coordinates of the upper-left corner of the rectangle are (0,0), and the coordinates of the lower-right corner are (Width, Height). 
</summary></devnotes></property>
    </members>
  <devnotes><summary>
The base class for 2D graphic primitives--TLines, TRectangles, TPaths, and others. All these primitives inherit TControl and can be used in styles to construct controls. 
TShape is the ancestor class to most other classes defined in the Objects unit. It defines the common behavior--methods and properties--for 2D graphic primitives. TShape objects cannot be used as stand-alone 2D components.


</summary></devnotes></class>
  <enum name="TLineType" file="FMX.Objects.pas" line="48">
    <element value="0" name="Diagonal" file="FMX.Objects.pas" line="48"/>
    <element value="1" name="Top" file="FMX.Objects.pas" line="48"/>
    <element value="2" name="Left" file="FMX.Objects.pas" line="48"/>
    <element value="3" name="Bottom" file="FMX.Objects.pas" line="48"/>
    <element value="4" name="Right" file="FMX.Objects.pas" line="48"/>
  </enum>
  <enum name="TLineLocation" file="FMX.Objects.pas" line="51">
    <devnotes>
       <summary>Specifies the way a line is drawn.</summary>
    </devnotes>
    <element value="0" name="Boundary" file="FMX.Objects.pas" line="51"/>
    <element value="1" name="Inner" file="FMX.Objects.pas" line="51"/>
    <element value="2" name="InnerWithin" file="FMX.Objects.pas" line="51"/>
  </enum>
  <class name="TLine" file="FMX.Objects.pas" line="53">
    
    <members>
      <field name="FLineType" type="TLineType" visibility="private" size="1" offset="912" file="FMX.Objects.pas" line="55"/>
      <field name="FShortenLine" type="Boolean" visibility="private" size="1" offset="913" file="FMX.Objects.pas" line="56"/>
      <field name="FLineLocation" type="TLineLocation" visibility="private" size="1" offset="914" file="FMX.Objects.pas" line="57"/>
      <procedure name="SetLineType" visibility="private" file="FMX.Objects.pas" line="58">
        <parameters>
          <parameter name="Value" type="TLineType" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetShortenLine" visibility="private" file="FMX.Objects.pas" line="59">
        <parameters>
          <parameter name="AValue" type="Boolean" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetLineLocation" visibility="private" file="FMX.Objects.pas" line="60">
        <parameters>
          <parameter name="AValue" type="TLineLocation" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="DoGetUpdateRect" visibility="protected" procflags="override" file="FMX.Objects.pas" line="62">
        <parameters>
          <retval type="TRectF"/>
        </parameters>
      <devnotes><summary>




Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></function>
      <function name="IsControlRectEmpty" visibility="protected" procflags="override" file="FMX.Objects.pas" line="63">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Returns True if the control rect is empty.
FMX.Objects.TLine.IsControlRectEmpty inherits from FMX.Controls.TControl.IsControlRectEmpty. All content below this line refers to FMX.Controls.TControl.IsControlRectEmpty.
Returns True if the control rect is empty.
</summary></devnotes></function>
      <constructor name="Create" visibility="public" file="FMX.Objects.pas" line="65">
        <parameters>
          <parameter name="AOwner" type="TComponent"/>
        </parameters>
      <devnotes><summary>
Creates an instance of TShape with the specified component as owner.
FMX.Objects.TLine.Create inherits from FMX.Objects.TShape.Create. All content below this line refers to FMX.Objects.TShape.Create.
Creates an instance of TShape with the specified component as owner. 
</summary></devnotes></constructor>
      <procedure name="Paint" visibility="public" procflags="override" file="FMX.Objects.pas" line="66">
      <devnotes><summary>
Renders the control's surface. 
FMX.Objects.TLine.Paint inherits from FMX.Controls.TControl.Paint. All content below this line refers to FMX.Controls.TControl.Paint.
Renders the control's surface. 
The Paint method is called by DoPaint when a control is being painted by the PaintTo method. Before DoPaint, Painting is called. AfterPaint is called immediately after. 
FireMonkey internally calls Paint to paint the control when the window is being painted. You must not call Paint explicitly.
The base class TControl implements an empty Paint. The descendants of TControl override Paint to provide specific rendering of the respective controls.
For example, Paint methods in classes of the FMX.Objects unit draw and fill shapes using the properties defined in these classes. See the descriptions of these classes to find the properties of the respective shapes. 
</summary></devnotes></procedure>
      <property name="Align" visibility="published" read="FAlign" write="SetAlign" type="TAlignLayout" default="0" hoisted="true" file="FMX.Objects.pas" line="68"/>
      <property name="Anchors" visibility="published" read="FAnchors" write="SetAnchors" stored="IsAnchorsStored" type="TAnchors" hoisted="true" file="FMX.Objects.pas" line="69"/>
      <property name="ClipChildren" visibility="published" read="FClipChildren" write="SetClipChildren" type="Boolean" default="0" hoisted="true" file="FMX.Objects.pas" line="70"/>
      <property name="ClipParent" visibility="published" read="FClipParent" write="FClipParent" type="Boolean" default="0" hoisted="true" file="FMX.Objects.pas" line="71"/>
      <property name="Cursor" visibility="published" read="GetCursor" write="SetCursor" type="TCursor" default="0" hoisted="true" file="FMX.Objects.pas" line="72"/>
      <property name="DragMode" visibility="published" read="GetDragMode" write="SetDragMode" type="TDragMode" default="0" hoisted="true" file="FMX.Objects.pas" line="73"/>
      <property name="EnableDragHighlight" visibility="published" read="FEnableDragHighlight" write="FEnableDragHighlight" type="Boolean" default="1" hoisted="true" file="FMX.Objects.pas" line="74"/>
      <property name="Enabled" visibility="published" read="FEnabled" write="SetEnabled" stored="EnabledStored" type="Boolean" default="1" hoisted="true" file="FMX.Objects.pas" line="75"/>
      <property name="Locked" visibility="published" read="FLocked" write="SetLocked" type="Boolean" default="0" hoisted="true" file="FMX.Objects.pas" line="76"/>
      <property name="Height" visibility="published" read="GetHeight" write="SetHeight" stored="False" type="Single" hoisted="true" file="FMX.Objects.pas" line="77"/>
      <property name="Hint" visibility="published" read="FHint" write="SetHint" stored="HintStored" type="string" default="0" hoisted="true" file="FMX.Objects.pas" line="78"/>
      <property name="HitTest" visibility="published" read="FHitTest" write="SetHitTest" type="Boolean" default="1" hoisted="true" file="FMX.Objects.pas" line="79"/>
      <property name="LineLocation" visibility="published" read="FLineLocation" write="SetLineLocation" type="TLineLocation" default="0" file="FMX.Objects.pas" line="81">
        <devnotes><summary>
Specifes the way a line is drawn.
The available values are:

Boundary: Default. If you increase the thickness of a Boundary line, the line grows inside and outside of the control symmetrically. The central point of the growth depends on the TLineType. If TLineType is Diagonal, the line goes from the top-left corner to the bottom-right corner. If the thickness of the line is greater than the size of the control, a Boundary line may grow beyond the control.
Inner: If you increase the thickness of an Inner line, the line grows inside the control. If the thickness of the line is greater than the size of the control, an Inner line may grow beyond the control.
InnerWithin: If you increase the thickness of an InnerWithin line, the line grows inside the control. The thickness of an InnerWithin line is limited by the size of the control (it never grows beyond the control).</summary></devnotes>
      </property>
      <property name="LineType" visibility="published" read="FLineType" write="SetLineType" type="TLineType" file="FMX.Objects.pas" line="82"><devnotes><summary>
Specifies how to place the line inside the shape rectangle.
The LineType value should be one of the constants defined in the TLineType type: Diagonal, Top, or Left.
The default is Diagonal.
The TLineType type defines the following constants:



Constant

Meaning



Diagonal



 Draw the line as the diagonal of the shape rectangle.




Top



 Draw the line as the top side (width) of the shape rectangle.




Bottom



 Draw the line as the bottom side (width) of the shape rectangle.




Left



 Draw the line as the left side (height) of the shape rectangle.




Right



 Draw the line as the right side (height) of the shape rectangle.


</summary></devnotes></property>
      <property name="Padding" visibility="published" read="GetPadding" write="SetPadding" type="TBounds" hoisted="true" file="FMX.Objects.pas" line="83"/>
      <property name="Opacity" visibility="published" read="FOpacity" write="SetOpacity" stored="IsOpacityStored" type="Single" hoisted="true" file="FMX.Objects.pas" line="84"/>
      <property name="Margins" visibility="published" read="GetMargins" write="SetMargins" type="TBounds" hoisted="true" file="FMX.Objects.pas" line="85"/>
      <property name="PopupMenu" visibility="published" read="FPopupMenu" write="SetPopupMenu" stored="IsPopupMenuStored" type="TCustomPopupMenu" hoisted="true" file="FMX.Objects.pas" line="86"/>
      <property name="Position" visibility="published" read="FPosition" write="SetPosition" stored="IsPositionStored" type="TPosition" hoisted="true" file="FMX.Objects.pas" line="87"/>
      <property name="RotationAngle" visibility="published" read="GetRotationAngle" write="SetRotationAngle" type="Single" default="0" hoisted="true" file="FMX.Objects.pas" line="88"/>
      <property name="RotationCenter" visibility="published" read="GetRotationCenter" write="SetRotationCenter" type="TPosition" hoisted="true" file="FMX.Objects.pas" line="89"/>
      <property name="Scale" visibility="published" read="GetScale" write="SetScale" type="TPosition" hoisted="true" file="FMX.Objects.pas" line="90"/>
      <property name="ShortenLine" visibility="published" read="FShortenLine" write="SetShortenLine" type="Boolean" default="0" file="FMX.Objects.pas" line="92">
        <devnotes><summary>
Indicates whether to shorten the line.
If True, the width of the line is reduced symmetrically by half of the thickness, while the value of Width stays the same.
</summary></devnotes>
      </property>
      <property name="Size" visibility="published" read="FSize" write="SetSize" stored="IsSizeStored" type="TControlSize" hoisted="true" file="FMX.Objects.pas" line="93"/>
      <property name="Stroke" visibility="published" read="FStroke" write="SetStroke" type="TStrokeBrush" hoisted="true" file="FMX.Objects.pas" line="94"/>
      <property name="Visible" visibility="published" read="FVisible" write="SetVisible" stored="VisibleStored" type="Boolean" default="1" hoisted="true" file="FMX.Objects.pas" line="95"/>
      <property name="Width" visibility="published" read="GetWidth" write="SetWidth" stored="False" type="Single" hoisted="true" file="FMX.Objects.pas" line="96"/>
      <property name="ParentShowHint" visibility="published" read="FParentShowHint" write="SetParentShowHint" type="Boolean" default="1" hoisted="true" file="FMX.Objects.pas" line="97"/>
      <property name="ShowHint" visibility="published" read="FShowHint" write="SetShowHint" stored="IsShowHintStored" type="Boolean" hoisted="true" file="FMX.Objects.pas" line="98"/>
      <event name="OnDragEnter" visibility="published" read="FOnDragEnter" write="FOnDragEnter" type="TDragEnterEvent" hoisted="true" file="FMX.Objects.pas" line="100"/>
      <event name="OnDragLeave" visibility="published" read="FOnDragLeave" write="FOnDragLeave" type="TNotifyEvent" hoisted="true" file="FMX.Objects.pas" line="101"/>
      <event name="OnDragOver" visibility="published" read="FOnDragOver" write="FOnDragOver" type="TDragOverEvent" hoisted="true" file="FMX.Objects.pas" line="102"/>
      <event name="OnDragDrop" visibility="published" read="FOnDragDrop" write="FOnDragDrop" type="TDragDropEvent" hoisted="true" file="FMX.Objects.pas" line="103"/>
      <event name="OnDragEnd" visibility="published" read="FOnDragEnd" write="FOnDragEnd" type="TNotifyEvent" hoisted="true" file="FMX.Objects.pas" line="104"/>
      <event name="OnClick" visibility="published" read="FOnClick" write="SetOnClick" stored="OnClickStored" type="TNotifyEvent" hoisted="true" file="FMX.Objects.pas" line="106"/>
      <event name="OnDblClick" visibility="published" read="FOnDblClick" write="FOnDblClick" type="TNotifyEvent" hoisted="true" file="FMX.Objects.pas" line="107"/>
      <event name="OnMouseDown" visibility="published" read="FOnMouseDown" write="FOnMouseDown" type="TMouseEvent" hoisted="true" file="FMX.Objects.pas" line="109"/>
      <event name="OnMouseMove" visibility="published" read="FOnMouseMove" write="FOnMouseMove" type="TMouseMoveEvent" hoisted="true" file="FMX.Objects.pas" line="110"/>
      <event name="OnMouseUp" visibility="published" read="FOnMouseUp" write="FOnMouseUp" type="TMouseEvent" hoisted="true" file="FMX.Objects.pas" line="111"/>
      <event name="OnMouseWheel" visibility="published" read="FOnMouseWheel" write="FOnMouseWheel" type="TMouseWheelEvent" hoisted="true" file="FMX.Objects.pas" line="112"/>
      <event name="OnMouseEnter" visibility="published" read="FOnMouseEnter" write="FOnMouseEnter" type="TNotifyEvent" hoisted="true" file="FMX.Objects.pas" line="113"/>
      <event name="OnMouseLeave" visibility="published" read="FOnMouseLeave" write="FOnMouseLeave" type="TNotifyEvent" hoisted="true" file="FMX.Objects.pas" line="114"/>
      <event name="OnPainting" visibility="published" read="FOnPainting" write="FOnPainting" type="TOnPaintEvent" hoisted="true" file="FMX.Objects.pas" line="116"/>
      <event name="OnPaint" visibility="published" read="FOnPaint" write="FOnPaint" type="TOnPaintEvent" hoisted="true" file="FMX.Objects.pas" line="117"/>
      <event name="OnResize" visibility="published" read="FOnResize" write="FOnResize" type="TNotifyEvent" hoisted="true" file="FMX.Objects.pas" line="118"/>
      <event name="OnResized" visibility="published" read="FOnResized" write="FOnResized" type="TNotifyEvent" hoisted="true" file="FMX.Objects.pas" line="119"/>
    </members>
  <devnotes><summary>
TLine defines 2D lines. It inherits TControl and can be used in styles to construct controls.
The end points of the line to draw are defined by the following properties of the TLine object:

The shape rectangle and the LineType define the straight-line segment to draw:
LineType defines the orientation of the line segment.
The intersection points of this line segment with the local rectangle define the end points of the straight-line segment.
RotationCenter defines the rotation axis and RotationAngle defines the rotation angle on which the straight-line segment is rotated to obtain the line to draw.
Note: Scaling not only scales the line length proportionally to scaling the factors. It also changes the thickness of the stroke that draws the line. That change is proportional to the scaling factor for each axis.
The parent TControl draws TLine with the Paint method. 
To draw TLine, the Paint method uses the drawing pen with the Stroke property defined for the TLine object.
</summary></devnotes></class>
  <class name="TRectangle" file="FMX.Objects.pas" line="124">
    
    <members>
      <field name="FYRadius" type="Single" visibility="private" size="4" offset="912" file="FMX.Objects.pas" line="126"/>
      <field name="FXRadius" type="Single" visibility="private" size="4" offset="916" file="FMX.Objects.pas" line="127"/>
      <field name="FCorners" type="TCorners" visibility="private" size="1" offset="920" file="FMX.Objects.pas" line="128"/>
      <field name="FCornerType" type="TCornerType" visibility="private" size="4" offset="924" file="FMX.Objects.pas" line="129"/>
      <field name="FSides" type="TSides" visibility="private" size="1" offset="928" file="FMX.Objects.pas" line="130"/>
      <function name="IsCornersStored" visibility="private" file="FMX.Objects.pas" line="131">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <function name="IsSidesStored" visibility="private" file="FMX.Objects.pas" line="132">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <procedure name="SetXRadius" visibility="protected" procflags="virtual" file="FMX.Objects.pas" line="134">
        <parameters>
          <parameter name="Value" type="Single" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Setter for the XRadius property.
</summary></devnotes></procedure>
      <procedure name="SetYRadius" visibility="protected" procflags="virtual" file="FMX.Objects.pas" line="135">
        <parameters>
          <parameter name="Value" type="Single" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Setter for the YRadius property.
</summary></devnotes></procedure>
      <procedure name="SetCorners" visibility="protected" procflags="virtual" file="FMX.Objects.pas" line="136">
        <parameters>
          <parameter name="Value" type="TCorners" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Setter for the Corners property.
Value is a set of constants defined in TCorner: TopLeft, TopRight, BottomLeft, and BottomRight.
</summary></devnotes></procedure>
      <procedure name="SetCornerType" visibility="protected" procflags="virtual" file="FMX.Objects.pas" line="137">
        <parameters>
          <parameter name="Value" type="TCornerType" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Setter for the CornerType property.
Value should be one of the constants defined in TCornerType: Round, Bevel, InnerRound, and InnerLine.
</summary></devnotes></procedure>
      <procedure name="SetSides" visibility="protected" procflags="virtual" file="FMX.Objects.pas" line="138">
        <parameters>
          <parameter name="Value" type="TSides" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Setter for the Sides property.
Value is a set of constants defined in TSide: Top, Left, Bottom, and Right. 
</summary></devnotes></procedure>
      <procedure name="Paint" visibility="protected" procflags="override" file="FMX.Objects.pas" line="139">
      <devnotes><summary>
Renders the control's surface. 
FMX.Objects.TRectangle.Paint inherits from FMX.Controls.TControl.Paint. All content below this line refers to FMX.Controls.TControl.Paint.
Renders the control's surface. 
The Paint method is called by DoPaint when a control is being painted by the PaintTo method. Before DoPaint, Painting is called. AfterPaint is called immediately after. 
FireMonkey internally calls Paint to paint the control when the window is being painted. You must not call Paint explicitly.
The base class TControl implements an empty Paint. The descendants of TControl override Paint to provide specific rendering of the respective controls.
For example, Paint methods in classes of the FMX.Objects unit draw and fill shapes using the properties defined in these classes. See the descriptions of these classes to find the properties of the respective shapes. 
</summary></devnotes></procedure>
      <constructor name="Create" visibility="public" file="FMX.Objects.pas" line="141">
        <parameters>
          <parameter name="AOwner" type="TComponent"/>
        </parameters>
      <devnotes><summary>
Creates an instance of TShape with the specified component as owner.
FMX.Objects.TRectangle.Create inherits from FMX.Objects.TShape.Create. All content below this line refers to FMX.Objects.TShape.Create.
Creates an instance of TShape with the specified component as owner. 
</summary></devnotes></constructor>
      <property name="Align" visibility="published" read="FAlign" write="SetAlign" type="TAlignLayout" default="0" hoisted="true" file="FMX.Objects.pas" line="143"/>
      <property name="Anchors" visibility="published" read="FAnchors" write="SetAnchors" stored="IsAnchorsStored" type="TAnchors" hoisted="true" file="FMX.Objects.pas" line="144"/>
      <property name="ClipChildren" visibility="published" read="FClipChildren" write="SetClipChildren" type="Boolean" default="0" hoisted="true" file="FMX.Objects.pas" line="145"/>
      <property name="ClipParent" visibility="published" read="FClipParent" write="FClipParent" type="Boolean" default="0" hoisted="true" file="FMX.Objects.pas" line="146"/>
      <property name="Corners" visibility="published" read="FCorners" write="SetCorners" stored="IsCornersStored" type="TCorners" file="FMX.Objects.pas" line="147"><devnotes><summary>
Specifies shapes of which corners in the TRectangle rectangle object are customized according to the CornerType, XRadius, and YRadius properties.
By default, all four corners are customized. 
Corners can contain a set of constants defined in the TCorner type: TopLeft, TopRight, BottomLeft, and BottomRight. Use the AllCorners constant to select all corners. 
If Corners is an empty set or any of the XRadius and YRadius properties is zero, then no corner shape customization is used.
</summary></devnotes></property>
      <property name="CornerType" visibility="published" read="FCornerType" write="SetCornerType" type="TCornerType" default="0" file="FMX.Objects.pas" line="149"><devnotes><summary>
Specifies the type of the corner shape's customization in the rectangle.
Values of CornerType are defined in TCornerType. These Round, Bevel, InnerRound, and InnerLine values define the following types of corner shape customizations: 


CornerType applies to corners specified in the Corners set.
XRadius and YRadius specify the distance from a corner to the start point of the corner shape customization, on the horizontal and vertical sides. 

Note: If Corners is an empty set or any of the XRadius and YRadius properties is zero, then no corner shape customization is used.</summary></devnotes></property>
      <property name="Cursor" visibility="published" read="GetCursor" write="SetCursor" type="TCursor" default="0" hoisted="true" file="FMX.Objects.pas" line="151"/>
      <property name="DragMode" visibility="published" read="GetDragMode" write="SetDragMode" type="TDragMode" default="0" hoisted="true" file="FMX.Objects.pas" line="152"/>
      <property name="EnableDragHighlight" visibility="published" read="FEnableDragHighlight" write="FEnableDragHighlight" type="Boolean" default="1" hoisted="true" file="FMX.Objects.pas" line="153"/>
      <property name="Enabled" visibility="published" read="FEnabled" write="SetEnabled" stored="EnabledStored" type="Boolean" default="1" hoisted="true" file="FMX.Objects.pas" line="154"/>
      <property name="Fill" visibility="published" read="FFill" write="SetFill" type="TBrush" hoisted="true" file="FMX.Objects.pas" line="155"/>
      <property name="Locked" visibility="published" read="FLocked" write="SetLocked" type="Boolean" default="0" hoisted="true" file="FMX.Objects.pas" line="156"/>
      <property name="Height" visibility="published" read="GetHeight" write="SetHeight" stored="False" type="Single" hoisted="true" file="FMX.Objects.pas" line="157"/>
      <property name="Hint" visibility="published" read="FHint" write="SetHint" stored="HintStored" type="string" default="0" hoisted="true" file="FMX.Objects.pas" line="158"/>
      <property name="HitTest" visibility="published" read="FHitTest" write="SetHitTest" type="Boolean" default="1" hoisted="true" file="FMX.Objects.pas" line="159"/>
      <property name="Padding" visibility="published" read="GetPadding" write="SetPadding" type="TBounds" hoisted="true" file="FMX.Objects.pas" line="160"/>
      <property name="Opacity" visibility="published" read="FOpacity" write="SetOpacity" stored="IsOpacityStored" type="Single" hoisted="true" file="FMX.Objects.pas" line="161"/>
      <property name="Margins" visibility="published" read="GetMargins" write="SetMargins" type="TBounds" hoisted="true" file="FMX.Objects.pas" line="162"/>
      <property name="PopupMenu" visibility="published" read="FPopupMenu" write="SetPopupMenu" stored="IsPopupMenuStored" type="TCustomPopupMenu" hoisted="true" file="FMX.Objects.pas" line="163"/>
      <property name="Position" visibility="published" read="FPosition" write="SetPosition" stored="IsPositionStored" type="TPosition" hoisted="true" file="FMX.Objects.pas" line="164"/>
      <property name="RotationAngle" visibility="published" read="GetRotationAngle" write="SetRotationAngle" type="Single" default="0" hoisted="true" file="FMX.Objects.pas" line="165"/>
      <property name="RotationCenter" visibility="published" read="GetRotationCenter" write="SetRotationCenter" type="TPosition" hoisted="true" file="FMX.Objects.pas" line="166"/>
      <property name="Scale" visibility="published" read="GetScale" write="SetScale" type="TPosition" hoisted="true" file="FMX.Objects.pas" line="167"/>
      <property name="Sides" visibility="published" read="FSides" write="SetSides" stored="IsSidesStored" type="TSides" file="FMX.Objects.pas" line="168"><devnotes><summary>
Specifies which sides of the TRectangle rectangle to display.
A side is a rectangle boundary between two adjacent corners or end points of corner customizations. End points of corner customizations are defined by XRadius and YRadius. A corner customization applies to corners included into the Corners set.
By default, all sides of the rectangle are displayed.
Sides can contain a set of constants defined in TSide: Top, Left, Bottom, and Right. 
Use the AllSides constant to select all sides.
If Sides is empty, then no side is displayed. 
</summary></devnotes></property>
      <property name="Size" visibility="published" read="FSize" write="SetSize" stored="IsSizeStored" type="TControlSize" hoisted="true" file="FMX.Objects.pas" line="169"/>
      <property name="Stroke" visibility="published" read="FStroke" write="SetStroke" type="TStrokeBrush" hoisted="true" file="FMX.Objects.pas" line="170"/>
      <property name="Visible" visibility="published" read="FVisible" write="SetVisible" stored="VisibleStored" type="Boolean" default="1" hoisted="true" file="FMX.Objects.pas" line="171"/>
      <property name="XRadius" visibility="published" read="FXRadius" write="SetXRadius" type="Single" default="0" file="FMX.Objects.pas" line="172"><devnotes><summary>
Specifies the distance from a corner to the start point of the corner shape customization, on the horizontal sides of TRectangle.
During design time, the maximum possible value of XRadius is limited by the half of the smallest side.
If XRadius=0, then no corner shape customization is used.
</summary></devnotes></property>
      <property name="YRadius" visibility="published" read="FYRadius" write="SetYRadius" type="Single" default="0" file="FMX.Objects.pas" line="173"><devnotes><summary>
Specifies the distance from a corner to the start point of the corner shape customization, on the vertical sides of TRectangle.
During design time, the maximum possible value of YRadius is limited by the half of the smallest side.
If YRadius=0, then no corner shape customization is used.
</summary></devnotes></property>
      <property name="Width" visibility="published" read="GetWidth" write="SetWidth" stored="False" type="Single" hoisted="true" file="FMX.Objects.pas" line="174"/>
      <property name="ParentShowHint" visibility="published" read="FParentShowHint" write="SetParentShowHint" type="Boolean" default="1" hoisted="true" file="FMX.Objects.pas" line="175"/>
      <property name="ShowHint" visibility="published" read="FShowHint" write="SetShowHint" stored="IsShowHintStored" type="Boolean" hoisted="true" file="FMX.Objects.pas" line="176"/>
      <event name="OnDragEnter" visibility="published" read="FOnDragEnter" write="FOnDragEnter" type="TDragEnterEvent" hoisted="true" file="FMX.Objects.pas" line="178"/>
      <event name="OnDragLeave" visibility="published" read="FOnDragLeave" write="FOnDragLeave" type="TNotifyEvent" hoisted="true" file="FMX.Objects.pas" line="179"/>
      <event name="OnDragOver" visibility="published" read="FOnDragOver" write="FOnDragOver" type="TDragOverEvent" hoisted="true" file="FMX.Objects.pas" line="180"/>
      <event name="OnDragDrop" visibility="published" read="FOnDragDrop" write="FOnDragDrop" type="TDragDropEvent" hoisted="true" file="FMX.Objects.pas" line="181"/>
      <event name="OnDragEnd" visibility="published" read="FOnDragEnd" write="FOnDragEnd" type="TNotifyEvent" hoisted="true" file="FMX.Objects.pas" line="182"/>
      <event name="OnClick" visibility="published" read="FOnClick" write="SetOnClick" stored="OnClickStored" type="TNotifyEvent" hoisted="true" file="FMX.Objects.pas" line="184"/>
      <event name="OnDblClick" visibility="published" read="FOnDblClick" write="FOnDblClick" type="TNotifyEvent" hoisted="true" file="FMX.Objects.pas" line="185"/>
      <event name="OnMouseDown" visibility="published" read="FOnMouseDown" write="FOnMouseDown" type="TMouseEvent" hoisted="true" file="FMX.Objects.pas" line="187"/>
      <event name="OnMouseMove" visibility="published" read="FOnMouseMove" write="FOnMouseMove" type="TMouseMoveEvent" hoisted="true" file="FMX.Objects.pas" line="188"/>
      <event name="OnMouseUp" visibility="published" read="FOnMouseUp" write="FOnMouseUp" type="TMouseEvent" hoisted="true" file="FMX.Objects.pas" line="189"/>
      <event name="OnMouseWheel" visibility="published" read="FOnMouseWheel" write="FOnMouseWheel" type="TMouseWheelEvent" hoisted="true" file="FMX.Objects.pas" line="190"/>
      <event name="OnMouseEnter" visibility="published" read="FOnMouseEnter" write="FOnMouseEnter" type="TNotifyEvent" hoisted="true" file="FMX.Objects.pas" line="191"/>
      <event name="OnMouseLeave" visibility="published" read="FOnMouseLeave" write="FOnMouseLeave" type="TNotifyEvent" hoisted="true" file="FMX.Objects.pas" line="192"/>
      <event name="OnPainting" visibility="published" read="FOnPainting" write="FOnPainting" type="TOnPaintEvent" hoisted="true" file="FMX.Objects.pas" line="194"/>
      <event name="OnPaint" visibility="published" read="FOnPaint" write="FOnPaint" type="TOnPaintEvent" hoisted="true" file="FMX.Objects.pas" line="195"/>
      <event name="OnResize" visibility="published" read="FOnResize" write="FOnResize" type="TNotifyEvent" hoisted="true" file="FMX.Objects.pas" line="196"/>
      <event name="OnResized" visibility="published" read="FOnResized" write="FOnResized" type="TNotifyEvent" hoisted="true" file="FMX.Objects.pas" line="197"/>
    </members>
  <devnotes><summary>
TRectangle defines 2D rectangles with customized corners. It inherits TControl and can be used in styles to construct controls.
The CornerType, XRadius, and YRadius properties define how to customize shapes of rectangle corners:


Corners specifies which corners to be customized.
Notice that, if Corners is an empty set or any of the XRadius or YRadius properties is zero, then no corner shape customization is used.
The rectangle size and position are defined by the following properties of the TRectangle object:

The shape rectangle ShapeRect defines the initial size and position of the rectangle.
You can use the rotation axis RotationCenter and rotation angle RotationAngle of the TRectangle object to rotate and move the rectangle.
You can use the scaling factors of the TRectangle object to proportionally scale rectangle coordinates along local coordinate axes. Scaling moves the rectangle and changes its size.
Note: Scaling not only scales the shape of an object proportionally to the scaling factors. It also changes the thickness of the stroke that draws the contour proportionally to the scaling factor for each axis.
TRectangle draws the contour and fills the background with the Paint method. Paint uses the drawing pen and brush with the properties, color, and opacity defined by the Stroke and Fill properties.
</summary></devnotes></class>
  <class name="TCaretRectangle" file="FMX.Objects.pas" line="200">
    
    <interfaces>
      <implements name="IFlasher"/>
    </interfaces>
    <members>
      <field name="FFlashTimer" type="TTimer" visibility="private" size="4" offset="936" file="FMX.Objects.pas" line="202"/>
      <field name="FCaret" type="TCustomCaret" visibility="private" size="4" offset="940" file="FMX.Objects.pas" line="203">
        <attributes>
          <attribute name="TObject"/>
        </attributes>
      </field>
      <field name="FColor" type="TAlphaColor" visibility="private" size="4" offset="944" file="FMX.Objects.pas" line="204"/>
      <field name="FPos" type="TPointF" visibility="private" size="8" offset="948" file="FMX.Objects.pas" line="205"/>
      <field name="FSize" type="TSizeF" visibility="private" size="8" offset="956" file="FMX.Objects.pas" line="206"/>
      <field name="FInterval" type="TFlasherInterval" visibility="private" size="2" offset="964" file="FMX.Objects.pas" line="207"/>
      <field name="FSystemInformation" type="IFMXSystemInformationService" visibility="private" size="4" offset="968" file="FMX.Objects.pas" line="208"/>
      <procedure name="FlashTimerProc" visibility="private" file="FMX.Objects.pas" line="209">
        <parameters>
          <parameter name="Sender" type="TObject"/>
        </parameters>
      </procedure>
      <function name="GetColor" visibility="private" file="FMX.Objects.pas" line="210">
        <parameters>
          <retval type="TAlphaColor"/>
        </parameters>
      </function>
      <function name="GetPos" visibility="private" file="FMX.Objects.pas" line="211">
        <parameters>
          <retval type="TPointF"/>
        </parameters>
      </function>
      <function name="GetSize" visibility="private" file="FMX.Objects.pas" line="212">
        <parameters>
          <retval type="TSizeF"/>
        </parameters>
      </function>
      <function name="GetVisible" visibility="private" file="FMX.Objects.pas" line="213">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <function name="GetInterval" visibility="private" file="FMX.Objects.pas" line="214">
        <parameters>
          <retval type="TFlasherInterval"/>
        </parameters>
      </function>
      <function name="GetCaret" visibility="private" file="FMX.Objects.pas" line="215">
        <parameters>
          <retval type="TCustomCaret"/>
        </parameters>
      </function>
      <function name="GetOpacity" visibility="private" file="FMX.Objects.pas" line="216">
        <parameters>
          <retval type="Single"/>
        </parameters>
      </function>
      <procedure name="SetCaret" visibility="private" file="FMX.Objects.pas" line="217">
        <parameters>
          <parameter name="Value" type="TCustomCaret" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="Notification" visibility="protected" procflags="override" file="FMX.Objects.pas" line="219">
        <parameters>
          <parameter name="AComponent" type="TComponent"/>
          <parameter name="Operation" type="TOperation"/>
        </parameters>
      <devnotes><summary>




Forwards notification messages to all owned components.
FMX.Objects.TCaretRectangle.Notification inherits from System.Classes.TComponent.Notification. All content below this line refers to System.Classes.TComponent.Notification.
Forwards notification messages to all owned components.
Do not call the Notification method in an application. Notification is called automatically when the component specified by AComponent is about to be inserted or removed, as specified by Operation. By default, components pass along the notification to their owned components, if any.
A component can, if needed, act on the notification that a component is being inserted or removed. For example, if a component has object fields or properties that contain references to other components, it can check the notifications of component removals and invalidate those references as needed.

Note: Notification is not called for components that are freed implicitly (because their Owner is freed).</summary></devnotes></procedure>
      <function name="DefaultWidth" visibility="protected" procflags="virtual" file="FMX.Objects.pas" line="221">
        <parameters>
          <retval type="Integer"/>
        </parameters>
      <devnotes><summary>
Represents the default width for the caret of this TCaretRectangle.
</summary></devnotes></function>
      <function name="DefaultColor" visibility="protected" procflags="virtual" file="FMX.Objects.pas" line="222">
        <parameters>
          <retval type="TAlphaColor"/>
        </parameters>
      <devnotes><summary>
Represents the default color of the caret.
Use DefaultColor to retrieve the default color for the caret of this TCaretRectangle.
</summary></devnotes></function>
      <function name="UseFontColor" visibility="protected" procflags="virtual" file="FMX.Objects.pas" line="223">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Specifies whether the caret color of this TCaretRectangle is specified.
This information is retrieved from the system information.
</summary></devnotes></function>
      <function name="DefaultInterval" visibility="protected" procflags="virtual" file="FMX.Objects.pas" line="224">
        <parameters>
          <retval type="TFlasherInterval"/>
        </parameters>
      <devnotes><summary>
Represents the default interval of time, in milliseconds, at which the caret flashes.
The default interval of time is 500 milliseconds.
</summary></devnotes></function>
      <function name="GetDefaultSize" visibility="protected" procflags="override" file="FMX.Objects.pas" line="225">
        <parameters>
          <retval type="TSizeF"/>
        </parameters>
      <devnotes><summary>
Getter of DefaultSize.
FMX.Objects.TCaretRectangle.GetDefaultSize inherits from FMX.Controls.TControl.GetDefaultSize. All content below this line refers to FMX.Controls.TControl.GetDefaultSize.
Getter of DefaultSize.


</summary></devnotes></function>
      <constructor name="Create" visibility="public" file="FMX.Objects.pas" line="227">
        <parameters>
          <parameter name="AOwner" type="TComponent"/>
        </parameters>
      <devnotes><summary>


Creates an instance of TShape with the specified component as owner.
FMX.Objects.TCaretRectangle.Create inherits from FMX.Objects.TShape.Create. All content below this line refers to FMX.Objects.TShape.Create.
Creates an instance of TShape with the specified component as owner. 
</summary></devnotes></constructor>
      <destructor name="Destroy" visibility="public" file="FMX.Objects.pas" line="228">
        <parameters>
        </parameters>
      <devnotes><summary>
Destroys the object instance and frees its memory.
FMX.Objects.TCaretRectangle.Destroy inherits from FMX.Objects.TShape.Destroy. All content below this line refers to FMX.Objects.TShape.Destroy.
Destroys the object instance and frees its memory.
Do not call Destroy directly in an application. Call Free instead. Free verifies that the object instance is not nil before calling Destroy.
</summary></devnotes></destructor>
      <procedure name="UpdateState" visibility="public" file="FMX.Objects.pas" line="229">
      <devnotes><summary>
Updates the state of this TCaretRectangle.
</summary></devnotes></procedure>
      <property name="Caret" visibility="public" read="GetCaret" write="SetCaret" type="TCustomCaret" file="FMX.Objects.pas" line="230"><devnotes><summary>
Caret is a TCustomCaret that describes the caret of this TCaretRectangle.
</summary></devnotes></property>
    </members>
  <devnotes><summary>
TCaretRectangle is a TRectangle descendant that can additionally hold caret (cursor) information. 
</summary></devnotes></class>
  <class name="TRoundRect" file="FMX.Objects.pas" line="235">
    
    <members>
      <field name="FCorners" type="TCorners" visibility="private" size="1" offset="912" file="FMX.Objects.pas" line="237"/>
      <function name="IsCornersStored" visibility="private" file="FMX.Objects.pas" line="238">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <procedure name="SetCorners" visibility="protected" procflags="virtual" file="FMX.Objects.pas" line="240">
        <parameters>
          <parameter name="Value" type="TCorners" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Setter for the Corners property.
Value is a set of constants defined in TCorner: TopLeft, TopRight, BottomLeft, and BottomRight. 
</summary></devnotes></procedure>
      <procedure name="Paint" visibility="protected" procflags="override" file="FMX.Objects.pas" line="241">
      <devnotes><summary>
Renders the control's surface. 
FMX.Objects.TRoundRect.Paint inherits from FMX.Controls.TControl.Paint. All content below this line refers to FMX.Controls.TControl.Paint.
Renders the control's surface. 
The Paint method is called by DoPaint when a control is being painted by the PaintTo method. Before DoPaint, Painting is called. AfterPaint is called immediately after. 
FireMonkey internally calls Paint to paint the control when the window is being painted. You must not call Paint explicitly.
The base class TControl implements an empty Paint. The descendants of TControl override Paint to provide specific rendering of the respective controls.
For example, Paint methods in classes of the FMX.Objects unit draw and fill shapes using the properties defined in these classes. See the descriptions of these classes to find the properties of the respective shapes. 
</summary></devnotes></procedure>
      <constructor name="Create" visibility="public" file="FMX.Objects.pas" line="243">
        <parameters>
          <parameter name="AOwner" type="TComponent"/>
        </parameters>
      <devnotes><summary>
Creates an instance of TShape with the specified component as owner.
FMX.Objects.TRoundRect.Create inherits from FMX.Objects.TShape.Create. All content below this line refers to FMX.Objects.TShape.Create.
Creates an instance of TShape with the specified component as owner. 
</summary></devnotes></constructor>
      <property name="Align" visibility="published" read="FAlign" write="SetAlign" type="TAlignLayout" default="0" hoisted="true" file="FMX.Objects.pas" line="245"/>
      <property name="Anchors" visibility="published" read="FAnchors" write="SetAnchors" stored="IsAnchorsStored" type="TAnchors" hoisted="true" file="FMX.Objects.pas" line="246"/>
      <property name="ClipChildren" visibility="published" read="FClipChildren" write="SetClipChildren" type="Boolean" default="0" hoisted="true" file="FMX.Objects.pas" line="247"/>
      <property name="ClipParent" visibility="published" read="FClipParent" write="FClipParent" type="Boolean" default="0" hoisted="true" file="FMX.Objects.pas" line="248"/>
      <property name="Corners" visibility="published" read="FCorners" write="SetCorners" stored="IsCornersStored" type="TCorners" file="FMX.Objects.pas" line="249"><devnotes><summary>
Specifies which corners in the TRoundRect object are to be rounded.
The rounding radius is equal to the half of the smallest side.
By default, all four corners are rounded.
Corners is a set of TCorner values that specify which of the corners are rounded. 
If Corners is an empty set, then no corner is rounded. 
Use the AllCorners constant to select all corners.
</summary></devnotes></property>
      <property name="Cursor" visibility="published" read="GetCursor" write="SetCursor" type="TCursor" default="0" hoisted="true" file="FMX.Objects.pas" line="250"/>
      <property name="DragMode" visibility="published" read="GetDragMode" write="SetDragMode" type="TDragMode" default="0" hoisted="true" file="FMX.Objects.pas" line="251"/>
      <property name="EnableDragHighlight" visibility="published" read="FEnableDragHighlight" write="FEnableDragHighlight" type="Boolean" default="1" hoisted="true" file="FMX.Objects.pas" line="252"/>
      <property name="Enabled" visibility="published" read="FEnabled" write="SetEnabled" stored="EnabledStored" type="Boolean" default="1" hoisted="true" file="FMX.Objects.pas" line="253"/>
      <property name="Fill" visibility="published" read="FFill" write="SetFill" type="TBrush" hoisted="true" file="FMX.Objects.pas" line="254"/>
      <property name="Locked" visibility="published" read="FLocked" write="SetLocked" type="Boolean" default="0" hoisted="true" file="FMX.Objects.pas" line="255"/>
      <property name="Height" visibility="published" read="GetHeight" write="SetHeight" stored="False" type="Single" hoisted="true" file="FMX.Objects.pas" line="256"/>
      <property name="Hint" visibility="published" read="FHint" write="SetHint" stored="HintStored" type="string" default="0" hoisted="true" file="FMX.Objects.pas" line="257"/>
      <property name="HitTest" visibility="published" read="FHitTest" write="SetHitTest" type="Boolean" default="1" hoisted="true" file="FMX.Objects.pas" line="258"/>
      <property name="Padding" visibility="published" read="GetPadding" write="SetPadding" type="TBounds" hoisted="true" file="FMX.Objects.pas" line="259"/>
      <property name="Opacity" visibility="published" read="FOpacity" write="SetOpacity" stored="IsOpacityStored" type="Single" hoisted="true" file="FMX.Objects.pas" line="260"/>
      <property name="Margins" visibility="published" read="GetMargins" write="SetMargins" type="TBounds" hoisted="true" file="FMX.Objects.pas" line="261"/>
      <property name="PopupMenu" visibility="published" read="FPopupMenu" write="SetPopupMenu" stored="IsPopupMenuStored" type="TCustomPopupMenu" hoisted="true" file="FMX.Objects.pas" line="262"/>
      <property name="Position" visibility="published" read="FPosition" write="SetPosition" stored="IsPositionStored" type="TPosition" hoisted="true" file="FMX.Objects.pas" line="263"/>
      <property name="RotationAngle" visibility="published" read="GetRotationAngle" write="SetRotationAngle" type="Single" default="0" hoisted="true" file="FMX.Objects.pas" line="264"/>
      <property name="RotationCenter" visibility="published" read="GetRotationCenter" write="SetRotationCenter" type="TPosition" hoisted="true" file="FMX.Objects.pas" line="265"/>
      <property name="Scale" visibility="published" read="GetScale" write="SetScale" type="TPosition" hoisted="true" file="FMX.Objects.pas" line="266"/>
      <property name="Size" visibility="published" read="FSize" write="SetSize" stored="IsSizeStored" type="TControlSize" hoisted="true" file="FMX.Objects.pas" line="267"/>
      <property name="Stroke" visibility="published" read="FStroke" write="SetStroke" type="TStrokeBrush" hoisted="true" file="FMX.Objects.pas" line="268"/>
      <property name="Visible" visibility="published" read="FVisible" write="SetVisible" stored="VisibleStored" type="Boolean" default="1" hoisted="true" file="FMX.Objects.pas" line="269"/>
      <property name="Width" visibility="published" read="GetWidth" write="SetWidth" stored="False" type="Single" hoisted="true" file="FMX.Objects.pas" line="270"/>
      <property name="ParentShowHint" visibility="published" read="FParentShowHint" write="SetParentShowHint" type="Boolean" default="1" hoisted="true" file="FMX.Objects.pas" line="271"/>
      <property name="ShowHint" visibility="published" read="FShowHint" write="SetShowHint" stored="IsShowHintStored" type="Boolean" hoisted="true" file="FMX.Objects.pas" line="272"/>
      <event name="OnDragEnter" visibility="published" read="FOnDragEnter" write="FOnDragEnter" type="TDragEnterEvent" hoisted="true" file="FMX.Objects.pas" line="274"/>
      <event name="OnDragLeave" visibility="published" read="FOnDragLeave" write="FOnDragLeave" type="TNotifyEvent" hoisted="true" file="FMX.Objects.pas" line="275"/>
      <event name="OnDragOver" visibility="published" read="FOnDragOver" write="FOnDragOver" type="TDragOverEvent" hoisted="true" file="FMX.Objects.pas" line="276"/>
      <event name="OnDragDrop" visibility="published" read="FOnDragDrop" write="FOnDragDrop" type="TDragDropEvent" hoisted="true" file="FMX.Objects.pas" line="277"/>
      <event name="OnDragEnd" visibility="published" read="FOnDragEnd" write="FOnDragEnd" type="TNotifyEvent" hoisted="true" file="FMX.Objects.pas" line="278"/>
      <event name="OnClick" visibility="published" read="FOnClick" write="SetOnClick" stored="OnClickStored" type="TNotifyEvent" hoisted="true" file="FMX.Objects.pas" line="280"/>
      <event name="OnDblClick" visibility="published" read="FOnDblClick" write="FOnDblClick" type="TNotifyEvent" hoisted="true" file="FMX.Objects.pas" line="281"/>
      <event name="OnMouseDown" visibility="published" read="FOnMouseDown" write="FOnMouseDown" type="TMouseEvent" hoisted="true" file="FMX.Objects.pas" line="283"/>
      <event name="OnMouseMove" visibility="published" read="FOnMouseMove" write="FOnMouseMove" type="TMouseMoveEvent" hoisted="true" file="FMX.Objects.pas" line="284"/>
      <event name="OnMouseUp" visibility="published" read="FOnMouseUp" write="FOnMouseUp" type="TMouseEvent" hoisted="true" file="FMX.Objects.pas" line="285"/>
      <event name="OnMouseWheel" visibility="published" read="FOnMouseWheel" write="FOnMouseWheel" type="TMouseWheelEvent" hoisted="true" file="FMX.Objects.pas" line="286"/>
      <event name="OnMouseEnter" visibility="published" read="FOnMouseEnter" write="FOnMouseEnter" type="TNotifyEvent" hoisted="true" file="FMX.Objects.pas" line="287"/>
      <event name="OnMouseLeave" visibility="published" read="FOnMouseLeave" write="FOnMouseLeave" type="TNotifyEvent" hoisted="true" file="FMX.Objects.pas" line="288"/>
      <event name="OnPainting" visibility="published" read="FOnPainting" write="FOnPainting" type="TOnPaintEvent" hoisted="true" file="FMX.Objects.pas" line="290"/>
      <event name="OnPaint" visibility="published" read="FOnPaint" write="FOnPaint" type="TOnPaintEvent" hoisted="true" file="FMX.Objects.pas" line="291"/>
      <event name="OnResize" visibility="published" read="FOnResize" write="FOnResize" type="TNotifyEvent" hoisted="true" file="FMX.Objects.pas" line="292"/>
      <event name="OnResized" visibility="published" read="FOnResized" write="FOnResized" type="TNotifyEvent" hoisted="true" file="FMX.Objects.pas" line="293"/>
    </members>
  <devnotes><summary>
TRoundRect defines 2D rectangles with rounded corners. It inherits TControl and can be used in styles to construct controls.
The rectangle size and position are defined by the bounding rectangle of the TRoundRect object. You can use the scaling factors Scale of the TRoundRect object to proportionally change rectangle coordinates along local coordinate axes. This will move the rectangle and change its shape. The rotation axis RotationCenter and rotation angle RotationAngle of the TRoundRect object can be used to rotate the rectangle.

Note: Scaling not only scales the shape of an object proportionally to the scaling factors. It also changes the thickness of the stroke that draws the contour proportionally to the scaling factor for each axis.
The Corners property defines which rectangle corners are to be rounded. The Radius of the rounding is defined by the following formula:

Radius := Min(RectHeight(GetShapeRect),RectWidth(GetShapeRect)) / 2;  

TRoundRect draws the contour and fills the shape background with the Paint method. 
Paint draws the contour and fills the background using the drawing pen and brush with the properties, color, and opacity defined by the Stroke and Fill properties of the TRoundRect object.
</summary></devnotes></class>
  <enum name="TCalloutPosition" file="FMX.Objects.pas" line="298">
    <element value="0" name="Top" file="FMX.Objects.pas" line="298"/>
    <element value="1" name="Left" file="FMX.Objects.pas" line="298"/>
    <element value="2" name="Bottom" file="FMX.Objects.pas" line="298"/>
    <element value="3" name="Right" file="FMX.Objects.pas" line="298"/>
  </enum>
  <class name="TCalloutRectangle" file="FMX.Objects.pas" line="300">
    
    <members>
      <field name="FPath" type="TPathData" visibility="private" size="4" offset="936" file="FMX.Objects.pas" line="302"/>
      <field name="FFillPath" type="TPathData" visibility="private" size="4" offset="940" file="FMX.Objects.pas" line="303"/>
      <field name="FCalloutWidth" type="Single" visibility="private" size="4" offset="944" file="FMX.Objects.pas" line="304"/>
      <field name="FCalloutLength" type="Single" visibility="private" size="4" offset="948" file="FMX.Objects.pas" line="305"/>
      <field name="FCalloutPosition" type="TCalloutPosition" visibility="private" size="1" offset="952" file="FMX.Objects.pas" line="306"/>
      <field name="FCalloutOffset" type="Single" visibility="private" size="4" offset="956" file="FMX.Objects.pas" line="307"/>
      <procedure name="SetCalloutWidth" visibility="private" file="FMX.Objects.pas" line="308">
        <parameters>
          <parameter name="Value" type="Single" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetCalloutLength" visibility="private" file="FMX.Objects.pas" line="309">
        <parameters>
          <parameter name="Value" type="Single" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetCalloutPosition" visibility="private" file="FMX.Objects.pas" line="310">
        <parameters>
          <parameter name="Value" type="TCalloutPosition" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetCalloutOffset" visibility="private" file="FMX.Objects.pas" line="311">
        <parameters>
          <parameter name="Value" type="Single" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="RebuildPaths" visibility="protected" file="FMX.Objects.pas" line="313">
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="SetXRadius" visibility="protected" procflags="override" file="FMX.Objects.pas" line="315">
        <parameters>
          <parameter name="Value" type="Single" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Setter for the XRadius property.
FMX.Objects.TCalloutRectangle.SetXRadius inherits from FMX.Objects.TRectangle.SetXRadius. All content below this line refers to FMX.Objects.TRectangle.SetXRadius.
Setter for the XRadius property.
</summary></devnotes></procedure>
      <procedure name="SetYRadius" visibility="protected" procflags="override" file="FMX.Objects.pas" line="316">
        <parameters>
          <parameter name="Value" type="Single" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Setter for the YRadius property.
FMX.Objects.TCalloutRectangle.SetYRadius inherits from FMX.Objects.TRectangle.SetYRadius. All content below this line refers to FMX.Objects.TRectangle.SetYRadius.
Setter for the YRadius property.
</summary></devnotes></procedure>
      <procedure name="SetCorners" visibility="protected" procflags="override" file="FMX.Objects.pas" line="317">
        <parameters>
          <parameter name="Value" type="TCorners" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Setter for the Corners property.
FMX.Objects.TCalloutRectangle.SetCorners inherits from FMX.Objects.TRectangle.SetCorners. All content below this line refers to FMX.Objects.TRectangle.SetCorners.
Setter for the Corners property.
Value is a set of constants defined in TCorner: TopLeft, TopRight, BottomLeft, and BottomRight.
</summary></devnotes></procedure>
      <procedure name="SetCornerType" visibility="protected" procflags="override" file="FMX.Objects.pas" line="318">
        <parameters>
          <parameter name="Value" type="TCornerType" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Setter for the CornerType property.
FMX.Objects.TCalloutRectangle.SetCornerType inherits from FMX.Objects.TRectangle.SetCornerType. All content below this line refers to FMX.Objects.TRectangle.SetCornerType.
Setter for the CornerType property.
Value should be one of the constants defined in TCornerType: Round, Bevel, InnerRound, and InnerLine.
</summary></devnotes></procedure>
      <procedure name="SetSides" visibility="protected" procflags="override" file="FMX.Objects.pas" line="319">
        <parameters>
          <parameter name="Value" type="TSides" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Setter for the Sides property.
FMX.Objects.TCalloutRectangle.SetSides inherits from FMX.Objects.TRectangle.SetSides. All content below this line refers to FMX.Objects.TRectangle.SetSides.
Setter for the Sides property.
Value is a set of constants defined in TSide: Top, Left, Bottom, and Right. 
</summary></devnotes></procedure>
      <procedure name="Resize" visibility="protected" procflags="override" file="FMX.Objects.pas" line="320">
      <devnotes><summary>
OnResize event dispatcher. 
FMX.Objects.TCalloutRectangle.Resize inherits from FMX.Controls.TControl.Resize. All content below this line refers to FMX.Controls.TControl.Resize.
OnResize event dispatcher. 
A control calls Resize when the dimensions of the control change.
Derived classes can override the protected Resize method to implement specific responses to control resizing.
</summary></devnotes></procedure>
      <procedure name="Loaded" visibility="protected" procflags="override" file="FMX.Objects.pas" line="321">
      <devnotes><summary>
Initializes the component after the form file has been read into memory.
FMX.Objects.TCalloutRectangle.Loaded inherits from FMX.Controls.TControl.Loaded. All content below this line refers to FMX.Controls.TControl.Loaded.
Initializes the component after the form file has been read into memory. 
Loaded inherits TComponent.Loaded, realigns the children, if any, and updates the tab list.
For details, see TComponent.Loaded.
</summary></devnotes></procedure>
      <function name="GetCalloutRectangleRect" visibility="protected" file="FMX.Objects.pas" line="323">
        <parameters>
          <retval type="TRectF"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></function>
      <procedure name="AddCalloutToPath" visibility="protected" file="FMX.Objects.pas" line="324">
        <parameters>
          <parameter name="APath" type="TPathData"/>
          <parameter name="ARect" type="TRectF" paramflags="const"/>
          <parameter name="ACornerRadiuses" type="TSizeF" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="AddRoundCornerToPath" visibility="protected" file="FMX.Objects.pas" line="325">
        <parameters>
          <parameter name="APath" type="TPathData"/>
          <parameter name="ARect" type="TRectF" paramflags="const"/>
          <parameter name="ACornerSize" type="TSizeF" paramflags="const"/>
          <parameter name="ACorner" type="TCorner" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="AddRectCornerToPath" visibility="protected" file="FMX.Objects.pas" line="326">
        <parameters>
          <parameter name="APath" type="TPathData"/>
          <parameter name="ARect" type="TRectF" paramflags="const"/>
          <parameter name="ACornerSize" type="TSizeF" paramflags="const"/>
          <parameter name="ACorner" type="TCorner" paramflags="const"/>
          <parameter name="ASkipEmptySide" type="Boolean" paramflags="const">
            <value>
              True
            </value>
          </parameter>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="CreatePath" visibility="protected" file="FMX.Objects.pas" line="328">
      <devnotes><summary>
Generates the contour of TCalloutRectangle.
CreatePath uses parameters of the current TCalloutRectangle object to generate a series of connected curves and lines (in the FMX.Graphics.TPathData type) that form the TCalloutRectangle contour to draw.
</summary></devnotes></procedure>
      <procedure name="CreateFillPath" visibility="protected" file="FMX.Objects.pas" line="329">
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="Paint" visibility="protected" procflags="override" file="FMX.Objects.pas" line="331">
      <devnotes><summary>


Renders the control's surface. 
FMX.Objects.TCalloutRectangle.Paint inherits from FMX.Controls.TControl.Paint. All content below this line refers to FMX.Controls.TControl.Paint.
Renders the control's surface. 
The Paint method is called by DoPaint when a control is being painted by the PaintTo method. Before DoPaint, Painting is called. AfterPaint is called immediately after. 
FireMonkey internally calls Paint to paint the control when the window is being painted. You must not call Paint explicitly.
The base class TControl implements an empty Paint. The descendants of TControl override Paint to provide specific rendering of the respective controls.
For example, Paint methods in classes of the FMX.Objects unit draw and fill shapes using the properties defined in these classes. See the descriptions of these classes to find the properties of the respective shapes. 
</summary></devnotes></procedure>
      <constructor name="Create" visibility="public" file="FMX.Objects.pas" line="333">
        <parameters>
          <parameter name="AOwner" type="TComponent"/>
        </parameters>
      <devnotes><summary>


Creates an instance of TShape with the specified component as owner.
FMX.Objects.TCalloutRectangle.Create inherits from FMX.Objects.TShape.Create. All content below this line refers to FMX.Objects.TShape.Create.
Creates an instance of TShape with the specified component as owner. 
</summary></devnotes></constructor>
      <destructor name="Destroy" visibility="public" file="FMX.Objects.pas" line="334">
        <parameters>
        </parameters>
      <devnotes><summary>
Destroys the object instance and frees its memory.
FMX.Objects.TCalloutRectangle.Destroy inherits from FMX.Objects.TShape.Destroy. All content below this line refers to FMX.Objects.TShape.Destroy.
Destroys the object instance and frees its memory.
Do not call Destroy directly in an application. Call Free instead. Free verifies that the object instance is not nil before calling Destroy.
</summary></devnotes></destructor>
      <property name="Fill" visibility="published" read="FFill" write="SetFill" type="TBrush" hoisted="true" file="FMX.Objects.pas" line="336"/>
      <property name="CalloutWidth" visibility="published" read="FCalloutWidth" write="SetCalloutWidth" type="Single" default="0" file="FMX.Objects.pas" line="337"><devnotes><summary>
The width of the callout pointer.
TCalloutRectangle renders its callout pointer as an isosceles triangle on one of its sides. 
CalloutWidth is the length of the base of the triangle.
</summary></devnotes></property>
      <property name="CalloutLength" visibility="published" read="FCalloutLength" write="SetCalloutLength" type="Single" default="0" file="FMX.Objects.pas" line="338"><devnotes><summary>
The length of the callout pointer.
TCalloutRectangle renders the callout pointer as an isosceles triangle on one of its sides. CalloutLength is the height of this triangle. The triangle is included in the bounding rectangle ShapeRect of the TCalloutRectangle object; therefore, the longer CalloutLength is, the smaller the height (or width) of the callout rectangle itself is, and vice versa. Keeping the bounding rectangle the same size while changing the length of the triangle CalloutLength requires changing the height or width of the callout rectangle TCalloutRectangle itself, depending on which side the triangle appears.
</summary></devnotes></property>
      <property name="CalloutPosition" visibility="published" read="FCalloutPosition" write="SetCalloutPosition" type="TCalloutPosition" default="0" file="FMX.Objects.pas" line="339"><devnotes><summary>
Specifies the side of the rectangle where the callout pointer appears.
TCalloutRectangle renders its callout pointer as an isosceles triangle on one of its four sides.
Set CalloutPosition to one of the Top, Left, Bottom, or Right constants predefined in TCalloutPosition to define the side on which the callout pointer should appear.
By default, the callout pointer appears on the top side CalloutPosition = Top.  
</summary></devnotes></property>
      <property name="CalloutOffset" visibility="published" read="FCalloutOffset" write="SetCalloutOffset" type="Single" default="0" file="FMX.Objects.pas" line="341"><devnotes><summary>
The position of the callout pointer, relative to the center or edges of the side on which it appears.
TCalloutRectangle renders the callout pointer as an isosceles triangle on one of its sides. The CalloutPosition defines the side on which the triangle appears.
CalloutOffset is the triangle offset implemented according to the following conditions:

If CalloutOffset is zero, then the triangle is centered on the specified side.
If CalloutOffset is positive, then the closest point of the callout pointer to a corner of the triangle has the CalloutOffset offset on the following sides:
Top--offset to the right from the upper-left corner.
Left--offset to the bottom from the upper-left corner.
Right--offset to the bottom from the upper-right corner.
Bottom--offset to the right from the lower-left corner.
If CalloutOffset is negative, then the closest point of the callout pointer to a corner of the triangle has the CalloutOffset offset on the following sides:
Top--offset to the left from the upper-right corner.
Left--offset to the top from the lower-left corner.
Right--offset to the top from the lower-right corner.
Bottom--offset to the left from the lower-right corner.

</summary></devnotes></property>
      <property name="Stroke" visibility="published" read="FStroke" write="SetStroke" type="TStrokeBrush" hoisted="true" file="FMX.Objects.pas" line="342"/>
    </members>
  <devnotes><summary>
A rectangle with a triangular &quot;peak&quot; on one of four sides, used primarily to render a TCalloutPanel.
Because TCalloutRectangle inherits from TRectangle, TCalloutRectangle provides all the properties (Corners, CornerType, Sides, XRadius, YRadius, and others) and methods to define the shape of the rectangle itself.  
A call-out often takes the form of a pull-quote, in which a particular snippet of text in a document is duplicated to attract attention: in a larger size, with a different typeface, in a colored box, with stylized quote marks, and so on. With illustrations, boxed text will refer to different elements of interest, and each box will be drawn with extra lines that point to its element.
TCalloutRectangle is a rectangle with an isosceles triangle on one of its four sides, used to point at something else. The triangle is included in the bounding rectangle of the object: the longer its length, the shorter the rectangle shape will be, and vice versa. Keeping the rectangle the same size while changing the length of the triangle requires changing the height or width of the object, depending on which side the triangle appears.
</summary></devnotes></class>
  <class name="TEllipse" file="FMX.Objects.pas" line="347">
    
    <members>
      <procedure name="Paint" visibility="protected" procflags="override" file="FMX.Objects.pas" line="349">
      <devnotes><summary>
Renders the control's surface. 
FMX.Objects.TEllipse.Paint inherits from FMX.Controls.TControl.Paint. All content below this line refers to FMX.Controls.TControl.Paint.
Renders the control's surface. 
The Paint method is called by DoPaint when a control is being painted by the PaintTo method. Before DoPaint, Painting is called. AfterPaint is called immediately after. 
FireMonkey internally calls Paint to paint the control when the window is being painted. You must not call Paint explicitly.
The base class TControl implements an empty Paint. The descendants of TControl override Paint to provide specific rendering of the respective controls.
For example, Paint methods in classes of the FMX.Objects unit draw and fill shapes using the properties defined in these classes. See the descriptions of these classes to find the properties of the respective shapes. 
</summary></devnotes></procedure>
      <function name="PointInObjectLocal" visibility="published" procflags="override" file="FMX.Objects.pas" line="351">
        <parameters>
          <parameter name="X" type="Single"/>
          <parameter name="Y" type="Single"/>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Checks whether the point specified by local coordinates belongs to the control area.
FMX.Objects.TEllipse.PointInObjectLocal inherits from FMX.Controls.TControl.PointInObjectLocal. All content below this line refers to FMX.Controls.TControl.PointInObjectLocal.
Checks whether the point specified by local coordinates belongs to the control area.
PointInObjectLocal returns True if the specified point belongs to the control area, and False otherwise. 
The X and Y are the local coordinates of the point to be checked (compare with PointInObject):

X is the X coordinate.
Y is the Y coordinate.
The local coordinates of the upper-left corner of the control rectangle are (0,0), and the local coordinates of the lower-right corner are (Width, Height). 
The points of the control boundary specified by BoundsRect belong to the control and PointInObjectLocal returns True for them.
If a control supports the Touch property, the control area can be optionally inflated on the values specified by the TouchTargetExpansion property. TouchTargetExpansion keeps four optional parameters representing the expansion for the four sides of the control in pixels (Bottom, Left, Right, and Top). 
The dclasses can change the 'control area' definition. For example:

The FMX.Objects.TSelection class extends the 'control area' definition relative to BoundsRect. FMX.Objects.TSelection.PointInObjectLocal also returns True if the point belongs to any of small rectangles of the four grip controls used to manage the selection shape. The rectangles of the grip controls are rectangles surrounding the four corners of the TSelection rectangle. The Width and Height of these rectangles are equal to 2 * GripSize. For example, the grip control's rectangle of the upper-right corner UR_Corner of TSelection is defined by the following corners:
(UR_Corner.Top - GripSize, UR_Corner.Right - GripSize)--upper-left corner of the grip.
(UR_Corner.Top + GripSize, UR_Corner.Right + GripSize)--lower-right corner of the grip.
FMX.Objects.TSelectionPoint.PointInObjectLocal returns True if the specified point belongs to the rectangle of the grip control corresponding to the TSelectionPoint object, and False otherwise.</summary></devnotes></function>
      <property name="Align" visibility="published" read="FAlign" write="SetAlign" type="TAlignLayout" default="0" hoisted="true" file="FMX.Objects.pas" line="352"/>
      <property name="Anchors" visibility="published" read="FAnchors" write="SetAnchors" stored="IsAnchorsStored" type="TAnchors" hoisted="true" file="FMX.Objects.pas" line="353"/>
      <property name="ClipChildren" visibility="published" read="FClipChildren" write="SetClipChildren" type="Boolean" default="0" hoisted="true" file="FMX.Objects.pas" line="354"/>
      <property name="ClipParent" visibility="published" read="FClipParent" write="FClipParent" type="Boolean" default="0" hoisted="true" file="FMX.Objects.pas" line="355"/>
      <property name="Cursor" visibility="published" read="GetCursor" write="SetCursor" type="TCursor" default="0" hoisted="true" file="FMX.Objects.pas" line="356"/>
      <property name="DragMode" visibility="published" read="GetDragMode" write="SetDragMode" type="TDragMode" default="0" hoisted="true" file="FMX.Objects.pas" line="357"/>
      <property name="EnableDragHighlight" visibility="published" read="FEnableDragHighlight" write="FEnableDragHighlight" type="Boolean" default="1" hoisted="true" file="FMX.Objects.pas" line="358"/>
      <property name="Enabled" visibility="published" read="FEnabled" write="SetEnabled" stored="EnabledStored" type="Boolean" default="1" hoisted="true" file="FMX.Objects.pas" line="359"/>
      <property name="Fill" visibility="published" read="FFill" write="SetFill" type="TBrush" hoisted="true" file="FMX.Objects.pas" line="360"/>
      <property name="Locked" visibility="published" read="FLocked" write="SetLocked" type="Boolean" default="0" hoisted="true" file="FMX.Objects.pas" line="361"/>
      <property name="Height" visibility="published" read="GetHeight" write="SetHeight" stored="False" type="Single" hoisted="true" file="FMX.Objects.pas" line="362"/>
      <property name="Hint" visibility="published" read="FHint" write="SetHint" stored="HintStored" type="string" default="0" hoisted="true" file="FMX.Objects.pas" line="363"/>
      <property name="HitTest" visibility="published" read="FHitTest" write="SetHitTest" type="Boolean" default="1" hoisted="true" file="FMX.Objects.pas" line="364"/>
      <property name="Padding" visibility="published" read="GetPadding" write="SetPadding" type="TBounds" hoisted="true" file="FMX.Objects.pas" line="365"/>
      <property name="Opacity" visibility="published" read="FOpacity" write="SetOpacity" stored="IsOpacityStored" type="Single" hoisted="true" file="FMX.Objects.pas" line="366"/>
      <property name="Margins" visibility="published" read="GetMargins" write="SetMargins" type="TBounds" hoisted="true" file="FMX.Objects.pas" line="367"/>
      <property name="PopupMenu" visibility="published" read="FPopupMenu" write="SetPopupMenu" stored="IsPopupMenuStored" type="TCustomPopupMenu" hoisted="true" file="FMX.Objects.pas" line="368"/>
      <property name="Position" visibility="published" read="FPosition" write="SetPosition" stored="IsPositionStored" type="TPosition" hoisted="true" file="FMX.Objects.pas" line="369"/>
      <property name="RotationAngle" visibility="published" read="GetRotationAngle" write="SetRotationAngle" type="Single" default="0" hoisted="true" file="FMX.Objects.pas" line="370"/>
      <property name="RotationCenter" visibility="published" read="GetRotationCenter" write="SetRotationCenter" type="TPosition" hoisted="true" file="FMX.Objects.pas" line="371"/>
      <property name="Scale" visibility="published" read="GetScale" write="SetScale" type="TPosition" hoisted="true" file="FMX.Objects.pas" line="372"/>
      <property name="Size" visibility="published" read="FSize" write="SetSize" stored="IsSizeStored" type="TControlSize" hoisted="true" file="FMX.Objects.pas" line="373"/>
      <property name="Stroke" visibility="published" read="FStroke" write="SetStroke" type="TStrokeBrush" hoisted="true" file="FMX.Objects.pas" line="374"/>
      <property name="Visible" visibility="published" read="FVisible" write="SetVisible" stored="VisibleStored" type="Boolean" default="1" hoisted="true" file="FMX.Objects.pas" line="375"/>
      <property name="Width" visibility="published" read="GetWidth" write="SetWidth" stored="False" type="Single" hoisted="true" file="FMX.Objects.pas" line="376"/>
      <property name="ParentShowHint" visibility="published" read="FParentShowHint" write="SetParentShowHint" type="Boolean" default="1" hoisted="true" file="FMX.Objects.pas" line="377"/>
      <property name="ShowHint" visibility="published" read="FShowHint" write="SetShowHint" stored="IsShowHintStored" type="Boolean" hoisted="true" file="FMX.Objects.pas" line="378"/>
      <event name="OnDragEnter" visibility="published" read="FOnDragEnter" write="FOnDragEnter" type="TDragEnterEvent" hoisted="true" file="FMX.Objects.pas" line="379"/>
      <event name="OnDragLeave" visibility="published" read="FOnDragLeave" write="FOnDragLeave" type="TNotifyEvent" hoisted="true" file="FMX.Objects.pas" line="380"/>
      <event name="OnDragOver" visibility="published" read="FOnDragOver" write="FOnDragOver" type="TDragOverEvent" hoisted="true" file="FMX.Objects.pas" line="381"/>
      <event name="OnDragDrop" visibility="published" read="FOnDragDrop" write="FOnDragDrop" type="TDragDropEvent" hoisted="true" file="FMX.Objects.pas" line="382"/>
      <event name="OnDragEnd" visibility="published" read="FOnDragEnd" write="FOnDragEnd" type="TNotifyEvent" hoisted="true" file="FMX.Objects.pas" line="383"/>
      <event name="OnClick" visibility="published" read="FOnClick" write="SetOnClick" stored="OnClickStored" type="TNotifyEvent" hoisted="true" file="FMX.Objects.pas" line="384"/>
      <event name="OnDblClick" visibility="published" read="FOnDblClick" write="FOnDblClick" type="TNotifyEvent" hoisted="true" file="FMX.Objects.pas" line="385"/>
      <event name="OnMouseDown" visibility="published" read="FOnMouseDown" write="FOnMouseDown" type="TMouseEvent" hoisted="true" file="FMX.Objects.pas" line="386"/>
      <event name="OnMouseMove" visibility="published" read="FOnMouseMove" write="FOnMouseMove" type="TMouseMoveEvent" hoisted="true" file="FMX.Objects.pas" line="387"/>
      <event name="OnMouseUp" visibility="published" read="FOnMouseUp" write="FOnMouseUp" type="TMouseEvent" hoisted="true" file="FMX.Objects.pas" line="388"/>
      <event name="OnMouseWheel" visibility="published" read="FOnMouseWheel" write="FOnMouseWheel" type="TMouseWheelEvent" hoisted="true" file="FMX.Objects.pas" line="389"/>
      <event name="OnMouseEnter" visibility="published" read="FOnMouseEnter" write="FOnMouseEnter" type="TNotifyEvent" hoisted="true" file="FMX.Objects.pas" line="390"/>
      <event name="OnMouseLeave" visibility="published" read="FOnMouseLeave" write="FOnMouseLeave" type="TNotifyEvent" hoisted="true" file="FMX.Objects.pas" line="391"/>
      <event name="OnPainting" visibility="published" read="FOnPainting" write="FOnPainting" type="TOnPaintEvent" hoisted="true" file="FMX.Objects.pas" line="392"/>
      <event name="OnPaint" visibility="published" read="FOnPaint" write="FOnPaint" type="TOnPaintEvent" hoisted="true" file="FMX.Objects.pas" line="393"/>
      <event name="OnResize" visibility="published" read="FOnResize" write="FOnResize" type="TNotifyEvent" hoisted="true" file="FMX.Objects.pas" line="394"/>
      <event name="OnResized" visibility="published" read="FOnResized" write="FOnResized" type="TNotifyEvent" hoisted="true" file="FMX.Objects.pas" line="395"/>
    </members>
  <devnotes><summary>
TEllipse defines 2D ellipses. It inherits TControl and can be used in styles to construct controls.
The following TEllipse properties define the ellipse shape and position:

Initially the ellipse is inscribed into the bounding rectangle ShapeRect of the TEllipse object.
Then the rotation axis RotationCenter is moved along the local coordinate axes proportionally to the Scale factors.
Then this ellipse is rotated around the obtained pivot on the RotationAngle angle.
Note: Scaling not only scales the shape of an object proportionally to the scaling factors. It also changes the thickness of the stroke that draws the contour proportionally to the scaling factor for each axis.
TEllipse draws the contour and fills the background with the Paint method. 
Paint draws the contour and fills the background using the drawing pen and brush with the properties, color, and opacity defined by the Stroke and Fill properties of the TEllipse object.
</summary></devnotes></class>
  <class name="TCircle" file="FMX.Objects.pas" line="400">
    
    <members>
      <procedure name="Paint" visibility="protected" procflags="override" file="FMX.Objects.pas" line="402">
      <devnotes><summary>


Renders the control's surface. 
FMX.Objects.TCircle.Paint inherits from FMX.Controls.TControl.Paint. All content below this line refers to FMX.Controls.TControl.Paint.
Renders the control's surface. 
The Paint method is called by DoPaint when a control is being painted by the PaintTo method. Before DoPaint, Painting is called. AfterPaint is called immediately after. 
FireMonkey internally calls Paint to paint the control when the window is being painted. You must not call Paint explicitly.
The base class TControl implements an empty Paint. The descendants of TControl override Paint to provide specific rendering of the respective controls.
For example, Paint methods in classes of the FMX.Objects unit draw and fill shapes using the properties defined in these classes. See the descriptions of these classes to find the properties of the respective shapes. 
</summary></devnotes></procedure>
    </members>
  <devnotes><summary>
TCircle defines 2D circles. It inherits TControl and can be used in styles to construct controls.
The following TCircle properties define the circle size and position:

The bounding rectangle ShapeRect of TCircle defines the bounding square for the circle:
The length of the bounding square sides equals to Min(Width, Height) of the ShapeRect bounding rectangle.
The bounding square center coincides with the center of the bounding rectangle.
The TCircle shape is inscribed into the obtained bounding square.
You can use the Scale scaling factors of the TCircle object to proportionally scale circle coordinates along local coordinate axes. Scaling moves the circle and changes its size.
You can use the rotation axis RotationCenter and rotation angle RotationAngle of the TCircle object to modify the circle shape and position.
TCircle draws the contour and fills the shape background with the Paint method. 
Paint draws the contour and fills the background using the drawing pen and brush with the properties, color, and opacity defined by the Stroke and Fill properties of the TCircle object.
</summary></devnotes></class>
  <class name="TPie" file="FMX.Objects.pas" line="407">
    
    <members>
      <field name="FStartAngle" type="Single" visibility="private" size="4" offset="912" file="FMX.Objects.pas" line="409"/>
      <field name="FEndAngle" type="Single" visibility="private" size="4" offset="916" file="FMX.Objects.pas" line="410"/>
      <procedure name="SetEndAngle" visibility="private" file="FMX.Objects.pas" line="411">
        <parameters>
          <parameter name="Value" type="Single" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetStartAngle" visibility="private" file="FMX.Objects.pas" line="412">
        <parameters>
          <parameter name="Value" type="Single" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="Paint" visibility="protected" procflags="override" file="FMX.Objects.pas" line="414">
      <devnotes><summary>


Renders the control's surface. 
FMX.Objects.TPie.Paint inherits from FMX.Controls.TControl.Paint. All content below this line refers to FMX.Controls.TControl.Paint.
Renders the control's surface. 
The Paint method is called by DoPaint when a control is being painted by the PaintTo method. Before DoPaint, Painting is called. AfterPaint is called immediately after. 
FireMonkey internally calls Paint to paint the control when the window is being painted. You must not call Paint explicitly.
The base class TControl implements an empty Paint. The descendants of TControl override Paint to provide specific rendering of the respective controls.
For example, Paint methods in classes of the FMX.Objects unit draw and fill shapes using the properties defined in these classes. See the descriptions of these classes to find the properties of the respective shapes. 
</summary></devnotes></procedure>
      <function name="PointInObject" visibility="public" procflags="override" file="FMX.Objects.pas" line="416">
        <parameters>
          <parameter name="X" type="Single"/>
          <parameter name="Y" type="Single"/>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Checks whether the point, specified by the absolute coordinates, belongs to the control area.
FMX.Objects.TPie.PointInObject inherits from FMX.Controls.TControl.PointInObject. All content below this line refers to FMX.Controls.TControl.PointInObject.
Checks whether the point, specified by the absolute coordinates, belongs to the control area.
PointInObject returns True if the specified point belongs to the control area, and False otherwise. 
The X and Y are the absolute coordinates (relative to the main form) of the point to be checked (compare with PointInObjectLocal):

X is the X coordinate.
Y is the Y coordinate.
The points of the control boundary specified by BoundsRect belong to the control and PointInObject returns True for them.

Note: PointInObject simply converts absolute coordinates of the point to local coordinates and calls PointInObjectLocal.</summary></devnotes></function>
      <constructor name="Create" visibility="public" file="FMX.Objects.pas" line="417">
        <parameters>
          <parameter name="AOwner" type="TComponent"/>
        </parameters>
      <devnotes><summary>
Creates an instance of TShape with the specified component as owner.
FMX.Objects.TPie.Create inherits from FMX.Objects.TShape.Create. All content below this line refers to FMX.Objects.TShape.Create.
Creates an instance of TShape with the specified component as owner. 
</summary></devnotes></constructor>
      <property name="StartAngle" visibility="published" read="FStartAngle" write="SetStartAngle" type="Single" default="0" file="FMX.Objects.pas" line="419"><devnotes><summary>
Specifies the start angle for this pie object.
The StartAngle start angle is measured clockwise from the x-axis. 
Use StartAngle in conjunction with EndAngle to specify how to draw and fill this pie.
Notice that FMX.Controls.TControl.RotationAngle rotates the x-axis.
</summary></devnotes></property>
      <property name="EndAngle" visibility="published" read="FEndAngle" write="SetEndAngle" type="Single" default="0" file="FMX.Objects.pas" line="420"><devnotes><summary>
Specifies the end angle for this pie object.
The EndAngle end angle is measured clockwise from the StartAngle start angle. 
Use EndAngle in conjunction with StartAngle to specify how to draw and fill this pie.
</summary></devnotes></property>
    </members>
  <devnotes><summary>
TPie defines 2D pies. 
TPie is drawn as part of TEllipse. It inherits TControl and can be used in styles to construct controls.
The TPie object is the part of the TEllipse object enclosed between radiuses with the StartAngle and EndAngle angles.
The ShapeRect bounding rectangle, scaling factors specified by Scale, RotationCenter rotation axis, and RotationAngle rotation angle of the TEllipse object should be used to define the general size, shape, and position of TPie.
TPie draws the contour and fills the shape background with the Paint method. 
Paint draws the contour using the drawing pen with the properties, color, and opacity defined by the Stroke property of the TPie object.
Paint fills the background using the drawing brush with the properties, color, and opacity defined by the current Fill property of the TPie object.
</summary></devnotes></class>
  <class name="TArc" file="FMX.Objects.pas" line="425">
    
    <members>
      <field name="FStartAngle" type="Single" visibility="private" size="4" offset="912" file="FMX.Objects.pas" line="427"/>
      <field name="FEndAngle" type="Single" visibility="private" size="4" offset="916" file="FMX.Objects.pas" line="428"/>
      <procedure name="SetEndAngle" visibility="private" file="FMX.Objects.pas" line="429">
        <parameters>
          <parameter name="Value" type="Single" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetStartAngle" visibility="private" file="FMX.Objects.pas" line="430">
        <parameters>
          <parameter name="Value" type="Single" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="Paint" visibility="protected" procflags="override" file="FMX.Objects.pas" line="432">
      <devnotes><summary>


Renders the control's surface. 
FMX.Objects.TArc.Paint inherits from FMX.Controls.TControl.Paint. All content below this line refers to FMX.Controls.TControl.Paint.
Renders the control's surface. 
The Paint method is called by DoPaint when a control is being painted by the PaintTo method. Before DoPaint, Painting is called. AfterPaint is called immediately after. 
FireMonkey internally calls Paint to paint the control when the window is being painted. You must not call Paint explicitly.
The base class TControl implements an empty Paint. The descendants of TControl override Paint to provide specific rendering of the respective controls.
For example, Paint methods in classes of the FMX.Objects unit draw and fill shapes using the properties defined in these classes. See the descriptions of these classes to find the properties of the respective shapes. 
</summary></devnotes></procedure>
      <constructor name="Create" visibility="public" file="FMX.Objects.pas" line="434">
        <parameters>
          <parameter name="AOwner" type="TComponent"/>
        </parameters>
      <devnotes><summary>
Creates an instance of TShape with the specified component as owner.
FMX.Objects.TArc.Create inherits from FMX.Objects.TShape.Create. All content below this line refers to FMX.Objects.TShape.Create.
Creates an instance of TShape with the specified component as owner. 
</summary></devnotes></constructor>
      <property name="StartAngle" visibility="published" read="FStartAngle" write="SetStartAngle" type="Single" default="0" file="FMX.Objects.pas" line="436"><devnotes><summary>
Specifies the start angle for this arc object.
The StartAngle start angle is measured clockwise from the x-axis. 
Use StartAngle in conjunction with EndAngle to specify how to draw this arc.
Notice that FMX.Controls.TControl.RotationAngle rotates the x-axis.
</summary></devnotes></property>
      <property name="EndAngle" visibility="published" read="FEndAngle" write="SetEndAngle" type="Single" default="0" file="FMX.Objects.pas" line="437"><devnotes><summary>
Specifies the end angle for this arc object.
The EndAngle end angle is measured clockwise from the StartAngle start angle. 
Use EndAngle in conjunction with StartAngle to specify how to draw this arc.
</summary></devnotes></property>
    </members>
  <devnotes><summary>
TArc defines 2D arcs. 
TArc is drawn as part of TEllipse's contour. It inherits TControl and can be used in styles to construct controls.
The TArc object is the part of the TEllipse's contour enclosed between radiuses with the StartAngle and EndAngle angles.
To define the general size, shape, and position of TArc, use the ShapeRect bounding rectangle, the scaling factors specified by  Scale, the RotationCenter rotation axis, and the RotationAngle rotation angle of the TEllipse object.
TArc draws the contour and fills the shape background with the Paint method. 
The Paint method draws the TArc contour using the drawing pen having the Stroke property of the TArc object.
</summary></devnotes></class>
  <enum name="TPathWrapMode" file="FMX.Objects.pas" line="440">
    <element value="0" name="Original" file="FMX.Objects.pas" line="440"/>
    <element value="1" name="Fit" file="FMX.Objects.pas" line="440"/>
    <element value="2" name="Stretch" file="FMX.Objects.pas" line="440"/>
    <element value="3" name="Tile" file="FMX.Objects.pas" line="440"/>
  </enum>
  <class name="TCustomPath" file="FMX.Objects.pas" line="444">
    
    <interfaces>
      <implements name="IPathObject"/>
    </interfaces>
    <members>
      <field name="FData" type="TPathData" visibility="private" size="4" offset="912" file="FMX.Objects.pas" line="446"/>
      <field name="FCurrent" type="TPathData" visibility="private" size="4" offset="916" file="FMX.Objects.pas" line="447"/>
      <field name="FWrapMode" type="TPathWrapMode" visibility="private" size="1" offset="920" file="FMX.Objects.pas" line="448"/>
      <field name="FNeedUpdate" type="Boolean" visibility="private" size="1" offset="921" file="FMX.Objects.pas" line="449"/>
      <procedure name="SetWrapMode" visibility="private" file="FMX.Objects.pas" line="450">
        <parameters>
          <parameter name="Value" type="TPathWrapMode" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetPathData" visibility="private" file="FMX.Objects.pas" line="451">
        <parameters>
          <parameter name="Value" type="TPathData" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="GetPath" visibility="private" file="FMX.Objects.pas" line="453">
        <parameters>
          <retval type="TPathData"/>
        </parameters>
      </function>
      <procedure name="StrokeChanged" visibility="protected" procflags="override" file="FMX.Objects.pas" line="455">
        <parameters>
          <parameter name="Sender" type="TObject"/>
        </parameters>
      <devnotes><summary>
Forces the shape to repaint its image on the screen.
FMX.Objects.TCustomPath.StrokeChanged inherits from FMX.Objects.TShape.StrokeChanged. All content below this line refers to FMX.Objects.TShape.StrokeChanged.
Forces the shape to repaint its image on the screen.
StrokeChanged is the event handler of the FMX.Graphics.TBrush.OnChanged event of the Stroke property.


</summary></devnotes></procedure>
      <procedure name="DoChanged" visibility="protected" file="FMX.Objects.pas" line="456">
        <parameters>
          <parameter name="Sender" type="TObject"/>
        </parameters>
      <devnotes><summary>
Forces the repainting of the TCustomPath image on the screen.
</summary></devnotes></procedure>
      <procedure name="Paint" visibility="protected" procflags="override" file="FMX.Objects.pas" line="457">
      <devnotes><summary>
Renders the control's surface. 
FMX.Objects.TCustomPath.Paint inherits from FMX.Controls.TControl.Paint. All content below this line refers to FMX.Controls.TControl.Paint.
Renders the control's surface. 
The Paint method is called by DoPaint when a control is being painted by the PaintTo method. Before DoPaint, Painting is called. AfterPaint is called immediately after. 
FireMonkey internally calls Paint to paint the control when the window is being painted. You must not call Paint explicitly.
The base class TControl implements an empty Paint. The descendants of TControl override Paint to provide specific rendering of the respective controls.
For example, Paint methods in classes of the FMX.Objects unit draw and fill shapes using the properties defined in these classes. See the descriptions of these classes to find the properties of the respective shapes. 
</summary></devnotes></procedure>
      <procedure name="Resize" visibility="protected" procflags="override" file="FMX.Objects.pas" line="458">
      <devnotes><summary>
Resize is called when TCustomPath is resized. 
Resize calls the inherited FMX.Controls.TControl.Resize method and then sets that the TCustomPath image needs to be updated.  
</summary></devnotes></procedure>
      <procedure name="Loaded" visibility="protected" procflags="override" file="FMX.Objects.pas" line="459">
      <devnotes><summary>
Makes required initializations by calling the inherited TControl.Loaded procedure and then sets that the TCustomPath image needs to be updated. 
For additional details, see TControl.Loaded and TComponent.Loaded.
</summary></devnotes></procedure>
      <procedure name="UpdateCurrent" visibility="protected" file="FMX.Objects.pas" line="460">
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <constructor name="Create" visibility="public" file="FMX.Objects.pas" line="462">
        <parameters>
          <parameter name="AOwner" type="TComponent"/>
        </parameters>
      <devnotes><summary>
Creates an instance of TShape with the specified component as owner.
FMX.Objects.TCustomPath.Create inherits from FMX.Objects.TShape.Create. All content below this line refers to FMX.Objects.TShape.Create.
Creates an instance of TShape with the specified component as owner. 
</summary></devnotes></constructor>
      <destructor name="Destroy" visibility="public" file="FMX.Objects.pas" line="463">
        <parameters>
        </parameters>
      <devnotes><summary>
Destroys the object instance and frees its memory.
FMX.Objects.TCustomPath.Destroy inherits from FMX.Objects.TShape.Destroy. All content below this line refers to FMX.Objects.TShape.Destroy.
Destroys the object instance and frees its memory.
Do not call Destroy directly in an application. Call Free instead. Free verifies that the object instance is not nil before calling Destroy.
</summary></devnotes></destructor>
      <function name="PointInObject" visibility="public" procflags="override" file="FMX.Objects.pas" line="464">
        <parameters>
          <parameter name="X" type="Single"/>
          <parameter name="Y" type="Single"/>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Checks whether the specified point belongs to the path Data of the TCustomPath object.
PointInObject calls the FMX.Graphics.TCanvas.PtInPath method of the TCanvas object to check whether the specified point belongs to the path Data of the TCustomPath object.
X and Y are absolute pixel coordinates of the point to be checked:

X is the x-coordinate.
Y is the y-coordinate.</summary></devnotes></function>
      <property name="Data" visibility="public" read="FData" write="SetPathData" type="TPathData" file="FMX.Objects.pas" line="465"><devnotes><summary>
Specifies the SVG data used to build graphic shapes.
The Data property supports only a comma-separated list of instructions defined for the d attribute of the path element in SVG 1.0. 
In SVG 1.0, the d attribute contains the moveto, line, curve, arc, and closepath instructions. All instructions are expressed as one character (for example, a moveto is expressed as an M).
For more information, see Scalable Vector Graphics (SVG) 1.0 Specification.

Example
To clarify, consider the following code snippets that specify the SVG instructions at run time:


Delphi:

Path1.Data.Data := 'M 1,0, L 2,1, L 1,2, L 0,1, L 1,0';


C++Builder:


Path1-&gt;Data-&gt;Data = &quot;M 1,0, L 2,1, L 1,2, L 0,1, L 1,0&quot;;


An application that uses the above mentioned SVG instructions displays a rhomb:

</summary></devnotes></property>
      <property name="WrapMode" visibility="public" read="FWrapMode" write="SetWrapMode" type="TPathWrapMode" default="2" file="FMX.Objects.pas" line="466"><devnotes><summary>
Specifies whether and how to resize, replicate, and position the graphical path representation for painting the area.
The WrapMode property should be one of the constants defined in the TPathWrapMode type: 

Stretch--stretches the path representation to fill the entire area. Default.
Original--keeps the original path size.
Fit--resizes the path representation (keeping proportions) to best fit the area.
Tile--renders the path representation repeatedly to tile the area.</summary></devnotes></property>
    </members>
  <devnotes><summary>
TCustomPath is the base class for all 2D path-type shapes representing groups of connected curves and lines.
TCustomPath renders the path Data graphics with the Paint method. Paint scales and positions the path graphics according to the WrapMode parameter. Paint draws the path contour and fills the background using the drawing pen and brush with the properties, color, and opacity defined by the Stroke and Fill properties of the TCustomPath object.
</summary></devnotes></class>
  <class name="TPath" file="FMX.Objects.pas" line="471">
    
    <members>
      <property name="Align" visibility="published" read="FAlign" write="SetAlign" type="TAlignLayout" default="0" hoisted="true" file="FMX.Objects.pas" line="473"/>
      <property name="Anchors" visibility="published" read="FAnchors" write="SetAnchors" stored="IsAnchorsStored" type="TAnchors" hoisted="true" file="FMX.Objects.pas" line="474"/>
      <property name="ClipChildren" visibility="published" read="FClipChildren" write="SetClipChildren" type="Boolean" default="0" hoisted="true" file="FMX.Objects.pas" line="475"/>
      <property name="ClipParent" visibility="published" read="FClipParent" write="FClipParent" type="Boolean" default="0" hoisted="true" file="FMX.Objects.pas" line="476"/>
      <property name="Cursor" visibility="published" read="GetCursor" write="SetCursor" type="TCursor" default="0" hoisted="true" file="FMX.Objects.pas" line="477"/>
      <property name="Data" visibility="published" read="FData" write="SetPathData" type="TPathData" hoisted="true" file="FMX.Objects.pas" line="478"/>
      <property name="DragMode" visibility="published" read="GetDragMode" write="SetDragMode" type="TDragMode" default="0" hoisted="true" file="FMX.Objects.pas" line="479"/>
      <property name="EnableDragHighlight" visibility="published" read="FEnableDragHighlight" write="FEnableDragHighlight" type="Boolean" default="1" hoisted="true" file="FMX.Objects.pas" line="480"/>
      <property name="Enabled" visibility="published" read="FEnabled" write="SetEnabled" stored="EnabledStored" type="Boolean" default="1" hoisted="true" file="FMX.Objects.pas" line="481"/>
      <property name="Fill" visibility="published" read="FFill" write="SetFill" type="TBrush" hoisted="true" file="FMX.Objects.pas" line="482"/>
      <property name="Locked" visibility="published" read="FLocked" write="SetLocked" type="Boolean" default="0" hoisted="true" file="FMX.Objects.pas" line="483"/>
      <property name="Height" visibility="published" read="GetHeight" write="SetHeight" stored="False" type="Single" hoisted="true" file="FMX.Objects.pas" line="484"/>
      <property name="Hint" visibility="published" read="FHint" write="SetHint" stored="HintStored" type="string" default="0" hoisted="true" file="FMX.Objects.pas" line="485"/>
      <property name="HitTest" visibility="published" read="FHitTest" write="SetHitTest" type="Boolean" default="1" hoisted="true" file="FMX.Objects.pas" line="486"/>
      <property name="Padding" visibility="published" read="GetPadding" write="SetPadding" type="TBounds" hoisted="true" file="FMX.Objects.pas" line="487"/>
      <property name="Opacity" visibility="published" read="FOpacity" write="SetOpacity" stored="IsOpacityStored" type="Single" hoisted="true" file="FMX.Objects.pas" line="488"/>
      <property name="Margins" visibility="published" read="GetMargins" write="SetMargins" type="TBounds" hoisted="true" file="FMX.Objects.pas" line="489"/>
      <property name="PopupMenu" visibility="published" read="FPopupMenu" write="SetPopupMenu" stored="IsPopupMenuStored" type="TCustomPopupMenu" hoisted="true" file="FMX.Objects.pas" line="490"/>
      <property name="Position" visibility="published" read="FPosition" write="SetPosition" stored="IsPositionStored" type="TPosition" hoisted="true" file="FMX.Objects.pas" line="491"/>
      <property name="RotationAngle" visibility="published" read="GetRotationAngle" write="SetRotationAngle" type="Single" default="0" hoisted="true" file="FMX.Objects.pas" line="492"/>
      <property name="RotationCenter" visibility="published" read="GetRotationCenter" write="SetRotationCenter" type="TPosition" hoisted="true" file="FMX.Objects.pas" line="493"/>
      <property name="Scale" visibility="published" read="GetScale" write="SetScale" type="TPosition" hoisted="true" file="FMX.Objects.pas" line="494"/>
      <property name="Size" visibility="published" read="FSize" write="SetSize" stored="IsSizeStored" type="TControlSize" hoisted="true" file="FMX.Objects.pas" line="495"/>
      <property name="Stroke" visibility="published" read="FStroke" write="SetStroke" type="TStrokeBrush" hoisted="true" file="FMX.Objects.pas" line="496"/>
      <property name="Visible" visibility="published" read="FVisible" write="SetVisible" stored="VisibleStored" type="Boolean" default="1" hoisted="true" file="FMX.Objects.pas" line="497"/>
      <property name="Width" visibility="published" read="GetWidth" write="SetWidth" stored="False" type="Single" hoisted="true" file="FMX.Objects.pas" line="498"/>
      <property name="WrapMode" visibility="published" read="FWrapMode" write="SetWrapMode" type="TPathWrapMode" default="2" hoisted="true" file="FMX.Objects.pas" line="499"/>
      <property name="ParentShowHint" visibility="published" read="FParentShowHint" write="SetParentShowHint" type="Boolean" default="1" hoisted="true" file="FMX.Objects.pas" line="500"/>
      <property name="ShowHint" visibility="published" read="FShowHint" write="SetShowHint" stored="IsShowHintStored" type="Boolean" hoisted="true" file="FMX.Objects.pas" line="501"/>
      <event name="OnDragEnter" visibility="published" read="FOnDragEnter" write="FOnDragEnter" type="TDragEnterEvent" hoisted="true" file="FMX.Objects.pas" line="502"/>
      <event name="OnDragLeave" visibility="published" read="FOnDragLeave" write="FOnDragLeave" type="TNotifyEvent" hoisted="true" file="FMX.Objects.pas" line="503"/>
      <event name="OnDragOver" visibility="published" read="FOnDragOver" write="FOnDragOver" type="TDragOverEvent" hoisted="true" file="FMX.Objects.pas" line="504"/>
      <event name="OnDragDrop" visibility="published" read="FOnDragDrop" write="FOnDragDrop" type="TDragDropEvent" hoisted="true" file="FMX.Objects.pas" line="505"/>
      <event name="OnDragEnd" visibility="published" read="FOnDragEnd" write="FOnDragEnd" type="TNotifyEvent" hoisted="true" file="FMX.Objects.pas" line="506"/>
      <event name="OnClick" visibility="published" read="FOnClick" write="SetOnClick" stored="OnClickStored" type="TNotifyEvent" hoisted="true" file="FMX.Objects.pas" line="507"/>
      <event name="OnDblClick" visibility="published" read="FOnDblClick" write="FOnDblClick" type="TNotifyEvent" hoisted="true" file="FMX.Objects.pas" line="508"/>
      <event name="OnMouseDown" visibility="published" read="FOnMouseDown" write="FOnMouseDown" type="TMouseEvent" hoisted="true" file="FMX.Objects.pas" line="509"/>
      <event name="OnMouseMove" visibility="published" read="FOnMouseMove" write="FOnMouseMove" type="TMouseMoveEvent" hoisted="true" file="FMX.Objects.pas" line="510"/>
      <event name="OnMouseUp" visibility="published" read="FOnMouseUp" write="FOnMouseUp" type="TMouseEvent" hoisted="true" file="FMX.Objects.pas" line="511"/>
      <event name="OnMouseWheel" visibility="published" read="FOnMouseWheel" write="FOnMouseWheel" type="TMouseWheelEvent" hoisted="true" file="FMX.Objects.pas" line="512"/>
      <event name="OnMouseEnter" visibility="published" read="FOnMouseEnter" write="FOnMouseEnter" type="TNotifyEvent" hoisted="true" file="FMX.Objects.pas" line="513"/>
      <event name="OnMouseLeave" visibility="published" read="FOnMouseLeave" write="FOnMouseLeave" type="TNotifyEvent" hoisted="true" file="FMX.Objects.pas" line="514"/>
      <event name="OnPainting" visibility="published" read="FOnPainting" write="FOnPainting" type="TOnPaintEvent" hoisted="true" file="FMX.Objects.pas" line="515"/>
      <event name="OnPaint" visibility="published" read="FOnPaint" write="FOnPaint" type="TOnPaintEvent" hoisted="true" file="FMX.Objects.pas" line="516"/>
      <event name="OnResize" visibility="published" read="FOnResize" write="FOnResize" type="TNotifyEvent" hoisted="true" file="FMX.Objects.pas" line="517"/>
      <event name="OnResized" visibility="published" read="FOnResized" write="FOnResized" type="TNotifyEvent" hoisted="true" file="FMX.Objects.pas" line="518"/>
    </members>
  <devnotes><summary>
TPath defines 2D path-type shapes representing groups of connected curves and lines.
</summary></devnotes></class>
  <class name="TText" file="FMX.Objects.pas" line="523">
    
    <interfaces>
      <implements name="ICaption"/>
      <implements name="IObjectState"/>
      <implements name="ITextSettings"/>
    </interfaces>
    <members>
      <class name="TAcceleratorInfo" visibility="protected" alias="FMX.Objects.TAcceleratorInfo" file="FMX.Objects.pas" line="526">
        
        <members>
          <field name="FBrush" type="TStrokeBrush" visibility="private" size="4" offset="4" file="FMX.Objects.pas" line="528"/>
          <function name="GetBrush" visibility="private" file="FMX.Objects.pas" line="529">
            <parameters>
              <retval type="TStrokeBrush"/>
            </parameters>
          </function>
          <field name="FKeyIndex" type="Integer" visibility="class private" size="4" offset="8" file="FMX.Objects.pas" line="531"/>
          <field name="FIsUnderlineValid" type="Boolean" visibility="class private" size="1" offset="12" file="FMX.Objects.pas" line="532"/>
          <field name="FUnderlineBeginPoint" type="TPointF" visibility="class private" size="8" offset="16" file="FMX.Objects.pas" line="533"/>
          <field name="FUnderlineEndPoint" type="TPointF" visibility="class private" size="8" offset="24" file="FMX.Objects.pas" line="534"/>
          <procedure name="SetKeyIndex" visibility="class private" file="FMX.Objects.pas" line="535">
            <parameters>
              <parameter name="Value" type="Integer" paramflags="const"/>
            </parameters>
          </procedure>
          <function name="ValidateUnderlinePoints" visibility="class private" file="FMX.Objects.pas" line="536">
            <parameters>
              <parameter name="AnOwnerControl" type="TControl" paramflags="const"/>
              <parameter name="ACanvas" type="TCanvas" paramflags="const"/>
              <parameter name="ALayout" type="TTextLayout" paramflags="const"/>
              <retval type="Boolean"/>
            </parameters>
          </function>
          <destructor name="Destroy" visibility="public" file="FMX.Objects.pas" line="539">
            <parameters>
            </parameters>
          </destructor>
          <procedure name="InvalidateUnderline" visibility="public" file="FMX.Objects.pas" line="541">
            <devnotes>
               <summary>Method to indicate that the underline needs to be redrawn.</summary>
            </devnotes>
          </procedure>
          <function name="DrawUnderline" visibility="public" file="FMX.Objects.pas" line="543">
            <devnotes>
               <summary>Draws the underline unside the character that holds the accelerator.</summary>
            </devnotes>
            <parameters>
              <parameter name="AnOwnerControl" type="TControl" paramflags="const"/>
              <parameter name="ACanvas" type="TCanvas" paramflags="const"/>
              <parameter name="ALayout" type="TTextLayout" paramflags="const"/>
              <parameter name="AColor" type="TAlphaColor" paramflags="const"/>
              <parameter name="AnOpacity" type="Single" paramflags="const"/>
              <retval type="Boolean"/>
            </parameters>
          </function>
          <property name="KeyIndex" visibility="public" read="FKeyIndex" write="TAcceleratorInfo.SetKeyIndex" type="Integer" file="FMX.Objects.pas" line="546">
            <devnotes>
               <summary>Index of the accelerator key.</summary>
            </devnotes>
          </property>
          <property name="IsUnderlineValid" visibility="public" read="FIsUnderlineValid" type="Boolean" file="FMX.Objects.pas" line="548">
            <devnotes>
               <summary>True if the underline is already generated.</summary>
            </devnotes>
          </property>
          <property name="Brush" visibility="public" read="TAcceleratorInfo.GetBrush" type="TStrokeBrush" file="FMX.Objects.pas" line="550">
            <devnotes>
               <summary>This brush is used to draw the underline down the accelerator key character.</summary>
            </devnotes>
          </property>
        </members>
      </class>
      <field name="FTextSettings" type="TTextSettings" visibility="private" size="4" offset="904" file="FMX.Objects.pas" line="554"/>
      <field name="FDefaultTextSettings" type="TTextSettings" visibility="private" size="4" offset="908" file="FMX.Objects.pas" line="555"/>
      <field name="FStyledSettings" type="TStyledSettings" visibility="private" size="1" offset="912" file="FMX.Objects.pas" line="556"/>
      <field name="FSavedTextSettings" type="TTextSettings" visibility="private" size="4" offset="916" file="FMX.Objects.pas" line="557"/>
      <field name="FLayout" type="TTextLayout" visibility="private" size="4" offset="920" file="FMX.Objects.pas" line="558"/>
      <field name="FAutoSize" type="Boolean" visibility="private" size="1" offset="924" file="FMX.Objects.pas" line="559"/>
      <field name="FStretch" type="Boolean" visibility="private" size="1" offset="925" file="FMX.Objects.pas" line="560"/>
      <field name="FIsChanging" type="Boolean" visibility="private" size="1" offset="926" file="FMX.Objects.pas" line="561"/>
      <field name="FPrefixStyle" type="TPrefixStyle" visibility="private" size="4" offset="928" file="FMX.Objects.pas" line="562"/>
      <field name="FAcceleratorKeyInfo" type="TText.TAcceleratorInfo" visibility="private" size="4" offset="932" file="FMX.Objects.pas" line="563"/>
      <procedure name="SetText" visibility="private" file="FMX.Objects.pas" line="564">
        <parameters>
          <parameter name="Value" type="string" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="DoSetText" visibility="private" file="FMX.Objects.pas" line="565">
        <parameters>
          <parameter name="Value" type="string" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetFont" visibility="private" file="FMX.Objects.pas" line="566">
        <parameters>
          <parameter name="Value" type="TFont" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetHorzTextAlign" visibility="private" file="FMX.Objects.pas" line="567">
        <parameters>
          <parameter name="Value" type="TTextAlign" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetVertTextAlign" visibility="private" file="FMX.Objects.pas" line="568">
        <parameters>
          <parameter name="Value" type="TTextAlign" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetWordWrap" visibility="private" file="FMX.Objects.pas" line="569">
        <parameters>
          <parameter name="Value" type="Boolean" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetAutoSize" visibility="private" file="FMX.Objects.pas" line="570">
        <parameters>
          <parameter name="Value" type="Boolean" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetStretch" visibility="private" file="FMX.Objects.pas" line="571">
        <parameters>
          <parameter name="Value" type="Boolean" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetColor" visibility="private" file="FMX.Objects.pas" line="572">
        <parameters>
          <parameter name="Value" type="TAlphaColor" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetTrimming" visibility="private" file="FMX.Objects.pas" line="573">
        <parameters>
          <parameter name="Value" type="TTextTrimming" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetPrefixStyle" visibility="private" file="FMX.Objects.pas" line="574">
        <parameters>
          <parameter name="Value" type="TPrefixStyle" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="OnFontChanged" visibility="private" file="FMX.Objects.pas" line="575">
        <parameters>
          <parameter name="Sender" type="TObject"/>
        </parameters>
      </procedure>
      <function name="GetDefaultTextSettings" visibility="private" file="FMX.Objects.pas" line="577">
        <parameters>
          <retval type="TTextSettings">
            <devnotes>
               <summary>
               This class combines some of properties that relate to the text
               </summary>
            </devnotes>
          </retval>
        </parameters>
      </function>
      <function name="GetTextSettings" visibility="private" file="FMX.Objects.pas" line="578">
        <parameters>
          <retval type="TTextSettings">
            <devnotes>
               <summary>
               This class combines some of properties that relate to the text
               </summary>
            </devnotes>
          </retval>
        </parameters>
      </function>
      <procedure name="SetTextSettings" visibility="private" file="FMX.Objects.pas" line="580">
        <parameters>
          <parameter name="Value" type="TTextSettings" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetStyledSettings" visibility="private" file="FMX.Objects.pas" line="581">
        <parameters>
          <parameter name="Value" type="TStyledSettings" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="GetStyledSettings" visibility="private" file="FMX.Objects.pas" line="582">
        <parameters>
          <retval type="TStyledSettings"/>
        </parameters>
      </function>
      <function name="GetColor" visibility="private" file="FMX.Objects.pas" line="583">
        <parameters>
          <retval type="TAlphaColor"/>
        </parameters>
      </function>
      <function name="GetFont" visibility="private" file="FMX.Objects.pas" line="584">
        <parameters>
          <retval type="TFont"/>
        </parameters>
      </function>
      <function name="GetHorzTextAlign" visibility="private" file="FMX.Objects.pas" line="585">
        <parameters>
          <retval type="TTextAlign"/>
        </parameters>
      </function>
      <function name="GetTrimming" visibility="private" file="FMX.Objects.pas" line="586">
        <parameters>
          <retval type="TTextTrimming"/>
        </parameters>
      </function>
      <function name="GetVertTextAlign" visibility="private" file="FMX.Objects.pas" line="587">
        <parameters>
          <retval type="TTextAlign"/>
        </parameters>
      </function>
      <function name="GetWordWrap" visibility="private" file="FMX.Objects.pas" line="588">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <function name="GetText" visibility="private" file="FMX.Objects.pas" line="589">
        <parameters>
          <retval type="string"/>
        </parameters>
      </function>
      <function name="TextStored" visibility="private" file="FMX.Objects.pas" line="591">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <procedure name="DefineProperties" visibility="protected" procflags="override" file="FMX.Objects.pas" line="593">
        <parameters>
          <parameter name="Filer" type="TFiler"/>
        </parameters>
      <devnotes><summary>




Designates methods for storing an object's unpublished data on a stream such as a form file.
FMX.Objects.TText.DefineProperties inherits from System.Classes.TComponent.DefineProperties. All content below this line refers to System.Classes.TComponent.DefineProperties.
Designates methods for storing an object's unpublished data on a stream such as a form file.
TComponent overrides the DefineProperties method defined in TPersistent to define &quot;fake&quot; Top and Left properties. These are defined so that components that are not controls can be manipulated at design time. However, the Top and Left properties are hidden, that is, they are not published, because only controls appear at run time.
DefineProperties is virtual; descendent classes can override it. When overriding DefineProperties, be aware that the Ancestor property of Filer might be set, and that this property can determine whether or not it is appropriate to write properties.
DefineProperties is called automatically as part of the component streaming system; do not call it directly.
</summary></devnotes></procedure>
      <procedure name="FontChanged" visibility="protected" procflags="virtual" file="FMX.Objects.pas" line="594">
      <devnotes><summary>
Computes the size of the TText control, based on the font used, then re-renders it with the new dimensions.
The FontChanged method recalculates the physical dimensions (height and width) of the TText control according to the font used to display the text, and re-renders it with the new dimensions.
FontChanged is used internally for auto-sizing purposes. For more information on how to make TText auto-resize according to its display text, refer to the AutoSize API help topic.
</summary></devnotes></procedure>
      <function name="ConvertText" visibility="protected" procflags="virtual" file="FMX.Objects.pas" line="595">
        <parameters>
          <parameter name="Value" type="string" paramflags="const"/>
          <retval type="string"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></function>
      <function name="SupportsPaintStage" visibility="protected" procflags="override" file="FMX.Objects.pas" line="596">
        <parameters>
          <parameter name="Stage" type="TPaintStage" paramflags="const"/>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>


Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></function>
      <function name="GetTextSettingsClass" visibility="protected" procflags="virtual" file="FMX.Objects.pas" line="597">
        <parameters>
          <retval type="TTextSettingsClass"/>
        </parameters>
      <devnotes><summary>
Returns the class type that instance represents the used text settings.
GetTextSettingsClass returns the TTextSettingsClass class reference to the TTextSettingsClass class (or its descendant). An instance of such class provides Font, FontColor, HorzAlign, VertAlign, Trimming, WordWrap, and other text representation properties of a control. Some of these properties can be declared as published to be editable in the Object Inspector.
You can override the method in descendant classes to modify the default behavior.
</summary></devnotes></function>
      <procedure name="Paint" visibility="protected" procflags="override" file="FMX.Objects.pas" line="598">
      <devnotes><summary>
Renders the control's surface. 
FMX.Objects.TText.Paint inherits from FMX.Controls.TControl.Paint. All content below this line refers to FMX.Controls.TControl.Paint.
Renders the control's surface. 
The Paint method is called by DoPaint when a control is being painted by the PaintTo method. Before DoPaint, Painting is called. AfterPaint is called immediately after. 
FireMonkey internally calls Paint to paint the control when the window is being painted. You must not call Paint explicitly.
The base class TControl implements an empty Paint. The descendants of TControl override Paint to provide specific rendering of the respective controls.
For example, Paint methods in classes of the FMX.Objects unit draw and fill shapes using the properties defined in these classes. See the descriptions of these classes to find the properties of the respective shapes. 
</summary></devnotes></procedure>
      <function name="GetData" visibility="protected" procflags="override" file="FMX.Objects.pas" line="599">
        <parameters>
          <retval type="TValue">
            <attributes>
              <attribute name="HPPGENAttribute"/>
            </attributes>
          </retval>
        </parameters>
      <devnotes><summary>
Getter method for the Text property.
</summary></devnotes></function>
      <procedure name="SetData" visibility="protected" procflags="override" file="FMX.Objects.pas" line="600">
        <parameters>
          <parameter name="Value" type="TValue" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Setter method for the Text property.
</summary></devnotes></procedure>
      <procedure name="DoRealign" visibility="protected" procflags="override" file="FMX.Objects.pas" line="601">
      <devnotes><summary>
Computes the new size of the TText control and re-renders it with the new dimensions.
</summary></devnotes></procedure>
      <procedure name="AdjustSize" visibility="protected" file="FMX.Objects.pas" line="602">
      <devnotes><summary>
Computes the new size of the TText control and re-renders it with the new dimensions.
The AdjustSize method recalculates the physical dimensions (height and width) of the TText control according to the text it displays, and re-renders it with the new dimensions.
AdjustSize is used internally for auto-sizing purposes. For more information on how to make TText auto-resize according to its display text, refer to the AutoSize API help topic.
</summary></devnotes></procedure>
      <procedure name="Resize" visibility="protected" procflags="override" file="FMX.Objects.pas" line="603">
      <devnotes><summary>
OnResize event dispatcher. 
FMX.Objects.TText.Resize inherits from FMX.Controls.TControl.Resize. All content below this line refers to FMX.Controls.TControl.Resize.
OnResize event dispatcher. 
A control calls Resize when the dimensions of the control change.
Derived classes can override the protected Resize method to implement specific responses to control resizing.
</summary></devnotes></procedure>
      <procedure name="Loaded" visibility="protected" procflags="override" file="FMX.Objects.pas" line="604">
      <devnotes><summary>
Initializes the component after the form file has been read into memory.
FMX.Objects.TText.Loaded inherits from FMX.Controls.TControl.Loaded. All content below this line refers to FMX.Controls.TControl.Loaded.
Initializes the component after the form file has been read into memory. 
Loaded inherits TComponent.Loaded, realigns the children, if any, and updates the tab list.
For details, see TComponent.Loaded.
</summary></devnotes></procedure>
      <property name="Layout" visibility="protected" read="FLayout" type="TTextLayout" file="FMX.Objects.pas" line="605"><devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></property>
      <procedure name="UpdateDefaultTextSettings" visibility="protected" procflags="virtual" file="FMX.Objects.pas" line="606">
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <function name="SaveState" visibility="protected" procflags="virtual" file="FMX.Objects.pas" line="608">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></function>
      <function name="RestoreState" visibility="protected" procflags="virtual" file="FMX.Objects.pas" line="609">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></function>
      <procedure name="RemoveAcceleratorKeyInfo" visibility="protected" file="FMX.Objects.pas" line="611">
        <devnotes><summary>
Removes the accelerator keys drawing information.
</summary></devnotes>
      </procedure>
      <property name="AcceleratorKeyInfo" visibility="protected" read="FAcceleratorKeyInfo" type="TText.TAcceleratorInfo" file="FMX.Objects.pas" line="613">
        <devnotes><summary>
Indicates the accelerator keys drawing information.
</summary></devnotes>
      </property>
      <constructor name="Create" visibility="public" file="FMX.Objects.pas" line="615">
        <parameters>
          <parameter name="AOwner" type="TComponent"/>
        </parameters>
      <devnotes><summary>
Allocates memory and constructs a safely initialized instance of a component.
Allocates memory and constructs a safely initialized instance of a component.
Allocates memory and constructs a safely initialized instance of a component.
FMX.Objects.TText.Create inherits from System.Classes.TComponent.Create. All content below this line refers to System.Classes.TComponent.Create.
Allocates memory and constructs a safely initialized instance of a component.
All objects have a Create method that constructs the object. TComponent redefines Create so that, for components, Create also:

Establishes the relationship of a component and its Owner, as indicated by the AOwner parameter.
Sets the ComponentStyle property to csInheritable, meaning that the component can be inherited by a descendent form type.
It is not necessary to explicitly create components added in the Form Designer. These components are created automatically when the application is run, and they are destroyed when the application is closed.
For components created programmatically, that is, not created in the Form Designer, call Create and pass in an owner component as the AOwner parameter. The owner disposes of the component when it is destroyed. If the component is not owned, then use Free when it needs to be destroyed.

Tip:  When passing in Self as the Owner parameter, consider what Self references. If a component creates another component in one of its methods, then Self refers to the first component and not the component being created, which is then owned by the first component.
Note:  The TComponent constructor is virtual in part to allow polymorphic instantiation of class references. This is critical to the streaming system and to the Form Designer. Do not forget to use the override directive when declaring a new component's Create constructor.</summary></devnotes></constructor>
      <destructor name="Destroy" visibility="public" file="FMX.Objects.pas" line="616">
        <parameters>
        </parameters>
      <devnotes><summary>
Disposes of the component and its owned components.
Disposes of the component and its owned components.
Disposes of the component and its owned components.
FMX.Objects.TText.Destroy inherits from System.Classes.TComponent.Destroy. All content below this line refers to System.Classes.TComponent.Destroy.
Disposes of the component and its owned components.
Do not call Destroy directly. Call Free instead. Free verifies that the component is not nil, and only then calls Destroy.
Never explicitly free a component in one of its own event handlers, nor free a component from the event handler of a component that it owns or contains.
To destroy a form, call its Release method. Release waits for all the form's event handlers and the event handlers of the form's components to finish executing before destroying the form.

Note: A form owns all the controls and nonvisual components that are placed on it in design mode. When it is freed, all of these components are automatically freed as well. By default, all forms are owned by the global Application object. When an application terminates, it frees the global Application object, which frees all forms. For objects that are not components, and for components created with a nil owner, be sure to call Free after finishing with the object; otherwise the memory allocated for the object will be lost until the application terminates.</summary></devnotes></destructor>
      <procedure name="AfterConstruction" visibility="public" procflags="override" file="FMX.Objects.pas" line="617">
      <devnotes><summary>
Responds after the last constructor has executed.
FMX.Objects.TText.AfterConstruction inherits from System.TObject.AfterConstruction. All content below this line refers to System.TObject.AfterConstruction.
Responds after the last constructor has executed.
AfterConstruction is called automatically after the object's last constructor has executed. Do not call it explicitly in your applications. 
The AfterConstruction method implemented in TObject does nothing. Override this method when creating a class that performs an action after the object is created. For example, TCustomForm overrides AfterConstruction to generate an OnCreate event. 
</summary></devnotes></procedure>
      <procedure name="SetBounds" visibility="public" procflags="override" file="FMX.Objects.pas" line="618">
        <parameters>
          <parameter name="X" type="Single"/>
          <parameter name="Y" type="Single"/>
          <parameter name="AWidth" type="Single"/>
          <parameter name="AHeight" type="Single"/>
        </parameters>
      <devnotes><summary>
Sets the boundaries of the current control.
FMX.Objects.TText.SetBounds inherits from FMX.Controls.TControl.SetBounds. All content below this line refers to FMX.Controls.TControl.SetBounds.
Sets the boundaries of the current control.
Use SetBounds to change all of the boundary properties of the control at one time. 
X specifies the X coordinate of the Position of the control.
Y specifies the Y coordinate of the Position of the control.
AWidth specifies the value of the Width of the control.
AHeight specifies the value of the Height of the control.
The same effect can be achieved by setting the Position, Width, and Height properties separately, but SetBounds changes all properties at once, ensuring that the control will not repaint between changes.
After setting the boundary properties, SetBounds specifies to the control to maintain the alignment of the control within its parent and of its children within it. The given parameter does not necessarily reflect in the Position, Width, and Height properties. The properties can be updated when the alignment is applied. 
</summary></devnotes></procedure>
      <property name="Font" visibility="public" read="GetFont" write="SetFont" type="TFont" file="FMX.Objects.pas" line="619"><devnotes><summary>
Specifies the attributes of text written on or in the control.
To change to a new font, specify a new TFont object. To modify a font, change the value of the Family, Size, or Style of the TFont object.
</summary></devnotes></property>
      <property name="Color" visibility="public" read="GetColor" write="SetColor" type="TAlphaColor" file="FMX.Objects.pas" line="620"><devnotes><summary>
Specifies the color of the Text.
Use Color to set and get the color used to display Text within TText.
</summary></devnotes></property>
      <property name="HorzTextAlign" visibility="public" read="GetHorzTextAlign" write="SetHorzTextAlign" type="TTextAlign" file="FMX.Objects.pas" line="621"><devnotes><summary>
Specifies how the text will be displayed in terms of horizontal alignment.
The HorzTextAlign property specifies how the TText control will display the text in terms of horizontal alignment. HorzTextAlign can have one of the following values:

Center (default)--aligns the text on a horizontal axis, at the middle of the TText control.
Leading--aligns the text on a horizontal axis, at the topmost position inside the TText control.
Trailing--aligns the text on a horizontal axis, at the bottommost position inside the TText control.</summary></devnotes></property>
      <property name="Trimming" visibility="public" read="GetTrimming" write="SetTrimming" type="TTextTrimming" file="FMX.Objects.pas" line="622"><devnotes><summary>
Specifies the behavior of the text, when it overflows the area for drawing the text.
Trimming may take the following values defined in the TTextTrimming type: None, Character, and Word.
If the value of this property is not None and the text does not fit in the drawing area, then it is trimmed to fit the area and an ellipsis sign is printed after the trimmed text.

Note: For Android and iOS platforms, Trimming works only when WordWrap = False.</summary></devnotes></property>
      <property name="VertTextAlign" visibility="public" read="GetVertTextAlign" write="SetVertTextAlign" type="TTextAlign" file="FMX.Objects.pas" line="623"><devnotes><summary>
Specifies how the text will be displayed in terms of vertical alignment.
The VertTextAlign property specifies how the TText control will display the text in terms of vertical alignment. VertTextAlign can have one of the following values:

Center (default)--aligns the text on a vertical axis, at the middle of the TText control.
Leading--aligns the text on a vertical axis, at the topmost position inside the TText control.
Trailing--aligns the text on a vertical axis, at the bottommost position inside the TText control.</summary></devnotes></property>
      <property name="WordWrap" visibility="public" read="GetWordWrap" write="SetWordWrap" type="Boolean" file="FMX.Objects.pas" line="624"><devnotes><summary>
Specifies whether the text inside the TText control wraps when it is longer than the width of the control.
Set WordWrap to True to allow the TText control to display multiple lines of text. When WordWrap is True, text that is too long to fit in the TText control wraps at the right margin and continues in additional lines.
Set WordWrap to False for the text to span onto a single line of the TText control. However, in this case, the text that is too long to fit in the TText control appears truncated.
</summary></devnotes></property>
      <property name="Align" visibility="published" read="FAlign" write="SetAlign" type="TAlignLayout" default="0" hoisted="true" file="FMX.Objects.pas" line="626"/>
      <property name="Anchors" visibility="published" read="FAnchors" write="SetAnchors" stored="IsAnchorsStored" type="TAnchors" hoisted="true" file="FMX.Objects.pas" line="627"/>
      <property name="AutoSize" visibility="published" read="FAutoSize" write="SetAutoSize" type="Boolean" default="0" file="FMX.Objects.pas" line="628"><devnotes><summary>
Specifies whether TText control is auto-sized based on the length of the text.
Set the AutoSize property to True to automatically resize the TText control according to the length of the Text.
Set the AutoSize property to False to lock autoresize of the TText control.

Tip:  The size of the TText control readjusts when the Font property changes.
When both AutoSize and WordWrap are set to True, the height of the TText control increases to show the full text, while the width does not change.
When AutoSize is set to True and WordWrap is False the width of the TText control changes to display the text in one line, while the height does not change.</summary></devnotes></property>
      <property name="ClipChildren" visibility="published" read="FClipChildren" write="SetClipChildren" type="Boolean" default="0" hoisted="true" file="FMX.Objects.pas" line="629"/>
      <property name="ClipParent" visibility="published" read="FClipParent" write="FClipParent" type="Boolean" default="0" hoisted="true" file="FMX.Objects.pas" line="630"/>
      <property name="Cursor" visibility="published" read="GetCursor" write="SetCursor" type="TCursor" default="0" hoisted="true" file="FMX.Objects.pas" line="631"/>
      <property name="DragMode" visibility="published" read="GetDragMode" write="SetDragMode" type="TDragMode" default="0" hoisted="true" file="FMX.Objects.pas" line="632"/>
      <property name="EnableDragHighlight" visibility="published" read="FEnableDragHighlight" write="FEnableDragHighlight" type="Boolean" default="1" hoisted="true" file="FMX.Objects.pas" line="633"/>
      <property name="Enabled" visibility="published" read="FEnabled" write="SetEnabled" stored="EnabledStored" type="Boolean" default="1" hoisted="true" file="FMX.Objects.pas" line="634"/>
      <property name="Locked" visibility="published" read="FLocked" write="SetLocked" type="Boolean" default="0" hoisted="true" file="FMX.Objects.pas" line="635"/>
      <property name="Height" visibility="published" read="GetHeight" write="SetHeight" stored="False" type="Single" hoisted="true" file="FMX.Objects.pas" line="636"/>
      <property name="Hint" visibility="published" read="FHint" write="SetHint" stored="HintStored" type="string" default="0" hoisted="true" file="FMX.Objects.pas" line="637"/>
      <property name="HitTest" visibility="published" read="FHitTest" write="SetHitTest" type="Boolean" default="1" hoisted="true" file="FMX.Objects.pas" line="638"/>
      <property name="Padding" visibility="published" read="GetPadding" write="SetPadding" type="TBounds" hoisted="true" file="FMX.Objects.pas" line="639"/>
      <property name="Opacity" visibility="published" read="FOpacity" write="SetOpacity" stored="IsOpacityStored" type="Single" hoisted="true" file="FMX.Objects.pas" line="640"/>
      <property name="Margins" visibility="published" read="GetMargins" write="SetMargins" type="TBounds" hoisted="true" file="FMX.Objects.pas" line="641"/>
      <property name="PopupMenu" visibility="published" read="FPopupMenu" write="SetPopupMenu" stored="IsPopupMenuStored" type="TCustomPopupMenu" hoisted="true" file="FMX.Objects.pas" line="642"/>
      <property name="Position" visibility="published" read="FPosition" write="SetPosition" stored="IsPositionStored" type="TPosition" hoisted="true" file="FMX.Objects.pas" line="643"/>
      <property name="RotationAngle" visibility="published" read="GetRotationAngle" write="SetRotationAngle" type="Single" default="0" hoisted="true" file="FMX.Objects.pas" line="644"/>
      <property name="RotationCenter" visibility="published" read="GetRotationCenter" write="SetRotationCenter" type="TPosition" hoisted="true" file="FMX.Objects.pas" line="645"/>
      <property name="Scale" visibility="published" read="GetScale" write="SetScale" type="TPosition" hoisted="true" file="FMX.Objects.pas" line="646"/>
      <property name="Size" visibility="published" read="FSize" write="SetSize" stored="IsSizeStored" type="TControlSize" hoisted="true" file="FMX.Objects.pas" line="647"/>
      <property name="Stretch" visibility="published" read="FStretch" write="SetStretch" type="Boolean" default="0" file="FMX.Objects.pas" line="648"><devnotes><summary>
Specifies whether the text in the control will be displayed as stretched over the entire client area.
Set the Stretch property to True to display the text stretched over the entire client area of the TText control. Set the Stretch property to False to display the text normally, without the stretch effect. The default value for the Stretch property is False.

Tip: Setting the Stretch property to True cancels the effect of the WordWrap property.</summary></devnotes></property>
      <property name="Text" visibility="published" read="GetText" write="SetText" type="string" default="0" file="FMX.Objects.pas" line="649"><devnotes><summary>
Specifies the text that will be displayed in the TText control.
The Text property sets or reads the text that is displayed by the TText control. Text is a string.
</summary></devnotes></property>
      <property name="TextSettings" visibility="published" read="GetTextSettings" write="SetTextSettings" type="TTextSettings" file="FMX.Objects.pas" line="650"><devnotes><summary>
Keeps the values of styled text representation properties that are set in the Object Inspector or programmatically.
TextSettings references a TTextSettings type object that handles values of styled text representation properties that are set in the Object Inspector or programmatically. TextSettings references a TTextSettings type object, which handles  styled text representation properties to be used for drawing texts in this control. 
TTextSettings type objects provide all styled text representation properties and methods to manage them.
The styled text representation properties are 
FontColor, TextAlign,
VertTextAlign,
Trimming, WordWrap, and Font (TFont.Family, TFont.Size, and TFont.Style).
TTextSettings objects provide both styled text representation properties, whose values are loaded from a style (specified in StyledSettings), so all other styled text representation properties, whose values can be set manually, and methods to manage these text representation properties. The text representation properties identified in StyledSettings are loaded from the style and cannot be set manually. 
Remember that the HorzAlign and VertAlign text representation properties stored in the TextSettings property of a control correspond to the TextAlign and 
VertTextAlign properties of the control.
</summary></devnotes></property>
      <property name="PrefixStyle" visibility="published" read="FPrefixStyle" write="SetPrefixStyle" type="TPrefixStyle" default="0" file="FMX.Objects.pas" line="652">
        <devnotes><summary>
It determines the way to portray a single character, such as &quot;&amp;&quot;.


</summary></devnotes>
      </property>
      <property name="Visible" visibility="published" read="FVisible" write="SetVisible" stored="VisibleStored" type="Boolean" default="1" hoisted="true" file="FMX.Objects.pas" line="653"/>
      <property name="Width" visibility="published" read="GetWidth" write="SetWidth" stored="False" type="Single" hoisted="true" file="FMX.Objects.pas" line="654"/>
      <property name="ParentShowHint" visibility="published" read="FParentShowHint" write="SetParentShowHint" type="Boolean" default="1" hoisted="true" file="FMX.Objects.pas" line="655"/>
      <property name="ShowHint" visibility="published" read="FShowHint" write="SetShowHint" stored="IsShowHintStored" type="Boolean" hoisted="true" file="FMX.Objects.pas" line="656"/>
      <event name="OnDragEnter" visibility="published" read="FOnDragEnter" write="FOnDragEnter" type="TDragEnterEvent" hoisted="true" file="FMX.Objects.pas" line="658"/>
      <event name="OnDragLeave" visibility="published" read="FOnDragLeave" write="FOnDragLeave" type="TNotifyEvent" hoisted="true" file="FMX.Objects.pas" line="659"/>
      <event name="OnDragOver" visibility="published" read="FOnDragOver" write="FOnDragOver" type="TDragOverEvent" hoisted="true" file="FMX.Objects.pas" line="660"/>
      <event name="OnDragDrop" visibility="published" read="FOnDragDrop" write="FOnDragDrop" type="TDragDropEvent" hoisted="true" file="FMX.Objects.pas" line="661"/>
      <event name="OnDragEnd" visibility="published" read="FOnDragEnd" write="FOnDragEnd" type="TNotifyEvent" hoisted="true" file="FMX.Objects.pas" line="662"/>
      <event name="OnClick" visibility="published" read="FOnClick" write="SetOnClick" stored="OnClickStored" type="TNotifyEvent" hoisted="true" file="FMX.Objects.pas" line="664"/>
      <event name="OnDblClick" visibility="published" read="FOnDblClick" write="FOnDblClick" type="TNotifyEvent" hoisted="true" file="FMX.Objects.pas" line="665"/>
      <event name="OnMouseDown" visibility="published" read="FOnMouseDown" write="FOnMouseDown" type="TMouseEvent" hoisted="true" file="FMX.Objects.pas" line="667"/>
      <event name="OnMouseMove" visibility="published" read="FOnMouseMove" write="FOnMouseMove" type="TMouseMoveEvent" hoisted="true" file="FMX.Objects.pas" line="668"/>
      <event name="OnMouseUp" visibility="published" read="FOnMouseUp" write="FOnMouseUp" type="TMouseEvent" hoisted="true" file="FMX.Objects.pas" line="669"/>
      <event name="OnMouseWheel" visibility="published" read="FOnMouseWheel" write="FOnMouseWheel" type="TMouseWheelEvent" hoisted="true" file="FMX.Objects.pas" line="670"/>
      <event name="OnMouseEnter" visibility="published" read="FOnMouseEnter" write="FOnMouseEnter" type="TNotifyEvent" hoisted="true" file="FMX.Objects.pas" line="671"/>
      <event name="OnMouseLeave" visibility="published" read="FOnMouseLeave" write="FOnMouseLeave" type="TNotifyEvent" hoisted="true" file="FMX.Objects.pas" line="672"/>
      <event name="OnPainting" visibility="published" read="FOnPainting" write="FOnPainting" type="TOnPaintEvent" hoisted="true" file="FMX.Objects.pas" line="674"/>
      <event name="OnPaint" visibility="published" read="FOnPaint" write="FOnPaint" type="TOnPaintEvent" hoisted="true" file="FMX.Objects.pas" line="675"/>
      <event name="OnResize" visibility="published" read="FOnResize" write="FOnResize" type="TNotifyEvent" hoisted="true" file="FMX.Objects.pas" line="676"/>
      <event name="OnResized" visibility="published" read="FOnResized" write="FOnResized" type="TNotifyEvent" hoisted="true" file="FMX.Objects.pas" line="677"/>
    </members>
  <devnotes><summary>
TText defines 2D text objects. It inherits TControl and can be used in styles to construct controls.
TText implements the ITextSettings interface. Therefore, TText objects provide all declared in ITextSettings methods and properties to manage the text appearance parameters declared in TTextSettings.
</summary></devnotes></class>
  <class name="TImageMultiResBitmap" file="FMX.Objects.pas" line="684">
    
    <members>
      <field name="FImage" type="TImage" visibility="private" size="4" offset="40" file="FMX.Objects.pas" line="686">
        <attributes>
          <attribute name="TObject"/>
        </attributes>
      </field>
      <procedure name="Update" visibility="protected" procflags="override" file="FMX.Objects.pas" line="688">
        <parameters>
          <parameter name="Item" type="TCollectionItem"/>
        </parameters>
      </procedure>
      <function name="GetDefaultSize" visibility="protected" procflags="override" file="FMX.Objects.pas" line="689">
        <parameters>
          <retval type="TSize"/>
        </parameters>
      </function>
    </members>
  </class>
  <enum name="TImageWrapMode" file="FMX.Objects.pas" line="693">
    <devnotes>
       <summary> Specifies whether and how to resize, replicate, and position the image for rendering the control surface.</summary>
    </devnotes>
    <element value="0" name="Original" file="FMX.Objects.pas" line="695">
      <devnotes>
         <summary> Display the image with its original dimensions. </summary>
      </devnotes>
    </element>
    <element value="1" name="Fit" file="FMX.Objects.pas" line="698">
      <devnotes>
         <summary> Stretches image into the LocalRect, preserving aspect ratio. When LocalRect
         is bigger than image, the last one will be stretched to fill LocalRect </summary>
      </devnotes>
    </element>
    <element value="2" name="Stretch" file="FMX.Objects.pas" line="700">
      <devnotes>
         <summary> Stretch the image to fill the entire control's rectangle.</summary>
      </devnotes>
    </element>
    <element value="3" name="Tile" file="FMX.Objects.pas" line="702">
      <devnotes>
         <summary> Tile (multiply) the image to cover the entire control's rectangle. </summary>
      </devnotes>
    </element>
    <element value="4" name="Center" file="FMX.Objects.pas" line="704">
      <devnotes>
         <summary> Center the image to the control's rectangle. </summary>
      </devnotes>
    </element>
    <element value="5" name="Place" file="FMX.Objects.pas" line="708">
      <devnotes>
         <summary> Places the image inside the LocalRect. If the image is greater
         than the LocalRect then the source rectangle is scaled with aspect ratio.
         </summary>
      </devnotes>
    </element>
  </enum>
  <class name="TImage" file="FMX.Objects.pas" line="711">
    
    <interfaces>
      <implements name="IMultiResBitmapObject"/>
      <implements name="IBitmapObject"/>
    </interfaces>
    <members>
      <field name="FData" type="TValue" visibility="private" size="24" offset="904" file="FMX.Objects.pas" line="713"/>
      <field name="FBitmapMargins" type="TBounds" visibility="private" size="4" offset="928" file="FMX.Objects.pas" line="714"/>
      <field name="FWrapMode" type="TImageWrapMode" visibility="private" size="1" offset="932" file="FMX.Objects.pas" line="715"/>
      <field name="FDisableInterpolation" type="Boolean" visibility="private" size="1" offset="933" file="FMX.Objects.pas" line="716"/>
      <field name="FMarginWrapMode" type="TImageWrapMode" visibility="private" size="1" offset="934" file="FMX.Objects.pas" line="717"/>
      <field name="FScaleChangedId" type="Integer" visibility="private" size="4" offset="936" file="FMX.Objects.pas" line="718"/>
      <field name="FMultiResBitmap" type="TFixedMultiResBitmap" visibility="private" size="4" offset="940" file="FMX.Objects.pas" line="719"/>
      <field name="FScreenScale" type="Single" visibility="private" size="4" offset="944" file="FMX.Objects.pas" line="720"/>
      <field name="FCurrentScale" type="Single" visibility="private" size="4" offset="948" file="FMX.Objects.pas" line="721"/>
      <field name="FCurrentBitmap" type="TBitmap" visibility="private" size="4" offset="952" file="FMX.Objects.pas" line="722">
        <attributes>
          <attribute name="TObject"/>
        </attributes>
      </field>
      <field name="FCurrentBitmapUpdating" type="Boolean" visibility="private" size="1" offset="956" file="FMX.Objects.pas" line="723"/>
      <procedure name="SetBitmap" visibility="private" file="FMX.Objects.pas" line="724">
        <parameters>
          <parameter name="Value" type="TBitmap" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetWrapMode" visibility="private" file="FMX.Objects.pas" line="725">
        <parameters>
          <parameter name="Value" type="TImageWrapMode" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetBitmapMargins" visibility="private" file="FMX.Objects.pas" line="726">
        <parameters>
          <parameter name="Value" type="TBounds" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetMarginWrapMode" visibility="private" file="FMX.Objects.pas" line="727">
        <parameters>
          <parameter name="Value" type="TImageWrapMode" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetDisableInterpolation" visibility="private" file="FMX.Objects.pas" line="728">
        <parameters>
          <parameter name="Value" type="Boolean" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="ScaleChangedHandler" visibility="private" file="FMX.Objects.pas" line="729">
        <parameters>
          <parameter name="Sender" type="TObject" paramflags="const"/>
          <parameter name="Msg" type="TMessageBase" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="GetBitmap" visibility="private" file="FMX.Objects.pas" line="731">
        <parameters>
          <retval type="TBitmap"/>
        </parameters>
      </function>
      <procedure name="ReadBitmap" visibility="private" file="FMX.Objects.pas" line="732">
        <parameters>
          <parameter name="Stream" type="TStream"/>
        </parameters>
      </procedure>
      <procedure name="ReadHiBitmap" visibility="private" file="FMX.Objects.pas" line="733">
        <parameters>
          <parameter name="Stream" type="TStream"/>
        </parameters>
      </procedure>
      <procedure name="SetMultiResBitmap" visibility="private" file="FMX.Objects.pas" line="734">
        <parameters>
          <parameter name="Value" type="TFixedMultiResBitmap" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="UpdateCurrentBitmap" visibility="private" file="FMX.Objects.pas" line="735">
      </procedure>
      <function name="GetMultiResBitmap" visibility="private" file="FMX.Objects.pas" line="737">
        <parameters>
          <retval type="TCustomMultiResBitmap"/>
        </parameters>
      </function>
      <procedure name="DoChanged" visibility="protected" procflags="virtual" file="FMX.Objects.pas" line="739">
      <devnotes><summary>
Forces the current TImage control to repaint its image on the screen and update the effects of the control and of the control's parent.
DoChanged is called every time the current TImage control is changed. 
</summary></devnotes></procedure>
      <procedure name="Paint" visibility="protected" procflags="override" file="FMX.Objects.pas" line="740">
      <devnotes><summary>
Renders the control's surface. 
FMX.Objects.TImage.Paint inherits from FMX.Controls.TControl.Paint. All content below this line refers to FMX.Controls.TControl.Paint.
Renders the control's surface. 
The Paint method is called by DoPaint when a control is being painted by the PaintTo method. Before DoPaint, Painting is called. AfterPaint is called immediately after. 
FireMonkey internally calls Paint to paint the control when the window is being painted. You must not call Paint explicitly.
The base class TControl implements an empty Paint. The descendants of TControl override Paint to provide specific rendering of the respective controls.
For example, Paint methods in classes of the FMX.Objects unit draw and fill shapes using the properties defined in these classes. See the descriptions of these classes to find the properties of the respective shapes. 
</summary></devnotes></procedure>
      <procedure name="DrawWithMargins" visibility="protected" file="FMX.Objects.pas" line="741">
        <parameters>
          <parameter name="Canvas" type="TCanvas" paramflags="const"/>
          <parameter name="ARect" type="TRectF" paramflags="const"/>
          <parameter name="ABitmap" type="TBitmap" paramflags="const"/>
          <parameter name="AOpacity" type="Single" paramflags="const">
            <value>
              1
            </value>
          </parameter>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <function name="ItemForCurrentScale" visibility="protected" file="FMX.Objects.pas" line="748">
        <devnotes><summary>
Tries to find the item in MultiResBitmap that has the most suitable scale. 
If the IncludeEmpty parameter is True, the returned item can be empty. Otherwise, the returned item cannot be empty. Empty items are ignored.
If the search is successful, ItemForCurrentScale returns the TCustomBitmapItem, otherwise  ItemForCurrentScale returns nil.
</summary></devnotes>
        <parameters>
          <parameter name="IncludeEmpty" type="Boolean" paramflags="const"/>
          <retval type="TCustomBitmapItem"/>
        </parameters>
      </function>
      <function name="GetData" visibility="protected" procflags="override" file="FMX.Objects.pas" line="749">
        <parameters>
          <retval type="TValue">
            <attributes>
              <attribute name="HPPGENAttribute"/>
            </attributes>
          </retval>
        </parameters>
      <devnotes><summary>
Protected getter implementation for the Data property.
If the Data property is empty, GetData returns the value of the Bitmap property.
</summary></devnotes></function>
      <procedure name="SetData" visibility="protected" procflags="override" file="FMX.Objects.pas" line="750">
        <parameters>
          <parameter name="Value" type="TValue" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Protected setter implementation for the Data property.
Additionally, if Value is a TPersistent descendant, the Bitmap property is also set to Value.
</summary></devnotes></procedure>
      <function name="CreateMultiResBitmap" visibility="protected" procflags="virtual" file="FMX.Objects.pas" line="751">
        <parameters>
          <retval type="TFixedMultiResBitmap"/>
        </parameters>
      <devnotes><summary>
Creates the MultiResBitmap multi-resolution bitmap image of the TFixedMultiResBitmap type that will be used by this TImage component to display a picture.
</summary></devnotes></function>
      <procedure name="DefineProperties" visibility="protected" procflags="override" file="FMX.Objects.pas" line="752">
        <parameters>
          <parameter name="Filer" type="TFiler"/>
        </parameters>
      <devnotes><summary>




Designates methods for storing an object's unpublished data on a stream such as a form file.
FMX.Objects.TImage.DefineProperties inherits from System.Classes.TComponent.DefineProperties. All content below this line refers to System.Classes.TComponent.DefineProperties.
Designates methods for storing an object's unpublished data on a stream such as a form file.
TComponent overrides the DefineProperties method defined in TPersistent to define &quot;fake&quot; Top and Left properties. These are defined so that components that are not controls can be manipulated at design time. However, the Top and Left properties are hidden, that is, they are not published, because only controls appear at run time.
DefineProperties is virtual; descendent classes can override it. When overriding DefineProperties, be aware that the Ancestor property of Filer might be set, and that this property can determine whether or not it is appropriate to write properties.
DefineProperties is called automatically as part of the component streaming system; do not call it directly.
</summary></devnotes></procedure>
      <function name="MultiResBitmapStored" visibility="protected" procflags="virtual" file="FMX.Objects.pas" line="753">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Retrieves whether some properties of  MultiResBitmap are stored.
</summary></devnotes></function>
      <function name="CanObserve" visibility="protected" procflags="override" file="FMX.Objects.pas" line="754">
        <parameters>
          <parameter name="ID" type="Integer" paramflags="const"/>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>


Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></function>
      <constructor name="Create" visibility="public" file="FMX.Objects.pas" line="756">
        <parameters>
          <parameter name="AOwner" type="TComponent"/>
        </parameters>
      <devnotes><summary>
Allocates memory and constructs a safely initialized instance of a component.
Allocates memory and constructs a safely initialized instance of a component.
Allocates memory and constructs a safely initialized instance of a component.
FMX.Objects.TImage.Create inherits from System.Classes.TComponent.Create. All content below this line refers to System.Classes.TComponent.Create.
Allocates memory and constructs a safely initialized instance of a component.
All objects have a Create method that constructs the object. TComponent redefines Create so that, for components, Create also:

Establishes the relationship of a component and its Owner, as indicated by the AOwner parameter.
Sets the ComponentStyle property to csInheritable, meaning that the component can be inherited by a descendent form type.
It is not necessary to explicitly create components added in the Form Designer. These components are created automatically when the application is run, and they are destroyed when the application is closed.
For components created programmatically, that is, not created in the Form Designer, call Create and pass in an owner component as the AOwner parameter. The owner disposes of the component when it is destroyed. If the component is not owned, then use Free when it needs to be destroyed.

Tip:  When passing in Self as the Owner parameter, consider what Self references. If a component creates another component in one of its methods, then Self refers to the first component and not the component being created, which is then owned by the first component.
Note:  The TComponent constructor is virtual in part to allow polymorphic instantiation of class references. This is critical to the streaming system and to the Form Designer. Do not forget to use the override directive when declaring a new component's Create constructor.</summary></devnotes></constructor>
      <destructor name="Destroy" visibility="public" file="FMX.Objects.pas" line="757">
        <parameters>
        </parameters>
      <devnotes><summary>
Disposes of the component and its owned components.
Disposes of the component and its owned components.
Disposes of the component and its owned components.
FMX.Objects.TImage.Destroy inherits from System.Classes.TComponent.Destroy. All content below this line refers to System.Classes.TComponent.Destroy.
Disposes of the component and its owned components.
Do not call Destroy directly. Call Free instead. Free verifies that the component is not nil, and only then calls Destroy.
Never explicitly free a component in one of its own event handlers, nor free a component from the event handler of a component that it owns or contains.
To destroy a form, call its Release method. Release waits for all the form's event handlers and the event handlers of the form's components to finish executing before destroying the form.

Note: A form owns all the controls and nonvisual components that are placed on it in design mode. When it is freed, all of these components are automatically freed as well. By default, all forms are owned by the global Application object. When an application terminates, it frees the global Application object, which frees all forms. For objects that are not components, and for components created with a nil owner, be sure to call Free after finishing with the object; otherwise the memory allocated for the object will be lost until the application terminates.</summary></devnotes></destructor>
      <procedure name="DrawBitmap" visibility="public" file="FMX.Objects.pas" line="758">
        <parameters>
          <parameter name="Canvas" type="TCanvas" paramflags="const"/>
          <parameter name="ARect" type="TRectF" paramflags="const"/>
          <parameter name="ABitmap" type="TBitmap" paramflags="const"/>
          <parameter name="AOpacity" type="Single" paramflags="const">
            <value>
              1
            </value>
          </parameter>
        </parameters>
      <devnotes><summary>
Draws a TBitmap image after scaling it to a specified area of the TCanvas.
Use this method to display a whole bitmap image into a specified area of the TCanvas. To display a specified area of the bitmap image, use the FMX.Graphics.TCanvas.DrawBitmap method.

Parameters
This method defines the following parameters:

Canvas: specifies a canvas.
ARect: specifies the rectangle area of Canvas to be drawn.
ABitmap: specifies a TBitmap image.
AOpacity: specifies the transparency to be applied to the ABitmap.
Notes
When using the  DrawBitmap method, pay attention to the following:

When drawing a bitmap image, this method uses the following properties of TImage:
FMX.Objects.TImage.BitmapMargins: Specifies the margins of the bitmap image to draw.
FMX.Objects.TImage.WrapMode: Specifies whether and how to resize, replicate, and position the bitmap image.
It is recommended to use this method within the onPaint event handlers, such as FMX.Controls.TControl.OnPaint or FMX.Forms.TCustomForm.OnPaint.</summary></devnotes></procedure>
      <property name="Bitmap" visibility="public" read="GetBitmap" write="SetBitmap" type="TBitmap" file="FMX.Objects.pas" line="759"><devnotes><summary>
Specifies the bitmap picture that will be displayed by this TImage component.
Set the Bitmap property to the bitmap picture that you want to be displayed by this TImage component. Reading Bitmap provides a TBitmap image that you can assign to other TImage components or you can save to a stream or a file.
The Bitmap getter retrieves the Bitmap image from the appropriate bitmap item of the multi-resolution bitmap stored in MultiResBitmap. When you set a new value to the bitmap, the Bitmap setter saves this bitmap in this bitmap item of the MultiResBitmap multi-resolution bitmap. If you change this bitmap item in MultiResBitmap by any way, this will change the Bitmap image. For example, you can edit MultiResBitmap in the MultiResBitmap Editor from the Object Inspector. 
For a list of image formats supported by this component, please refer to the TBitmapCodecManager API help topic.
You can also assign an image programmatically, as exemplified in the following code snippet:

  Image1.Bitmap.LoadFromFile('MyImage.jpg');

Note: The Bitmap getter uses the following algorithm to retrieve the Bitmap property's value:
Using the GetSceneScale function for the Scene in which the control is drawn, the Bitmap getter retrieves the Scale for the current device. If Scene is not defined, then the 1.0 value for Scale is accepted.
If MultiResBitmap is assigned, then the getter gets the Bitmap from the bitmap item having the scale best matching to the obtained Scale (not including empty bitmap items.)
If the getter does not find any not empty bitmap item, then the getter tries to retrieve an empty bitmap item having the scale exactly matching to the obtained Scale.
If the getter cannot find an empty bitmap item having the obtained Scale, then the getter creates a new bitmap item with the obtained Scale and returns the bitmap from the created bitmap item.
If the obtained Scale &lt;= 0 or MultiResBitmap is not assigned, the exception is raised.</summary></devnotes></property>
      <property name="MultiResBitmap" visibility="published" read="FMultiResBitmap" write="SetMultiResBitmap" stored="MultiResBitmapStored" type="TFixedMultiResBitmap" file="FMX.Objects.pas" line="761"><devnotes><summary>
Keeps the   TFixedMultiResBitmap multi-resolution bitmap.
</summary></devnotes></property>
      <property name="Align" visibility="published" read="FAlign" write="SetAlign" type="TAlignLayout" default="0" hoisted="true" file="FMX.Objects.pas" line="762"/>
      <property name="Anchors" visibility="published" read="FAnchors" write="SetAnchors" stored="IsAnchorsStored" type="TAnchors" hoisted="true" file="FMX.Objects.pas" line="763"/>
      <property name="BitmapMargins" visibility="published" read="FBitmapMargins" write="SetBitmapMargins" type="TBounds" file="FMX.Objects.pas" line="764"><devnotes><summary>
Specifies the margins of the bitmap displayed by this TImage component.
Set or read the BitmapMargins property in order to affect the margins of the image that is displayed by this TImage component.
</summary></devnotes></property>
      <property name="ClipChildren" visibility="published" read="FClipChildren" write="SetClipChildren" type="Boolean" default="0" hoisted="true" file="FMX.Objects.pas" line="765"/>
      <property name="ClipParent" visibility="published" read="FClipParent" write="FClipParent" type="Boolean" default="0" hoisted="true" file="FMX.Objects.pas" line="766"/>
      <property name="Cursor" visibility="published" read="GetCursor" write="SetCursor" type="TCursor" default="0" hoisted="true" file="FMX.Objects.pas" line="767"/>
      <property name="DisableInterpolation" visibility="published" read="FDisableInterpolation" write="SetDisableInterpolation" type="Boolean" default="0" file="FMX.Objects.pas" line="768"><devnotes><summary>
Enables or disables the interpolation of the bitmap image displayed by this TImage component.
The DisableInterpolation property specifies whether the interpolation is used while rendering the bitmap image displayed by this TImage component. By default, DisableInterpolation is set to False.
The following picture shows the same image rendered once with DisableInterpolation set to False and once with DisableInterpolation set to True.

</summary></devnotes></property>
      <property name="DragMode" visibility="published" read="GetDragMode" write="SetDragMode" type="TDragMode" default="0" hoisted="true" file="FMX.Objects.pas" line="769"/>
      <property name="EnableDragHighlight" visibility="published" read="FEnableDragHighlight" write="FEnableDragHighlight" type="Boolean" default="1" hoisted="true" file="FMX.Objects.pas" line="770"/>
      <property name="Enabled" visibility="published" read="FEnabled" write="SetEnabled" stored="EnabledStored" type="Boolean" default="1" hoisted="true" file="FMX.Objects.pas" line="771"/>
      <property name="Locked" visibility="published" read="FLocked" write="SetLocked" type="Boolean" default="0" hoisted="true" file="FMX.Objects.pas" line="772"/>
      <property name="Height" visibility="published" read="GetHeight" write="SetHeight" stored="False" type="Single" hoisted="true" file="FMX.Objects.pas" line="773"/>
      <property name="Hint" visibility="published" read="FHint" write="SetHint" stored="HintStored" type="string" default="0" hoisted="true" file="FMX.Objects.pas" line="774"/>
      <property name="HitTest" visibility="published" read="FHitTest" write="SetHitTest" type="Boolean" default="1" hoisted="true" file="FMX.Objects.pas" line="775"/>
      <property name="Padding" visibility="published" read="GetPadding" write="SetPadding" type="TBounds" hoisted="true" file="FMX.Objects.pas" line="776"/>
      <property name="MarginWrapMode" visibility="published" read="FMarginWrapMode" write="SetMarginWrapMode" type="TImageWrapMode" default="2" file="FMX.Objects.pas" line="777"><devnotes><summary>
Specifies how the margins of the Bitmap are resized, replicated, and positioned.
Use MarginWrapMode property to set and get how the margins of the Bitmap are displayed within the TImage. By default the margins are stretched to fill the entire TImage. To see the possible values of MarginWrapMode, go to TImageWrapMode.
If BitmapMargins property is not set, then MarginWrapMode has no effect over the image.
</summary></devnotes></property>
      <property name="Opacity" visibility="published" read="FOpacity" write="SetOpacity" stored="IsOpacityStored" type="Single" hoisted="true" file="FMX.Objects.pas" line="778"/>
      <property name="Margins" visibility="published" read="GetMargins" write="SetMargins" type="TBounds" hoisted="true" file="FMX.Objects.pas" line="779"/>
      <property name="PopupMenu" visibility="published" read="FPopupMenu" write="SetPopupMenu" stored="IsPopupMenuStored" type="TCustomPopupMenu" hoisted="true" file="FMX.Objects.pas" line="780"/>
      <property name="Position" visibility="published" read="FPosition" write="SetPosition" stored="IsPositionStored" type="TPosition" hoisted="true" file="FMX.Objects.pas" line="781"/>
      <property name="RotationAngle" visibility="published" read="GetRotationAngle" write="SetRotationAngle" type="Single" default="0" hoisted="true" file="FMX.Objects.pas" line="782"/>
      <property name="RotationCenter" visibility="published" read="GetRotationCenter" write="SetRotationCenter" type="TPosition" hoisted="true" file="FMX.Objects.pas" line="783"/>
      <property name="Scale" visibility="published" read="GetScale" write="SetScale" type="TPosition" hoisted="true" file="FMX.Objects.pas" line="784"/>
      <property name="Size" visibility="published" read="FSize" write="SetSize" stored="IsSizeStored" type="TControlSize" hoisted="true" file="FMX.Objects.pas" line="785"/>
      <property name="Visible" visibility="published" read="FVisible" write="SetVisible" stored="VisibleStored" type="Boolean" default="1" hoisted="true" file="FMX.Objects.pas" line="786"/>
      <property name="Width" visibility="published" read="GetWidth" write="SetWidth" stored="False" type="Single" hoisted="true" file="FMX.Objects.pas" line="787"/>
      <property name="WrapMode" visibility="published" read="FWrapMode" write="SetWrapMode" type="TImageWrapMode" default="1" file="FMX.Objects.pas" line="788"><devnotes><summary>
Specifies whether and how to resize, replicate, and position the bitmap image for rendering the TImage surface.
The WrapMode property should be one of the constants defined in the TImageWrapMode type:

Original displays the image with its original dimensions.
Fit provides the best fit, keeping image proportions (the ratio between the width and height) for the TImage rectangle. If needed, the image is scaled down or stretched to best fit the rectangle area. This is the default option.
Stretch stretches the image to fill the entire rectangle of the TImage component.
Tile tiles the TImage image to cover the entire rectangle of the TImage component.
Center centers the image to the rectangle of the TImage component. The image is never resized, regardless the size of the rectangle of the TImage component.
Place fits the image into the TImage rectangle. If the width or height of the image is greater than the corresponding dimension of the TImage rectangle, then the image is scaled down keeping image proportions (the ratio between the width and height) to fit in the TImage rectangle. The obtained image is centered in the TImage rectangle.  Place only makes images smaller, never larger.</summary></devnotes></property>
      <property name="ParentShowHint" visibility="published" read="FParentShowHint" write="SetParentShowHint" type="Boolean" default="1" hoisted="true" file="FMX.Objects.pas" line="789"/>
      <property name="ShowHint" visibility="published" read="FShowHint" write="SetShowHint" stored="IsShowHintStored" type="Boolean" hoisted="true" file="FMX.Objects.pas" line="790"/>
      <event name="OnDragEnter" visibility="published" read="FOnDragEnter" write="FOnDragEnter" type="TDragEnterEvent" hoisted="true" file="FMX.Objects.pas" line="792"/>
      <event name="OnDragLeave" visibility="published" read="FOnDragLeave" write="FOnDragLeave" type="TNotifyEvent" hoisted="true" file="FMX.Objects.pas" line="793"/>
      <event name="OnDragOver" visibility="published" read="FOnDragOver" write="FOnDragOver" type="TDragOverEvent" hoisted="true" file="FMX.Objects.pas" line="794"/>
      <event name="OnDragDrop" visibility="published" read="FOnDragDrop" write="FOnDragDrop" type="TDragDropEvent" hoisted="true" file="FMX.Objects.pas" line="795"/>
      <event name="OnDragEnd" visibility="published" read="FOnDragEnd" write="FOnDragEnd" type="TNotifyEvent" hoisted="true" file="FMX.Objects.pas" line="796"/>
      <event name="OnClick" visibility="published" read="FOnClick" write="SetOnClick" stored="OnClickStored" type="TNotifyEvent" hoisted="true" file="FMX.Objects.pas" line="798"/>
      <event name="OnDblClick" visibility="published" read="FOnDblClick" write="FOnDblClick" type="TNotifyEvent" hoisted="true" file="FMX.Objects.pas" line="799"/>
      <event name="OnMouseDown" visibility="published" read="FOnMouseDown" write="FOnMouseDown" type="TMouseEvent" hoisted="true" file="FMX.Objects.pas" line="801"/>
      <event name="OnMouseMove" visibility="published" read="FOnMouseMove" write="FOnMouseMove" type="TMouseMoveEvent" hoisted="true" file="FMX.Objects.pas" line="802"/>
      <event name="OnMouseUp" visibility="published" read="FOnMouseUp" write="FOnMouseUp" type="TMouseEvent" hoisted="true" file="FMX.Objects.pas" line="803"/>
      <event name="OnMouseWheel" visibility="published" read="FOnMouseWheel" write="FOnMouseWheel" type="TMouseWheelEvent" hoisted="true" file="FMX.Objects.pas" line="804"/>
      <event name="OnMouseEnter" visibility="published" read="FOnMouseEnter" write="FOnMouseEnter" type="TNotifyEvent" hoisted="true" file="FMX.Objects.pas" line="805"/>
      <event name="OnMouseLeave" visibility="published" read="FOnMouseLeave" write="FOnMouseLeave" type="TNotifyEvent" hoisted="true" file="FMX.Objects.pas" line="806"/>
      <event name="OnPainting" visibility="published" read="FOnPainting" write="FOnPainting" type="TOnPaintEvent" hoisted="true" file="FMX.Objects.pas" line="808"/>
      <event name="OnPaint" visibility="published" read="FOnPaint" write="FOnPaint" type="TOnPaintEvent" hoisted="true" file="FMX.Objects.pas" line="809"/>
      <event name="OnResize" visibility="published" read="FOnResize" write="FOnResize" type="TNotifyEvent" hoisted="true" file="FMX.Objects.pas" line="810"/>
      <event name="OnResized" visibility="published" read="FOnResized" write="FOnResized" type="TNotifyEvent" hoisted="true" file="FMX.Objects.pas" line="811"/>
    </members>
  <devnotes><summary>
TImage defines 2D image components. It inherits TControl and can be used in styles to construct controls.
Use TImage to display a graphical image on a control.
Use the MultiResBitmap property to specify the multi-resolution set of bitmaps the most appropriate of which will be displayed as the picture on this TImage control. The TImage control shows the bitmap item with the scale best matching to the device resolution. See in the Bitmap property which algorithm is used to define the most appropriate bitmap item.
You can find the list of supported picture formats in TBitmapCodecManager.
Use the WrapMode property to specify whether and how to resize, replicate, and position the bitmap image for rendering the TImage surface. 
Notice that if any BitmapMargins is defined, then WrapMode is ignored.
</summary></devnotes></class>
  <type name="TPaintEvent" file="FMX.Objects.pas" line="816" procflags="closure">
  </type>
  <class name="TPaintBox" file="FMX.Objects.pas" line="818">
    
    <members>
      <field name="FOnPaint" type="TPaintEvent" visibility="private" size="8" offset="904" file="FMX.Objects.pas" line="820"/>
      <procedure name="Paint" visibility="protected" procflags="override" file="FMX.Objects.pas" line="822">
      <devnotes><summary>
Renders the control's surface. 
FMX.Objects.TPaintBox.Paint inherits from FMX.Controls.TControl.Paint. All content below this line refers to FMX.Controls.TControl.Paint.
Renders the control's surface. 
The Paint method is called by DoPaint when a control is being painted by the PaintTo method. Before DoPaint, Painting is called. AfterPaint is called immediately after. 
FireMonkey internally calls Paint to paint the control when the window is being painted. You must not call Paint explicitly.
The base class TControl implements an empty Paint. The descendants of TControl override Paint to provide specific rendering of the respective controls.
For example, Paint methods in classes of the FMX.Objects unit draw and fill shapes using the properties defined in these classes. See the descriptions of these classes to find the properties of the respective shapes. 
</summary></devnotes></procedure>
      <constructor name="Create" visibility="public" file="FMX.Objects.pas" line="824">
        <parameters>
          <parameter name="AOwner" type="TComponent"/>
        </parameters>
      <devnotes><summary>
Allocates memory and constructs a safely initialized instance of a component.
Allocates memory and constructs a safely initialized instance of a component.
Allocates memory and constructs a safely initialized instance of a component.
FMX.Objects.TPaintBox.Create inherits from System.Classes.TComponent.Create. All content below this line refers to System.Classes.TComponent.Create.
Allocates memory and constructs a safely initialized instance of a component.
All objects have a Create method that constructs the object. TComponent redefines Create so that, for components, Create also:

Establishes the relationship of a component and its Owner, as indicated by the AOwner parameter.
Sets the ComponentStyle property to csInheritable, meaning that the component can be inherited by a descendent form type.
It is not necessary to explicitly create components added in the Form Designer. These components are created automatically when the application is run, and they are destroyed when the application is closed.
For components created programmatically, that is, not created in the Form Designer, call Create and pass in an owner component as the AOwner parameter. The owner disposes of the component when it is destroyed. If the component is not owned, then use Free when it needs to be destroyed.

Tip:  When passing in Self as the Owner parameter, consider what Self references. If a component creates another component in one of its methods, then Self refers to the first component and not the component being created, which is then owned by the first component.
Note:  The TComponent constructor is virtual in part to allow polymorphic instantiation of class references. This is critical to the streaming system and to the Form Designer. Do not forget to use the override directive when declaring a new component's Create constructor.</summary></devnotes></constructor>
      <destructor name="Destroy" visibility="public" file="FMX.Objects.pas" line="825">
        <parameters>
        </parameters>
      <devnotes><summary>
Disposes of the component and its owned components.
Disposes of the component and its owned components.
Disposes of the component and its owned components.
FMX.Objects.TPaintBox.Destroy inherits from System.Classes.TComponent.Destroy. All content below this line refers to System.Classes.TComponent.Destroy.
Disposes of the component and its owned components.
Do not call Destroy directly. Call Free instead. Free verifies that the component is not nil, and only then calls Destroy.
Never explicitly free a component in one of its own event handlers, nor free a component from the event handler of a component that it owns or contains.
To destroy a form, call its Release method. Release waits for all the form's event handlers and the event handlers of the form's components to finish executing before destroying the form.

Note: A form owns all the controls and nonvisual components that are placed on it in design mode. When it is freed, all of these components are automatically freed as well. By default, all forms are owned by the global Application object. When an application terminates, it frees the global Application object, which frees all forms. For objects that are not components, and for components created with a nil owner, be sure to call Free after finishing with the object; otherwise the memory allocated for the object will be lost until the application terminates.</summary></devnotes></destructor>
      <property name="Align" visibility="published" read="FAlign" write="SetAlign" type="TAlignLayout" default="0" hoisted="true" file="FMX.Objects.pas" line="827"/>
      <property name="Anchors" visibility="published" read="FAnchors" write="SetAnchors" stored="IsAnchorsStored" type="TAnchors" hoisted="true" file="FMX.Objects.pas" line="828"/>
      <property name="ClipChildren" visibility="published" read="FClipChildren" write="SetClipChildren" type="Boolean" default="0" hoisted="true" file="FMX.Objects.pas" line="829"/>
      <property name="ClipParent" visibility="published" read="FClipParent" write="FClipParent" type="Boolean" default="0" hoisted="true" file="FMX.Objects.pas" line="830"/>
      <property name="Cursor" visibility="published" read="GetCursor" write="SetCursor" type="TCursor" default="0" hoisted="true" file="FMX.Objects.pas" line="831"/>
      <property name="DragMode" visibility="published" read="GetDragMode" write="SetDragMode" type="TDragMode" default="0" hoisted="true" file="FMX.Objects.pas" line="832"/>
      <property name="EnableDragHighlight" visibility="published" read="FEnableDragHighlight" write="FEnableDragHighlight" type="Boolean" default="1" hoisted="true" file="FMX.Objects.pas" line="833"/>
      <property name="Enabled" visibility="published" read="FEnabled" write="SetEnabled" stored="EnabledStored" type="Boolean" default="1" hoisted="true" file="FMX.Objects.pas" line="834"/>
      <property name="Locked" visibility="published" read="FLocked" write="SetLocked" type="Boolean" default="0" hoisted="true" file="FMX.Objects.pas" line="835"/>
      <property name="Height" visibility="published" read="GetHeight" write="SetHeight" stored="False" type="Single" hoisted="true" file="FMX.Objects.pas" line="836"/>
      <property name="Hint" visibility="published" read="FHint" write="SetHint" stored="HintStored" type="string" default="0" hoisted="true" file="FMX.Objects.pas" line="837"/>
      <property name="HitTest" visibility="published" read="FHitTest" write="SetHitTest" type="Boolean" default="1" hoisted="true" file="FMX.Objects.pas" line="838"/>
      <property name="Padding" visibility="published" read="GetPadding" write="SetPadding" type="TBounds" hoisted="true" file="FMX.Objects.pas" line="839"/>
      <property name="Opacity" visibility="published" read="FOpacity" write="SetOpacity" stored="IsOpacityStored" type="Single" hoisted="true" file="FMX.Objects.pas" line="840"/>
      <property name="Margins" visibility="published" read="GetMargins" write="SetMargins" type="TBounds" hoisted="true" file="FMX.Objects.pas" line="841"/>
      <property name="PopupMenu" visibility="published" read="FPopupMenu" write="SetPopupMenu" stored="IsPopupMenuStored" type="TCustomPopupMenu" hoisted="true" file="FMX.Objects.pas" line="842"/>
      <property name="Position" visibility="published" read="FPosition" write="SetPosition" stored="IsPositionStored" type="TPosition" hoisted="true" file="FMX.Objects.pas" line="843"/>
      <property name="RotationAngle" visibility="published" read="GetRotationAngle" write="SetRotationAngle" type="Single" default="0" hoisted="true" file="FMX.Objects.pas" line="844"/>
      <property name="RotationCenter" visibility="published" read="GetRotationCenter" write="SetRotationCenter" type="TPosition" hoisted="true" file="FMX.Objects.pas" line="845"/>
      <property name="Scale" visibility="published" read="GetScale" write="SetScale" type="TPosition" hoisted="true" file="FMX.Objects.pas" line="846"/>
      <property name="Size" visibility="published" read="FSize" write="SetSize" stored="IsSizeStored" type="TControlSize" hoisted="true" file="FMX.Objects.pas" line="847"/>
      <property name="Visible" visibility="published" read="FVisible" write="SetVisible" stored="VisibleStored" type="Boolean" default="1" hoisted="true" file="FMX.Objects.pas" line="848"/>
      <property name="Width" visibility="published" read="GetWidth" write="SetWidth" stored="False" type="Single" hoisted="true" file="FMX.Objects.pas" line="849"/>
      <property name="ParentShowHint" visibility="published" read="FParentShowHint" write="SetParentShowHint" type="Boolean" default="1" hoisted="true" file="FMX.Objects.pas" line="850"/>
      <property name="ShowHint" visibility="published" read="FShowHint" write="SetShowHint" stored="IsShowHintStored" type="Boolean" hoisted="true" file="FMX.Objects.pas" line="851"/>
      <event name="OnDragEnter" visibility="published" read="FOnDragEnter" write="FOnDragEnter" type="TDragEnterEvent" hoisted="true" file="FMX.Objects.pas" line="853"/>
      <event name="OnDragLeave" visibility="published" read="FOnDragLeave" write="FOnDragLeave" type="TNotifyEvent" hoisted="true" file="FMX.Objects.pas" line="854"/>
      <event name="OnDragOver" visibility="published" read="FOnDragOver" write="FOnDragOver" type="TDragOverEvent" hoisted="true" file="FMX.Objects.pas" line="855"/>
      <event name="OnDragDrop" visibility="published" read="FOnDragDrop" write="FOnDragDrop" type="TDragDropEvent" hoisted="true" file="FMX.Objects.pas" line="856"/>
      <event name="OnDragEnd" visibility="published" read="FOnDragEnd" write="FOnDragEnd" type="TNotifyEvent" hoisted="true" file="FMX.Objects.pas" line="857"/>
      <event name="OnClick" visibility="published" read="FOnClick" write="SetOnClick" stored="OnClickStored" type="TNotifyEvent" hoisted="true" file="FMX.Objects.pas" line="859"/>
      <event name="OnDblClick" visibility="published" read="FOnDblClick" write="FOnDblClick" type="TNotifyEvent" hoisted="true" file="FMX.Objects.pas" line="860"/>
      <event name="OnMouseDown" visibility="published" read="FOnMouseDown" write="FOnMouseDown" type="TMouseEvent" hoisted="true" file="FMX.Objects.pas" line="861"/>
      <event name="OnMouseMove" visibility="published" read="FOnMouseMove" write="FOnMouseMove" type="TMouseMoveEvent" hoisted="true" file="FMX.Objects.pas" line="862"/>
      <event name="OnMouseUp" visibility="published" read="FOnMouseUp" write="FOnMouseUp" type="TMouseEvent" hoisted="true" file="FMX.Objects.pas" line="863"/>
      <event name="OnMouseWheel" visibility="published" read="FOnMouseWheel" write="FOnMouseWheel" type="TMouseWheelEvent" hoisted="true" file="FMX.Objects.pas" line="864"/>
      <event name="OnMouseEnter" visibility="published" read="FOnMouseEnter" write="FOnMouseEnter" type="TNotifyEvent" hoisted="true" file="FMX.Objects.pas" line="865"/>
      <event name="OnMouseLeave" visibility="published" read="FOnMouseLeave" write="FOnMouseLeave" type="TNotifyEvent" hoisted="true" file="FMX.Objects.pas" line="866"/>
      <event name="OnPainting" visibility="published" read="FOnPainting" write="FOnPainting" type="TOnPaintEvent" hoisted="true" file="FMX.Objects.pas" line="867"/>
      <event name="OnPaint" visibility="published" read="FOnPaint" write="FOnPaint" type="TPaintEvent" file="FMX.Objects.pas" line="868"><devnotes><summary>
Occurs when the control is redrawn. 
FMX.Objects.TPaintBox.OnPaint inherits from FMX.Controls.TControl.OnPaint. All content below this line refers to FMX.Controls.TControl.OnPaint.
Occurs when the control is redrawn. 
OnPaint also occurs when DoPaint is called.
Write an event handler for OnPaint to change the way the control renders itself.

Tip:  Notice that calling BeginScene in the OnPaint event handlers has no effect, because BeginScene is called before the OnPaint event handler runs. This guarantees that painting always occurs in OnPaint without requiring extra and probably unexpected code to allow drawing to have an effect.</summary></devnotes></event>
      <event name="OnResize" visibility="published" read="FOnResize" write="FOnResize" type="TNotifyEvent" hoisted="true" file="FMX.Objects.pas" line="869"/>
      <event name="OnResized" visibility="published" read="FOnResized" write="FOnResized" type="TNotifyEvent" hoisted="true" file="FMX.Objects.pas" line="870"/>
    </members>
  <devnotes><summary>
TPaintBox defines a 2D image component providing a canvas that an application can use for rendering an image. It inherits TControl and can be used in styles to construct controls.
Unlike TImage, which displays a picture that is stored in a file, TPaintBox requires an application to draw the image directly on a canvas. Use the OnPaint event handler to draw on the paint box's FMX.Graphics.TCanvas, the drawing surface of the paint box.


</summary></devnotes></class>
  <class name="TSelection" file="FMX.Objects.pas" line="875">
    
    <members>
      <const name="DefaultColor" visibility="public" type="Integer" file="FMX.Objects.pas" line="875">
        <value>
          $FF1072C5
        </value>
      </const>
      <enum name="TGrabHandle" visibility="public" alias="FMX.Objects.TGrabHandle" file="FMX.Objects.pas" line="879">
        <element value="0" name="None" file="FMX.Objects.pas" line="879"/>
        <element value="1" name="LeftTop" file="FMX.Objects.pas" line="879"/>
        <element value="2" name="RightTop" file="FMX.Objects.pas" line="879"/>
        <element value="3" name="LeftBottom" file="FMX.Objects.pas" line="879"/>
        <element value="4" name="RightBottom" file="FMX.Objects.pas" line="879"/>
      </enum>
      <field name="FParentBounds" type="Boolean" visibility="private" size="1" offset="904" file="FMX.Objects.pas" line="881"/>
      <field name="FOnChange" type="TNotifyEvent" visibility="private" size="8" offset="912" file="FMX.Objects.pas" line="882"/>
      <field name="FHideSelection" type="Boolean" visibility="private" size="1" offset="920" file="FMX.Objects.pas" line="883"/>
      <field name="FMinSize" type="Integer" visibility="private" size="4" offset="924" file="FMX.Objects.pas" line="884"/>
      <field name="FOnTrack" type="TNotifyEvent" visibility="private" size="8" offset="928" file="FMX.Objects.pas" line="885"/>
      <field name="FProportional" type="Boolean" visibility="private" size="1" offset="936" file="FMX.Objects.pas" line="886"/>
      <field name="FGripSize" type="Single" visibility="private" size="4" offset="940" file="FMX.Objects.pas" line="887"/>
      <field name="FRatio" type="Single" visibility="private" size="4" offset="944" file="FMX.Objects.pas" line="888"/>
      <field name="FActiveHandle" type="TSelection.TGrabHandle" visibility="private" size="1" offset="948" file="FMX.Objects.pas" line="889"/>
      <field name="FHotHandle" type="TSelection.TGrabHandle" visibility="private" size="1" offset="949" file="FMX.Objects.pas" line="890"/>
      <field name="FDownPos" type="TPointF" visibility="private" size="8" offset="952" file="FMX.Objects.pas" line="891"/>
      <field name="FShowHandles" type="Boolean" visibility="private" size="1" offset="960" file="FMX.Objects.pas" line="892"/>
      <field name="FColor" type="TAlphaColor" visibility="private" size="4" offset="964" file="FMX.Objects.pas" line="893"/>
      <procedure name="SetHideSelection" visibility="private" file="FMX.Objects.pas" line="894">
        <parameters>
          <parameter name="Value" type="Boolean" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetMinSize" visibility="private" file="FMX.Objects.pas" line="895">
        <parameters>
          <parameter name="Value" type="Integer" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetGripSize" visibility="private" file="FMX.Objects.pas" line="896">
        <parameters>
          <parameter name="Value" type="Single" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="ResetInSpace" visibility="private" file="FMX.Objects.pas" line="897">
        <parameters>
          <parameter name="ARotationPoint" type="TPointF" paramflags="const"/>
          <parameter name="ASize" type="TPointF"/>
        </parameters>
      </procedure>
      <function name="GetProportionalSize" visibility="private" file="FMX.Objects.pas" line="898">
        <parameters>
          <parameter name="ASize" type="TPointF" paramflags="const"/>
          <retval type="TPointF"/>
        </parameters>
      </function>
      <function name="GetHandleForPoint" visibility="private" file="FMX.Objects.pas" line="899">
        <parameters>
          <parameter name="P" type="TPointF" paramflags="const"/>
          <retval type="TSelection.TGrabHandle"/>
        </parameters>
      </function>
      <procedure name="GetTransformLeftTop" visibility="private" file="FMX.Objects.pas" line="900">
        <parameters>
          <parameter name="AX" type="Single"/>
          <parameter name="AY" type="Single"/>
          <parameter name="NewSize" type="TPointF" paramflags="var"/>
          <parameter name="Pivot" type="TPointF" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="GetTransformLeftBottom" visibility="private" file="FMX.Objects.pas" line="901">
        <parameters>
          <parameter name="AX" type="Single"/>
          <parameter name="AY" type="Single"/>
          <parameter name="NewSize" type="TPointF" paramflags="var"/>
          <parameter name="Pivot" type="TPointF" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="GetTransformRightTop" visibility="private" file="FMX.Objects.pas" line="902">
        <parameters>
          <parameter name="AX" type="Single"/>
          <parameter name="AY" type="Single"/>
          <parameter name="NewSize" type="TPointF" paramflags="var"/>
          <parameter name="Pivot" type="TPointF" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="GetTransformRightBottom" visibility="private" file="FMX.Objects.pas" line="903">
        <parameters>
          <parameter name="AX" type="Single"/>
          <parameter name="AY" type="Single"/>
          <parameter name="NewSize" type="TPointF" paramflags="var"/>
          <parameter name="Pivot" type="TPointF" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="MoveHandle" visibility="private" file="FMX.Objects.pas" line="904">
        <parameters>
          <parameter name="AX" type="Single"/>
          <parameter name="AY" type="Single"/>
        </parameters>
      </procedure>
      <procedure name="SetShowHandles" visibility="private" file="FMX.Objects.pas" line="905">
        <parameters>
          <parameter name="Value" type="Boolean" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetColor" visibility="private" file="FMX.Objects.pas" line="906">
        <parameters>
          <parameter name="Value" type="TAlphaColor" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="DoGetUpdateRect" visibility="protected" procflags="override" file="FMX.Objects.pas" line="908">
        <parameters>
          <retval type="TRectF"/>
        </parameters>
      <devnotes><summary>


Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></function>
      <procedure name="Paint" visibility="protected" procflags="override" file="FMX.Objects.pas" line="909">
      <devnotes><summary>
Renders the control's surface. 
FMX.Objects.TSelection.Paint inherits from FMX.Controls.TControl.Paint. All content below this line refers to FMX.Controls.TControl.Paint.
Renders the control's surface. 
The Paint method is called by DoPaint when a control is being painted by the PaintTo method. Before DoPaint, Painting is called. AfterPaint is called immediately after. 
FireMonkey internally calls Paint to paint the control when the window is being painted. You must not call Paint explicitly.
The base class TControl implements an empty Paint. The descendants of TControl override Paint to provide specific rendering of the respective controls.
For example, Paint methods in classes of the FMX.Objects unit draw and fill shapes using the properties defined in these classes. See the descriptions of these classes to find the properties of the respective shapes. 
</summary></devnotes></procedure>
      <procedure name="DrawHandle" visibility="protected" procflags="virtual" file="FMX.Objects.pas" line="911">
        <devnotes><summary>
It draws a grip handle.


</summary></devnotes>
        <parameters>
          <parameter name="Canvas" type="TCanvas" paramflags="const"/>
          <parameter name="Handle" type="TSelection.TGrabHandle" paramflags="const"/>
          <parameter name="Rect" type="TRectF" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="DrawFrame" visibility="protected" procflags="virtual" file="FMX.Objects.pas" line="913">
        <devnotes><summary>
It draws a frame rectangle.


</summary></devnotes>
        <parameters>
          <parameter name="Canvas" type="TCanvas" paramflags="const"/>
          <parameter name="Rect" type="TRectF" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="PointInObjectLocal" visibility="public" procflags="override" file="FMX.Objects.pas" line="915">
        <parameters>
          <parameter name="X" type="Single"/>
          <parameter name="Y" type="Single"/>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Checks whether the point specified by local coordinates belongs to the control area.
FMX.Objects.TSelection.PointInObjectLocal inherits from FMX.Controls.TControl.PointInObjectLocal. All content below this line refers to FMX.Controls.TControl.PointInObjectLocal.
Checks whether the point specified by local coordinates belongs to the control area.
PointInObjectLocal returns True if the specified point belongs to the control area, and False otherwise. 
The X and Y are the local coordinates of the point to be checked (compare with PointInObject):

X is the X coordinate.
Y is the Y coordinate.
The local coordinates of the upper-left corner of the control rectangle are (0,0), and the local coordinates of the lower-right corner are (Width, Height). 
The points of the control boundary specified by BoundsRect belong to the control and PointInObjectLocal returns True for them.
If a control supports the Touch property, the control area can be optionally inflated on the values specified by the TouchTargetExpansion property. TouchTargetExpansion keeps four optional parameters representing the expansion for the four sides of the control in pixels (Bottom, Left, Right, and Top). 
The dclasses can change the 'control area' definition. For example:

The FMX.Objects.TSelection class extends the 'control area' definition relative to BoundsRect. FMX.Objects.TSelection.PointInObjectLocal also returns True if the point belongs to any of small rectangles of the four grip controls used to manage the selection shape. The rectangles of the grip controls are rectangles surrounding the four corners of the TSelection rectangle. The Width and Height of these rectangles are equal to 2 * GripSize. For example, the grip control's rectangle of the upper-right corner UR_Corner of TSelection is defined by the following corners:
(UR_Corner.Top - GripSize, UR_Corner.Right - GripSize)--upper-left corner of the grip.
(UR_Corner.Top + GripSize, UR_Corner.Right + GripSize)--lower-right corner of the grip.
FMX.Objects.TSelectionPoint.PointInObjectLocal returns True if the specified point belongs to the rectangle of the grip control corresponding to the TSelectionPoint object, and False otherwise.</summary></devnotes></function>
      <constructor name="Create" visibility="public" file="FMX.Objects.pas" line="916">
        <parameters>
          <parameter name="AOwner" type="TComponent"/>
        </parameters>
      <devnotes><summary>
Allocates memory and constructs a safely initialized instance of a component.
Allocates memory and constructs a safely initialized instance of a component.
Allocates memory and constructs a safely initialized instance of a component.
FMX.Objects.TSelection.Create inherits from System.Classes.TComponent.Create. All content below this line refers to System.Classes.TComponent.Create.
Allocates memory and constructs a safely initialized instance of a component.
All objects have a Create method that constructs the object. TComponent redefines Create so that, for components, Create also:

Establishes the relationship of a component and its Owner, as indicated by the AOwner parameter.
Sets the ComponentStyle property to csInheritable, meaning that the component can be inherited by a descendent form type.
It is not necessary to explicitly create components added in the Form Designer. These components are created automatically when the application is run, and they are destroyed when the application is closed.
For components created programmatically, that is, not created in the Form Designer, call Create and pass in an owner component as the AOwner parameter. The owner disposes of the component when it is destroyed. If the component is not owned, then use Free when it needs to be destroyed.

Tip:  When passing in Self as the Owner parameter, consider what Self references. If a component creates another component in one of its methods, then Self refers to the first component and not the component being created, which is then owned by the first component.
Note:  The TComponent constructor is virtual in part to allow polymorphic instantiation of class references. This is critical to the streaming system and to the Form Designer. Do not forget to use the override directive when declaring a new component's Create constructor.</summary></devnotes></constructor>
      <destructor name="Destroy" visibility="public" file="FMX.Objects.pas" line="917">
        <parameters>
        </parameters>
      <devnotes><summary>
Disposes of the component and its owned components.
Disposes of the component and its owned components.
Disposes of the component and its owned components.
FMX.Objects.TSelection.Destroy inherits from System.Classes.TComponent.Destroy. All content below this line refers to System.Classes.TComponent.Destroy.
Disposes of the component and its owned components.
Do not call Destroy directly. Call Free instead. Free verifies that the component is not nil, and only then calls Destroy.
Never explicitly free a component in one of its own event handlers, nor free a component from the event handler of a component that it owns or contains.
To destroy a form, call its Release method. Release waits for all the form's event handlers and the event handlers of the form's components to finish executing before destroying the form.

Note: A form owns all the controls and nonvisual components that are placed on it in design mode. When it is freed, all of these components are automatically freed as well. By default, all forms are owned by the global Application object. When an application terminates, it frees the global Application object, which frees all forms. For objects that are not components, and for components created with a nil owner, be sure to call Free after finishing with the object; otherwise the memory allocated for the object will be lost until the application terminates.</summary></devnotes></destructor>
      <procedure name="MouseDown" visibility="public" procflags="override" file="FMX.Objects.pas" line="918">
        <parameters>
          <parameter name="Button" type="TMouseButton"/>
          <parameter name="Shift" type="TShiftState"/>
          <parameter name="X" type="Single"/>
          <parameter name="Y" type="Single"/>
        </parameters>
      <devnotes><summary>
Handles the pressing of a mouse button inside the TSelection object. 
MouseDown calls  FMX.Controls.TControl.MouseDown, checks whether any of the grip controls (small circles in the selection rectangular corners) are pointed to resize the selection shape and activate resizing by moving this control or activates moving of the TSelection object by moving the mouse pointer. 
MouseDown has the following parameters:  

Button--belongs to the TMouseButton type and specifies the pressed mouse button: mbLeft--left, mbRight--right, or mbMiddle--middle.
Shift--belongs to the TShiftState type and passes additional information such as: whether shift keys (ssShift--SHIFT, ssCtrl--CTRL, or ssAlt--ALT) were pressed when the mouse button was clicked; whether the mouse button was double-clicked (ssDouble).
X and Y--are the local pixel coordinates of the mouse pointer within the TSelection object.
The TForm form, owner of the TSelection object, calls MouseDown in response to mouse-down messages.
Override the public MouseDown method to provide a customized response when a mouse button is pressed when the mouse pointer is over the TSelection object.
</summary></devnotes></procedure>
      <procedure name="MouseMove" visibility="public" procflags="override" file="FMX.Objects.pas" line="919">
        <parameters>
          <parameter name="Shift" type="TShiftState"/>
          <parameter name="X" type="Single"/>
          <parameter name="Y" type="Single"/>
        </parameters>
      <devnotes><summary>
Handles moving of the mouse pointer over a TSelection object.
As the mouse pointer moves over a TSelection object, this method is called repeatedly. It is called each time with the new mouse pointer coordinates that reflect the continuous path of the mouse pointer.

Parameters
MouseMove has the following parameters:  

Shift--belongs to the TShiftState type and passes additional information, such as: which mouse button was pressed (ssLeft--left, ssRight--right) or whether shift keys (ssShift--SHIFT, ssCtrl--CTRL, or ssAlt--ALT) were pressed when the mouse button was clicked.
X and Y--are the local pixel coordinates of the mouse pointer within the TSelection object.
Functionality
MouseMove executes the following operations:

MouseMove calls the inherited FMX.Controls.TControl.MouseMove method. Then:
If the mouse button is not pressed down:
Check whether the mouse pointer hovers over a grip control:
When the mouse pointer moves over a grip control--shows the resizing arrow on the grip control over which the mouse pointer is moving.
When the mouse pointer moves outside a grip control--clears the resizing arrows, if any.
Force repaint of the selection shape.
If the left mouse button is pressed inside the TSelection object:
Moves the shape of the TSelection object on the vector with the start point having the coordinates where the mouse button was pressed and the end point having the current coordinates of the mouse.
If ParentBounds is True, the TSelection object shape is moved inside the boundaries of the parent control.
If ParentBounds is False, the TSelection object shape is moved inside the boundaries of the current TCanvas object.
Calls the customer event handler of the OnTrack event.
If the left mouse button is pressed down on one of the grip controls of the TSelection object:
The shape of the TSelection object is resized to reflect the moving of the selected grip control.
If ParentBounds is True, the TSelection object shape is resized to fit the boundaries of the parent control.
If ParentBounds is False, the TSelection object shape is resized to fit the boundaries of the current TCanvas object.
If Proportional is True, the object shape is resized keeping the Width/Height proportion.
Call the customer event handler of the OnTrack event.
Force the repaint of the selection shape.

Override the public MouseMove method to provide a customized response when the mouse pointer is moved over the TSelection object.
</summary></devnotes></procedure>
      <procedure name="MouseUp" visibility="public" procflags="override" file="FMX.Objects.pas" line="920">
        <parameters>
          <parameter name="Button" type="TMouseButton"/>
          <parameter name="Shift" type="TShiftState"/>
          <parameter name="X" type="Single"/>
          <parameter name="Y" type="Single"/>
        </parameters>
      <devnotes><summary>
Handles the release of a mouse button pressed inside the TSelection object. 
MouseUp calls the inherited FMX.Controls.TControl.MouseUp. If the TSelection object is being moved or resized by the mouse, MouseUp calls the OnChange event handler, and then stops moving or resizing by the mouse.   
MouseUp has the following parameters:  

Button--belongs to the TMouseButton type and specifies the pressed mouse button: mbLeft--left, mbRight--right, or mbMiddle--middle.
Shift--belongs to the TShiftState type and passes additional information, such as whether shift keys (ssShift--SHIFT, ssCtrl--CTRL, or ssAlt--ALT) were down when the pressed mouse button was released.
X and Y--are the local pixel coordinates of the mouse pointer within the TSelection object.
The TForm form (owner of the TSelection object) calls MouseUp in response to mouse-up messages.
Override the public MouseUp method to provide a customized response if the mouse button is released when the mouse pointer is over the TSelection object.
</summary></devnotes></procedure>
      <procedure name="DoMouseLeave" visibility="public" procflags="override" file="FMX.Objects.pas" line="921">
      <devnotes><summary>
DoMouseLeave is called automatically when the mouse pointer leaves the TSelection object. 
DoMouseLeave of the TSelection object calls the inherited FMX.Controls.TControl.DoMouseLeave method which starts animation by calling StartTriggerAnimation, applies effects by calling ApplyTriggerEffect, and calls the FMX.Controls.TControl.OnMouseLeave event handler. Then DoMouseLeave frees the grip controls. Finally, DoMouseLeave initializes the TSelection shape repaint operation.
Override the protected DoMouseLeave method to provide other responses when the mouse pointer leaves the TSelection object.
</summary></devnotes></procedure>
      <property name="HotHandle" visibility="public" read="FHotHandle" type="TSelection.TGrabHandle" file="FMX.Objects.pas" line="923">
        <devnotes><summary>
It grips the handle where the mouse is hovered.


</summary></devnotes>
      </property>
      <property name="Align" visibility="published" read="FAlign" write="SetAlign" type="TAlignLayout" default="0" hoisted="true" file="FMX.Objects.pas" line="925"/>
      <property name="Anchors" visibility="published" read="FAnchors" write="SetAnchors" stored="IsAnchorsStored" type="TAnchors" hoisted="true" file="FMX.Objects.pas" line="926"/>
      <property name="ClipChildren" visibility="published" read="FClipChildren" write="SetClipChildren" type="Boolean" default="0" hoisted="true" file="FMX.Objects.pas" line="927"/>
      <property name="ClipParent" visibility="published" read="FClipParent" write="FClipParent" type="Boolean" default="0" hoisted="true" file="FMX.Objects.pas" line="928"/>
      <property name="Cursor" visibility="published" read="GetCursor" write="SetCursor" type="TCursor" default="0" hoisted="true" file="FMX.Objects.pas" line="929"/>
      <property name="Color" visibility="published" read="FColor" write="SetColor" type="TAlphaColor" default="-15699259" file="FMX.Objects.pas" line="931">
        <devnotes><summary>
Selection frame and handle's border color.


</summary></devnotes>
      </property>
      <property name="DragMode" visibility="published" read="GetDragMode" write="SetDragMode" type="TDragMode" default="0" hoisted="true" file="FMX.Objects.pas" line="932"/>
      <property name="EnableDragHighlight" visibility="published" read="FEnableDragHighlight" write="FEnableDragHighlight" type="Boolean" default="1" hoisted="true" file="FMX.Objects.pas" line="933"/>
      <property name="Enabled" visibility="published" read="FEnabled" write="SetEnabled" stored="EnabledStored" type="Boolean" default="1" hoisted="true" file="FMX.Objects.pas" line="934"/>
      <property name="GripSize" visibility="published" read="FGripSize" write="SetGripSize" type="Single" default="0" file="FMX.Objects.pas" line="935"><devnotes><summary>
Defines the size of the grip controls used to resize the TSelection object.
</summary></devnotes></property>
      <property name="Locked" visibility="published" read="FLocked" write="SetLocked" type="Boolean" default="0" hoisted="true" file="FMX.Objects.pas" line="936"/>
      <property name="Height" visibility="published" read="GetHeight" write="SetHeight" stored="False" type="Single" hoisted="true" file="FMX.Objects.pas" line="937"/>
      <property name="HideSelection" visibility="published" read="FHideSelection" write="SetHideSelection" type="Boolean" file="FMX.Objects.pas" line="938"><devnotes><summary>
Defines whether to hide the selection rectangle when the TSelection object is not selected.
When HideSelection is True and the TSelection object is not selected, the rectangle and grip controls are invisible. 

See also
FMX.Objects.TSelection.GripSize

</summary></devnotes></property>
      <property name="Hint" visibility="published" read="FHint" write="SetHint" stored="HintStored" type="string" default="0" hoisted="true" file="FMX.Objects.pas" line="939"/>
      <property name="HitTest" visibility="published" read="FHitTest" write="SetHitTest" type="Boolean" default="1" hoisted="true" file="FMX.Objects.pas" line="940"/>
      <property name="Padding" visibility="published" read="GetPadding" write="SetPadding" type="TBounds" hoisted="true" file="FMX.Objects.pas" line="941"/>
      <property name="MinSize" visibility="published" read="FMinSize" write="SetMinSize" type="Integer" default="15" file="FMX.Objects.pas" line="942"><devnotes><summary>
Defines the minimum possible values for the width and height of the TSelection object.
</summary></devnotes></property>
      <property name="Opacity" visibility="published" read="FOpacity" write="SetOpacity" stored="IsOpacityStored" type="Single" hoisted="true" file="FMX.Objects.pas" line="943"/>
      <property name="Margins" visibility="published" read="GetMargins" write="SetMargins" type="TBounds" hoisted="true" file="FMX.Objects.pas" line="944"/>
      <property name="ParentBounds" visibility="published" read="FParentBounds" write="FParentBounds" type="Boolean" default="1" file="FMX.Objects.pas" line="945"><devnotes><summary>
Defines whether the shape of the TSelection object should be inside the boundaries of the parent control.
When ParentBounds is True, the shape of the TSelection object cannot be moved outside the boundaries of the parent control. 
</summary></devnotes></property>
      <property name="Proportional" visibility="published" read="FProportional" write="FProportional" type="Boolean" file="FMX.Objects.pas" line="946"><devnotes><summary>
Defines whether the width/height proportion should be kept during the resizing of the TSelection object.
</summary></devnotes></property>
      <property name="PopupMenu" visibility="published" read="FPopupMenu" write="SetPopupMenu" stored="IsPopupMenuStored" type="TCustomPopupMenu" hoisted="true" file="FMX.Objects.pas" line="947"/>
      <property name="Position" visibility="published" read="FPosition" write="SetPosition" stored="IsPositionStored" type="TPosition" hoisted="true" file="FMX.Objects.pas" line="948"/>
      <property name="RotationAngle" visibility="published" read="GetRotationAngle" write="SetRotationAngle" type="Single" default="0" hoisted="true" file="FMX.Objects.pas" line="949"/>
      <property name="RotationCenter" visibility="published" read="GetRotationCenter" write="SetRotationCenter" type="TPosition" hoisted="true" file="FMX.Objects.pas" line="950"/>
      <property name="Scale" visibility="published" read="GetScale" write="SetScale" type="TPosition" hoisted="true" file="FMX.Objects.pas" line="951"/>
      <property name="Size" visibility="published" read="FSize" write="SetSize" stored="IsSizeStored" type="TControlSize" hoisted="true" file="FMX.Objects.pas" line="952"/>
      <property name="ShowHandles" visibility="published" read="FShowHandles" write="SetShowHandles" type="Boolean" file="FMX.Objects.pas" line="954">
        <devnotes><summary>
It indicates the visibility of the handles.


</summary></devnotes>
      </property>
      <property name="Visible" visibility="published" read="FVisible" write="SetVisible" stored="VisibleStored" type="Boolean" default="1" hoisted="true" file="FMX.Objects.pas" line="955"/>
      <property name="Width" visibility="published" read="GetWidth" write="SetWidth" stored="False" type="Single" hoisted="true" file="FMX.Objects.pas" line="956"/>
      <property name="ParentShowHint" visibility="published" read="FParentShowHint" write="SetParentShowHint" type="Boolean" default="1" hoisted="true" file="FMX.Objects.pas" line="957"/>
      <property name="ShowHint" visibility="published" read="FShowHint" write="SetShowHint" stored="IsShowHintStored" type="Boolean" hoisted="true" file="FMX.Objects.pas" line="958"/>
      <event name="OnChange" visibility="published" read="FOnChange" write="FOnChange" type="TNotifyEvent" file="FMX.Objects.pas" line="959"><devnotes><summary>
The event handler of the OnChange event is called from the MouseUp method whenever the shape of a TSelection object changes.
Write a custom OnChange event handler to perform a specific action when the TSelection object changes.
</summary></devnotes></event>
      <event name="OnDragEnter" visibility="published" read="FOnDragEnter" write="FOnDragEnter" type="TDragEnterEvent" hoisted="true" file="FMX.Objects.pas" line="961"/>
      <event name="OnDragLeave" visibility="published" read="FOnDragLeave" write="FOnDragLeave" type="TNotifyEvent" hoisted="true" file="FMX.Objects.pas" line="962"/>
      <event name="OnDragOver" visibility="published" read="FOnDragOver" write="FOnDragOver" type="TDragOverEvent" hoisted="true" file="FMX.Objects.pas" line="963"/>
      <event name="OnDragDrop" visibility="published" read="FOnDragDrop" write="FOnDragDrop" type="TDragDropEvent" hoisted="true" file="FMX.Objects.pas" line="964"/>
      <event name="OnDragEnd" visibility="published" read="FOnDragEnd" write="FOnDragEnd" type="TNotifyEvent" hoisted="true" file="FMX.Objects.pas" line="965"/>
      <event name="OnClick" visibility="published" read="FOnClick" write="SetOnClick" stored="OnClickStored" type="TNotifyEvent" hoisted="true" file="FMX.Objects.pas" line="967"/>
      <event name="OnDblClick" visibility="published" read="FOnDblClick" write="FOnDblClick" type="TNotifyEvent" hoisted="true" file="FMX.Objects.pas" line="968"/>
      <event name="OnMouseDown" visibility="published" read="FOnMouseDown" write="FOnMouseDown" type="TMouseEvent" hoisted="true" file="FMX.Objects.pas" line="970"/>
      <event name="OnMouseMove" visibility="published" read="FOnMouseMove" write="FOnMouseMove" type="TMouseMoveEvent" hoisted="true" file="FMX.Objects.pas" line="971"/>
      <event name="OnMouseUp" visibility="published" read="FOnMouseUp" write="FOnMouseUp" type="TMouseEvent" hoisted="true" file="FMX.Objects.pas" line="972"/>
      <event name="OnMouseWheel" visibility="published" read="FOnMouseWheel" write="FOnMouseWheel" type="TMouseWheelEvent" hoisted="true" file="FMX.Objects.pas" line="973"/>
      <event name="OnMouseEnter" visibility="published" read="FOnMouseEnter" write="FOnMouseEnter" type="TNotifyEvent" hoisted="true" file="FMX.Objects.pas" line="974"/>
      <event name="OnMouseLeave" visibility="published" read="FOnMouseLeave" write="FOnMouseLeave" type="TNotifyEvent" hoisted="true" file="FMX.Objects.pas" line="975"/>
      <event name="OnPainting" visibility="published" read="FOnPainting" write="FOnPainting" type="TOnPaintEvent" hoisted="true" file="FMX.Objects.pas" line="977"/>
      <event name="OnPaint" visibility="published" read="FOnPaint" write="FOnPaint" type="TOnPaintEvent" hoisted="true" file="FMX.Objects.pas" line="978"/>
      <event name="OnResize" visibility="published" read="FOnResize" write="FOnResize" type="TNotifyEvent" hoisted="true" file="FMX.Objects.pas" line="979"/>
      <event name="OnResized" visibility="published" read="FOnResized" write="FOnResized" type="TNotifyEvent" hoisted="true" file="FMX.Objects.pas" line="980"/>
      <event name="OnTrack" visibility="published" read="FOnTrack" write="FOnTrack" type="TNotifyEvent" file="FMX.Objects.pas" line="981"><devnotes><summary>
The event handler of the OnTrack event is called cyclically from the MouseMove method while the TSelection object is in the process of moving or resizing.
Write a custom OnTrack event handler to perform a specific action when TSelection is in the process of moving or resizing.
</summary></devnotes></event>
    </members>
  <devnotes><summary>
TSelection defines 2D rectangle object that can be moved and resized. It inherits TControl and can be used in styles to construct controls.
You can use scaling factors Scale of the TSelection object to proportionally change coordinates of a selection object's rectangle along local coordinate axes. Scaling moves the selection rectangle and change its size. The rotation axis RotationCenter and rotation angle RotationAngle of the selection object can also be used to modify the selection rectangle's size and position.
The Paint method renders the TSelection image. Paint internally defines the properties of the drawing pen to draw the selection contour and the brush to fill the background depending on whether the control is enabled, the zone is hot, and other conditions. 
To resize the TSelection rectangle you can use four grip controls. Grip controls appear as small circles at the selection rectangle corners when the mouse pointer hovers over the grip controls.
</summary></devnotes></class>
  <type name="TOnChangeTracking" file="FMX.Objects.pas" line="986" procflags="closure">
  </type>
  <class name="TSelectionPoint" file="FMX.Objects.pas" line="988">
    
    <members>
      <field name="FParentBounds" type="Boolean" visibility="private" size="1" offset="944" file="FMX.Objects.pas" line="990"/>
      <field name="FGripSize" type="Single" visibility="private" size="4" offset="948" file="FMX.Objects.pas" line="991"/>
      <field name="FGripCenter" type="TPosition" visibility="private" size="4" offset="952" file="FMX.Objects.pas" line="992"/>
      <field name="FPressed" type="Boolean" visibility="private" size="1" offset="956" file="FMX.Objects.pas" line="993"/>
      <field name="FStylized" type="Boolean" visibility="private" size="1" offset="957" file="FMX.Objects.pas" line="994"/>
      <field name="FOnChange" type="TNotifyEvent" visibility="private" size="8" offset="960" file="FMX.Objects.pas" line="995"/>
      <field name="FOnChangeTrack" type="TOnChangeTracking" visibility="private" size="8" offset="968" file="FMX.Objects.pas" line="996"/>
      <procedure name="SetGripSize" visibility="private" file="FMX.Objects.pas" line="997">
        <parameters>
          <parameter name="Value" type="Single" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetGripCenter" visibility="private" file="FMX.Objects.pas" line="998">
        <parameters>
          <parameter name="Value" type="TPosition" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="Paint" visibility="protected" procflags="override" file="FMX.Objects.pas" line="1000">
      <devnotes><summary>
Renders the control's surface. 
FMX.Objects.TSelectionPoint.Paint inherits from FMX.Controls.TControl.Paint. All content below this line refers to FMX.Controls.TControl.Paint.
Renders the control's surface. 
The Paint method is called by DoPaint when a control is being painted by the PaintTo method. Before DoPaint, Painting is called. AfterPaint is called immediately after. 
FireMonkey internally calls Paint to paint the control when the window is being painted. You must not call Paint explicitly.
The base class TControl implements an empty Paint. The descendants of TControl override Paint to provide specific rendering of the respective controls.
For example, Paint methods in classes of the FMX.Objects unit draw and fill shapes using the properties defined in these classes. See the descriptions of these classes to find the properties of the respective shapes. 
</summary></devnotes></procedure>
      <procedure name="SetHeight" visibility="protected" procflags="override" file="FMX.Objects.pas" line="1001">
        <parameters>
          <parameter name="Value" type="Single" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Setter function for the Height property.
Value specifies the new value of the Height property.
If no style is applied to the TSelectionPoint object, then SetHeight sets Height = 2*GripSize. The specified Value is ignored.
</summary></devnotes></procedure>
      <procedure name="SetWidth" visibility="protected" procflags="override" file="FMX.Objects.pas" line="1002">
        <parameters>
          <parameter name="Value" type="Single" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Setter function for the Width property.
Value specifies the new value of the Width property.
If no style is applied to the TSelectionPoint object, then SetWidth sets Width = 2*GripSize. The specified Value is ignored.
</summary></devnotes></procedure>
      <function name="DoGetUpdateRect" visibility="protected" procflags="override" file="FMX.Objects.pas" line="1003">
        <parameters>
          <retval type="TRectF"/>
        </parameters>
      <devnotes><summary>


Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></function>
      <procedure name="DoMouseEnter" visibility="protected" procflags="override" file="FMX.Objects.pas" line="1004">
      <devnotes><summary>
DoMouseEnter is called when the mouse pointer enters the TSelectionPoint object. 
DoMouseEnter calls the inherited FMX.Controls.TControl.DoMouseEnter method and then initializes repainting of the TSelectionPoint shape.
Override the protected DoMouseEnter method to provide other responses when the mouse pointer enters the TSelectionPoint object.
</summary></devnotes></procedure>
      <procedure name="DoMouseLeave" visibility="protected" procflags="override" file="FMX.Objects.pas" line="1005">
      <devnotes><summary>
DoMouseLeave is called when the mouse pointer leaves the TSelectionPoint object. 
DoMouseLeave calls the inherited FMX.Controls.TControl.DoMouseLeave method and then initializes repainting of the TSelectionPoint shape.
Override the protected DoMouseLeave method to provide other responses when the mouse pointer leaves the TSelectionPoint object.
</summary></devnotes></procedure>
      <procedure name="MouseDown" visibility="protected" procflags="override" file="FMX.Objects.pas" line="1006">
        <parameters>
          <parameter name="Button" type="TMouseButton"/>
          <parameter name="Shift" type="TShiftState"/>
          <parameter name="X" type="Single"/>
          <parameter name="Y" type="Single"/>
        </parameters>
      <devnotes><summary>
Handles the pressing of a mouse button on the TSelectionPoint object. 
MouseDown calls the FMX.Controls.TControl.OnMouseDown event handler and sets that the left mouse button is pressed.
MouseDown has the following parameters:  

Button--belongs to the TMouseButton type and specifies the pressed mouse button: mbLeft--left, mbRight--right, or mbMiddle--middle.
Shift--belongs to the TShiftState type and passes additional information, such as whether shift keys (ssShift--SHIFT, ssCtrl--CTRL, or ssAlt--ALT) were pressed when the mouse button was clicked, or whether the mouse button was double-clicked (ssDouble).
X and Y--are the local pixel coordinates of the mouse pointer within the TSelectionPoint object.
The TForm form (owner of the TSelectionPoint object) calls MouseDown in response to mouse-down messages.
Override the public MouseDown method to provide a customized response when a mouse button is pressed when the mouse pointer is over the TSelectionPoint object.
</summary></devnotes></procedure>
      <procedure name="MouseMove" visibility="protected" procflags="override" file="FMX.Objects.pas" line="1007">
        <parameters>
          <parameter name="Shift" type="TShiftState"/>
          <parameter name="X" type="Single"/>
          <parameter name="Y" type="Single"/>
        </parameters>
      <devnotes><summary>
Handles moving of the mouse pointer over a TSelectionPoint object.
As the mouse pointer moves over a TSelectionPoint object, this method is called repeatedly. Each time it is called with the new mouse pointer coordinates that reflect the continuous path of the mouse pointer.
MouseMove has the following parameters:  

Shift--belongs to the TShiftState type; it can pass additional information.
X and Y--are the local pixel coordinates of the mouse pointer within the parent control.
The MouseMove method has the following implementation:

MouseMove calls the inherited FMX.Controls.TControl.MouseMove method.
If the TSelectionPoint object is pressed with the left mouse button, the TSelectionPoint is dragged by the mouse pointer:
If ParentBounds is True and the parent is a control, the TSelectionPoint object is moved only inside the boundaries of the parent control.
If ParentBounds is True and the parent is not a control, the TSelectionPoint object is moved inside the boundaries of the current TCanvas object.
If ParentBounds is False, the TSelectionPoint object is moved to the specified X and Y coordinates.
Then, it calls the customer event handler of the OnTrack event.
Override the public MouseMove method to provide a customized response when the mouse pointer is moved over the TSelectionPoint object.
</summary></devnotes></procedure>
      <procedure name="MouseUp" visibility="protected" procflags="override" file="FMX.Objects.pas" line="1008">
        <parameters>
          <parameter name="Button" type="TMouseButton"/>
          <parameter name="Shift" type="TShiftState"/>
          <parameter name="X" type="Single"/>
          <parameter name="Y" type="Single"/>
        </parameters>
      <devnotes><summary>
Handles release of the left mouse button pressed inside the TSelectionPoint object. 
MouseUp calls the FMX.Controls.TControl.OnMouseUp and the OnChange event handlers, and releases mouse capturing from the TSelectionPoint object.
MouseUp has the following parameters:  

Button--belongs to the TMouseButton type and specifies the pressed mouse button: mbLeft--left, mbRight--right, or mbMiddle--middle.
Shift--belongs to the [[System.Classes.TShiftState|TShiftState] type and passes additional information, such as whether shift keys (ssShift--SHIFT, ssCtrl--CTRL, or ssAlt--ALT) were down when the pressed mouse button was released.
X and Y--are the local pixel coordinates of the mouse pointer within the TSelectionPoint object.
The TForm form, owner of the TSelectionPoint object, calls MouseUp in response to mouse-up messages.
Override the public MouseUp method to provide a customized response when the mouse button is released while the mouse pointer is over the TSelectionPoint object.
</summary></devnotes></procedure>
      <procedure name="DoChangeTracking" visibility="protected" file="FMX.Objects.pas" line="1009">
        <parameters>
          <parameter name="X" type="Single" paramflags="var"/>
          <parameter name="Y" type="Single" paramflags="var"/>
        </parameters>
      <devnotes><summary>
OnTrack event dispatcher.
DoChangeTracking is automatically called when the mouse is moved while the left mouse button is pressed.
DoChangeTracking fires an OnTrack event.
</summary></devnotes></procedure>
      <procedure name="DoChange" visibility="protected" file="FMX.Objects.pas" line="1010">
      <devnotes><summary>
OnChange event dispatcher.
DoChange is automatically called when the left mouse button is released.
DoChange fires an OnChange event.
</summary></devnotes></procedure>
      <procedure name="ApplyStyle" visibility="protected" procflags="override" file="FMX.Objects.pas" line="1011">
      <devnotes><summary>
Customizes styles in complex objects.
FMX.Objects.TSelectionPoint.ApplyStyle inherits from FMX.Controls.TStyledControl.ApplyStyle. All content below this line refers to FMX.Controls.TStyledControl.ApplyStyle.
Customizes styles in complex objects.
TStyledControl descendants override it to apply styles in concordance with their primitive components.      
Do not call ApplyStyle explicitly in an application. It is called by the ApplyStyleLookup method when object styles are updated.
For an example of an ApplyStyle implementation, see &quot;TCalloutPanel:Style Contracts&quot; in FireMonkey Component Design.
</summary></devnotes></procedure>
      <procedure name="FreeStyle" visibility="protected" procflags="override" file="FMX.Objects.pas" line="1012">
      <devnotes><summary>
Frees the style of TStyledControl.
FMX.Objects.TSelectionPoint.FreeStyle inherits from FMX.Controls.TStyledControl.FreeStyle. All content below this line refers to FMX.Controls.TStyledControl.FreeStyle.
Frees the style of TStyledControl.
Override it to free additional component-specific style resources.
</summary></devnotes></procedure>
      <constructor name="Create" visibility="public" file="FMX.Objects.pas" line="1014">
        <parameters>
          <parameter name="AOwner" type="TComponent"/>
        </parameters>
      <devnotes><summary>
Allocates memory and constructs a safely initialized instance of a component.
Allocates memory and constructs a safely initialized instance of a component.
FMX.Objects.TSelectionPoint.Create inherits from System.Classes.TComponent.Create. All content below this line refers to System.Classes.TComponent.Create.
Allocates memory and constructs a safely initialized instance of a component.
All objects have a Create method that constructs the object. TComponent redefines Create so that, for components, Create also:

Establishes the relationship of a component and its Owner, as indicated by the AOwner parameter.
Sets the ComponentStyle property to csInheritable, meaning that the component can be inherited by a descendent form type.
It is not necessary to explicitly create components added in the Form Designer. These components are created automatically when the application is run, and they are destroyed when the application is closed.
For components created programmatically, that is, not created in the Form Designer, call Create and pass in an owner component as the AOwner parameter. The owner disposes of the component when it is destroyed. If the component is not owned, then use Free when it needs to be destroyed.

Tip:  When passing in Self as the Owner parameter, consider what Self references. If a component creates another component in one of its methods, then Self refers to the first component and not the component being created, which is then owned by the first component.
Note:  The TComponent constructor is virtual in part to allow polymorphic instantiation of class references. This is critical to the streaming system and to the Form Designer. Do not forget to use the override directive when declaring a new component's Create constructor.</summary></devnotes></constructor>
      <destructor name="Destroy" visibility="public" file="FMX.Objects.pas" line="1015">
        <parameters>
        </parameters>
      <devnotes><summary>
Disposes of the component and its owned components.
Disposes of the component and its owned components.
FMX.Objects.TSelectionPoint.Destroy inherits from System.Classes.TComponent.Destroy. All content below this line refers to System.Classes.TComponent.Destroy.
Disposes of the component and its owned components.
Do not call Destroy directly. Call Free instead. Free verifies that the component is not nil, and only then calls Destroy.
Never explicitly free a component in one of its own event handlers, nor free a component from the event handler of a component that it owns or contains.
To destroy a form, call its Release method. Release waits for all the form's event handlers and the event handlers of the form's components to finish executing before destroying the form.

Note: A form owns all the controls and nonvisual components that are placed on it in design mode. When it is freed, all of these components are automatically freed as well. By default, all forms are owned by the global Application object. When an application terminates, it frees the global Application object, which frees all forms. For objects that are not components, and for components created with a nil owner, be sure to call Free after finishing with the object; otherwise the memory allocated for the object will be lost until the application terminates.</summary></devnotes></destructor>
      <function name="PointInObjectLocal" visibility="public" procflags="override" file="FMX.Objects.pas" line="1016">
        <parameters>
          <parameter name="X" type="Single"/>
          <parameter name="Y" type="Single"/>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Checks whether the point specified by local coordinates belongs to the control area.
FMX.Objects.TSelectionPoint.PointInObjectLocal inherits from FMX.Controls.TControl.PointInObjectLocal. All content below this line refers to FMX.Controls.TControl.PointInObjectLocal.
Checks whether the point specified by local coordinates belongs to the control area.
PointInObjectLocal returns True if the specified point belongs to the control area, and False otherwise. 
The X and Y are the local coordinates of the point to be checked (compare with PointInObject):

X is the X coordinate.
Y is the Y coordinate.
The local coordinates of the upper-left corner of the control rectangle are (0,0), and the local coordinates of the lower-right corner are (Width, Height). 
The points of the control boundary specified by BoundsRect belong to the control and PointInObjectLocal returns True for them.
If a control supports the Touch property, the control area can be optionally inflated on the values specified by the TouchTargetExpansion property. TouchTargetExpansion keeps four optional parameters representing the expansion for the four sides of the control in pixels (Bottom, Left, Right, and Top). 
The dclasses can change the 'control area' definition. For example:

The FMX.Objects.TSelection class extends the 'control area' definition relative to BoundsRect. FMX.Objects.TSelection.PointInObjectLocal also returns True if the point belongs to any of small rectangles of the four grip controls used to manage the selection shape. The rectangles of the grip controls are rectangles surrounding the four corners of the TSelection rectangle. The Width and Height of these rectangles are equal to 2 * GripSize. For example, the grip control's rectangle of the upper-right corner UR_Corner of TSelection is defined by the following corners:
(UR_Corner.Top - GripSize, UR_Corner.Right - GripSize)--upper-left corner of the grip.
(UR_Corner.Top + GripSize, UR_Corner.Right + GripSize)--lower-right corner of the grip.
FMX.Objects.TSelectionPoint.PointInObjectLocal returns True if the specified point belongs to the rectangle of the grip control corresponding to the TSelectionPoint object, and False otherwise.</summary></devnotes></function>
      <property name="Align" visibility="published" read="FAlign" write="SetAlign" type="TAlignLayout" default="0" hoisted="true" file="FMX.Objects.pas" line="1018"/>
      <property name="Anchors" visibility="published" read="FAnchors" write="SetAnchors" stored="IsAnchorsStored" type="TAnchors" hoisted="true" file="FMX.Objects.pas" line="1019"/>
      <property name="ClipChildren" visibility="published" read="FClipChildren" write="SetClipChildren" type="Boolean" default="0" hoisted="true" file="FMX.Objects.pas" line="1020"/>
      <property name="ClipParent" visibility="published" read="FClipParent" write="FClipParent" type="Boolean" default="0" hoisted="true" file="FMX.Objects.pas" line="1021"/>
      <property name="Cursor" visibility="published" read="GetCursor" write="SetCursor" type="TCursor" default="0" hoisted="true" file="FMX.Objects.pas" line="1022"/>
      <property name="DragMode" visibility="published" read="GetDragMode" write="SetDragMode" type="TDragMode" default="0" hoisted="true" file="FMX.Objects.pas" line="1023"/>
      <property name="EnableDragHighlight" visibility="published" read="FEnableDragHighlight" write="FEnableDragHighlight" type="Boolean" default="1" hoisted="true" file="FMX.Objects.pas" line="1024"/>
      <property name="Enabled" visibility="published" read="FEnabled" write="SetEnabled" stored="EnabledStored" type="Boolean" default="1" hoisted="true" file="FMX.Objects.pas" line="1025"/>
      <property name="GripSize" visibility="published" read="FGripSize" write="SetGripSize" type="Single" default="0" file="FMX.Objects.pas" line="1026"><devnotes><summary>
Defines the radius of the shown selection point object.
When an application style book does not contain a style-resource for selection points, a selection point in this application is drawn as a circle having radius equal to GripSize. The used GripSize is truncated to 1&lt;= GripSize&lt;=20. When an application style book contains a style-resource for selection points, then all selection point properties are loaded from the style-resource; property values set in the Form Designer or programmatically are ignored. Under some platforms, selection points use predefined platform-specific values. For example, on some mobile platforms GripSize is 16 or 17 and this value cannot be changed programmatically.   
</summary></devnotes></property>
      <property name="GripCenter" visibility="published" read="FGripCenter" write="SetGripCenter" type="TPosition" file="FMX.Objects.pas" line="1027"><devnotes><summary>
Defines an offset between the position of the mouse pointer and the shown selection point object when the pressed mouse pointer is moved.
The X and Y values of GripCenter define an offset between the mouse pointer position and the shown selection point object when the pressed mouse pointer is moved.
By default, X and Y equal 0.
</summary></devnotes></property>
      <property name="Locked" visibility="published" read="FLocked" write="SetLocked" type="Boolean" default="0" hoisted="true" file="FMX.Objects.pas" line="1028"/>
      <property name="Height" visibility="published" read="GetHeight" write="SetHeight" stored="False" type="Single" hoisted="true" file="FMX.Objects.pas" line="1029"/>
      <property name="Hint" visibility="published" read="FHint" write="SetHint" stored="HintStored" type="string" default="0" hoisted="true" file="FMX.Objects.pas" line="1030"/>
      <property name="HitTest" visibility="published" read="FHitTest" write="SetHitTest" type="Boolean" default="1" hoisted="true" file="FMX.Objects.pas" line="1031"/>
      <property name="Padding" visibility="published" read="GetPadding" write="SetPadding" type="TBounds" hoisted="true" file="FMX.Objects.pas" line="1032"/>
      <property name="Opacity" visibility="published" read="FOpacity" write="SetOpacity" stored="IsOpacityStored" type="Single" hoisted="true" file="FMX.Objects.pas" line="1033"/>
      <property name="Margins" visibility="published" read="GetMargins" write="SetMargins" type="TBounds" hoisted="true" file="FMX.Objects.pas" line="1034"/>
      <property name="ParentBounds" visibility="published" read="FParentBounds" write="FParentBounds" type="Boolean" default="1" file="FMX.Objects.pas" line="1035"><devnotes><summary>
Defines whether the shape of the TSelectionPoint object should be within the boundaries of the parent control.
When ParentBounds is True, the shape of the TSelectionPoint object cannot be moved outside the boundaries of the parent control. 
</summary></devnotes></property>
      <property name="PopupMenu" visibility="published" read="FPopupMenu" write="SetPopupMenu" stored="IsPopupMenuStored" type="TCustomPopupMenu" hoisted="true" file="FMX.Objects.pas" line="1036"/>
      <property name="Position" visibility="published" read="FPosition" write="SetPosition" stored="IsPositionStored" type="TPosition" hoisted="true" file="FMX.Objects.pas" line="1037"/>
      <property name="RotationAngle" visibility="published" read="GetRotationAngle" write="SetRotationAngle" type="Single" default="0" hoisted="true" file="FMX.Objects.pas" line="1038"/>
      <property name="RotationCenter" visibility="published" read="GetRotationCenter" write="SetRotationCenter" type="TPosition" hoisted="true" file="FMX.Objects.pas" line="1039"/>
      <property name="Scale" visibility="published" read="GetScale" write="SetScale" type="TPosition" hoisted="true" file="FMX.Objects.pas" line="1040"/>
      <property name="Size" visibility="published" read="FSize" write="SetSize" stored="IsSizeStored" type="TControlSize" hoisted="true" file="FMX.Objects.pas" line="1041"/>
      <property name="StyleLookup" visibility="published" read="FStyleLookup" write="SetStyleLookup" type="string" default="0" hoisted="true" file="FMX.Objects.pas" line="1042"/>
      <property name="TouchTargetExpansion" visibility="published" read="FTouchTargetExpansion" write="SetTouchTargetExpansion" type="TBounds" hoisted="true" file="FMX.Objects.pas" line="1043"/>
      <property name="Visible" visibility="published" read="FVisible" write="SetVisible" stored="VisibleStored" type="Boolean" default="1" hoisted="true" file="FMX.Objects.pas" line="1044"/>
      <property name="Width" visibility="published" read="GetWidth" write="SetWidth" stored="False" type="Single" hoisted="true" file="FMX.Objects.pas" line="1045"/>
      <property name="ParentShowHint" visibility="published" read="FParentShowHint" write="SetParentShowHint" type="Boolean" default="1" hoisted="true" file="FMX.Objects.pas" line="1046"/>
      <property name="ShowHint" visibility="published" read="FShowHint" write="SetShowHint" stored="IsShowHintStored" type="Boolean" hoisted="true" file="FMX.Objects.pas" line="1047"/>
      <event name="OnChange" visibility="published" read="FOnChange" write="FOnChange" type="TNotifyEvent" file="FMX.Objects.pas" line="1048"><devnotes><summary>
The event handler of the OnChange event is called from the MouseUp method whenever the TSelection object changes.
Write a custom OnChange event handler to perform a specific action when the TSelectionPoint object changes.
</summary></devnotes></event>
      <event name="OnDragEnter" visibility="published" read="FOnDragEnter" write="FOnDragEnter" type="TDragEnterEvent" hoisted="true" file="FMX.Objects.pas" line="1050"/>
      <event name="OnDragLeave" visibility="published" read="FOnDragLeave" write="FOnDragLeave" type="TNotifyEvent" hoisted="true" file="FMX.Objects.pas" line="1051"/>
      <event name="OnDragOver" visibility="published" read="FOnDragOver" write="FOnDragOver" type="TDragOverEvent" hoisted="true" file="FMX.Objects.pas" line="1052"/>
      <event name="OnDragDrop" visibility="published" read="FOnDragDrop" write="FOnDragDrop" type="TDragDropEvent" hoisted="true" file="FMX.Objects.pas" line="1053"/>
      <event name="OnDragEnd" visibility="published" read="FOnDragEnd" write="FOnDragEnd" type="TNotifyEvent" hoisted="true" file="FMX.Objects.pas" line="1054"/>
      <event name="OnClick" visibility="published" read="FOnClick" write="SetOnClick" stored="OnClickStored" type="TNotifyEvent" hoisted="true" file="FMX.Objects.pas" line="1056"/>
      <event name="OnDblClick" visibility="published" read="FOnDblClick" write="FOnDblClick" type="TNotifyEvent" hoisted="true" file="FMX.Objects.pas" line="1057"/>
      <event name="OnMouseDown" visibility="published" read="FOnMouseDown" write="FOnMouseDown" type="TMouseEvent" hoisted="true" file="FMX.Objects.pas" line="1058"/>
      <event name="OnMouseMove" visibility="published" read="FOnMouseMove" write="FOnMouseMove" type="TMouseMoveEvent" hoisted="true" file="FMX.Objects.pas" line="1059"/>
      <event name="OnMouseUp" visibility="published" read="FOnMouseUp" write="FOnMouseUp" type="TMouseEvent" hoisted="true" file="FMX.Objects.pas" line="1060"/>
      <event name="OnMouseWheel" visibility="published" read="FOnMouseWheel" write="FOnMouseWheel" type="TMouseWheelEvent" hoisted="true" file="FMX.Objects.pas" line="1061"/>
      <event name="OnMouseEnter" visibility="published" read="FOnMouseEnter" write="FOnMouseEnter" type="TNotifyEvent" hoisted="true" file="FMX.Objects.pas" line="1062"/>
      <event name="OnMouseLeave" visibility="published" read="FOnMouseLeave" write="FOnMouseLeave" type="TNotifyEvent" hoisted="true" file="FMX.Objects.pas" line="1063"/>
      <event name="OnPainting" visibility="published" read="FOnPainting" write="FOnPainting" type="TOnPaintEvent" hoisted="true" file="FMX.Objects.pas" line="1064"/>
      <event name="OnPaint" visibility="published" read="FOnPaint" write="FOnPaint" type="TOnPaintEvent" hoisted="true" file="FMX.Objects.pas" line="1065"/>
      <event name="OnResize" visibility="published" read="FOnResize" write="FOnResize" type="TNotifyEvent" hoisted="true" file="FMX.Objects.pas" line="1066"/>
      <event name="OnResized" visibility="published" read="FOnResized" write="FOnResized" type="TNotifyEvent" hoisted="true" file="FMX.Objects.pas" line="1067"/>
      <event name="OnTrack" visibility="published" read="FOnChangeTrack" write="FOnChangeTrack" type="TOnChangeTracking" file="FMX.Objects.pas" line="1068"><devnotes><summary>
The event handler of the OnTrack event is called cyclically from the MouseMove method while the TSelectionPoint object is being moved.
Write a custom OnTrack event handler to perform a specific action while the TSelectionPoint object is being moved.
</summary></devnotes></event>
    </members>
  <devnotes><summary>
TSelectionPoint defines a 2D point object that can be moved. It inherits TControl and can be used in styles to create controls.
The TSelectionPoint class implements operations of moving of a 2D point object with a mouse or another pointing device. 
The behavior of selection point objects depends upon the existence of a corresponding style-resource in an application style book: 

When an application style book does not contain a style-resource for selection points:
A selection point in this application is drawn as a circle having a radius equal to GripSize.
The used GripSize is truncated to 1&lt;= GripSize&lt;=20.
A selection point is drawn as a white circle having the blue circumference.
When a selection point is selected, its circle is shown red.
To select a selection point, place the mouse pointer over the circle shape or the  bounds rectangle of the selection point (having the Width and Height dimensions).
When an application style book contains a style-resource for selection points, then all selection point properties are loaded from the style-resource; property values are set in the Form Designer or are ignored programmatically. On some platforms, selection points use predefined platform-specific values. For example, on some mobile platforms GripSize is 16 or 17 and this value cannot be changed programmatically.
Notice that the GripCenter property has the following implementation. The X and Y values of GripCenter define an offset between the mouse pointer position and the shown selection point when the pressed mouse pointer is moved.  
You can use scaling factors Scale of the TSelectionPoint object to proportionally change a selection point and a grip sizes along coordinate axes. The rotation axis RotationCenter and rotation angle RotationAngle of the selection point object can also be used to modify the position of the selection point.
</summary></devnotes></class>
</namespace>