<?xml version="1.0" ?><namespace name="FMX.StdCtrls" platform="Win32">
  <class name="TPresentedTextControl" file="FMX.StdCtrls.pas" line="27">
    
    <ancestor name="TPresentedControl" namespace="FMX.Controls.Presentation">
      <interfaces>
        <implements name="ISceneChildrenObserver"/>
        <implements name="IControlTypeSupportable"/>
        <implements name="IMessageSendingCompatible"/>
      </interfaces>
      <methodref name="GetPresentation" visibility="private"/>
      <methodref name="GetPresentationScene" visibility="private"/>
      <methodref name="CreateModel" visibility="private"/>
      <methodref name="DoPresentationNameChoosing" visibility="private"/>
      <methodref name="RemoveStyleResource" visibility="private"/>
      <methodref name="GetMessageSender" visibility="private"/>
      <methodref name="GetControlType" visibility="private"/>
      <methodref name="SetControlType" visibility="private"/>
      <methodref name="ChildWasRemoved" visibility="private"/>
      <methodref name="Loaded" visibility="protected" procflags="override"/>
      <methodref name="PaintChildren" visibility="protected" procflags="override"/>
      <methodref name="ControlTypeChanged" visibility="protected" procflags="virtual">
      </methodref>
      <methodref name="ClipChildrenChanged" visibility="protected" procflags="override">
      </methodref>
      <methodref name="HitTestChanged" visibility="protected" procflags="override">
      </methodref>
      <methodref name="GetDefaultStyleLookupName" visibility="protected" procflags="override"/>
      <methodref name="StyleLookupChanged" visibility="protected" procflags="override"/>
      <methodref name="StyleDataChanged" visibility="protected" procflags="override"/>
      <methodref name="RequestStyleData" visibility="protected" procflags="override"/>
      <methodref name="GetResourceLink" visibility="protected" procflags="override"/>
      <methodref name="AncestorParentChanged" visibility="protected" procflags="override"/>
      <methodref name="AncestorVisibleChanged" visibility="protected" procflags="override"/>
      <methodref name="SetVisible" visibility="protected" procflags="override"/>
      <methodref name="ObjectAtPoint" visibility="protected" procflags="override"/>
      <methodref name="ChangeOrder" visibility="protected" procflags="override"/>
      <methodref name="ParentChanged" visibility="protected" procflags="override"/>
      <methodref name="DoAddObject" visibility="protected" procflags="override"/>
      <methodref name="DoInsertObject" visibility="protected" procflags="override"/>
      <methodref name="DoRemoveObject" visibility="protected" procflags="override"/>
      <methodref name="DoDeleteChildren" visibility="protected" procflags="override"/>
      <methodref name="DoRootChanged" visibility="protected" procflags="override"/>
      <methodref name="DoSetSize" visibility="protected" procflags="override"/>
      <methodref name="DoAbsoluteChanged" visibility="protected" procflags="override"/>
      <methodref name="DoRealign" visibility="protected" procflags="override"/>
      <methodref name="RecommendSize" visibility="protected" procflags="virtual">
      </methodref>
      <methodref name="KeyDown" visibility="protected" procflags="override"/>
      <methodref name="KeyUp" visibility="protected" procflags="override"/>
      <methodref name="DoEnter" visibility="protected" procflags="override"/>
      <methodref name="DoExit" visibility="protected" procflags="override"/>
      <methodref name="AfterPaint" visibility="protected" procflags="override"/>
      <methodref name="GetFirstControlWithGesture" visibility="protected" procflags="override"/>
      <methodref name="SetAdjustSizeValue" visibility="protected" procflags="override"/>
      <methodref name="GetAdjustSizeValue" visibility="protected" procflags="override"/>
      <methodref name="GetAdjustType" visibility="protected" procflags="override"/>
      <methodref name="SetAdjustType" visibility="protected" procflags="override"/>
      <methodref name="ActionChange" visibility="protected" procflags="override"/>
      <methodref name="DoActionClientChanged" visibility="protected" procflags="override"/>
      <methodref name="DefinePresentationName" visibility="protected" procflags="virtual">
      </methodref>
      <methodref name="GetPresentationSuffix" visibility="protected">
      </methodref>
      <methodref name="InitPresentation" visibility="protected" procflags="virtual">
      </methodref>
      <methodref name="AncestorPresentationLoaded" visibility="protected">
      </methodref>
      <methodref name="AncestorPresentationUnloading" visibility="protected">
      </methodref>
      <methodref name="GetModel" visibility="protected">
      </methodref>
      <methodref name="DefineModelClass" visibility="protected" procflags="virtual">
      </methodref>
      <propertyref name="CanUseDefaultPresentation" visibility="protected">
      </propertyref>
      <methodref name="QueryInterface" visibility="protected" procflags="override">
      </methodref>
      <propertyref name="PresentationScene" visibility="protected">
      </propertyref>
      <methodref name="Create" visibility="public" procflags="constructor overload override"/>
      <methodref name="Destroy" visibility="public" procflags="destructor override"/>
      <methodref name="HasPresentationProxy" visibility="public"/>
      <methodref name="RecalcEnabled" visibility="public" procflags="override"/>
      <methodref name="RecalcOpacity" visibility="public" procflags="override"/>
      <methodref name="AfterConstruction" visibility="public" procflags="override"/>
      <methodref name="BeforeDestruction" visibility="public" procflags="override"/>
      <methodref name="ApplyStyleLookup" visibility="public" procflags="override"/>
      <methodref name="NeedStyleLookup" visibility="public" procflags="override"/>
      <methodref name="FindStyleResource" visibility="public" procflags="overload override"/>
      <methodref name="PointInObjectLocal" visibility="public" procflags="override"/>
      <methodref name="ApplyTriggerEffect" visibility="public" procflags="override"/>
      <methodref name="StartTriggerAnimation" visibility="public" procflags="override"/>
      <methodref name="StartTriggerAnimationWait" visibility="public" procflags="override"/>
      <methodref name="LoadPresentation" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="UnloadPresentation" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="ReloadPresentation" visibility="public">
      </methodref>
      <propertyref name="ControlType" visibility="public"/>
      <propertyref name="Presentation" visibility="public">
      </propertyref>
      <propertyref name="PresentationProxy" visibility="public">
      </propertyref>
      <propertyref name="PresentationState" visibility="public">
      </propertyref>
      <propertyref name="Model" visibility="public">
      </propertyref>
      <eventref name="OnPresentationNameChoosing" visibility="public">
      </eventref>
      <ancestor name="TStyledControl" namespace="FMX.Controls">
        <methodref name="GetStyleData" visibility="class private"/>
        <methodref name="SetStyleData" visibility="class private"/>
        <methodref name="SetStyleLookup" visibility="class private"/>
        <methodref name="ScaleChangedHandler" visibility="class private"/>
        <methodref name="StyleChangedHandler" visibility="class private"/>
        <methodref name="InternalFreeStyle" visibility="private"/>
        <methodref name="SearchInto" visibility="protected" procflags="override"/>
        <methodref name="GetBackIndex" visibility="protected" procflags="override"/>
        <methodref name="IsHelpContextStored" visibility="protected"/>
        <methodref name="SetHelpContext" visibility="protected"/>
        <methodref name="SetHelpKeyword" visibility="protected"/>
        <methodref name="Notification" visibility="protected" procflags="override"/>
        <methodref name="DoSetSize" visibility="protected" procflags="override"/>
        <methodref name="DoApplyStyleLookup" visibility="protected" procflags="virtual"/>
        <methodref name="StyleDataChanged" visibility="protected" procflags="virtual"/>
        <methodref name="RequestStyleData" visibility="protected" procflags="virtual"/>
        <methodref name="Painting" visibility="protected" procflags="override"/>
        <methodref name="ApplyStyle" visibility="protected" procflags="virtual"/>
        <methodref name="FreeStyle" visibility="protected" procflags="virtual"/>
        <methodref name="GetStyleContext" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="GetDefaultStyleLookupName" visibility="protected" procflags="virtual"/>
        <methodref name="GetParentClassStyleLookupName" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="DoEnter" visibility="protected" procflags="override"/>
        <methodref name="Disappear" visibility="protected" procflags="override"/>
        <methodref name="AdjustSize" visibility="protected" procflags="virtual"/>
        <methodref name="AdjustFixedSize" visibility="protected" procflags="virtual"/>
        <methodref name="ChooseAdjustType" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="DoStyleChanged" visibility="protected" procflags="virtual"/>
        <methodref name="StyleLookupChanged" visibility="protected" procflags="virtual"/>
        <methodref name="RecycleResourceLink" visibility="protected"/>
        <methodref name="KillResourceLink" visibility="protected"/>
        <methodref name="DoDeleteChildren" visibility="protected" procflags="override"/>
        <methodref name="GenerateStyleName" visibility="protected">
        </methodref>
        <methodref name="GetStyleObject" visibility="protected" procflags="overload virtual"/>
        <methodref name="GetStyleObject" visibility="protected" procflags="overload virtual"/>
        <methodref name="SetAdjustSizeValue" visibility="protected" procflags="virtual"/>
        <methodref name="SetAdjustType" visibility="protected" procflags="virtual"/>
        <methodref name="GetResourceLink" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="GetResourceControl" visibility="protected">
        </methodref>
        <propertyref name="IsNeedStyleLookup" visibility="protected"/>
        <propertyref name="ResourceLink" visibility="protected"/>
        <propertyref name="ResourceControl" visibility="protected"/>
        <methodref name="GetAdjustSizeValue" visibility="protected" procflags="override"/>
        <methodref name="GetAdjustType" visibility="protected" procflags="override"/>
        <methodref name="Create" visibility="public" procflags="constructor overload override"/>
        <methodref name="BeforeDestruction" visibility="public" procflags="override"/>
        <methodref name="Destroy" visibility="public" procflags="destructor override"/>
        <propertyref name="AdjustType" visibility="public"/>
        <propertyref name="AdjustSizeValue" visibility="public"/>
        <propertyref name="StyleState" visibility="public">
        </propertyref>
        <methodref name="RecalcSize" visibility="public" procflags="override"/>
        <methodref name="FindStyleResource" visibility="public" procflags="overload override"/>
        <methodref name="FindStyleResource" visibility="public" procflags="overload">
        </methodref>
        <methodref name="FindAndCloneStyleResource" visibility="public">
        </methodref>
        <methodref name="SetNewScene" visibility="public" procflags="override"/>
        <methodref name="ApplyStyleLookup" visibility="public" procflags="virtual"/>
        <methodref name="NeedStyleLookup" visibility="public" procflags="virtual"/>
        <methodref name="Inflate" visibility="public" procflags="virtual"/>
        <methodref name="PrepareForPaint" visibility="public" procflags="override"/>
        <methodref name="StartTriggerAnimation" visibility="public" procflags="override"/>
        <methodref name="StartTriggerAnimationWait" visibility="public" procflags="override"/>
        <propertyref name="AutoTranslate" visibility="public"/>
        <propertyref name="DefaultStyleLookupName" visibility="public"/>
        <propertyref name="ParentClassStyleLookupName" visibility="public">
        </propertyref>
        <propertyref name="HelpType" visibility="public"/>
        <propertyref name="HelpKeyword" visibility="public"/>
        <propertyref name="HelpContext" visibility="public"/>
        <propertyref name="StylesData" visibility="public"/>
        <propertyref name="StyleLookup" visibility="public"/>
        <propertyref name="LoadableStyle" visibility="public">
        </propertyref>
        <methodref name="LookupStyleObject" visibility="public" procflags="class">
        </methodref>
        <ancestor name="TControl" namespace="FMX.Controls">
          <interfaces>
            <implements name="ITriggerEffect"/>
            <implements name="ITriggerAnimation"/>
            <implements name="ITabStopController"/>
            <implements name="IGestureControl"/>
            <implements name="IEffectContainer"/>
            <implements name="IAlignableObject"/>
            <implements name="IRotatedControl"/>
            <implements name="IAlignRoot"/>
            <implements name="IContainerObject"/>
            <implements name="IControl"/>
          </interfaces>
          <methodref name="AddToEffectsList" visibility="class private"/>
          <methodref name="RemoveFromEffectsList" visibility="class private"/>
          <methodref name="GetInvertAbsoluteMatrix" visibility="class private"/>
          <methodref name="SetPosition" visibility="class private"/>
          <methodref name="SetHitTest" visibility="class private"/>
          <methodref name="SetClipChildren" visibility="class private"/>
          <methodref name="GetCanvas" visibility="class private" procflags="inline"/>
          <methodref name="SetLocked" visibility="class private"/>
          <methodref name="SetTempCanvas" visibility="class private"/>
          <methodref name="SetOpacity" visibility="class private"/>
          <methodref name="IsOpacityStored" visibility="class private"/>
          <methodref name="SetCursor" visibility="class private"/>
          <methodref name="RefreshInheritedCursor" visibility="class private"/>
          <methodref name="RefreshInheritedCursorForChildren" visibility="class private"/>
          <methodref name="GetAbsoluteWidth" visibility="class private"/>
          <methodref name="GetAbsoluteHeight" visibility="class private"/>
          <methodref name="IsAnchorsStored" visibility="class private"/>
          <methodref name="GetEnabled" visibility="class private"/>
          <methodref name="GetCursor" visibility="class private"/>
          <methodref name="GetInheritedCursor" visibility="class private"/>
          <methodref name="GetAbsoluteHasEffect" visibility="class private"/>
          <methodref name="GetAbsoluteHasDisablePaintEffect" visibility="class private"/>
          <methodref name="GetAbsoluteHasAfterPaintEffect" visibility="class private"/>
          <methodref name="PaddingChangedHandler" visibility="class private" procflags="overload"/>
          <methodref name="MarginsChanged" visibility="class private"/>
          <methodref name="MatrixChanged" visibility="class private"/>
          <methodref name="SizeChanged" visibility="class private"/>
          <methodref name="GetControlsCount" visibility="class private"/>
          <methodref name="OnClickStored" visibility="class private"/>
          <methodref name="IsPopupMenuStored" visibility="class private"/>
          <methodref name="RequestAlign" visibility="class private"/>
          <methodref name="SetMinClipHeight" visibility="class private"/>
          <methodref name="SetMinClipWidth" visibility="class private"/>
          <methodref name="UpdateSmallSizeControl" visibility="class private"/>
          <methodref name="Create@" visibility="class private" procflags="class constructor noself"/>
          <methodref name="Destroy@" visibility="class private" procflags="class destructor noself"/>
          <methodref name="SetOnClick" visibility="class private"/>
          <methodref name="GetIsFocused" visibility="class private"/>
          <methodref name="SetPadding" visibility="class private"/>
          <methodref name="SetMargins" visibility="class private"/>
          <methodref name="SetTouchTargetExpansion" visibility="class private"/>
          <methodref name="InternalSizeChanged" visibility="class private"/>
          <methodref name="ReadFixedWidth" visibility="class private"/>
          <methodref name="WriteFixedWidth" visibility="class private"/>
          <methodref name="ReadFixedHeight" visibility="class private"/>
          <methodref name="WriteFixedHeight" visibility="class private"/>
          <methodref name="ReadDesignVisible" visibility="class private"/>
          <methodref name="ReadHint" visibility="class private"/>
          <methodref name="ReadShowHint" visibility="class private"/>
          <methodref name="DisabledOpacityStored" visibility="class private"/>
          <methodref name="SetDisabledOpacity" visibility="class private"/>
          <methodref name="GetAxisAlignedRect" visibility="class private"/>
          <methodref name="GetRotationAngle" visibility="class private"/>
          <methodref name="GetRotationCenter" visibility="class private"/>
          <methodref name="GetScale" visibility="class private"/>
          <methodref name="SetRotationAngle" visibility="class private"/>
          <methodref name="SetRotationCenter" visibility="class private"/>
          <methodref name="SetScale" visibility="class private"/>
          <methodref name="GetTabOrder" visibility="class private"/>
          <methodref name="SetTabOrder" visibility="class private"/>
          <methodref name="GetTabStop" visibility="class private"/>
          <methodref name="SetTabStop" visibility="class private"/>
          <methodref name="SetDisableDisappear" visibility="class private"/>
          <methodref name="GetDisableDisappear" visibility="class private"/>
          <methodref name="UpdateParentProperties" visibility="class private"/>
          <methodref name="CreateTouchManagerIfRequired" visibility="private"/>
          <methodref name="GetTouchManager" visibility="private"/>
          <methodref name="SetTouchManager" visibility="private"/>
          <methodref name="IsShowHintStored" visibility="private"/>
          <methodref name="SetParentShowHint" visibility="private"/>
          <methodref name="SetShowHint" visibility="private"/>
          <methodref name="GetAbsoluteClipRect" visibility="private"/>
          <methodref name="HintStored" visibility="private"/>
          <methodref name="RepaintJointArea" visibility="class protected"/>
          <methodref name="DoAbsoluteChanged" visibility="protected" procflags="virtual"/>
          <methodref name="CheckHitTest" visibility="protected" procflags="virtual"/>
          <methodref name="SetInPaintTo" visibility="protected"/>
          <methodref name="EndUpdateNoChanges" visibility="protected"/>
          <methodref name="SetHint" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="SetEnabled" visibility="protected" procflags="virtual"/>
          <methodref name="Loaded" visibility="protected" procflags="override"/>
          <methodref name="Updated" visibility="protected" procflags="override"/>
          <methodref name="DefineProperties" visibility="protected" procflags="override"/>
          <methodref name="Notification" visibility="protected" procflags="override"/>
          <methodref name="ParentChanged" visibility="protected" procflags="override"/>
          <methodref name="ChangeOrder" visibility="protected" procflags="override"/>
          <methodref name="ChangeChildren" visibility="protected" procflags="override"/>
          <methodref name="SetVisible" visibility="protected" procflags="virtual"/>
          <methodref name="DoSetWidth" visibility="protected" procflags="virtual" symflags="deprecated">
          </methodref>
          <methodref name="DoSetHeight" visibility="protected" procflags="virtual" symflags="deprecated">
          </methodref>
          <methodref name="DoSetSize" visibility="protected" procflags="virtual"/>
          <methodref name="HandleSizeChanged" visibility="protected" procflags="virtual"/>
          <methodref name="DoMatrixChanged" visibility="protected" procflags="virtual"/>
          <methodref name="SetHeight" visibility="protected" procflags="virtual"/>
          <methodref name="SetWidth" visibility="protected" procflags="virtual"/>
          <methodref name="SetSize" visibility="protected" procflags="overload virtual"/>
          <methodref name="SetSize" visibility="protected" procflags="overload virtual"/>
          <methodref name="GetAbsoluteRect" visibility="protected" procflags="virtual"/>
          <methodref name="GetChildrenMatrix" visibility="protected" procflags="virtual"/>
          <methodref name="GetAbsoluteScale" visibility="protected" procflags="virtual"/>
          <methodref name="GetParentedRect" visibility="protected" procflags="virtual" symflags="deprecated">
          </methodref>
          <methodref name="GetClipRect" visibility="protected" procflags="virtual"/>
          <methodref name="GetEffectsRect" visibility="protected" procflags="virtual"/>
          <methodref name="GetAbsoluteEnabled" visibility="protected" procflags="virtual"/>
          <methodref name="GetChildrenRect" visibility="protected" procflags="virtual"/>
          <methodref name="GetLocalRect" visibility="protected" procflags="virtual"/>
          <methodref name="GetBoundsRect" visibility="protected" procflags="virtual"/>
          <methodref name="SetBoundsRect" visibility="protected" procflags="virtual"/>
          <methodref name="IsHeightStored" visibility="protected" procflags="virtual" symflags="deprecated">
          </methodref>
          <methodref name="IsWidthStored" visibility="protected" procflags="virtual" symflags="deprecated">
          </methodref>
          <methodref name="IsPositionStored" visibility="protected" procflags="virtual"/>
          <methodref name="IsSizeStored" visibility="protected" procflags="virtual"/>
          <methodref name="SetPopupMenu" visibility="protected"/>
          <methodref name="GetAbsoluteMatrix" visibility="protected" procflags="virtual"/>
          <methodref name="GetHasClipParent" visibility="protected"/>
          <methodref name="GetUpdateRect" visibility="protected"/>
          <methodref name="DoGetUpdateRect" visibility="protected" procflags="virtual"/>
          <methodref name="GetAbsoluteOpacity" visibility="protected" procflags="virtual"/>
          <methodref name="BeginAutoDrag" visibility="protected" procflags="virtual"/>
          <methodref name="Capture" visibility="protected"/>
          <methodref name="ReleaseCapture" visibility="protected"/>
          <propertyref name="EnableExecuteAction" visibility="protected"/>
          <methodref name="Click" visibility="protected" procflags="virtual"/>
          <methodref name="DblClick" visibility="protected" procflags="virtual"/>
          <methodref name="MouseDown" visibility="protected" procflags="virtual"/>
          <methodref name="MouseMove" visibility="protected" procflags="virtual"/>
          <methodref name="MouseUp" visibility="protected" procflags="virtual"/>
          <methodref name="MouseWheel" visibility="protected" procflags="virtual"/>
          <methodref name="MouseClick" visibility="protected" procflags="virtual"/>
          <methodref name="KeyDown" visibility="protected" procflags="virtual"/>
          <methodref name="KeyUp" visibility="protected" procflags="virtual"/>
          <methodref name="DialogKey" visibility="protected" procflags="virtual"/>
          <methodref name="AfterDialogKey" visibility="protected" procflags="virtual"/>
          <methodref name="ShowContextMenu" visibility="protected" procflags="virtual"/>
          <methodref name="DragEnter" visibility="protected" procflags="virtual"/>
          <methodref name="DragOver" visibility="protected" procflags="virtual"/>
          <methodref name="DragDrop" visibility="protected" procflags="virtual"/>
          <methodref name="DragLeave" visibility="protected" procflags="virtual"/>
          <methodref name="DragEnd" visibility="protected" procflags="virtual"/>
          <methodref name="GetDefaultTouchTargetExpansion" visibility="protected" procflags="virtual"/>
          <methodref name="GetCanFocus" visibility="protected" procflags="virtual"/>
          <methodref name="GetCanParentFocus" visibility="protected" procflags="virtual"/>
          <methodref name="EnterChildren" visibility="protected" procflags="virtual"/>
          <methodref name="ExitChildren" visibility="protected" procflags="virtual"/>
          <methodref name="GetParentedVisible" visibility="protected" procflags="virtual"/>
          <methodref name="NeedUpdateEffects" visibility="protected"/>
          <methodref name="BeforeEffectEnabledChanged" visibility="protected"/>
          <methodref name="EffectEnabledChanged" visibility="protected"/>
          <methodref name="Realign" visibility="protected"/>
          <methodref name="ChildrenAlignChanged" visibility="protected"/>
          <methodref name="GetAlign" visibility="protected"/>
          <methodref name="SetAlign" visibility="protected" procflags="virtual"/>
          <methodref name="GetAnchors" visibility="protected"/>
          <methodref name="SetAnchors" visibility="protected" procflags="virtual"/>
          <methodref name="GetMargins" visibility="protected"/>
          <methodref name="GetPadding" visibility="protected"/>
          <methodref name="GetWidth" visibility="protected" procflags="virtual"/>
          <methodref name="GetHeight" visibility="protected" procflags="virtual"/>
          <methodref name="GetLeft" visibility="protected" procflags="virtual"/>
          <methodref name="GetTop" visibility="protected" procflags="virtual"/>
          <methodref name="GetAllowAlign" visibility="protected"/>
          <methodref name="GetAnchorRules" visibility="protected"/>
          <methodref name="GetAnchorOrigin" visibility="protected"/>
          <methodref name="GetOriginalParentSize" visibility="protected"/>
          <methodref name="GetAnchorMove" visibility="protected"/>
          <methodref name="SetAnchorMove" visibility="protected"/>
          <methodref name="GetAdjustSizeValue" visibility="protected" procflags="virtual"/>
          <methodref name="GetAdjustType" visibility="protected" procflags="virtual"/>
          <methodref name="GetContainerWidth" visibility="protected"/>
          <methodref name="GetContainerHeight" visibility="protected"/>
          <methodref name="GetObject" visibility="protected"/>
          <methodref name="GetParent" visibility="protected"/>
          <methodref name="GetVisible" visibility="protected"/>
          <methodref name="GetDesignInteractive" visibility="protected"/>
          <methodref name="GetPopupMenu" visibility="protected"/>
          <methodref name="DoEnter" visibility="protected" procflags="virtual"/>
          <methodref name="DoExit" visibility="protected" procflags="virtual"/>
          <methodref name="DoActivate" visibility="protected" procflags="virtual"/>
          <methodref name="DoDeactivate" visibility="protected" procflags="virtual"/>
          <methodref name="DoMouseEnter" visibility="protected" procflags="virtual"/>
          <methodref name="DoMouseLeave" visibility="protected" procflags="virtual"/>
          <methodref name="CheckForAllowFocus" visibility="protected"/>
          <methodref name="GetDragMode" visibility="protected" procflags="virtual"/>
          <methodref name="SetDragMode" visibility="protected" procflags="virtual"/>
          <methodref name="GetLocked" visibility="protected"/>
          <methodref name="GetHitTest" visibility="protected"/>
          <methodref name="GetAcceptsControls" visibility="protected"/>
          <methodref name="SetAcceptsControls" visibility="protected"/>
          <methodref name="FindTarget" visibility="protected" procflags="virtual"/>
          <methodref name="ObjectAtPoint" visibility="protected" procflags="virtual"/>
          <methodref name="HasHint" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="GetHintString" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="GetHintObject" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="CanShowHint" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="BroadcastGesture" visibility="protected"/>
          <methodref name="CMGesture" visibility="protected" procflags="virtual"/>
          <methodref name="TouchManager" visibility="protected"/>
          <methodref name="GetFirstControlWithGesture" visibility="protected" procflags="virtual"/>
          <methodref name="GetFirstControlWithGestureEngine" visibility="protected"/>
          <methodref name="GetListOfInteractiveGestures" visibility="protected"/>
          <methodref name="Tap" visibility="protected" procflags="virtual"/>
          <methodref name="GetFirstVisibleObjectIndex" visibility="protected" procflags="virtual"/>
          <methodref name="GetLastVisibleObjectIndex" visibility="protected" procflags="virtual"/>
          <methodref name="GetDefaultSize" visibility="protected" procflags="virtual"/>
          <methodref name="FillTextFlags" visibility="protected" procflags="virtual"/>
          <methodref name="ApplyEffect" visibility="protected" procflags="virtual"/>
          <methodref name="PaintInternal" visibility="protected"/>
          <methodref name="SupportsPaintStage" visibility="protected" procflags="virtual"/>
          <methodref name="CanRepaint" visibility="protected" procflags="virtual"/>
          <methodref name="RepaintRect" visibility="protected"/>
          <methodref name="PaintChildren" visibility="protected" procflags="virtual"/>
          <methodref name="Painting" visibility="protected" procflags="virtual"/>
          <methodref name="Paint" visibility="protected" procflags="virtual"/>
          <methodref name="DoPaint" visibility="protected" procflags="virtual"/>
          <methodref name="AfterPaint" visibility="protected" procflags="virtual"/>
          <methodref name="DrawDesignBorder" visibility="protected"/>
          <methodref name="DoRealign" visibility="protected" procflags="virtual"/>
          <methodref name="DoBeginUpdate" visibility="protected" procflags="virtual"/>
          <methodref name="DoEndUpdate" visibility="protected" procflags="virtual"/>
          <methodref name="Move" visibility="protected" procflags="virtual"/>
          <methodref name="Resize" visibility="protected" procflags="virtual"/>
          <methodref name="DoResized" visibility="protected" procflags="virtual"/>
          <methodref name="Disappear" visibility="protected" procflags="virtual"/>
          <methodref name="Show" visibility="protected" procflags="virtual"/>
          <methodref name="Hide" visibility="protected" procflags="virtual"/>
          <methodref name="AncestorVisibleChanged" visibility="protected" procflags="virtual"/>
          <methodref name="AncestorParentChanged" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="ClipChildrenChanged" visibility="protected" procflags="virtual"/>
          <methodref name="HitTestChanged" visibility="protected" procflags="virtual"/>
          <methodref name="PaddingChanged" visibility="protected" procflags="overload virtual">
          </methodref>
          <propertyref name="MinClipWidth" visibility="protected"/>
          <propertyref name="MinClipHeight" visibility="protected"/>
          <propertyref name="SmallSizeControl" visibility="protected"/>
          <methodref name="DoAddObject" visibility="protected" procflags="override"/>
          <methodref name="DoInsertObject" visibility="protected" procflags="override"/>
          <methodref name="DoRemoveObject" visibility="protected" procflags="override"/>
          <methodref name="DoDeleteChildren" visibility="protected" procflags="override"/>
          <propertyref name="PaintStage" visibility="protected"/>
          <propertyref name="TempCanvas" visibility="protected"/>
          <methodref name="SetLeft" visibility="protected"/>
          <methodref name="SetTop" visibility="protected"/>
          <methodref name="UpdateExplicitBounds" visibility="protected"/>
          <methodref name="UpdateAnchorRules" visibility="protected"/>
          <propertyref name="Left" visibility="protected"/>
          <propertyref name="Top" visibility="protected"/>
          <propertyref name="ExplicitLeft" visibility="protected"/>
          <propertyref name="ExplicitTop" visibility="protected"/>
          <propertyref name="ExplicitWidth" visibility="protected"/>
          <propertyref name="ExplicitHeight" visibility="protected"/>
          <methodref name="GetActionLinkClass" visibility="protected" procflags="override"/>
          <methodref name="ActionChange" visibility="protected" procflags="override"/>
          <methodref name="EnabledStored" visibility="protected" procflags="virtual"/>
          <methodref name="VisibleStored" visibility="protected" procflags="virtual"/>
          <methodref name="EnabledChanged" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="VisibleChanged" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="IsControlRectEmpty" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="GetControls" visibility="protected"/>
          <methodref name="DoGesture" visibility="protected" procflags="virtual"/>
          <methodref name="GetTabStopController" visibility="protected" procflags="virtual"/>
          <methodref name="GetTabListClass" visibility="protected" procflags="virtual"/>
          <propertyref name="DoubleClick" visibility="protected"/>
          <propertyref name="RotationAngle" visibility="protected"/>
          <propertyref name="RotationCenter" visibility="protected"/>
          <propertyref name="Scale" visibility="protected"/>
          <propertyref name="DisabledOpacity" visibility="protected"/>
          <propertyref name="ParentContent" visibility="protected"/>
          <propertyref name="ParentShowHint" visibility="protected">
          </propertyref>
          <methodref name="Create" visibility="public" procflags="constructor override"/>
          <methodref name="Destroy" visibility="public" procflags="destructor override"/>
          <methodref name="SetNewScene" visibility="public" procflags="virtual"/>
          <methodref name="SetBounds" visibility="public" procflags="virtual"/>
          <methodref name="AbsoluteToLocal" visibility="public" procflags="overload virtual">
          </methodref>
          <methodref name="AbsoluteToLocal" visibility="public" procflags="overload">
          </methodref>
          <methodref name="LocalToAbsolute" visibility="public" procflags="overload virtual">
          </methodref>
          <methodref name="LocalToAbsolute" visibility="public" procflags="overload">
          </methodref>
          <methodref name="ScreenToLocal" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="LocalToScreen" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="ConvertLocalPointFrom" visibility="public">
          </methodref>
          <methodref name="ConvertLocalPointTo" visibility="public">
          </methodref>
          <methodref name="AbsoluteToLocalVector" visibility="public" procflags="virtual"/>
          <methodref name="LocalToAbsoluteVector" visibility="public" procflags="virtual"/>
          <methodref name="PointInObject" visibility="public" procflags="virtual"/>
          <methodref name="PointInObjectLocal" visibility="public" procflags="virtual"/>
          <methodref name="MakeScreenshot" visibility="public"/>
          <methodref name="BeginUpdate" visibility="public" procflags="virtual"/>
          <methodref name="IsUpdating" visibility="public" procflags="virtual"/>
          <methodref name="EndUpdate" visibility="public" procflags="virtual"/>
          <methodref name="RecalcAbsoluteNow" visibility="public"/>
          <methodref name="RecalcUpdateRect" visibility="public" procflags="virtual"/>
          <methodref name="RecalcOpacity" visibility="public" procflags="virtual"/>
          <methodref name="RecalcAbsolute" visibility="public" procflags="virtual"/>
          <methodref name="RecalcEnabled" visibility="public" procflags="virtual"/>
          <methodref name="RecalcHasEffect" visibility="public" procflags="virtual"/>
          <methodref name="RecalcHasClipParent" visibility="public" procflags="virtual"/>
          <methodref name="PrepareForPaint" visibility="public" procflags="virtual"/>
          <methodref name="RecalcSize" visibility="public" procflags="virtual"/>
          <methodref name="UpdateEffects" visibility="public"/>
          <methodref name="ApplyTriggerEffect" visibility="public" procflags="virtual"/>
          <methodref name="StartTriggerAnimation" visibility="public" procflags="virtual"/>
          <methodref name="StartTriggerAnimationWait" visibility="public" procflags="virtual"/>
          <methodref name="SetFocus" visibility="public"/>
          <methodref name="ResetFocus" visibility="public"/>
          <methodref name="PaintTo" visibility="public">
          </methodref>
          <methodref name="Repaint" visibility="public"/>
          <methodref name="InvalidateRect" visibility="public"/>
          <methodref name="Lock" visibility="public"/>
          <propertyref name="AbsoluteMatrix" visibility="public"/>
          <propertyref name="AbsoluteOpacity" visibility="public"/>
          <propertyref name="AbsoluteWidth" visibility="public"/>
          <propertyref name="AbsoluteHeight" visibility="public"/>
          <propertyref name="AbsoluteScale" visibility="public"/>
          <propertyref name="AbsoluteEnabled" visibility="public"/>
          <propertyref name="AbsoluteRect" visibility="public"/>
          <propertyref name="AbsoluteClipRect" visibility="public">
          </propertyref>
          <propertyref name="AxisAlignedRect" visibility="public"/>
          <propertyref name="ApplyingEffect" visibility="public">
          </propertyref>
          <propertyref name="HasEffect" visibility="public"/>
          <propertyref name="HasDisablePaintEffect" visibility="public"/>
          <propertyref name="HasAfterPaintEffect" visibility="public"/>
          <propertyref name="HasClipParent" visibility="public"/>
          <propertyref name="ChildrenRect" visibility="public"/>
          <propertyref name="DefaultSize" visibility="public"/>
          <propertyref name="FixedSize" visibility="public"/>
          <propertyref name="InvertAbsoluteMatrix" visibility="public"/>
          <propertyref name="InPaintTo" visibility="public"/>
          <propertyref name="LocalRect" visibility="public"/>
          <propertyref name="Pressed" visibility="public"/>
          <propertyref name="PressedPosition" visibility="public">
          </propertyref>
          <propertyref name="UpdateRect" visibility="public"/>
          <propertyref name="BoundsRect" visibility="public"/>
          <propertyref name="ParentedRect" visibility="public"/>
          <propertyref name="ParentedVisible" visibility="public"/>
          <propertyref name="ClipRect" visibility="public"/>
          <propertyref name="Canvas" visibility="public"/>
          <propertyref name="Controls" visibility="public"/>
          <propertyref name="ControlsCount" visibility="public"/>
          <propertyref name="ParentControl" visibility="public"/>
          <propertyref name="Scene" visibility="public"/>
          <propertyref name="AutoCapture" visibility="public"/>
          <propertyref name="CanFocus" visibility="public"/>
          <propertyref name="CanParentFocus" visibility="public"/>
          <propertyref name="DisableFocusEffect" visibility="public"/>
          <propertyref name="IsInflated" visibility="public"/>
          <methodref name="EnumControls" visibility="public" procflags="overload"/>
          <methodref name="EnumControls" visibility="public" procflags="overload" symflags="deprecated">
          </methodref>
          <methodref name="GetTabList" visibility="public" procflags="virtual"/>
          <methodref name="ShowInDesigner" visibility="public" procflags="virtual"/>
          <methodref name="ShouldTestMouseHits" visibility="public" procflags="virtual">
          </methodref>
          <propertyref name="IsMouseOver" visibility="public"/>
          <propertyref name="IsDragOver" visibility="public"/>
          <propertyref name="IsFocused" visibility="public"/>
          <propertyref name="IsVisible" visibility="public"/>
          <propertyref name="Align" visibility="public"/>
          <propertyref name="Anchors" visibility="public"/>
          <propertyref name="Cursor" visibility="public"/>
          <propertyref name="InheritedCursor" visibility="public"/>
          <propertyref name="DragMode" visibility="public"/>
          <propertyref name="EnableDragHighlight" visibility="public"/>
          <propertyref name="Enabled" visibility="public"/>
          <propertyref name="Position" visibility="public"/>
          <propertyref name="Locked" visibility="public"/>
          <propertyref name="Width" visibility="public"/>
          <propertyref name="Height" visibility="public"/>
          <propertyref name="Size" visibility="public"/>
          <propertyref name="Padding" visibility="public"/>
          <propertyref name="Margins" visibility="public"/>
          <propertyref name="Opacity" visibility="public"/>
          <propertyref name="ClipChildren" visibility="public"/>
          <propertyref name="ClipParent" visibility="public"/>
          <propertyref name="HitTest" visibility="public"/>
          <propertyref name="PopupMenu" visibility="public"/>
          <propertyref name="TabOrder" visibility="public"/>
          <propertyref name="Visible" visibility="public"/>
          <eventref name="CustomSceneAddRect" visibility="public"/>
          <eventref name="OnDragEnter" visibility="public"/>
          <eventref name="OnDragLeave" visibility="public"/>
          <eventref name="OnDragOver" visibility="public"/>
          <eventref name="OnDragDrop" visibility="public"/>
          <eventref name="OnDragEnd" visibility="public"/>
          <eventref name="OnKeyDown" visibility="public"/>
          <eventref name="OnKeyUp" visibility="public"/>
          <eventref name="OnClick" visibility="public"/>
          <eventref name="OnDblClick" visibility="public"/>
          <eventref name="OnCanFocus" visibility="public"/>
          <eventref name="OnEnter" visibility="public"/>
          <eventref name="OnExit" visibility="public"/>
          <eventref name="OnMouseDown" visibility="public"/>
          <eventref name="OnMouseMove" visibility="public"/>
          <eventref name="OnMouseUp" visibility="public"/>
          <eventref name="OnMouseWheel" visibility="public"/>
          <eventref name="OnMouseEnter" visibility="public"/>
          <eventref name="OnMouseLeave" visibility="public"/>
          <eventref name="OnPainting" visibility="public"/>
          <eventref name="OnPaint" visibility="public"/>
          <eventref name="OnResize" visibility="public"/>
          <eventref name="OnResized" visibility="public"/>
          <eventref name="OnActivate" visibility="public"/>
          <eventref name="OnDeactivate" visibility="public"/>
          <eventref name="OnApplyStyleLookup" visibility="public"/>
          <propertyref name="TouchTargetExpansion" visibility="public"/>
          <propertyref name="TabStop" visibility="public"/>
          <propertyref name="DisableDisappear" visibility="public"/>
          <propertyref name="ShowHint" visibility="public">
          </propertyref>
          <propertyref name="Hint" visibility="public">
          </propertyref>
          <propertyref name="Touch" visibility="published"/>
          <eventref name="OnGesture" visibility="published"/>
          <eventref name="OnTap" visibility="published"/>
          <ancestor name="TFmxObject" namespace="FMX.Types">
            <interfaces>
              <implements name="IActionClient"/>
              <implements name="IFreeNotification"/>
            </interfaces>
            <methodref name="SetStyleName" visibility="private"/>
            <methodref name="SetStored" visibility="private"/>
            <methodref name="GetChildrenCount" visibility="private" procflags="inline"/>
            <methodref name="GetIndexOfChild" visibility="private"/>
            <methodref name="SetIndexOfChild" visibility="private"/>
            <methodref name="SetIndex" visibility="private"/>
            <methodref name="GetActionRoot" visibility="private"/>
            <methodref name="GetActionClient" visibility="private" procflags="inline"/>
            <methodref name="SetActionClient" visibility="private"/>
            <methodref name="GetAction" visibility="private"/>
            <methodref name="SetAction" visibility="private"/>
            <methodref name="GetIndex" visibility="private"/>
            <methodref name="Create@" visibility="class private" procflags="class constructor noself"/>
            <methodref name="Destroy@" visibility="class private" procflags="class destructor noself"/>
            <methodref name="CreateChildrenList" visibility="protected" procflags="virtual"/>
            <methodref name="ResetChildrenIndicesSpan" visibility="protected"/>
            <methodref name="ResetChildrenIndices" visibility="protected"/>
            <methodref name="GetBackIndex" visibility="protected" procflags="virtual"/>
            <methodref name="DefineProperties" visibility="protected" procflags="override"/>
            <methodref name="IgnoreBindingName" visibility="protected"/>
            <methodref name="GetChildren" visibility="protected" procflags="override"/>
            <methodref name="SetParentComponent" visibility="protected" procflags="override"/>
            <methodref name="Notification" visibility="protected" procflags="override"/>
            <methodref name="GetActionLinkClass" visibility="protected" procflags="virtual"/>
            <methodref name="InitiateAction" visibility="protected" procflags="virtual"/>
            <methodref name="DoActionChange" visibility="protected" procflags="virtual"/>
            <methodref name="ActionChange" visibility="protected" procflags="virtual"/>
            <methodref name="DoActionClientChanged" visibility="protected" procflags="virtual"/>
            <propertyref name="ActionLink" visibility="protected"/>
            <propertyref name="Action" visibility="protected"/>
            <propertyref name="StyleIndexer" visibility="protected"/>
            <methodref name="GetParentComponent" visibility="public" procflags="override"/>
            <methodref name="HasParent" visibility="public" procflags="override"/>
            <methodref name="AddToResourcePool" visibility="protected" procflags="virtual"/>
            <methodref name="RemoveFromResourcePool" visibility="protected" procflags="virtual"/>
            <methodref name="SetParent" visibility="protected" procflags="virtual"/>
            <methodref name="DoRootChanging" visibility="protected" procflags="virtual"/>
            <methodref name="DoRootChanged" visibility="protected" procflags="virtual"/>
            <methodref name="ParentChanged" visibility="protected" procflags="virtual"/>
            <methodref name="ChangeOrder" visibility="protected" procflags="virtual"/>
            <methodref name="ChangeChildren" visibility="protected" procflags="virtual"/>
            <methodref name="DoAddObject" visibility="protected" procflags="virtual"/>
            <methodref name="DoInsertObject" visibility="protected" procflags="virtual"/>
            <methodref name="DoRemoveObject" visibility="protected" procflags="virtual"/>
            <methodref name="DoDeleteChildren" visibility="protected" procflags="virtual"/>
            <methodref name="SearchInto" visibility="protected" procflags="virtual"/>
            <methodref name="FreeNotification" visibility="protected" procflags="virtual"/>
            <methodref name="SupportsPlatformService" visibility="protected" procflags="virtual"/>
            <methodref name="GetData" visibility="protected" procflags="virtual"/>
            <methodref name="SetData" visibility="protected" procflags="virtual"/>
            <methodref name="IgnoreIntegerValue" visibility="protected"/>
            <methodref name="IgnoreFloatValue" visibility="protected"/>
            <methodref name="IgnoreBooleanValue" visibility="protected"/>
            <methodref name="IgnoreIdentValue" visibility="protected"/>
            <methodref name="Create" visibility="public" procflags="constructor override"/>
            <methodref name="Destroy" visibility="public" procflags="destructor override"/>
            <methodref name="BeforeDestruction" visibility="public" procflags="override"/>
            <methodref name="Release" visibility="public" procflags="virtual"/>
            <methodref name="Released" visibility="public" symflags="deprecated">
            </methodref>
            <methodref name="ObjectState" visibility="public" symflags="deprecated">
            </methodref>
            <methodref name="SetRoot" visibility="public"/>
            <methodref name="SetDesign" visibility="public"/>
            <methodref name="Clone" visibility="public"/>
            <methodref name="AddObject" visibility="public"/>
            <methodref name="InsertObject" visibility="public"/>
            <methodref name="RemoveObject" visibility="public" procflags="overload"/>
            <methodref name="RemoveObject" visibility="public" procflags="overload"/>
            <methodref name="ContainsObject" visibility="public" procflags="virtual"/>
            <methodref name="Exchange" visibility="public" procflags="virtual"/>
            <methodref name="DeleteChildren" visibility="public"/>
            <methodref name="IsChild" visibility="public" procflags="virtual"/>
            <methodref name="BringChildToFront" visibility="public"/>
            <methodref name="SendChildToBack" visibility="public"/>
            <methodref name="BringToFront" visibility="public" procflags="virtual"/>
            <methodref name="SendToBack" visibility="public" procflags="virtual"/>
            <methodref name="AddObjectsToList" visibility="public"/>
            <methodref name="Sort" visibility="public" procflags="virtual"/>
            <methodref name="EnumObjects" visibility="public">
            </methodref>
            <methodref name="AnimateFloat" visibility="public" symflags="deprecated">
            </methodref>
            <methodref name="AnimateFloatDelay" visibility="public" symflags="deprecated">
            </methodref>
            <methodref name="AnimateFloatWait" visibility="public" symflags="deprecated">
            </methodref>
            <methodref name="AnimateInt" visibility="public" symflags="deprecated">
            </methodref>
            <methodref name="AnimateIntWait" visibility="public" symflags="deprecated">
            </methodref>
            <methodref name="AnimateColor" visibility="public" symflags="deprecated">
            </methodref>
            <methodref name="StopPropertyAnimation" visibility="public"/>
            <methodref name="AddFreeNotify" visibility="public"/>
            <methodref name="RemoveFreeNotify" visibility="public"/>
            <methodref name="FindStyleResource" visibility="public" procflags="overload virtual"/>
            <propertyref name="Root" visibility="public"/>
            <propertyref name="Stored" visibility="public"/>
            <propertyref name="TagObject" visibility="public"/>
            <propertyref name="TagFloat" visibility="public"/>
            <propertyref name="TagString" visibility="public"/>
            <propertyref name="ChildrenCount" visibility="public"/>
            <propertyref name="Children" visibility="public"/>
            <propertyref name="Data" visibility="public"/>
            <propertyref name="Parent" visibility="public"/>
            <propertyref name="Index" visibility="public"/>
            <propertyref name="ActionClient" visibility="public"/>
            <propertyref name="StyleName" visibility="published"/>
            <ancestor name="TComponent" namespace="System.Classes">
              <interfaces>
                <implements name="IInterfaceComponentReference"/>
                <implements name="IInterface"/>
              </interfaces>
              <methodref name="GetComObject" visibility="private">
              </methodref>
              <methodref name="GetComponent" visibility="private">
              </methodref>
              <methodref name="GetComponentCount" visibility="private">
              </methodref>
              <methodref name="GetComponentIndex" visibility="private">
              </methodref>
              <methodref name="Insert" visibility="private">
              </methodref>
              <methodref name="ReadLeft" visibility="private">
              </methodref>
              <methodref name="ReadTop" visibility="private">
              </methodref>
              <methodref name="Remove" visibility="private">
              </methodref>
              <methodref name="RemoveNotification" visibility="private">
              </methodref>
              <methodref name="SetComponentIndex" visibility="private">
              </methodref>
              <methodref name="SetReference" visibility="private">
              </methodref>
              <methodref name="WriteLeft" visibility="private">
              </methodref>
              <methodref name="WriteTop" visibility="private">
              </methodref>
              <methodref name="IntfGetComponent" visibility="private">
              </methodref>
              <methodref name="DoGetDeltaStreams" visibility="private">
              </methodref>
              <methodref name="ReadDeltaStream" visibility="private">
              </methodref>
              <methodref name="ReadDeltaState" visibility="private">
              </methodref>
              <methodref name="FindSortedComponent" visibility="private">
              </methodref>
              <methodref name="AddSortedComponent" visibility="private">
              </methodref>
              <methodref name="RemoveSortedComponent" visibility="private" procflags="inline">
              </methodref>
              <methodref name="Create@" visibility="class private" procflags="class constructor noself">
              </methodref>
              <methodref name="AsyncSchedule" visibility="protected" procflags="virtual">
              </methodref>
              <methodref name="ChangeName" visibility="protected">
              </methodref>
              <methodref name="DefineProperties" visibility="protected" procflags="override">
              </methodref>
              <methodref name="GetChildren" visibility="protected" procflags="dynamic">
              </methodref>
              <methodref name="GetChildOwner" visibility="protected" procflags="dynamic">
              </methodref>
              <methodref name="GetChildParent" visibility="protected" procflags="dynamic">
              </methodref>
              <methodref name="GetOwner" visibility="protected" procflags="override">
              </methodref>
              <methodref name="Loaded" visibility="protected" procflags="virtual">
              </methodref>
              <methodref name="Notification" visibility="protected" procflags="virtual">
              </methodref>
              <methodref name="GetDeltaStreams" visibility="protected" procflags="dynamic">
              </methodref>
              <methodref name="ReadState" visibility="protected" procflags="virtual">
              </methodref>
              <methodref name="CanObserve" visibility="protected" procflags="virtual">
              </methodref>
              <methodref name="ObserverAdded" visibility="protected" procflags="virtual">
              </methodref>
              <methodref name="GetObservers" visibility="protected" procflags="virtual">
              </methodref>
              <methodref name="SetAncestor" visibility="protected">
              </methodref>
              <methodref name="SetDesigning" visibility="protected">
              </methodref>
              <methodref name="SetInline" visibility="protected">
              </methodref>
              <methodref name="SetDesignInstance" visibility="protected">
              </methodref>
              <methodref name="SetName" visibility="protected" procflags="virtual">
              </methodref>
              <methodref name="SetChildOrder" visibility="protected" procflags="dynamic">
              </methodref>
              <methodref name="SetParentComponent" visibility="protected" procflags="dynamic">
              </methodref>
              <methodref name="Updating" visibility="protected" procflags="dynamic">
              </methodref>
              <methodref name="Updated" visibility="protected" procflags="dynamic">
              </methodref>
              <methodref name="UpdateRegistry" visibility="protected" procflags="class virtual">
              </methodref>
              <methodref name="ValidateRename" visibility="protected" procflags="virtual">
              </methodref>
              <methodref name="ValidateContainer" visibility="protected" procflags="dynamic">
              </methodref>
              <methodref name="ValidateInsert" visibility="protected" procflags="dynamic">
              </methodref>
              <methodref name="WriteState" visibility="protected" procflags="virtual">
              </methodref>
              <methodref name="RemoveFreeNotifications" visibility="protected">
              </methodref>
              <methodref name="QueryInterface" visibility="protected" procflags="virtual">
              </methodref>
              <methodref name="_AddRef" visibility="protected">
              </methodref>
              <methodref name="_Release" visibility="protected">
              </methodref>
              <methodref name="GetTypeInfoCount" visibility="protected">
              </methodref>
              <methodref name="GetTypeInfo" visibility="protected">
              </methodref>
              <methodref name="GetIDsOfNames" visibility="protected">
              </methodref>
              <methodref name="Invoke" visibility="protected">
              </methodref>
              <eventref name="OnGetDeltaStreams" visibility="protected">
              </eventref>
              <methodref name="Create" visibility="public" procflags="constructor virtual">
              </methodref>
              <methodref name="Destroy" visibility="public" procflags="destructor override">
              </methodref>
              <methodref name="BeforeDestruction" visibility="public" procflags="override">
              </methodref>
              <methodref name="BeginInvoke" visibility="public" procflags="overload">
              </methodref>
              <methodref name="BeginInvoke" visibility="public" procflags="overload">
              </methodref>
              <methodref name="BeginInvoke" visibility="public" procflags="overload">
              </methodref>
              <methodref name="BeginInvoke" visibility="public" procflags="overload">
              </methodref>
              <methodref name="BeginInvoke" visibility="public" procflags="overload">
              </methodref>
              <methodref name="BeginInvoke" visibility="public" procflags="overload">
              </methodref>
              <methodref name="BeginInvoke" visibility="public" procflags="overload">
              </methodref>
              <methodref name="BeginInvoke" visibility="public" procflags="overload">
              </methodref>
              <methodref name="EndInvoke" visibility="public" procflags="overload">
              </methodref>
              <methodref name="EndInvoke" visibility="public" procflags="overload">
              </methodref>
              <methodref name="EndFunctionInvoke" visibility="public">
              </methodref>
              <methodref name="DestroyComponents" visibility="public">
              </methodref>
              <methodref name="Destroying" visibility="public">
              </methodref>
              <methodref name="ExecuteAction" visibility="public" procflags="dynamic">
              </methodref>
              <methodref name="FindComponent" visibility="public">
              </methodref>
              <methodref name="FreeNotification" visibility="public">
              </methodref>
              <methodref name="RemoveFreeNotification" visibility="public">
              </methodref>
              <methodref name="FreeOnRelease" visibility="public">
              </methodref>
              <methodref name="GetEnumerator" visibility="public" procflags="inline">
              </methodref>
              <methodref name="GetParentComponent" visibility="public" procflags="dynamic">
              </methodref>
              <methodref name="GetNamePath" visibility="public" procflags="override">
              </methodref>
              <methodref name="HasParent" visibility="public" procflags="dynamic">
              </methodref>
              <methodref name="InsertComponent" visibility="public">
              </methodref>
              <methodref name="RemoveComponent" visibility="public">
              </methodref>
              <methodref name="SetSubComponent" visibility="public">
              </methodref>
              <methodref name="SafeCallException" visibility="public" procflags="override">
              </methodref>
              <methodref name="UpdateAction" visibility="public" procflags="virtual">
              </methodref>
              <methodref name="IsImplementorOf" visibility="public">
              </methodref>
              <methodref name="ReferenceInterface" visibility="public">
              </methodref>
              <propertyref name="ComObject" visibility="public">
              </propertyref>
              <propertyref name="Components" visibility="public">
              </propertyref>
              <propertyref name="ComponentCount" visibility="public">
              </propertyref>
              <propertyref name="ComponentIndex" visibility="public">
              </propertyref>
              <propertyref name="ComponentState" visibility="public">
              </propertyref>
              <propertyref name="ComponentStyle" visibility="public">
              </propertyref>
              <propertyref name="DesignInfo" visibility="public">
              </propertyref>
              <propertyref name="Owner" visibility="public">
              </propertyref>
              <propertyref name="VCLComObject" visibility="public">
              </propertyref>
              <propertyref name="Observers" visibility="public">
              </propertyref>
              <propertyref name="Name" visibility="published">
              </propertyref>
              <propertyref name="Tag" visibility="published">
              </propertyref>
              <ancestor name="TPersistent" namespace="System.Classes">
                <methodref name="AssignError" visibility="private">
                </methodref>
                <methodref name="AssignTo" visibility="protected" procflags="virtual">
                </methodref>
                <methodref name="DefineProperties" visibility="protected" procflags="virtual">
                </methodref>
                <methodref name="GetOwner" visibility="protected" procflags="dynamic">
                </methodref>
                <methodref name="Destroy" visibility="public" procflags="destructor override">
                </methodref>
                <methodref name="Assign" visibility="public" procflags="virtual">
                </methodref>
                <methodref name="GetNamePath" visibility="public" procflags="dynamic">
                </methodref>
                <ancestor name="TObject" namespace="System">
                  <methodref name="Create" visibility="public" procflags="constructor">
                  </methodref>
                  <methodref name="Free" visibility="public">
                  </methodref>
                  <methodref name="DisposeOf" visibility="public" procflags="inline">
                  </methodref>
                  <methodref name="InitInstance" visibility="public" procflags="class">
                  </methodref>
                  <methodref name="CleanupInstance" visibility="public">
                  </methodref>
                  <methodref name="ClassType" visibility="public" procflags="inline">
                  </methodref>
                  <methodref name="ClassName" visibility="public" procflags="class">
                  </methodref>
                  <methodref name="ClassNameIs" visibility="public" procflags="class">
                  </methodref>
                  <methodref name="ClassParent" visibility="public" procflags="class inline">
                  </methodref>
                  <methodref name="ClassInfo" visibility="public" procflags="class inline">
                  </methodref>
                  <methodref name="InstanceSize" visibility="public" procflags="class inline">
                  </methodref>
                  <methodref name="InheritsFrom" visibility="public" procflags="class">
                  </methodref>
                  <methodref name="MethodAddress" visibility="public" procflags="class overload">
                  </methodref>
                  <methodref name="MethodAddress" visibility="public" procflags="class overload">
                  </methodref>
                  <methodref name="MethodName" visibility="public" procflags="class">
                  </methodref>
                  <methodref name="QualifiedClassName" visibility="public" procflags="class">
                  </methodref>
                  <methodref name="FieldAddress" visibility="public" procflags="overload">
                  </methodref>
                  <methodref name="FieldAddress" visibility="public" procflags="overload">
                  </methodref>
                  <methodref name="GetInterface" visibility="public">
                  </methodref>
                  <methodref name="GetInterfaceEntry" visibility="public" procflags="class">
                  </methodref>
                  <methodref name="GetInterfaceTable" visibility="public" procflags="class inline">
                  </methodref>
                  <methodref name="UnitName" visibility="public" procflags="class">
                  </methodref>
                  <methodref name="UnitScope" visibility="public" procflags="class">
                  </methodref>
                  <methodref name="Equals" visibility="public" procflags="virtual">
                  </methodref>
                  <methodref name="GetHashCode" visibility="public" procflags="virtual">
                  </methodref>
                  <methodref name="ToString" visibility="public" procflags="virtual">
                  </methodref>
                  <methodref name="SafeCallException" visibility="public" procflags="virtual">
                  </methodref>
                  <methodref name="AfterConstruction" visibility="public" procflags="virtual">
                  </methodref>
                  <methodref name="BeforeDestruction" visibility="public" procflags="virtual">
                  </methodref>
                  <methodref name="Dispatch" visibility="public" procflags="virtual">
                  </methodref>
                  <methodref name="DefaultHandler" visibility="public" procflags="virtual">
                  </methodref>
                  <methodref name="NewInstance" visibility="public" procflags="class virtual">
                  </methodref>
                  <methodref name="FreeInstance" visibility="public" procflags="virtual">
                  </methodref>
                  <methodref name="Destroy" visibility="public" procflags="destructor virtual">
                  </methodref>
                  <methodref name="GetDisposed" visibility="protected" procflags="inline">
                  </methodref>
                  <methodref name="CheckDisposed" visibility="protected" procflags="inline">
                  </methodref>
                  <propertyref name="Disposed" visibility="protected">
                  </propertyref>
                </ancestor>
              </ancestor>
            </ancestor>
          </ancestor>
        </ancestor>
      </ancestor>
    </ancestor>
    <interfaces>
      <implements name="IAcceleratorKeyReceiver"/>
      <implements name="ICaption"/>
      <implements name="ITextSettings"/>
    </interfaces>
    <members>
      <field name="FTextSettingsInfo" type="TTextSettingsInfo" visibility="private" size="4" offset="992" file="FMX.StdCtrls.pas" line="29"/>
      <field name="FTextObject" type="TControl" visibility="private" size="4" offset="996" file="FMX.StdCtrls.pas" line="30"/>
      <field name="FITextSettings" type="ITextSettings" visibility="private" size="4" offset="1000" file="FMX.StdCtrls.pas" line="31"/>
      <field name="FObjectState" type="IObjectState" visibility="private" size="4" offset="1004" file="FMX.StdCtrls.pas" line="32"/>
      <field name="FText" type="string" visibility="private" size="4" offset="1008" file="FMX.StdCtrls.pas" line="33"/>
      <field name="FIsChanging" type="Boolean" visibility="private" size="1" offset="1012" file="FMX.StdCtrls.pas" line="34"/>
      <field name="FPrefixStyle" type="TPrefixStyle" visibility="private" size="4" offset="1016" file="FMX.StdCtrls.pas" line="35"/>
      <field name="FAcceleratorKey" type="Char" visibility="private" size="2" offset="1020" file="FMX.StdCtrls.pas" line="36"/>
      <field name="FAcceleratorKeyIndex" type="Integer" visibility="private" size="4" offset="1024" file="FMX.StdCtrls.pas" line="37"/>
      <function name="TextStored" visibility="private" file="FMX.StdCtrls.pas" line="38">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <function name="GetFont" visibility="private" file="FMX.StdCtrls.pas" line="39">
        <parameters>
          <retval type="TFont"/>
        </parameters>
      </function>
      <function name="GetText" visibility="private" file="FMX.StdCtrls.pas" line="40">
        <parameters>
          <retval type="string"/>
        </parameters>
      </function>
      <procedure name="SetFont" visibility="private" file="FMX.StdCtrls.pas" line="41">
        <parameters>
          <parameter name="Value" type="TFont" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="GetTextAlign" visibility="private" file="FMX.StdCtrls.pas" line="42">
        <parameters>
          <retval type="TTextAlign"/>
        </parameters>
      </function>
      <procedure name="SetTextAlign" visibility="private" file="FMX.StdCtrls.pas" line="43">
        <parameters>
          <parameter name="Value" type="TTextAlign" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="GetVertTextAlign" visibility="private" file="FMX.StdCtrls.pas" line="44">
        <parameters>
          <retval type="TTextAlign"/>
        </parameters>
      </function>
      <procedure name="SetVertTextAlign" visibility="private" file="FMX.StdCtrls.pas" line="45">
        <parameters>
          <parameter name="Value" type="TTextAlign" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="GetWordWrap" visibility="private" file="FMX.StdCtrls.pas" line="46">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <procedure name="SetWordWrap" visibility="private" file="FMX.StdCtrls.pas" line="47">
        <parameters>
          <parameter name="Value" type="Boolean" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="GetFontColor" visibility="private" file="FMX.StdCtrls.pas" line="48">
        <parameters>
          <retval type="TAlphaColor"/>
        </parameters>
      </function>
      <procedure name="SetFontColor" visibility="private" file="FMX.StdCtrls.pas" line="49">
        <parameters>
          <parameter name="Value" type="TAlphaColor" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="GetTrimming" visibility="private" file="FMX.StdCtrls.pas" line="50">
        <parameters>
          <retval type="TTextTrimming"/>
        </parameters>
      </function>
      <procedure name="SetTrimming" visibility="private" file="FMX.StdCtrls.pas" line="51">
        <parameters>
          <parameter name="Value" type="TTextTrimming" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetPrefixStyle" visibility="private" file="FMX.StdCtrls.pas" line="52">
        <parameters>
          <parameter name="Value" type="TPrefixStyle" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="GetDefaultTextSettings" visibility="private" file="FMX.StdCtrls.pas" line="54">
        <parameters>
          <retval type="TTextSettings">
            <devnotes>
               <summary>
               This class combines some of properties that relate to the text
               </summary>
            </devnotes>
          </retval>
        </parameters>
      </function>
      <function name="GetTextSettings" visibility="private" file="FMX.StdCtrls.pas" line="55">
        <parameters>
          <retval type="TTextSettings">
            <devnotes>
               <summary>
               This class combines some of properties that relate to the text
               </summary>
            </devnotes>
          </retval>
        </parameters>
      </function>
      <function name="GetStyledSettings" visibility="private" file="FMX.StdCtrls.pas" line="56">
        <parameters>
          <retval type="TStyledSettings"/>
        </parameters>
      </function>
      <function name="GetResultingTextSettings" visibility="private" file="FMX.StdCtrls.pas" line="57">
        <parameters>
          <retval type="TTextSettings">
            <devnotes>
               <summary>
               This class combines some of properties that relate to the text
               </summary>
            </devnotes>
          </retval>
        </parameters>
      </function>
      <procedure name="DoRootChanging" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="61">
        <devnotes><summary>
DoRootChanging is executed when the root container (typically a form) is defined or changes.
For example, DoRootChanging is executed when this control is added to a form or moved from one form to another. 
When this control works as an accelerator key receiver, DoRootChanging overrides TControl.DoRootChanging to:

Register this control to a specific form when the text control is added to the form.
Unregister and register this control from one form to another when this control is moved between forms.</summary></devnotes>
        <parameters>
          <parameter name="NewRoot" type="IRoot" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="DoFilterPresentedText" visibility="protected" procflags="virtual" file="FMX.StdCtrls.pas" line="64">
        <devnotes><summary>
Filters the string contained in the Text property.
For example, you can use DoFilterPresentedText to filter the ampersand symbol of the accelerator key character.
If the control is registered as an accelerator key receiver, you can override this method to do your own filtering to the accelerator keys.
</summary></devnotes>
        <parameters>
          <parameter name="AText" type="string" paramflags="const"/>
          <retval type="string"/>
        </parameters>
      </function>
      <procedure name="DefineProperties" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="65">
        <parameters>
          <parameter name="Filer" type="TFiler"/>
        </parameters>
      <devnotes><summary>




Designates methods for storing an object's unpublished data on a stream such as a form file.
FMX.StdCtrls.TPresentedTextControl.DefineProperties inherits from System.Classes.TComponent.DefineProperties. All content below this line refers to System.Classes.TComponent.DefineProperties.
Designates methods for storing an object's unpublished data on a stream such as a form file.
TComponent overrides the DefineProperties method defined in TPersistent to define &quot;fake&quot; Top and Left properties. These are defined so that components that are not controls can be manipulated at design time. However, the Top and Left properties are hidden, that is, they are not published, because only controls appear at run time.
DefineProperties is virtual; descendent classes can override it. When overriding DefineProperties, be aware that the Ancestor property of Filer might be set, and that this property can determine whether or not it is appropriate to write properties.
DefineProperties is called automatically as part of the component streaming system; do not call it directly.
</summary></devnotes></procedure>
      <procedure name="ApplyStyle" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="66">
      <devnotes><summary>
Customizes styles in complex objects.
FMX.StdCtrls.TPresentedTextControl.ApplyStyle inherits from FMX.Controls.TStyledControl.ApplyStyle. All content below this line refers to FMX.Controls.TStyledControl.ApplyStyle.
Customizes styles in complex objects.
TStyledControl descendants override it to apply styles in concordance with their primitive components.      
Do not call ApplyStyle explicitly in an application. It is called by the ApplyStyleLookup method when object styles are updated.
For an example of an ApplyStyle implementation, see &quot;TCalloutPanel:Style Contracts&quot; in FireMonkey Component Design.
</summary></devnotes></procedure>
      <procedure name="FreeStyle" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="67">
      <devnotes><summary>
Frees the style of TStyledControl.
FMX.StdCtrls.TPresentedTextControl.FreeStyle inherits from FMX.Controls.TStyledControl.FreeStyle. All content below this line refers to FMX.Controls.TStyledControl.FreeStyle.
Frees the style of TStyledControl.
Override it to free additional component-specific style resources.
</summary></devnotes></procedure>
      <procedure name="DoStyleChanged" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="68">
      <devnotes><summary>
Indicates that the control needs to update the style and calls Repaint.
FMX.StdCtrls.TPresentedTextControl.DoStyleChanged inherits from FMX.Controls.TStyledControl.DoStyleChanged. All content below this line refers to FMX.Controls.TStyledControl.DoStyleChanged.
Indicates that the control needs to update the style and calls Repaint.
FMX calls DoStyleChanged after the style was changed.  
</summary></devnotes></procedure>
      <procedure name="SetText" visibility="protected" procflags="virtual" file="FMX.StdCtrls.pas" line="69">
        <parameters>
          <parameter name="Value" type="string" paramflags="const"/>
        </parameters>
      <devnotes><summary>
This property is used to change the displayed text.
</summary></devnotes></procedure>
      <procedure name="SetTextInternal" visibility="protected" procflags="virtual" file="FMX.StdCtrls.pas" line="71">
        <devnotes><summary>
Sets a new value to the Text property in TPresentedTextControl.
Use SetTextInternal to set a value to the text property without calling DoTextChanged.
</summary></devnotes>
        <parameters>
          <parameter name="Value" type="string" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetName" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="72">
        <parameters>
          <parameter name="Value" type="TComponentName" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Sets the value of the Name property.
FMX.StdCtrls.TPresentedTextControl.SetName inherits from System.Classes.TComponent.SetName. All content below this line refers to System.Classes.TComponent.SetName.
Sets the value of the Name property.
SetName is the virtual property setter for the Name property. It calls the ChangeName method, which performs the actual name change.
ChangeName is not virtual; override SetName instead when modifying the behavior of the Name property.

Warning: Using SetName to change the name of a component at run time causes any references to the old name to become undefined. Any subsequent code that uses the old name will cause an exception.</summary></devnotes></procedure>
      <function name="GetData" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="73">
        <parameters>
          <retval type="TValue">
            <attributes>
              <attribute name="HPPGENAttribute"/>
            </attributes>
          </retval>
        </parameters>
      <devnotes><summary>
Protected getter implementation for the Data property.
FMX.StdCtrls.TPresentedTextControl.GetData inherits from FMX.Types.TFmxObject.GetData. All content below this line refers to FMX.Types.TFmxObject.GetData.
Protected getter implementation for the Data property.
</summary></devnotes></function>
      <procedure name="SetData" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="74">
        <parameters>
          <parameter name="Value" type="TValue" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Protected setter implementation for the Data property.
FMX.StdCtrls.TPresentedTextControl.SetData inherits from FMX.Types.TFmxObject.SetData. All content below this line refers to FMX.Types.TFmxObject.SetData.
Protected setter implementation for the Data property.
</summary></devnotes></procedure>
      <procedure name="ActionChange" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="75">
        <parameters>
          <parameter name="Sender" type="TBasicAction"/>
          <parameter name="CheckDefaults" type="Boolean"/>
        </parameters>
      <devnotes><summary>
Sends a message to the presentation layer of the presentation proxy when the Action property changes.
FMX.StdCtrls.TPresentedTextControl.ActionChange inherits from FMX.Controls.Presentation.TPresentedControl.ActionChange. All content below this line refers to FMX.Controls.Presentation.TPresentedControl.ActionChange.
Sends a message to the presentation layer of the presentation proxy when the Action property changes.
The presentation layer receives a message with PM_ACTION_CHANGE as MsgID and an instance of TActionInfo as Value with the following data:



Property

Data



Value.Sender



ASender




Value.CheckDefaults



ACheckDefaults


 See Also
FMX.Controls.TControl.ActionChange
FMX.Controls.Presentation.TPresentedControl.PresentationProxy
FMX.Presentation.Messages.TMessageSender.SendMessage
FMX.Presentation.Messages.TMessageSender.Receiver
System.TObject.Dispatch
FMX.Presentation.Messages.TDispatchMessageWithValue
FMX.Presentation.Messages.TDispatchMessageWithValue.MsgID
FMX.Presentation.Messages.TDispatchMessageWithValue.Value
FMX.Controls.Presentation.TActionInfo
FMX.Controls.Presentation.TActionInfo.Sender
FMX.Controls.Presentation.TActionInfo.CheckDefaults

</summary></devnotes></procedure>
      <procedure name="Loaded" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="76">
      <devnotes><summary>
Initializes the control after the form file has been read into memory and loads its presentation.
FMX.StdCtrls.TPresentedTextControl.Loaded inherits from FMX.Controls.Presentation.TPresentedControl.Loaded. All content below this line refers to FMX.Controls.Presentation.TPresentedControl.Loaded.
Initializes the control after the form file has been read into memory and loads its presentation.
For details, see TControl.Loaded.

 See Also
FMX.Controls.Presentation.TPresentedControl.LoadPresentation
FMX.Controls.TControl.Loaded

</summary></devnotes></procedure>
      <function name="FindTextObject" visibility="protected" procflags="virtual" file="FMX.StdCtrls.pas" line="78">
        <devnotes><summary>
Returns the resource object that is linked to the current text object.
</summary></devnotes>
        <parameters>
          <retval type="TFmxObject"/>
        </parameters>
      </function>
      <procedure name="UpdateTextObject" visibility="protected" file="FMX.StdCtrls.pas" line="80">
        <devnotes><summary>
Updates the text of the TextObject.
UpdateTextObject accepts the following parameters:

TextControl: TextObject.
Str: Text.
DoChanged calls UpdateTextObject.
</summary></devnotes>
        <parameters>
          <parameter name="TextControl" type="TControl" paramflags="const"/>
          <parameter name="Str" type="string" paramflags="const"/>
        </parameters>
      </procedure>
      <property name="TextObject" visibility="protected" read="FTextObject" type="TControl" file="FMX.StdCtrls.pas" line="82">
        <devnotes><summary>
The control that displays the data of the control.
</summary></devnotes>
      </property>
      <procedure name="DoTextChanged" visibility="protected" procflags="virtual" file="FMX.StdCtrls.pas" line="84">
        <devnotes><summary>
Executed when text is changed.
SetText calls DoTextChanged.
</summary></devnotes>
      </procedure>
      <procedure name="DoEndUpdate" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="85">
      <devnotes><summary>


Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <function name="CalcTextObjectSize" visibility="protected" file="FMX.StdCtrls.pas" line="87">
        <devnotes><summary>
Sets the bounds of the TextObject according to the current alignment values of that TextObject.
The parameters serve as variables where CalcTextObjectSize puts the calculated bounds:

MaxWidth: The maximum width of the text object.
Size: The actual width and height of the text object.</summary></devnotes>
        <parameters>
          <parameter name="MaxWidth" type="Single" paramflags="const"/>
          <parameter name="Size" type="TSizeF" paramflags="var"/>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <procedure name="SetTextSettings" visibility="protected" procflags="virtual" file="FMX.StdCtrls.pas" line="89">
        <parameters>
          <parameter name="Value" type="TTextSettings" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Setter method for the TextSettings property.
</summary></devnotes></procedure>
      <procedure name="SetStyledSettings" visibility="protected" procflags="virtual" file="FMX.StdCtrls.pas" line="90">
        <parameters>
          <parameter name="Value" type="TStyledSettings" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Setter method for the StyledSettings property.
</summary></devnotes></procedure>
      <procedure name="DoChanged" visibility="protected" procflags="virtual" file="FMX.StdCtrls.pas" line="92">
        <devnotes><summary>
Updates the representation of the text that is displayed on the control.
Call this method to apply your changes to the text representation.
</summary></devnotes>
      </procedure>
      <function name="StyledSettingsStored" visibility="protected" procflags="virtual" file="FMX.StdCtrls.pas" line="94">
        <devnotes><summary>
Indicates whether the set of styled text representation properties stored in StyledSettings differs from the default set for this control.
StyledSettingsStored returns True when the set of styled text representation properties stored in 
StyledSettings differs from the default set of styled text representation properties for this control.
When StyledSettingsStored returns True, then values of text representation properties of this control are stored in the corresponding FMX file.
</summary></devnotes>
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <function name="GetTextSettingsClass" visibility="protected" procflags="virtual" file="FMX.StdCtrls.pas" line="96">
        <devnotes><summary>
Returns the class type that instance represents the used text settings.
GetTextSettingsClass returns the TTextSettingsInfo.TCustomTextSettingsClass (or its descendant)  class reference. An instance of such class provides the DefaultTextSettings,   TextSettings, StyledSettings, ResultingTextSettings, and other properties handling the text representation settings of a control. 
You can override the method in descendant classes to modify the default behavior.
Typical implementations of GetTextSettingsClass returns the class declaring properties like the Font, FontColor, HorzAlign, and WordWrap. Some of these properties can be declared as published to be editable in the Object Inspector.
</summary></devnotes>
        <parameters>
          <retval type="TTextSettingsInfo.TCustomTextSettingsClass"/>
        </parameters>
      </function>
      <procedure name="TriggerAcceleratorKey" visibility="protected" procflags="virtual" file="FMX.StdCtrls.pas" line="99">
        <devnotes><summary>
Allows the object to perform an action when the accelerator key is pressed.
FMX.StdCtrls.TPresentedTextControl.TriggerAcceleratorKey inherits from FMX.AcceleratorKey.IAcceleratorKeyReceiver.TriggerAcceleratorKey. All content below this line refers to FMX.AcceleratorKey.IAcceleratorKeyReceiver.TriggerAcceleratorKey.
Allows the object to perform an action when the accelerator key is pressed.
Use TriggerAcceleratorKey to trigger an action as a response to the accelerator key. For example, use TriggerAcceleratorKey to set focus to the acceleration key receiver control.

 See Also
FMX.AcceleratorKey.IAcceleratorKeyReceiver.CanTriggerAcceleratorKey

</summary></devnotes>
      </procedure>
      <function name="CanTriggerAcceleratorKey" visibility="protected" procflags="virtual" file="FMX.StdCtrls.pas" line="102">
        <devnotes><summary>
Determines whether the object reacts to the accelerator key or not.
FMX.StdCtrls.TPresentedTextControl.CanTriggerAcceleratorKey inherits from FMX.AcceleratorKey.IAcceleratorKeyReceiver.CanTriggerAcceleratorKey. All content below this line refers to FMX.AcceleratorKey.IAcceleratorKeyReceiver.CanTriggerAcceleratorKey.
Determines whether the object reacts to the accelerator key or not.
Use CanTriggerAcceleratorKey for objects that are not intended to react to the accelerator key, for example: a hidden tab page or a hidden submenu. The object triggers the action if CanTriggerAcceleratorKey is True. Otherwise, the object cannot trigger the action.

 See Also
FMX.AcceleratorKey.IAcceleratorKeyReceiver.TriggerAcceleratorKey

</summary></devnotes>
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <function name="GetAcceleratorChar" visibility="protected" file="FMX.StdCtrls.pas" line="104">
        <devnotes><summary>
Returns the index of the accelerator character within the text string of the receiver object.
FMX.StdCtrls.TPresentedTextControl.GetAcceleratorChar inherits from FMX.AcceleratorKey.IAcceleratorKeyReceiver.GetAcceleratorCharIndex. All content below this line refers to FMX.AcceleratorKey.IAcceleratorKeyReceiver.GetAcceleratorCharIndex.
Returns the index of the accelerator character within the text string of the receiver object.
Use GetAcceleratorCharIndex to highlight the accelerator character when the text string contains several times the same character.

 See Also
FMX.AcceleratorKey.IAcceleratorKeyReceiver.GetAcceleratorChar

</summary></devnotes>
        <parameters>
          <retval type="Char"/>
        </parameters>
      </function>
      <function name="GetAcceleratorCharIndex" visibility="protected" file="FMX.StdCtrls.pas" line="107">
        <devnotes><summary>
Returns the character key that serves as the  keyboard accelerator for the receiver object.
FMX.StdCtrls.TPresentedTextControl.GetAcceleratorCharIndex inherits from FMX.AcceleratorKey.IAcceleratorKeyReceiver.GetAcceleratorChar. All content below this line refers to FMX.AcceleratorKey.IAcceleratorKeyReceiver.GetAcceleratorChar.
Returns the character key that serves as the  keyboard accelerator for the receiver object.

 See Also
FMX.AcceleratorKey.IAcceleratorKeyReceiver.GetAcceleratorCharIndex

</summary></devnotes>
        <parameters>
          <retval type="Integer"/>
        </parameters>
      </function>
      <constructor name="Create" visibility="public" file="FMX.StdCtrls.pas" line="109">
        <parameters>
          <parameter name="AOwner" type="TComponent"/>
        </parameters>
      <devnotes><summary>
Creates a new instance of TPresentedControl.
FMX.StdCtrls.TPresentedTextControl.Create inherits from FMX.Controls.Presentation.TPresentedControl.Create. All content below this line refers to FMX.Controls.Presentation.TPresentedControl.Create.
Creates a new instance of TPresentedControl.
AOwner takes ownership of the control and becomes responsible of destroying the control once the control is no longer necessary.
The control constructor creates a data model for the control. DefineModelClass determines the default class of data model for each subclass of TPresentedControl.
Create also sets the value of the CanUseDefaultPresentation property to True.

 See Also
System.Classes.TComponent.Create
FMX.Controls.Presentation.TPresentedControl.Model
FMX.Controls.Presentation.TPresentedControl.DefineModelClass
FMX.Controls.Presentation.TPresentedControl.Destroy
FMX.Controls.Presentation.TPresentedControl.CanUseDefaultPresentation

</summary></devnotes></constructor>
      <destructor name="Destroy" visibility="public" file="FMX.StdCtrls.pas" line="110">
        <parameters>
        </parameters>
      <devnotes><summary>
Destroys this instance of TPresentedControl.
FMX.StdCtrls.TPresentedTextControl.Destroy inherits from FMX.Controls.Presentation.TPresentedControl.Destroy. All content below this line refers to FMX.Controls.Presentation.TPresentedControl.Destroy.
Destroys this instance of TPresentedControl.

 See Also
FMX.Controls.Presentation.TPresentedControl.Create

</summary></devnotes></destructor>
      <procedure name="AfterConstruction" visibility="public" procflags="override" file="FMX.StdCtrls.pas" line="111">
      <devnotes><summary>
Responds after the last constructor has executed and loads the control presentation.
FMX.StdCtrls.TPresentedTextControl.AfterConstruction inherits from FMX.Controls.Presentation.TPresentedControl.AfterConstruction. All content below this line refers to FMX.Controls.Presentation.TPresentedControl.AfterConstruction.
Responds after the last constructor has executed and loads the control presentation.
AfterConstruction is called automatically after the object's last constructor has executed. Do not call it explicitly in your applications.
</summary></devnotes></procedure>
      <function name="ToString" visibility="public" procflags="override" file="FMX.StdCtrls.pas" line="112">
        <parameters>
          <retval type="string"/>
        </parameters>
      <devnotes><summary>
Returns a string containing the class name.
FMX.StdCtrls.TPresentedTextControl.ToString inherits from System.TObject.ToString. All content below this line refers to System.TObject.ToString.
Returns a string containing the class name.
By default, the ToString returns a string containing the class name of the instance that is being called. 
For example, calling ToString on a TButton instance returns a string containing &quot;TButton&quot;. 

Note: ToString is intended to be overridden in user-derived classes, to provide consumer objects with a string representation. </summary></devnotes></function>
      <property name="Text" visibility="public" read="GetText" write="SetText" stored="TextStored" type="string" default="0" file="FMX.StdCtrls.pas" line="114">
        <devnotes><summary>
Specifies the text that will be displayed over the surface of this control.
In the Text property you can define an accelerator key. On Windows platforms, an accelerator key is shown as an underlined letter. To specify an accelerator key, precede an &lt;accelerator_letter&gt; with an ampersand &amp; character. The letter after the ampersand appears underlined. For example, to set the S character as an accelerator key for a Save button, type &amp;Save. On Windows platforms, accelerator keys enable the user to access controls pressing Alt+&lt;accelerator_letter&gt; key combination. When run on not Windows platforms, a single ampersand is simply stripped from the text. To show a single ampersand &amp; character in a Text property specify doubled ampersand &amp;&amp; characters.
</summary></devnotes>
      </property>
      <property name="DefaultTextSettings" visibility="public" read="GetDefaultTextSettings" type="TTextSettings" file="FMX.StdCtrls.pas" line="116">
        <devnotes><summary>
Stores a TTextSettings type object that keeps the default values of the text representation properties.
DefaultTextSettings is set during the loading of the style in the ApplyStyle method.
</summary></devnotes>
      </property>
      <property name="TextSettings" visibility="public" read="GetTextSettings" write="SetTextSettings" type="TTextSettings" file="FMX.StdCtrls.pas" line="118">
        <devnotes><summary>
Keeps the values of styled text representation properties that are set in the Object Inspector or programmatically.
TextSettings references a TTextSettings type object that handles values of styled text representation properties that are set in the Object Inspector or programmatically. TextSettings references a TTextSettings type object, which handles  styled text representation properties to be used for drawing texts in this control. 
TTextSettings type objects provide all styled text representation properties and methods to manage them.
The styled text representation properties are 
FontColor, TextAlign,
VertTextAlign,
Trimming, WordWrap, and Font (TFont.Family, TFont.Size, and TFont.Style).
TTextSettings objects provide both styled text representation properties, whose values are loaded from a style (specified in StyledSettings), so all other styled text representation properties, whose values can be set manually, and methods to manage these text representation properties. The text representation properties identified in StyledSettings are loaded from the style and cannot be set manually. 
Remember that the HorzAlign and VertAlign text representation properties stored in the TextSettings property of a control correspond to the TextAlign and 
VertTextAlign properties of the control.
</summary></devnotes>
      </property>
      <property name="StyledSettings" visibility="public" read="GetStyledSettings" write="SetStyledSettings" stored="StyledSettingsStored" type="TStyledSettings" file="FMX.StdCtrls.pas" line="120">
        <devnotes><summary>
Defines the set of styled text representation properties whose values are loaded from the current style and cannot be changed manually. 
Text representation properties are used as parameters for drawing texts in controls.
The StyledSettings property is used in FMX controls such as TButton, TSpeedButton, TCheckBox, and others.
Styles, for example Metropolis UI styles, define the default values of the text representation properties like font name, font size, word-wrapping, and others.
The TTextSettings class define properties keeping values of the FontColor, TextAlign, VertTextAlign, Trimming,  WordWrap, and Font (TFont.Family, TFont.Size, TFont.Style) elements defining visual parameters of a text representation.
StyledSettings can contain the Family, Size, Style, FontColor, and 
Other values defined in TStyledSetting. The &quot;Relation between TStyledSetting constants and TTextSettings properties&quot; table shows which of the  TStyledSetting constants control the handling of these TTextSettings text representation properties.
Keep in mind that the values of all styled text representation properties listed in the StyledSettings are taken from a style and cannot be changed manually. For example, if you set a new value of the FontColor property of a TTextControl control, then the real updating of the font color takes place only if the StyledSettings property of this control does not contain TStyledSetting.FontColor. For more details, see the example in Setting Text Parameters in FireMonkey.
To switch OFF a font property for a control, select the control in the Form Designer. In the Object Inspector, expand the StyledSettings property. Clear the check mark before the property. For example, the following figure shows a TButton control with Size turned OFF (for Button1) and ON (for Button2):

With StyledSettings you can also use the DefaultStyledSettings constant that defines the values of the styled properties that are taken from a style by default.
Remember that the HorzAlign and VertAlign text representation properties stored in the TextSettings property of a control correspond to the TextAlign and 
VertTextAlign properties of the control.
</summary></devnotes>
      </property>
      <property name="ResultingTextSettings" visibility="public" read="GetResultingTextSettings" type="TTextSettings" file="FMX.StdCtrls.pas" line="122">
        <devnotes><summary>
Keeps final values of text representation properties. These values are really used to draw texts in a control. 
ResultingTextSettings keeps a TTextSettings object that manages the final values of the text representation properties. These values are really used to draw texts in a control. 
To obtain values stored in ResultingTextSettings, a control uses the StyledSettings property. For example, if StyledSettings contains the TStyledSetting.Family value, then the TFont.Family value is taken from the DefaultTextSettings. (That is the font family name defined in the loaded style is used. The font family name defined by the programmer in the Object Editor is ignored.) Oppositely, if StyledSettings does not contain TStyledSetting.Family, then the font family name defined by the programmer in the Object Editor is used and the font family name defined in the loaded style is ignored.
The TTextSettings class define properties keeping values of the FontColor, TextAlign, VertTextAlign, Trimming,  WordWrap, and Font (TFont.Family, TFont.Size, TFont.Style) elements defining visual parameters of a text representation.
RecalculateTextSettings updates the ResultingTextSettings.
</summary></devnotes>
      </property>
      <procedure name="Change" visibility="public" file="FMX.StdCtrls.pas" line="124">
        <devnotes><summary>
Calls DoChanged when any of the styled text representation properties of the control changes.
</summary></devnotes>
      </procedure>
      <property name="Font" visibility="public" read="GetFont" write="SetFont" type="TFont" file="FMX.StdCtrls.pas" line="126">
        <devnotes><summary>
Specifies the font to use when displaying the text.
</summary></devnotes>
      </property>
      <property name="FontColor" visibility="public" read="GetFontColor" write="SetFontColor" type="TAlphaColor" default="-16777216" file="FMX.StdCtrls.pas" line="128">
        <devnotes><summary>
Specifies the font color to use when displaying the text.
This property sets or returns a value of the TAlphaColor type.
</summary></devnotes>
      </property>
      <property name="VertTextAlign" visibility="public" read="GetVertTextAlign" write="SetVertTextAlign" type="TTextAlign" default="0" file="FMX.StdCtrls.pas" line="130">
        <devnotes><summary>
Specifies the vertical alignment of the text in this control.
This property can take values of the TTextAlign enumeration.
</summary></devnotes>
      </property>
      <property name="TextAlign" visibility="public" read="GetTextAlign" write="SetTextAlign" type="TTextAlign" default="1" file="FMX.StdCtrls.pas" line="132">
        <devnotes><summary>
Specifies the horizontal alignment of the text in this control.
This property can take values of the TTextAlign enumeration.
</summary></devnotes>
      </property>
      <property name="WordWrap" visibility="public" read="GetWordWrap" write="SetWordWrap" type="Boolean" default="0" file="FMX.StdCtrls.pas" line="134">
        <devnotes><summary>
Specifies whether to wrap the text inside the control when the text length exceeds the text area width.
</summary></devnotes>
      </property>
      <property name="Trimming" visibility="public" read="GetTrimming" write="SetTrimming" type="TTextTrimming" default="0" file="FMX.StdCtrls.pas" line="136">
        <devnotes><summary>
Specifies how the text is trimmed when it exceeds the edges of the text area in this control.
This property sets or returns a value of the TTextTrimming type.
</summary></devnotes>
      </property>
      <property name="PrefixStyle" visibility="public" read="FPrefixStyle" write="SetPrefixStyle" type="TPrefixStyle" default="0" file="FMX.StdCtrls.pas" line="138">
        <devnotes><summary>
Determines whether the ampersand character (&amp;) is considered as a special prefix character.
The default value is TPrefixStyle.HidePrefix, which means that the (first) ampersand is hidden at run-time.
</summary></devnotes>
      </property>
    </members>
  </class>
  <class name="TPanel" file="FMX.StdCtrls.pas" line="143">
    
    <members>
      <function name="GetDefaultSize" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="145">
        <parameters>
          <retval type="TSizeF"/>
        </parameters>
      <devnotes><summary>
Getter of DefaultSize.
FMX.StdCtrls.TPanel.GetDefaultSize inherits from FMX.Controls.TControl.GetDefaultSize. All content below this line refers to FMX.Controls.TControl.GetDefaultSize.
Getter of DefaultSize.


</summary></devnotes></function>
      <procedure name="DefineProperties" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="146">
        <parameters>
          <parameter name="Filer" type="TFiler"/>
        </parameters>
      <devnotes><summary>




Designates methods for storing an object's unpublished data on a stream such as a form file.
FMX.StdCtrls.TPanel.DefineProperties inherits from System.Classes.TComponent.DefineProperties. All content below this line refers to System.Classes.TComponent.DefineProperties.
Designates methods for storing an object's unpublished data on a stream such as a form file.
TComponent overrides the DefineProperties method defined in TPersistent to define &quot;fake&quot; Top and Left properties. These are defined so that components that are not controls can be manipulated at design time. However, the Top and Left properties are hidden, that is, they are not published, because only controls appear at run time.
DefineProperties is virtual; descendent classes can override it. When overriding DefineProperties, be aware that the Ancestor property of Filer might be set, and that this property can determine whether or not it is appropriate to write properties.
DefineProperties is called automatically as part of the component streaming system; do not call it directly.
</summary></devnotes></procedure>
      <constructor name="Create" visibility="public" file="FMX.StdCtrls.pas" line="148">
        <parameters>
          <parameter name="AOwner" type="TComponent"/>
        </parameters>
      <devnotes><summary>
Creates a new instance of TPresentedControl.
FMX.StdCtrls.TPanel.Create inherits from FMX.Controls.Presentation.TPresentedControl.Create. All content below this line refers to FMX.Controls.Presentation.TPresentedControl.Create.
Creates a new instance of TPresentedControl.
AOwner takes ownership of the control and becomes responsible of destroying the control once the control is no longer necessary.
The control constructor creates a data model for the control. DefineModelClass determines the default class of data model for each subclass of TPresentedControl.
Create also sets the value of the CanUseDefaultPresentation property to True.

 See Also
System.Classes.TComponent.Create
FMX.Controls.Presentation.TPresentedControl.Model
FMX.Controls.Presentation.TPresentedControl.DefineModelClass
FMX.Controls.Presentation.TPresentedControl.Destroy
FMX.Controls.Presentation.TPresentedControl.CanUseDefaultPresentation

</summary></devnotes></constructor>
      <property name="Action" visibility="published" read="GetAction" write="SetAction" type="TBasicAction" hoisted="true" file="FMX.StdCtrls.pas" line="150"/>
      <property name="Align" visibility="published" read="FAlign" write="SetAlign" type="TAlignLayout" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="151"/>
      <property name="Anchors" visibility="published" read="FAnchors" write="SetAnchors" stored="IsAnchorsStored" type="TAnchors" hoisted="true" file="FMX.StdCtrls.pas" line="152"/>
      <property name="ClipChildren" visibility="published" read="FClipChildren" write="SetClipChildren" type="Boolean" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="153"/>
      <property name="ClipParent" visibility="published" read="FClipParent" write="FClipParent" type="Boolean" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="154"/>
      <property name="ControlType" visibility="published" read="GetControlType" write="SetControlType" type="TControlType" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="155"/>
      <property name="Cursor" visibility="published" read="GetCursor" write="SetCursor" type="TCursor" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="156"/>
      <property name="DragMode" visibility="published" read="GetDragMode" write="SetDragMode" type="TDragMode" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="157"/>
      <property name="EnableDragHighlight" visibility="published" read="FEnableDragHighlight" write="FEnableDragHighlight" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="158"/>
      <property name="Enabled" visibility="published" read="FEnabled" write="SetEnabled" stored="EnabledStored" type="Boolean" hoisted="true" file="FMX.StdCtrls.pas" line="159"/>
      <property name="Locked" visibility="published" read="FLocked" write="SetLocked" type="Boolean" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="160"/>
      <property name="Height" visibility="published" read="GetHeight" write="SetHeight" stored="False" type="Single" hoisted="true" file="FMX.StdCtrls.pas" line="161"/>
      <property name="HelpContext" visibility="published" read="FHelpContext" write="SetHelpContext" stored="IsHelpContextStored" type="THelpContext" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="162"/>
      <property name="HelpKeyword" visibility="published" read="FHelpKeyword" write="SetHelpKeyword" stored="IsHelpContextStored" type="string" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="163"/>
      <property name="HelpType" visibility="published" read="FHelpType" write="FHelpType" type="THelpType" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="164"/>
      <property name="Hint" visibility="published" read="FHint" write="SetHint" stored="HintStored" type="string" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="165"/>
      <property name="HitTest" visibility="published" read="FHitTest" write="SetHitTest" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="166"/>
      <property name="Padding" visibility="published" read="GetPadding" write="SetPadding" type="TBounds" hoisted="true" file="FMX.StdCtrls.pas" line="167"/>
      <property name="Opacity" visibility="published" read="FOpacity" write="SetOpacity" stored="IsOpacityStored" type="Single" hoisted="true" file="FMX.StdCtrls.pas" line="168"/>
      <property name="Margins" visibility="published" read="GetMargins" write="SetMargins" type="TBounds" hoisted="true" file="FMX.StdCtrls.pas" line="169"/>
      <property name="PopupMenu" visibility="published" read="FPopupMenu" write="SetPopupMenu" stored="IsPopupMenuStored" type="TCustomPopupMenu" hoisted="true" file="FMX.StdCtrls.pas" line="170"/>
      <property name="Position" visibility="published" read="FPosition" write="SetPosition" stored="IsPositionStored" type="TPosition" hoisted="true" file="FMX.StdCtrls.pas" line="171"/>
      <property name="RotationAngle" visibility="published" read="GetRotationAngle" write="SetRotationAngle" type="Single" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="172"/>
      <property name="RotationCenter" visibility="published" read="GetRotationCenter" write="SetRotationCenter" type="TPosition" hoisted="true" file="FMX.StdCtrls.pas" line="173"/>
      <property name="Scale" visibility="published" read="GetScale" write="SetScale" type="TPosition" hoisted="true" file="FMX.StdCtrls.pas" line="174"/>
      <property name="Size" visibility="published" read="FSize" write="SetSize" stored="IsSizeStored" type="TControlSize" hoisted="true" file="FMX.StdCtrls.pas" line="175"/>
      <property name="StyleLookup" visibility="published" read="FStyleLookup" write="SetStyleLookup" type="string" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="176"/>
      <property name="TouchTargetExpansion" visibility="published" read="FTouchTargetExpansion" write="SetTouchTargetExpansion" type="TBounds" hoisted="true" file="FMX.StdCtrls.pas" line="177"/>
      <property name="Visible" visibility="published" read="FVisible" write="SetVisible" stored="VisibleStored" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="178"/>
      <property name="Width" visibility="published" read="GetWidth" write="SetWidth" stored="False" type="Single" hoisted="true" file="FMX.StdCtrls.pas" line="179"/>
      <property name="TabOrder" visibility="published" read="GetTabOrder" write="SetTabOrder" type="TTabOrder" default="-1" hoisted="true" file="FMX.StdCtrls.pas" line="180"/>
      <property name="TabStop" visibility="published" read="GetTabStop" write="SetTabStop" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="181"/>
      <property name="ParentShowHint" visibility="published" read="FParentShowHint" write="SetParentShowHint" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="182"/>
      <property name="ShowHint" visibility="published" read="FShowHint" write="SetShowHint" stored="IsShowHintStored" type="Boolean" hoisted="true" file="FMX.StdCtrls.pas" line="183"/>
      <event name="OnApplyStyleLookup" visibility="published" read="FOnApplyStyleLookup" write="FOnApplyStyleLookup" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="184"/>
      <event name="OnDragEnter" visibility="published" read="FOnDragEnter" write="FOnDragEnter" type="TDragEnterEvent" hoisted="true" file="FMX.StdCtrls.pas" line="185"/>
      <event name="OnDragLeave" visibility="published" read="FOnDragLeave" write="FOnDragLeave" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="186"/>
      <event name="OnDragOver" visibility="published" read="FOnDragOver" write="FOnDragOver" type="TDragOverEvent" hoisted="true" file="FMX.StdCtrls.pas" line="187"/>
      <event name="OnDragDrop" visibility="published" read="FOnDragDrop" write="FOnDragDrop" type="TDragDropEvent" hoisted="true" file="FMX.StdCtrls.pas" line="188"/>
      <event name="OnDragEnd" visibility="published" read="FOnDragEnd" write="FOnDragEnd" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="189"/>
      <event name="OnKeyDown" visibility="published" read="FOnKeyDown" write="FOnKeyDown" type="TKeyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="190"/>
      <event name="OnKeyUp" visibility="published" read="FOnKeyUp" write="FOnKeyUp" type="TKeyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="191"/>
      <event name="OnCanFocus" visibility="published" read="FOnCanFocus" write="FOnCanFocus" type="TCanFocusEvent" hoisted="true" file="FMX.StdCtrls.pas" line="192"/>
      <event name="OnEnter" visibility="published" read="FOnEnter" write="FOnEnter" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="193"/>
      <event name="OnExit" visibility="published" read="FOnExit" write="FOnExit" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="194"/>
      <event name="OnClick" visibility="published" read="FOnClick" write="SetOnClick" stored="OnClickStored" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="195"/>
      <event name="OnDblClick" visibility="published" read="FOnDblClick" write="FOnDblClick" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="196"/>
      <event name="OnMouseDown" visibility="published" read="FOnMouseDown" write="FOnMouseDown" type="TMouseEvent" hoisted="true" file="FMX.StdCtrls.pas" line="197"/>
      <event name="OnMouseMove" visibility="published" read="FOnMouseMove" write="FOnMouseMove" type="TMouseMoveEvent" hoisted="true" file="FMX.StdCtrls.pas" line="198"/>
      <event name="OnMouseUp" visibility="published" read="FOnMouseUp" write="FOnMouseUp" type="TMouseEvent" hoisted="true" file="FMX.StdCtrls.pas" line="199"/>
      <event name="OnMouseWheel" visibility="published" read="FOnMouseWheel" write="FOnMouseWheel" type="TMouseWheelEvent" hoisted="true" file="FMX.StdCtrls.pas" line="200"/>
      <event name="OnMouseEnter" visibility="published" read="FOnMouseEnter" write="FOnMouseEnter" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="201"/>
      <event name="OnMouseLeave" visibility="published" read="FOnMouseLeave" write="FOnMouseLeave" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="202"/>
      <event name="OnPainting" visibility="published" read="FOnPainting" write="FOnPainting" type="TOnPaintEvent" hoisted="true" file="FMX.StdCtrls.pas" line="203"/>
      <event name="OnPaint" visibility="published" read="FOnPaint" write="FOnPaint" type="TOnPaintEvent" hoisted="true" file="FMX.StdCtrls.pas" line="204"/>
      <event name="OnResize" visibility="published" read="FOnResize" write="FOnResize" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="205"/>
      <event name="OnResized" visibility="published" read="FOnResized" write="FOnResized" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="206"/>
    </members>
  <devnotes><summary>
Represents a generic general-purpose panel used to hold multiple controls for organizing purposes.
Use TPanel components when you need to provide the user with a way of placing multiple graphical components on a surface for organizing purposes.
Panels have methods to help manage the placement of child controls embedded in the panel. You can also use panels to group controls together, similarly to the way you can use a group box. Panels are typically used for groups of controls within a single form. Panels with no borders are useful as docking sites when writing applications that use drag-and-dock.
</summary></devnotes></class>
  <class name="TCalloutPanel" file="FMX.StdCtrls.pas" line="211">
    
    <members>
      <const name="DefaultCalloutPosition" visibility="public" type="TCalloutPosition" file="FMX.StdCtrls.pas" line="213">
        <value>
          Top
        </value>
      </const>
      <const name="DefaultCalloutWidth" visibility="public" type="Integer" file="FMX.StdCtrls.pas" line="214">
        <value>
          $17
        </value>
      </const>
      <const name="DefaultCalloutLength" visibility="public" type="Integer" file="FMX.StdCtrls.pas" line="215">
        <value>
          $B
        </value>
      </const>
      <field name="FCalloutRect" type="TCalloutRectangle" visibility="private" size="4" offset="992" file="FMX.StdCtrls.pas" line="217"/>
      <field name="FCalloutLength" type="Single" visibility="private" size="4" offset="996" file="FMX.StdCtrls.pas" line="218"/>
      <field name="FCalloutWidth" type="Single" visibility="private" size="4" offset="1000" file="FMX.StdCtrls.pas" line="219"/>
      <field name="FCalloutPosition" type="TCalloutPosition" visibility="private" size="1" offset="1004" file="FMX.StdCtrls.pas" line="220"/>
      <field name="FCalloutOffset" type="Single" visibility="private" size="4" offset="1008" file="FMX.StdCtrls.pas" line="221"/>
      <field name="FSavedPadding" type="TRectF" visibility="private" size="16" offset="1012" file="FMX.StdCtrls.pas" line="222"/>
      <field name="FUpdatingPadding" type="Boolean" visibility="private" size="1" offset="1028" file="FMX.StdCtrls.pas" line="223"/>
      <procedure name="SetCalloutLength" visibility="private" file="FMX.StdCtrls.pas" line="224">
        <parameters>
          <parameter name="Value" type="Single" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetCalloutPosition" visibility="private" file="FMX.StdCtrls.pas" line="225">
        <parameters>
          <parameter name="Value" type="TCalloutPosition" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetCalloutWidth" visibility="private" file="FMX.StdCtrls.pas" line="226">
        <parameters>
          <parameter name="Value" type="Single" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetCalloutOffset" visibility="private" file="FMX.StdCtrls.pas" line="227">
        <parameters>
          <parameter name="Value" type="Single" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="ApplyStyle" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="229">
      <devnotes><summary>
Customizes styles in complex objects.
FMX.StdCtrls.TCalloutPanel.ApplyStyle inherits from FMX.Controls.TStyledControl.ApplyStyle. All content below this line refers to FMX.Controls.TStyledControl.ApplyStyle.
Customizes styles in complex objects.
TStyledControl descendants override it to apply styles in concordance with their primitive components.      
Do not call ApplyStyle explicitly in an application. It is called by the ApplyStyleLookup method when object styles are updated.
For an example of an ApplyStyle implementation, see &quot;TCalloutPanel:Style Contracts&quot; in FireMonkey Component Design.
</summary></devnotes></procedure>
      <procedure name="FreeStyle" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="230">
      <devnotes><summary>
Frees the style of TStyledControl.
FMX.StdCtrls.TCalloutPanel.FreeStyle inherits from FMX.Controls.TStyledControl.FreeStyle. All content below this line refers to FMX.Controls.TStyledControl.FreeStyle.
Frees the style of TStyledControl.
Override it to free additional component-specific style resources.
</summary></devnotes></procedure>
      <procedure name="UpdateCallout" visibility="protected" file="FMX.StdCtrls.pas" line="233">
        <devnotes><summary>
Updates the properties of the CalloutRectangle.
UpdateCallout updates the following properties of the CalloutRectangle:

CalloutLength
CalloutWidth
CalloutPosition
CalloutOffset</summary></devnotes>
      </procedure>
      <procedure name="UpdatePadding" visibility="protected" file="FMX.StdCtrls.pas" line="235">
        <devnotes><summary>
Updates the padding based on the values of CalloutLength and CalloutPosition.
</summary></devnotes>
      </procedure>
      <procedure name="SavePadding" visibility="protected" file="FMX.StdCtrls.pas" line="237">
        <devnotes><summary>
Saves the current padding.
</summary></devnotes>
      </procedure>
      <procedure name="RestorePadding" visibility="protected" file="FMX.StdCtrls.pas" line="239">
        <devnotes><summary>
Restores a previously-saved padding.
</summary></devnotes>
      </procedure>
      <procedure name="PaddingChanged" visibility="protected" procflags="overload override" file="FMX.StdCtrls.pas" line="240">
      <devnotes><summary>
Executed right after the value of the Padding property changes.
FMX.StdCtrls.TCalloutPanel.PaddingChanged inherits from FMX.Controls.TControl.PaddingChanged. All content below this line refers to FMX.Controls.TControl.PaddingChanged.
Executed right after the value of the Padding property changes.
The control does not execute PaddingChanged if you assign Padding the same value that it already has.

 See Also
FMX.Controls.TControl.ClipChildrenChanged
FMX.Controls.TControl.EffectEnabledChanged
FMX.Controls.TControl.EnabledChanged
FMX.Controls.TControl.HandleSizeChanged
FMX.Controls.TControl.HitTestChanged
FMX.Controls.TControl.ParentChanged
FMX.Controls.TControl.VisibleChanged
FMX.Controls.TControl.AncestorVisibleChanged
FMX.Controls.TControl.AncestorParentChanged
FMX.Controls.TControl.ChildrenAlignChanged

</summary></devnotes></procedure>
      <constructor name="Create" visibility="public" file="FMX.StdCtrls.pas" line="242">
        <parameters>
          <parameter name="AOwner" type="TComponent"/>
        </parameters>
      <devnotes><summary>


Creates a new instance of TPresentedControl.
FMX.StdCtrls.TCalloutPanel.Create inherits from FMX.Controls.Presentation.TPresentedControl.Create. All content below this line refers to FMX.Controls.Presentation.TPresentedControl.Create.
Creates a new instance of TPresentedControl.
AOwner takes ownership of the control and becomes responsible of destroying the control once the control is no longer necessary.
The control constructor creates a data model for the control. DefineModelClass determines the default class of data model for each subclass of TPresentedControl.
Create also sets the value of the CanUseDefaultPresentation property to True.

 See Also
System.Classes.TComponent.Create
FMX.Controls.Presentation.TPresentedControl.Model
FMX.Controls.Presentation.TPresentedControl.DefineModelClass
FMX.Controls.Presentation.TPresentedControl.Destroy
FMX.Controls.Presentation.TPresentedControl.CanUseDefaultPresentation

</summary></devnotes></constructor>
      <property name="CalloutRectangle" visibility="public" read="FCalloutRect" write="FCalloutRect" type="TCalloutRectangle" file="FMX.StdCtrls.pas" line="244">
        <devnotes><summary>
A reference to a TCalloutRectangle style object.
</summary></devnotes>
      </property>
      <property name="CalloutWidth" visibility="published" read="FCalloutWidth" write="SetCalloutWidth" type="Single" default="0" file="FMX.StdCtrls.pas" line="246"><devnotes><summary>
The width of the visual element that points at the area of interest.
By default, TCalloutPanel uses TCalloutRectangle, which renders its callout pointer as an isosceles triangle on one of its sides. 
CalloutWidth is the length of the base of the triangle.
</summary></devnotes></property>
      <property name="CalloutLength" visibility="published" read="FCalloutLength" write="SetCalloutLength" type="Single" default="0" file="FMX.StdCtrls.pas" line="247"><devnotes><summary>
The length of the visual element that points at the area of interest.
By default, TCalloutPanel uses TCalloutRectangle, which renders its callout pointer as an isosceles triangle on one of its sides. CalloutLength is the height of this triangle. 
The triangle is included in the bounding rectangle ShapeRect of the TCalloutPanel object; therefore, the longer CalloutLength is, the smaller the height (or width) of the callout panel itself is, and vice versa. Keeping the bounding rectangle the same size while changing the length of the triangle CalloutLength requires changing the height or width of the callout panel TCalloutPanel itself, depending on which side the triangle appears.
</summary></devnotes></property>
      <property name="CalloutPosition" visibility="published" read="FCalloutPosition" write="SetCalloutPosition" type="TCalloutPosition" default="0" file="FMX.StdCtrls.pas" line="248"><devnotes><summary>
Defines the side where the callout pointer appears.
Set CalloutPosition to one of the Top, Left, Bottom, or Right constants predefined in TCalloutPosition to define the side on which the callout pointer should appear.
By default, the callout pointer appears on the top side CalloutPosition = Top.  
By default, TCalloutPanel uses TCalloutRectangle, which renders its callout pointer--the visual element that points at the area of interest--as an isosceles triangle on one of its four sides.
</summary></devnotes></property>
      <property name="CalloutOffset" visibility="published" read="FCalloutOffset" write="SetCalloutOffset" type="Single" default="0" file="FMX.StdCtrls.pas" line="250"><devnotes><summary>
The position of the callout pointer, relative to the center or edges of the side on which it appears.
By default, TCalloutPanel uses TCalloutRectangle, which renders its callout pointer--visual element that points at the area of interest--as an isosceles triangle on one of its sides. The CalloutPosition defines the side on which the triangle appears.
CalloutOffset is the offset of the callout pointer implemented according to the following conditions:

If CalloutOffset is zero, then the callout pointer is centered on the specified side.
If CalloutOffset is positive, then the closest point to a corner of the callout pointer has the CalloutOffset offset on the following sides:
Top--offset to the right from the upper-left corner.
Left--offset to the bottom from the upper-left corner.
Right--offset to the bottom from the upper-right corner.
Bottom--offset to the right from the lower-left corner.
If CalloutOffset is negative, then the closest point to a corner of the callout pointer has the CalloutOffset offset on the following sides:
Top--offset to the left from the upper-right corner.
Left--offset to the top from the lower-left corner.
Right--offset to the top from the lower-right corner.
Bottom--offset to the left from the lower-right corner.

</summary></devnotes></property>
    </members>
  <devnotes><summary>
A container for extra information relevant to another item, with a visual indicator pointing to that item.
A call-out often takes the form of a pull-quote, in which a particular snippet of text in a document is duplicated to attract attention: in a larger size, with a different typeface, in a colored box, with stylized quote marks, etc. With illustrations, boxed text will refer to different elements of interest, and each box will be drawn with extra lines that point to its element.
Use TCalloutPanel to create a call-out for elements in the user interface. The call-out may be transient, like a heavy-duty tool tip.
The default style is a TCalloutRectangle, a rectangle with a triangular &quot;peak&quot; on one of four sides. A custom style that is not a TCalloutRectangle at the root should contain one with the ResourceName &quot;background&quot;, so that the size and position properties for the triangle can be applied. The bounds of the control includes that peak: the longer the peak, the shorter the rectangle, and vice versa.
</summary></devnotes></class>
  <class name="TLabel" file="FMX.StdCtrls.pas" line="255">
    
    <members>
      <field name="FAutoSize" type="Boolean" visibility="private" size="1" offset="1040" file="FMX.StdCtrls.pas" line="257"/>
      <field name="FPressing" type="Boolean" visibility="private" size="1" offset="1041" file="FMX.StdCtrls.pas" line="258"/>
      <field name="FIsPressed" type="Boolean" visibility="private" size="1" offset="1042" file="FMX.StdCtrls.pas" line="259"/>
      <field name="FInFitSize" type="Boolean" visibility="private" size="1" offset="1043" file="FMX.StdCtrls.pas" line="260"/>
      <field name="FNeedFitSize" type="Boolean" visibility="private" size="1" offset="1044" file="FMX.StdCtrls.pas" line="261"/>
      <field name="FFocusControl" type="TControl" visibility="private" size="4" offset="1048" file="FMX.StdCtrls.pas" line="262">
        <attributes>
          <attribute name="TObject"/>
        </attributes>
      </field>
      <procedure name="SetAutoSize" visibility="private" file="FMX.StdCtrls.pas" line="263">
        <parameters>
          <parameter name="Value" type="Boolean" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="FitSize" visibility="private" file="FMX.StdCtrls.pas" line="264">
      </procedure>
      <procedure name="SetFocusControl" visibility="private" file="FMX.StdCtrls.pas" line="265">
        <parameters>
          <parameter name="Value" type="TControl" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="Notification" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="267">
        <parameters>
          <parameter name="AComponent" type="TComponent"/>
          <parameter name="Operation" type="TOperation"/>
        </parameters>
      <devnotes><summary>
Forwards notification messages to all owned components.
FMX.StdCtrls.TLabel.Notification inherits from System.Classes.TComponent.Notification. All content below this line refers to System.Classes.TComponent.Notification.
Forwards notification messages to all owned components.
Do not call the Notification method in an application. Notification is called automatically when the component specified by AComponent is about to be inserted or removed, as specified by Operation. By default, components pass along the notification to their owned components, if any.
A component can, if needed, act on the notification that a component is being inserted or removed. For example, if a component has object fields or properties that contain references to other components, it can check the notifications of component removals and invalidate those references as needed.

Note: Notification is not called for components that are freed implicitly (because their Owner is freed).</summary></devnotes></procedure>
      <procedure name="MouseDown" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="268">
        <parameters>
          <parameter name="Button" type="TMouseButton"/>
          <parameter name="Shift" type="TShiftState"/>
          <parameter name="X" type="Single"/>
          <parameter name="Y" type="Single"/>
        </parameters>
      <devnotes><summary>
OnMouseDown event dispatcher. 
FMX.StdCtrls.TLabel.MouseDown inherits from FMX.Controls.TControl.MouseDown. All content below this line refers to FMX.Controls.TControl.MouseDown.
OnMouseDown event dispatcher. 
A control calls MouseDown in response to any of mouse-down messages, decoding the message parameters into the shift-key state and position, which it passes in the Shift, X, and Y parameters, respectively:

Button determines which mouse button is pressed: left, right, or middle.
Shift indicates which shift keys--SHIFT, CTRL, ALT, and CMD (only for Mac)--were down when the user pressed the mouse button.
X and Y are the pixel coordinates of the mouse pointer within the client area of the control. If Button is mbLeft, MouseDown sets PressedPosition as a TPointF(X,Y).
Override the protected MouseDown method to provide other responses when a mouse button is down while the cursor is over the control.

</summary></devnotes></procedure>
      <procedure name="MouseMove" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="269">
        <parameters>
          <parameter name="Shift" type="TShiftState"/>
          <parameter name="X" type="Single"/>
          <parameter name="Y" type="Single"/>
        </parameters>
      <devnotes><summary>
OnMouseMove event dispatcher. 
FMX.StdCtrls.TLabel.MouseMove inherits from FMX.Controls.TControl.MouseMove. All content below this line refers to FMX.Controls.TControl.MouseMove.
OnMouseMove event dispatcher. 
As the mouse cursor moves across a control, this method is called repeatedly. Each time it is called with the new coordinates that reflect the continuous path of the mouse cursor across the screen real estate covered by the control's visual representation:

Shift indicates which shift keys--SHIFT, CTRL, ALT, and CMD (only for Mac)--were down when the mouse cursor is over the control.
X and Y are the pixel coordinates of the mouse pointer within the client area of the control.
Override the protected MouseMove method to provide other responses when the mouse cursor moves over the control.
</summary></devnotes></procedure>
      <procedure name="MouseUp" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="270">
        <parameters>
          <parameter name="Button" type="TMouseButton"/>
          <parameter name="Shift" type="TShiftState"/>
          <parameter name="X" type="Single"/>
          <parameter name="Y" type="Single"/>
        </parameters>
      <devnotes><summary>
OnMouseUp event dispatcher. 
FMX.StdCtrls.TLabel.MouseUp inherits from FMX.Controls.TControl.MouseUp. All content below this line refers to FMX.Controls.TControl.MouseUp.
OnMouseUp event dispatcher. 
A control calls MouseUp in response to any of mouse-up messages, decoding the message parameters into the shift-key state and position, which it passes in the Shift, X and Y parameters, respectively: 

Button determines which mouse button was previously pressed: left, right, or middle.
Shift indicates which shift keys--SHIFT, CTRL, ALT, and CMD (only for Mac)--were down when the pressed mouse button is released.
X and Y are the pixel coordinates of the mouse pointer within the client area of the control.
Override the protected MouseUp method to provide other responses when the mouse button previously pressed is released while the cursor is over the control.
</summary></devnotes></procedure>
      <procedure name="DefineProperties" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="271">
        <parameters>
          <parameter name="Filer" type="TFiler"/>
        </parameters>
      <devnotes><summary>






Designates methods for storing an object's unpublished data on a stream such as a form file.
FMX.StdCtrls.TLabel.DefineProperties inherits from System.Classes.TComponent.DefineProperties. All content below this line refers to System.Classes.TComponent.DefineProperties.
Designates methods for storing an object's unpublished data on a stream such as a form file.
TComponent overrides the DefineProperties method defined in TPersistent to define &quot;fake&quot; Top and Left properties. These are defined so that components that are not controls can be manipulated at design time. However, the Top and Left properties are hidden, that is, they are not published, because only controls appear at run time.
DefineProperties is virtual; descendent classes can override it. When overriding DefineProperties, be aware that the Ancestor property of Filer might be set, and that this property can determine whether or not it is appropriate to write properties.
DefineProperties is called automatically as part of the component streaming system; do not call it directly.
</summary></devnotes></procedure>
      <function name="GetDefaultSize" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="272">
        <parameters>
          <retval type="TSizeF"/>
        </parameters>
      <devnotes><summary>
Getter of DefaultSize.
FMX.StdCtrls.TLabel.GetDefaultSize inherits from FMX.Controls.TControl.GetDefaultSize. All content below this line refers to FMX.Controls.TControl.GetDefaultSize.
Getter of DefaultSize.


</summary></devnotes></function>
      <procedure name="Resize" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="273">
      <devnotes><summary>
OnResize event dispatcher. 
FMX.StdCtrls.TLabel.Resize inherits from FMX.Controls.TControl.Resize. All content below this line refers to FMX.Controls.TControl.Resize.
OnResize event dispatcher. 
A control calls Resize when the dimensions of the control change.
Derived classes can override the protected Resize method to implement specific responses to control resizing.
</summary></devnotes></procedure>
      <procedure name="DoChanged" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="274">
      <devnotes><summary>
Updates the representation of the text that is displayed on the control.
FMX.StdCtrls.TLabel.DoChanged inherits from FMX.StdCtrls.TPresentedTextControl.DoChanged. All content below this line refers to FMX.StdCtrls.TPresentedTextControl.DoChanged.
Updates the representation of the text that is displayed on the control.
Call this method to apply your changes to the text representation.
</summary></devnotes></procedure>
      <procedure name="ApplyStyle" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="275">
      <devnotes><summary>


Customizes styles in complex objects.
FMX.StdCtrls.TLabel.ApplyStyle inherits from FMX.Controls.TStyledControl.ApplyStyle. All content below this line refers to FMX.Controls.TStyledControl.ApplyStyle.
Customizes styles in complex objects.
TStyledControl descendants override it to apply styles in concordance with their primitive components.      
Do not call ApplyStyle explicitly in an application. It is called by the ApplyStyleLookup method when object styles are updated.
For an example of an ApplyStyle implementation, see &quot;TCalloutPanel:Style Contracts&quot; in FireMonkey Component Design.
</summary></devnotes></procedure>
      <function name="GetTextSettingsClass" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="276">
        <parameters>
          <retval type="TTextSettingsInfo.TCustomTextSettingsClass"/>
        </parameters>
      <devnotes><summary>
Returns the class type that instance represents the used text settings.
FMX.StdCtrls.TLabel.GetTextSettingsClass inherits from FMX.StdCtrls.TPresentedTextControl.GetTextSettingsClass. All content below this line refers to FMX.StdCtrls.TPresentedTextControl.GetTextSettingsClass.
Returns the class type that instance represents the used text settings.
GetTextSettingsClass returns the TTextSettingsInfo.TCustomTextSettingsClass (or its descendant)  class reference. An instance of such class provides the DefaultTextSettings,   TextSettings, StyledSettings, ResultingTextSettings, and other properties handling the text representation settings of a control. 
You can override the method in descendant classes to modify the default behavior.
Typical implementations of GetTextSettingsClass returns the class declaring properties like the Font, FontColor, HorzAlign, and WordWrap. Some of these properties can be declared as published to be editable in the Object Inspector.

 See Also
FMX.Controls.TTextSettingsInfo
FMX.Controls.TTextSettingsInfo.TCustomTextSettingsClass
FMX.Controls.TTextSettingsInfo.DefaultTextSettings
FMX.Controls.TTextSettingsInfo.TextSettings
FMX.Controls.TTextSettingsInfo.StyledSettings
FMX.Controls.TTextSettingsInfo.ResultingTextSettings

</summary></devnotes></function>
      <procedure name="TriggerAcceleratorKey" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="279">
        <devnotes><summary>
Allows the object to perform an action when the accelerator key is pressed.
FMX.StdCtrls.TLabel.TriggerAcceleratorKey inherits from FMX.AcceleratorKey.IAcceleratorKeyReceiver.TriggerAcceleratorKey. All content below this line refers to FMX.AcceleratorKey.IAcceleratorKeyReceiver.TriggerAcceleratorKey.
Allows the object to perform an action when the accelerator key is pressed.
Use TriggerAcceleratorKey to trigger an action as a response to the accelerator key. For example, use TriggerAcceleratorKey to set focus to the acceleration key receiver control.

 See Also
FMX.AcceleratorKey.IAcceleratorKeyReceiver.CanTriggerAcceleratorKey

</summary></devnotes>
      </procedure>
      <constructor name="Create" visibility="public" file="FMX.StdCtrls.pas" line="281">
        <parameters>
          <parameter name="AOwner" type="TComponent"/>
        </parameters>
      <devnotes><summary>


Creates a new instance of TPresentedControl.
FMX.StdCtrls.TLabel.Create inherits from FMX.Controls.Presentation.TPresentedControl.Create. All content below this line refers to FMX.Controls.Presentation.TPresentedControl.Create.
Creates a new instance of TPresentedControl.
AOwner takes ownership of the control and becomes responsible of destroying the control once the control is no longer necessary.
The control constructor creates a data model for the control. DefineModelClass determines the default class of data model for each subclass of TPresentedControl.
Create also sets the value of the CanUseDefaultPresentation property to True.

 See Also
System.Classes.TComponent.Create
FMX.Controls.Presentation.TPresentedControl.Model
FMX.Controls.Presentation.TPresentedControl.DefineModelClass
FMX.Controls.Presentation.TPresentedControl.Destroy
FMX.Controls.Presentation.TPresentedControl.CanUseDefaultPresentation

</summary></devnotes></constructor>
      <procedure name="SetNewScene" visibility="public" procflags="override" file="FMX.StdCtrls.pas" line="282">
        <parameters>
          <parameter name="AScene" type="IScene"/>
        </parameters>
      <devnotes><summary>
Sets a new Scene for the current control.
Sets a new Scene for the current control.
FMX.StdCtrls.TLabel.SetNewScene inherits from FMX.Controls.TControl.SetNewScene. All content below this line refers to FMX.Controls.TControl.SetNewScene.
Sets a new Scene for the current control.
AScene specifies the new scene. If AScene is empty, SetNewScene does nothing.
SetNewScene sets the same scene for the control's children.
</summary></devnotes></procedure>
      <property name="IsPressed" visibility="public" read="FIsPressed" type="Boolean" file="FMX.StdCtrls.pas" line="284"><devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></property>
      <property name="Font" visibility="public" read="GetFont" write="SetFont" type="TFont" hoisted="true" file="FMX.StdCtrls.pas" line="285"/>
      <property name="FontColor" visibility="public" read="GetFontColor" write="SetFontColor" type="TAlphaColor" default="-16777216" hoisted="true" file="FMX.StdCtrls.pas" line="286"/>
      <property name="TextAlign" visibility="public" read="GetTextAlign" write="SetTextAlign" type="TTextAlign" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="287"/>
      <property name="VertTextAlign" visibility="public" read="GetVertTextAlign" write="SetVertTextAlign" type="TTextAlign" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="288"/>
      <property name="WordWrap" visibility="public" read="GetWordWrap" write="SetWordWrap" type="Boolean" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="289"/>
      <property name="Trimming" visibility="public" read="GetTrimming" write="SetTrimming" type="TTextTrimming" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="290"/>
      <property name="Action" visibility="published" read="GetAction" write="SetAction" type="TBasicAction" hoisted="true" file="FMX.StdCtrls.pas" line="292"/>
      <property name="Align" visibility="published" read="FAlign" write="SetAlign" type="TAlignLayout" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="293"/>
      <property name="Anchors" visibility="published" read="FAnchors" write="SetAnchors" stored="IsAnchorsStored" type="TAnchors" hoisted="true" file="FMX.StdCtrls.pas" line="294"/>
      <property name="AutoSize" visibility="published" read="FAutoSize" write="SetAutoSize" type="Boolean" default="0" file="FMX.StdCtrls.pas" line="295"><devnotes><summary>
Specifies whether TLabel control is auto-sized based on the length of the text.
Set the AutoSize property to True to automatically resize the TLabel control according to the length of the Text.
Set the AutoSize property to False to lock autoresize of the TLabel control.

Tip:  The size of the TLabel control readjusts when the Font property changes.
When both AutoSize and WordWrap are set to True, the label's width does not change, and the height increases to show the full Text. So, the text might occupy several lines.
When AutoSize  is set to True and WordWrap is set to False, the label's width changes to display the text in one line, while the height does not change.</summary></devnotes></property>
      <property name="AutoTranslate" visibility="published" read="FAutoTranslate" write="FAutoTranslate" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="296"/>
      <property name="ClipChildren" visibility="published" read="FClipChildren" write="SetClipChildren" type="Boolean" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="297"/>
      <property name="ClipParent" visibility="published" read="FClipParent" write="FClipParent" type="Boolean" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="298"/>
      <property name="ControlType" visibility="published" read="GetControlType" write="SetControlType" type="TControlType" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="299"/>
      <property name="Cursor" visibility="published" read="GetCursor" write="SetCursor" type="TCursor" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="300"/>
      <property name="DragMode" visibility="published" read="GetDragMode" write="SetDragMode" type="TDragMode" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="301"/>
      <property name="EnableDragHighlight" visibility="published" read="FEnableDragHighlight" write="FEnableDragHighlight" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="302"/>
      <property name="Enabled" visibility="published" read="FEnabled" write="SetEnabled" stored="EnabledStored" type="Boolean" hoisted="true" file="FMX.StdCtrls.pas" line="303"/>
      <property name="StyledSettings" visibility="published" read="GetStyledSettings" write="SetStyledSettings" stored="StyledSettingsStored" type="TStyledSettings" hoisted="true" file="FMX.StdCtrls.pas" line="304"/>
      <property name="Locked" visibility="published" read="FLocked" write="SetLocked" type="Boolean" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="305"/>
      <property name="FocusControl" visibility="published" read="FFocusControl" write="SetFocusControl" type="TControl" file="FMX.StdCtrls.pas" line="309">
        <devnotes><summary>
Keeps the control that receives the focus when the accelerator key of the current label control is used. 
Links the label control with another control. 
If the Text property includes an accelerator key, the control specified by FocusControl receives focus when the accelerator is pressed. 
</summary></devnotes>
      </property>
      <property name="Height" visibility="published" read="GetHeight" write="SetHeight" stored="False" type="Single" hoisted="true" file="FMX.StdCtrls.pas" line="310"/>
      <property name="HelpContext" visibility="published" read="FHelpContext" write="SetHelpContext" stored="IsHelpContextStored" type="THelpContext" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="311"/>
      <property name="HelpKeyword" visibility="published" read="FHelpKeyword" write="SetHelpKeyword" stored="IsHelpContextStored" type="string" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="312"/>
      <property name="HelpType" visibility="published" read="FHelpType" write="FHelpType" type="THelpType" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="313"/>
      <property name="Hint" visibility="published" read="FHint" write="SetHint" stored="HintStored" type="string" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="314"/>
      <property name="HitTest" visibility="published" read="FHitTest" write="SetHitTest" type="Boolean" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="315"/>
      <property name="Padding" visibility="published" read="GetPadding" write="SetPadding" type="TBounds" hoisted="true" file="FMX.StdCtrls.pas" line="316"/>
      <property name="Opacity" visibility="published" read="FOpacity" write="SetOpacity" stored="IsOpacityStored" type="Single" hoisted="true" file="FMX.StdCtrls.pas" line="317"/>
      <property name="Margins" visibility="published" read="GetMargins" write="SetMargins" type="TBounds" hoisted="true" file="FMX.StdCtrls.pas" line="318"/>
      <property name="PopupMenu" visibility="published" read="FPopupMenu" write="SetPopupMenu" stored="IsPopupMenuStored" type="TCustomPopupMenu" hoisted="true" file="FMX.StdCtrls.pas" line="319"/>
      <property name="Position" visibility="published" read="FPosition" write="SetPosition" stored="IsPositionStored" type="TPosition" hoisted="true" file="FMX.StdCtrls.pas" line="320"/>
      <property name="RotationAngle" visibility="published" read="GetRotationAngle" write="SetRotationAngle" type="Single" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="321"/>
      <property name="RotationCenter" visibility="published" read="GetRotationCenter" write="SetRotationCenter" type="TPosition" hoisted="true" file="FMX.StdCtrls.pas" line="322"/>
      <property name="Scale" visibility="published" read="GetScale" write="SetScale" type="TPosition" hoisted="true" file="FMX.StdCtrls.pas" line="323"/>
      <property name="Size" visibility="published" read="FSize" write="SetSize" stored="IsSizeStored" type="TControlSize" hoisted="true" file="FMX.StdCtrls.pas" line="324"/>
      <property name="StyleLookup" visibility="published" read="FStyleLookup" write="SetStyleLookup" type="string" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="325"/>
      <property name="TextSettings" visibility="published" read="GetTextSettings" write="SetTextSettings" type="TTextSettings" hoisted="true" file="FMX.StdCtrls.pas" line="326"/>
      <property name="Text" visibility="published" read="GetText" write="SetText" stored="TextStored" type="string" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="327"/>
      <property name="TouchTargetExpansion" visibility="published" read="FTouchTargetExpansion" write="SetTouchTargetExpansion" type="TBounds" hoisted="true" file="FMX.StdCtrls.pas" line="328"/>
      <property name="Visible" visibility="published" read="FVisible" write="SetVisible" stored="VisibleStored" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="329"/>
      <property name="Width" visibility="published" read="GetWidth" write="SetWidth" stored="False" type="Single" hoisted="true" file="FMX.StdCtrls.pas" line="330"/>
      <property name="ParentShowHint" visibility="published" read="FParentShowHint" write="SetParentShowHint" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="331"/>
      <property name="ShowHint" visibility="published" read="FShowHint" write="SetShowHint" stored="IsShowHintStored" type="Boolean" hoisted="true" file="FMX.StdCtrls.pas" line="332"/>
      <property name="TabOrder" visibility="published" read="GetTabOrder" write="SetTabOrder" type="TTabOrder" default="-1" hoisted="true" file="FMX.StdCtrls.pas" line="333"/>
      <property name="TabStop" visibility="published" read="GetTabStop" write="SetTabStop" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="334"/>
      <event name="OnApplyStyleLookup" visibility="published" read="FOnApplyStyleLookup" write="FOnApplyStyleLookup" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="336"/>
      <event name="OnDragEnter" visibility="published" read="FOnDragEnter" write="FOnDragEnter" type="TDragEnterEvent" hoisted="true" file="FMX.StdCtrls.pas" line="338"/>
      <event name="OnDragLeave" visibility="published" read="FOnDragLeave" write="FOnDragLeave" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="339"/>
      <event name="OnDragOver" visibility="published" read="FOnDragOver" write="FOnDragOver" type="TDragOverEvent" hoisted="true" file="FMX.StdCtrls.pas" line="340"/>
      <event name="OnDragDrop" visibility="published" read="FOnDragDrop" write="FOnDragDrop" type="TDragDropEvent" hoisted="true" file="FMX.StdCtrls.pas" line="341"/>
      <event name="OnDragEnd" visibility="published" read="FOnDragEnd" write="FOnDragEnd" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="342"/>
      <event name="OnKeyDown" visibility="published" read="FOnKeyDown" write="FOnKeyDown" type="TKeyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="344"/>
      <event name="OnKeyUp" visibility="published" read="FOnKeyUp" write="FOnKeyUp" type="TKeyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="345"/>
      <event name="OnCanFocus" visibility="published" read="FOnCanFocus" write="FOnCanFocus" type="TCanFocusEvent" hoisted="true" file="FMX.StdCtrls.pas" line="347"/>
      <event name="OnClick" visibility="published" read="FOnClick" write="SetOnClick" stored="OnClickStored" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="348"/>
      <event name="OnDblClick" visibility="published" read="FOnDblClick" write="FOnDblClick" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="349"/>
      <event name="OnEnter" visibility="published" read="FOnEnter" write="FOnEnter" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="351"/>
      <event name="OnExit" visibility="published" read="FOnExit" write="FOnExit" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="352"/>
      <event name="OnMouseDown" visibility="published" read="FOnMouseDown" write="FOnMouseDown" type="TMouseEvent" hoisted="true" file="FMX.StdCtrls.pas" line="353"/>
      <event name="OnMouseMove" visibility="published" read="FOnMouseMove" write="FOnMouseMove" type="TMouseMoveEvent" hoisted="true" file="FMX.StdCtrls.pas" line="354"/>
      <event name="OnMouseUp" visibility="published" read="FOnMouseUp" write="FOnMouseUp" type="TMouseEvent" hoisted="true" file="FMX.StdCtrls.pas" line="355"/>
      <event name="OnMouseWheel" visibility="published" read="FOnMouseWheel" write="FOnMouseWheel" type="TMouseWheelEvent" hoisted="true" file="FMX.StdCtrls.pas" line="356"/>
      <event name="OnMouseEnter" visibility="published" read="FOnMouseEnter" write="FOnMouseEnter" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="357"/>
      <event name="OnMouseLeave" visibility="published" read="FOnMouseLeave" write="FOnMouseLeave" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="358"/>
      <event name="OnPainting" visibility="published" read="FOnPainting" write="FOnPainting" type="TOnPaintEvent" hoisted="true" file="FMX.StdCtrls.pas" line="360"/>
      <event name="OnPaint" visibility="published" read="FOnPaint" write="FOnPaint" type="TOnPaintEvent" hoisted="true" file="FMX.StdCtrls.pas" line="361"/>
      <event name="OnResize" visibility="published" read="FOnResize" write="FOnResize" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="362"/>
      <event name="OnResized" visibility="published" read="FOnResized" write="FOnResized" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="363"/>
    </members>
  <devnotes><summary>
Represents a graphical control used to display text in FireMonkey forms.
A TLabel control shows a text. The user cannot edit this text. A TLabel control can be used to label another control and can set focus to this control when the user presses an accelerator key assigned to the TLabel control.
TLabel controls cannot receive focus.
The Text property can be used to set an accelerator key to a TLabel control. The FocusControl property keeps the control that receives the focus when the accelerator key is pressed. 
To add an object to a form that displays text that a user can scroll or edit, use a TEdit.
</summary></devnotes></class>
  <class name="TCustomButton" file="FMX.StdCtrls.pas" line="368">
    
    <interfaces>
      <implements name="IGlyph"/>
    </interfaces>
    <members>
      <field name="FPressing" type="Boolean" visibility="private" size="1" offset="1040" file="FMX.StdCtrls.pas" line="370"/>
      <field name="FIsPressed" type="Boolean" visibility="private" size="1" offset="1041" file="FMX.StdCtrls.pas" line="371"/>
      <field name="FModalResult" type="TModalResult" visibility="private" size="4" offset="1044" file="FMX.StdCtrls.pas" line="372"/>
      <field name="FStaysPressed" type="Boolean" visibility="private" size="1" offset="1048" file="FMX.StdCtrls.pas" line="373"/>
      <field name="FRepeatTimer" type="TTimer" visibility="private" size="4" offset="1052" file="FMX.StdCtrls.pas" line="374"/>
      <field name="FRepeat" type="Boolean" visibility="private" size="1" offset="1056" file="FMX.StdCtrls.pas" line="375"/>
      <field name="FTintColor" type="TAlphaColor" visibility="private" size="4" offset="1060" file="FMX.StdCtrls.pas" line="376"/>
      <field name="FTintObject" type="ITintedObject" visibility="private" size="4" offset="1064" file="FMX.StdCtrls.pas" line="377"/>
      <field name="FIconTintColor" type="TAlphaColor" visibility="private" size="4" offset="1068" file="FMX.StdCtrls.pas" line="378"/>
      <field name="FIconTintObject" type="ITintedObject" visibility="private" size="4" offset="1072" file="FMX.StdCtrls.pas" line="379"/>
      <field name="FIcon" type="TControl" visibility="private" size="4" offset="1076" file="FMX.StdCtrls.pas" line="380"/>
      <field name="FOldIconVisible" type="Boolean" visibility="private" size="1" offset="1080" file="FMX.StdCtrls.pas" line="381"/>
      <field name="FGlyph" type="TGlyph" visibility="private" size="4" offset="1084" file="FMX.StdCtrls.pas" line="382"/>
      <field name="FGlyphSize" type="TSizeF" visibility="private" size="8" offset="1088" file="FMX.StdCtrls.pas" line="383"/>
      <field name="FImageLink" type="TGlyphImageLink" visibility="private" size="4" offset="1096" file="FMX.StdCtrls.pas" line="384"/>
      <procedure name="SetTintColor" visibility="private" file="FMX.StdCtrls.pas" line="385">
        <parameters>
          <parameter name="Value" type="TAlphaColor" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="IsTintColorStored" visibility="private" file="FMX.StdCtrls.pas" line="386">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <function name="IsIconTintColorStored" visibility="private" file="FMX.StdCtrls.pas" line="387">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <procedure name="SetIconTintColor" visibility="private" file="FMX.StdCtrls.pas" line="388">
        <parameters>
          <parameter name="Value" type="TAlphaColor" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="GetImages" visibility="private" file="FMX.StdCtrls.pas" line="389">
        <parameters>
          <retval type="TCustomImageList">
            <devnotes>
               <summary> List of images. Base class that used in fire monkey without published properties </summary>
            </devnotes>
          </retval>
        </parameters>
      </function>
      <procedure name="SetImages" visibility="private" file="FMX.StdCtrls.pas" line="390">
        <parameters>
          <parameter name="Value" type="TCustomImageList" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="GetImageIndex" visibility="private" file="FMX.StdCtrls.pas" line="392">
        <parameters>
          <retval type="TImageIndex"/>
        </parameters>
      </function>
      <procedure name="SetImageIndex" visibility="private" file="FMX.StdCtrls.pas" line="393">
        <parameters>
          <parameter name="Value" type="TImageIndex" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="GetImageList" visibility="private" procflags="inline" file="FMX.StdCtrls.pas" line="394">
        <parameters>
          <retval type="TBaseImageList"/>
        </parameters>
      </function>
      <procedure name="SetImageList" visibility="private" file="FMX.StdCtrls.pas" line="395">
        <parameters>
          <parameter name="Value" type="TBaseImageList" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="UpdateGlyphSize" visibility="private" file="FMX.StdCtrls.pas" line="398">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <procedure name="ActionChange" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="400">
        <parameters>
          <parameter name="Sender" type="TBasicAction"/>
          <parameter name="CheckDefaults" type="Boolean"/>
        </parameters>
      <devnotes><summary>


Sends a message to the presentation layer of the presentation proxy when the Action property changes.
FMX.StdCtrls.TCustomButton.ActionChange inherits from FMX.Controls.Presentation.TPresentedControl.ActionChange. All content below this line refers to FMX.Controls.Presentation.TPresentedControl.ActionChange.
Sends a message to the presentation layer of the presentation proxy when the Action property changes.
The presentation layer receives a message with PM_ACTION_CHANGE as MsgID and an instance of TActionInfo as Value with the following data:



Property

Data



Value.Sender



ASender




Value.CheckDefaults



ACheckDefaults


 See Also
FMX.Controls.TControl.ActionChange
FMX.Controls.Presentation.TPresentedControl.PresentationProxy
FMX.Presentation.Messages.TMessageSender.SendMessage
FMX.Presentation.Messages.TMessageSender.Receiver
System.TObject.Dispatch
FMX.Presentation.Messages.TDispatchMessageWithValue
FMX.Presentation.Messages.TDispatchMessageWithValue.MsgID
FMX.Presentation.Messages.TDispatchMessageWithValue.Value
FMX.Controls.Presentation.TActionInfo
FMX.Controls.Presentation.TActionInfo.Sender
FMX.Controls.Presentation.TActionInfo.CheckDefaults

</summary></devnotes></procedure>
      <function name="IsPressedStored" visibility="protected" procflags="virtual" file="FMX.StdCtrls.pas" line="401">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></function>
      <procedure name="RestoreButtonState" visibility="protected" file="FMX.StdCtrls.pas" line="402">
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="ApplyTriggers" visibility="protected" procflags="virtual" file="FMX.StdCtrls.pas" line="403">
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="SetIsPressed" visibility="protected" procflags="virtual" file="FMX.StdCtrls.pas" line="404">
        <parameters>
          <parameter name="Value" type="Boolean" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="SetStaysPressed" visibility="protected" procflags="virtual" file="FMX.StdCtrls.pas" line="405">
        <parameters>
          <parameter name="Value" type="Boolean" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="Click" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="406">
      <devnotes><summary>
Responds to user clicks.
Click is an event handler for the OnClick event. It is automatically called when the left mouse button is pressed and released with the pointer over the control.
Call Click in applications to simulate a mouse OnClick event.  
If ModalResult is defined, the ModalResult property of its parent form is set to the same value as the button's ModalResult property. 
</summary></devnotes></procedure>
      <procedure name="DblClick" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="407">
      <devnotes><summary>
Responds to user double-clicks.
DblClick is an event handler for the OnDblClick event. It is automatically called when the left mouse button is pressed and released twice consecutively with the pointer over the control. 
Call DblClick in applications to simulate a mouse OnDblClick event.  
If ModalResult is defined, the ModalResult property of its parent form is set to the same value as the button's ModalResult property. 
</summary></devnotes></procedure>
      <procedure name="ApplyStyle" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="408">
      <devnotes><summary>


Customizes styles in complex objects.
FMX.StdCtrls.TCustomButton.ApplyStyle inherits from FMX.Controls.TStyledControl.ApplyStyle. All content below this line refers to FMX.Controls.TStyledControl.ApplyStyle.
Customizes styles in complex objects.
TStyledControl descendants override it to apply styles in concordance with their primitive components.      
Do not call ApplyStyle explicitly in an application. It is called by the ApplyStyleLookup method when object styles are updated.
For an example of an ApplyStyle implementation, see &quot;TCalloutPanel:Style Contracts&quot; in FireMonkey Component Design.
</summary></devnotes></procedure>
      <procedure name="FreeStyle" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="409">
      <devnotes><summary>


Frees the style of TStyledControl.
FMX.StdCtrls.TCustomButton.FreeStyle inherits from FMX.Controls.TStyledControl.FreeStyle. All content below this line refers to FMX.Controls.TStyledControl.FreeStyle.
Frees the style of TStyledControl.
Override it to free additional component-specific style resources.
</summary></devnotes></procedure>
      <procedure name="ToggleStaysPressed" visibility="protected" procflags="virtual" file="FMX.StdCtrls.pas" line="410">
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="DoRealign" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="411">
      <devnotes><summary>
Sends a PM_REALIGN message to the presentation layer through its presentation proxy.
FMX.StdCtrls.TCustomButton.DoRealign inherits from FMX.Controls.Presentation.TPresentedControl.DoRealign. All content below this line refers to FMX.Controls.Presentation.TPresentedControl.DoRealign.
Sends a PM_REALIGN message to the presentation layer through its presentation proxy.
For details about the circumstances that trigger this procedure, see TControl.DoRealign.

 See Also
FMX.Controls.Presentation.TPresentedControl.PresentationProxy
FMX.Presentation.Messages.TMessageSender.SendMessage
FMX.Controls.TControl.DoRealign

</summary></devnotes></procedure>
      <procedure name="DoRepeatTimer" visibility="protected" file="FMX.StdCtrls.pas" line="412">
        <parameters>
          <parameter name="Sender" type="TObject"/>
        </parameters>
      <devnotes><summary>
Internally executes every 100 milliseconds to perform the OnClick event, if the RepeatClick property is True.
If the RepeatClick property is True, each time 100 milliseconds pass, DoRepeatDelayTimer is executed and the DoRepeatTimer method is internally called to perform this button's OnClick event.
</summary></devnotes></procedure>
      <procedure name="DoRepeatDelayTimer" visibility="protected" file="FMX.StdCtrls.pas" line="413">
        <parameters>
          <parameter name="Sender" type="TObject"/>
        </parameters>
      <devnotes><summary>
Internally executes every 100 milliseconds if the RepeatClick property is True.
If the RepeatClick property is True, each time 100 milliseconds pass, DoRepeatDelayTimer is executed and the DoRepeatTimer method is internally called to perform the button's OnClick event.
</summary></devnotes></procedure>
      <function name="GetData" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="414">
        <parameters>
          <retval type="TValue">
            <attributes>
              <attribute name="HPPGENAttribute"/>
            </attributes>
          </retval>
        </parameters>
      <devnotes><summary>


Protected getter implementation for the Data property.
FMX.StdCtrls.TCustomButton.GetData inherits from FMX.Types.TFmxObject.GetData. All content below this line refers to FMX.Types.TFmxObject.GetData.
Protected getter implementation for the Data property.
</summary></devnotes></function>
      <procedure name="SetData" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="415">
        <parameters>
          <parameter name="Value" type="TValue" paramflags="const"/>
        </parameters>
      <devnotes><summary>


Protected setter implementation for the Data property.
FMX.StdCtrls.TCustomButton.SetData inherits from FMX.Types.TFmxObject.SetData. All content below this line refers to FMX.Types.TFmxObject.SetData.
Protected setter implementation for the Data property.
</summary></devnotes></procedure>
      <procedure name="MouseDown" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="416">
        <parameters>
          <parameter name="Button" type="TMouseButton"/>
          <parameter name="Shift" type="TShiftState"/>
          <parameter name="X" type="Single"/>
          <parameter name="Y" type="Single"/>
        </parameters>
      <devnotes><summary>
OnMouseDown event dispatcher. 
FMX.StdCtrls.TCustomButton.MouseDown inherits from FMX.Controls.TControl.MouseDown. All content below this line refers to FMX.Controls.TControl.MouseDown.
OnMouseDown event dispatcher. 
A control calls MouseDown in response to any of mouse-down messages, decoding the message parameters into the shift-key state and position, which it passes in the Shift, X, and Y parameters, respectively:

Button determines which mouse button is pressed: left, right, or middle.
Shift indicates which shift keys--SHIFT, CTRL, ALT, and CMD (only for Mac)--were down when the user pressed the mouse button.
X and Y are the pixel coordinates of the mouse pointer within the client area of the control. If Button is mbLeft, MouseDown sets PressedPosition as a TPointF(X,Y).
Override the protected MouseDown method to provide other responses when a mouse button is down while the cursor is over the control.

</summary></devnotes></procedure>
      <procedure name="MouseMove" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="417">
        <parameters>
          <parameter name="Shift" type="TShiftState"/>
          <parameter name="X" type="Single"/>
          <parameter name="Y" type="Single"/>
        </parameters>
      <devnotes><summary>
OnMouseMove event dispatcher. 
FMX.StdCtrls.TCustomButton.MouseMove inherits from FMX.Controls.TControl.MouseMove. All content below this line refers to FMX.Controls.TControl.MouseMove.
OnMouseMove event dispatcher. 
As the mouse cursor moves across a control, this method is called repeatedly. Each time it is called with the new coordinates that reflect the continuous path of the mouse cursor across the screen real estate covered by the control's visual representation:

Shift indicates which shift keys--SHIFT, CTRL, ALT, and CMD (only for Mac)--were down when the mouse cursor is over the control.
X and Y are the pixel coordinates of the mouse pointer within the client area of the control.
Override the protected MouseMove method to provide other responses when the mouse cursor moves over the control.
</summary></devnotes></procedure>
      <procedure name="MouseUp" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="418">
        <parameters>
          <parameter name="Button" type="TMouseButton"/>
          <parameter name="Shift" type="TShiftState"/>
          <parameter name="X" type="Single"/>
          <parameter name="Y" type="Single"/>
        </parameters>
      <devnotes><summary>
OnMouseUp event dispatcher. 
FMX.StdCtrls.TCustomButton.MouseUp inherits from FMX.Controls.TControl.MouseUp. All content below this line refers to FMX.Controls.TControl.MouseUp.
OnMouseUp event dispatcher. 
A control calls MouseUp in response to any of mouse-up messages, decoding the message parameters into the shift-key state and position, which it passes in the Shift, X and Y parameters, respectively: 

Button determines which mouse button was previously pressed: left, right, or middle.
Shift indicates which shift keys--SHIFT, CTRL, ALT, and CMD (only for Mac)--were down when the pressed mouse button is released.
X and Y are the pixel coordinates of the mouse pointer within the client area of the control.
Override the protected MouseUp method to provide other responses when the mouse button previously pressed is released while the cursor is over the control.
</summary></devnotes></procedure>
      <procedure name="KeyDown" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="419">
        <parameters>
          <parameter name="Key" type="Word" paramflags="var"/>
          <parameter name="KeyChar" type="Char" paramflags="var"/>
          <parameter name="Shift" type="TShiftState"/>
        </parameters>
      <devnotes><summary>
Sends a PM_KEYDOWN message to the presentation layer through its presentation proxy when a key is pressed down while your presented control has the focus.
FMX.StdCtrls.TCustomButton.KeyDown inherits from FMX.Controls.Presentation.TPresentedControl.KeyDown. All content below this line refers to FMX.Controls.Presentation.TPresentedControl.KeyDown.
Sends a PM_KEYDOWN message to the presentation layer through its presentation proxy when a key is pressed down while your presented control has the focus.
The message includes a TKeyInfo record that contains the data of the parameters (AKey, AKeyChar, AShift).

 See Also
FMX.Controls.Presentation.TPresentedControl.PresentationProxy
FMX.Presentation.Messages.TMessageSender.SendMessage
FMX.Controls.Presentation.TKeyInfo
FMX.Controls.TControl.KeyDown
FMX.Forms.TCommonCustomForm.KeyDown
FMX.Controls.Presentation.TPresentedControl.KeyUp

</summary></devnotes></procedure>
      <function name="GetDefaultSize" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="420">
        <parameters>
          <retval type="TSizeF"/>
        </parameters>
      <devnotes><summary>
Getter of DefaultSize.
FMX.StdCtrls.TCustomButton.GetDefaultSize inherits from FMX.Controls.TControl.GetDefaultSize. All content below this line refers to FMX.Controls.TControl.GetDefaultSize.
Getter of DefaultSize.


</summary></devnotes></function>
      <function name="GetDefaultTouchTargetExpansion" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="421">
        <parameters>
          <retval type="TRectF"/>
        </parameters>
      <devnotes><summary>


Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></function>
      <function name="GetTextSettingsClass" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="422">
        <parameters>
          <retval type="TTextSettingsInfo.TCustomTextSettingsClass"/>
        </parameters>
      <devnotes><summary>
Returns the class type that instance represents the used text settings.
FMX.StdCtrls.TCustomButton.GetTextSettingsClass inherits from FMX.StdCtrls.TPresentedTextControl.GetTextSettingsClass. All content below this line refers to FMX.StdCtrls.TPresentedTextControl.GetTextSettingsClass.
Returns the class type that instance represents the used text settings.
GetTextSettingsClass returns the TTextSettingsInfo.TCustomTextSettingsClass (or its descendant)  class reference. An instance of such class provides the DefaultTextSettings,   TextSettings, StyledSettings, ResultingTextSettings, and other properties handling the text representation settings of a control. 
You can override the method in descendant classes to modify the default behavior.
Typical implementations of GetTextSettingsClass returns the class declaring properties like the Font, FontColor, HorzAlign, and WordWrap. Some of these properties can be declared as published to be editable in the Object Inspector.

 See Also
FMX.Controls.TTextSettingsInfo
FMX.Controls.TTextSettingsInfo.TCustomTextSettingsClass
FMX.Controls.TTextSettingsInfo.DefaultTextSettings
FMX.Controls.TTextSettingsInfo.TextSettings
FMX.Controls.TTextSettingsInfo.StyledSettings
FMX.Controls.TTextSettingsInfo.ResultingTextSettings

</summary></devnotes></function>
      <property name="TintColor" visibility="protected" read="FTintColor" write="SetTintColor" stored="IsTintColorStored" type="TAlphaColor" file="FMX.StdCtrls.pas" line="423"><devnotes><summary>
Allows you to apply a tint to a button component. 
This property is a value of the TAlphaColor type.

Note: Some buttons might not have the tint support. In the Object Inspector, the RAD Studio IDE automatically displays/hides the TintColor property when you change the button's StyleLookup property. Currently, the TintColor property is only available for mobile platforms (iOS and Android). For more information, see Using Styled and Colored Buttons on Target Platforms.</summary></devnotes></property>
      <property name="TintObject" visibility="protected" read="FTintObject" type="ITintedObject" file="FMX.StdCtrls.pas" line="424"><devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></property>
      <property name="IconTintColor" visibility="protected" read="FIconTintColor" write="SetIconTintColor" stored="IsIconTintColorStored" type="TAlphaColor" file="FMX.StdCtrls.pas" line="425"><devnotes><summary>
Allows you to apply a tint to a button icon. 
This property is a value of the TAlphaColor type.

Note: Some buttons might not have the tint support. In the Object Inspector, the IDE automatically displays/hides the IconTintColor property as appropriate when you change the button's StyleLookup property. Currently, the IconTintColor property is only available for mobile platforms (iOS and Android). For more information, see Using Styled and Colored Buttons on Target Platforms.</summary></devnotes></property>
      <property name="IconTintObject" visibility="protected" read="FIconTintObject" type="ITintedObject" file="FMX.StdCtrls.pas" line="426"><devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></property>
      <procedure name="ImagesChanged" visibility="protected" procflags="virtual" file="FMX.StdCtrls.pas" line="427">
      <devnotes><summary>
Should be called when the component needs to redraw the image.
ImagesChanged should be called
when you change the Images reference to the TCustomImageList object or 
the object itself or when you change the ImageIndex property.
</summary></devnotes></procedure>
      <function name="ImageIndexStored" visibility="protected" procflags="virtual" file="FMX.StdCtrls.pas" line="430">
        <devnotes><summary>
Returns True when the ImageIndex property needs to be stored in the fmx-file.
</summary></devnotes>
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <procedure name="TriggerAcceleratorKey" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="433">
        <devnotes><summary>
Allows the object to perform an action when the accelerator key is pressed.
FMX.StdCtrls.TCustomButton.TriggerAcceleratorKey inherits from FMX.AcceleratorKey.IAcceleratorKeyReceiver.TriggerAcceleratorKey. All content below this line refers to FMX.AcceleratorKey.IAcceleratorKeyReceiver.TriggerAcceleratorKey.
Allows the object to perform an action when the accelerator key is pressed.
Use TriggerAcceleratorKey to trigger an action as a response to the accelerator key. For example, use TriggerAcceleratorKey to set focus to the acceleration key receiver control.

 See Also
FMX.AcceleratorKey.IAcceleratorKeyReceiver.CanTriggerAcceleratorKey

</summary></devnotes>
      </procedure>
      <constructor name="Create" visibility="public" file="FMX.StdCtrls.pas" line="435">
        <parameters>
          <parameter name="AOwner" type="TComponent"/>
        </parameters>
      <devnotes><summary>


Creates a new instance of TPresentedControl.
FMX.StdCtrls.TCustomButton.Create inherits from FMX.Controls.Presentation.TPresentedControl.Create. All content below this line refers to FMX.Controls.Presentation.TPresentedControl.Create.
Creates a new instance of TPresentedControl.
AOwner takes ownership of the control and becomes responsible of destroying the control once the control is no longer necessary.
The control constructor creates a data model for the control. DefineModelClass determines the default class of data model for each subclass of TPresentedControl.
Create also sets the value of the CanUseDefaultPresentation property to True.

 See Also
System.Classes.TComponent.Create
FMX.Controls.Presentation.TPresentedControl.Model
FMX.Controls.Presentation.TPresentedControl.DefineModelClass
FMX.Controls.Presentation.TPresentedControl.Destroy
FMX.Controls.Presentation.TPresentedControl.CanUseDefaultPresentation

</summary></devnotes></constructor>
      <destructor name="Destroy" visibility="public" file="FMX.StdCtrls.pas" line="436">
        <parameters>
        </parameters>
      <devnotes><summary>


Destroys this instance of TPresentedControl.
FMX.StdCtrls.TCustomButton.Destroy inherits from FMX.Controls.Presentation.TPresentedControl.Destroy. All content below this line refers to FMX.Controls.Presentation.TPresentedControl.Destroy.
Destroys this instance of TPresentedControl.

 See Also
FMX.Controls.Presentation.TPresentedControl.Create

</summary></devnotes></destructor>
      <procedure name="SetNewScene" visibility="public" procflags="override" file="FMX.StdCtrls.pas" line="437">
        <parameters>
          <parameter name="AScene" type="IScene"/>
        </parameters>
      <devnotes><summary>
Sets a new Scene for the current control.
Sets a new Scene for the current control.
FMX.StdCtrls.TCustomButton.SetNewScene inherits from FMX.Controls.TControl.SetNewScene. All content below this line refers to FMX.Controls.TControl.SetNewScene.
Sets a new Scene for the current control.
AScene specifies the new scene. If AScene is empty, SetNewScene does nothing.
SetNewScene sets the same scene for the control's children.
</summary></devnotes></procedure>
      <property name="Action" visibility="public" read="GetAction" write="SetAction" type="TBasicAction" hoisted="true" file="FMX.StdCtrls.pas" line="438"/>
      <property name="StaysPressed" visibility="public" read="FStaysPressed" write="SetStaysPressed" stored="IsPressedStored" type="Boolean" default="0" file="FMX.StdCtrls.pas" line="439"><devnotes><summary>
Specifies whether this button remains in a pressed state once you click it.
Set the StaysPressed property to True to force this button to remain in a pressed state once you click it. The button comes back to its initial depressed state once you click it again.
If StaysPressed is set to False, then this button behaves like a standard push button that comes back to its initial state once you release the mouse button over its surface.
</summary></devnotes></property>
      <property name="IsPressed" visibility="public" read="FIsPressed" write="SetIsPressed" type="Boolean" default="0" file="FMX.StdCtrls.pas" line="441"><devnotes><summary>
Specifies whether the default state of this button is pressed or not.
Set the IsPressed property to True in order to force this button's default state to be pressed. The button comes back to its initial unpressed state once you click it.

Tip: Setting the IsPressed property only has an effect if the StaysPressed property is set to True.</summary></devnotes></property>
      <property name="ModalResult" visibility="public" read="FModalResult" write="FModalResult" type="TModalResult" default="0" file="FMX.StdCtrls.pas" line="442"><devnotes><summary>
Determines whether and how the button closes its (modal) parent form.
Setting the ModalResult property of a button is an easy way to make clicking the button to close the parent modal form. When a button is clicked, the ModalResult property of its parent form is set to the same value as the ModalResult property of a button.
For example, if a dialog box has OK and Cancel buttons, their ModalResult properties could be set at design time to mrOk and mrCancel, respectively. At run time, clicking the OK button changes the ModalResult property of the dialog box to mrOk, and clicking the Cancel button changes the ModalResult property of the dialog box to mrCancel. Unless further processing is required, no OnClick event handlers are required for the buttons.
The following table lists the constants defined in the System.UITypes unit to be used for the ModalResult property of the TModalResult type.



Constant

Value

Meaning



mrNone



0



None. Used as a default value before the user exits.




mrOk



idOK = 1



The user exited with the OK button.




mrCancel



idCancel = 2



The user exited with the CANCEL button.




mrAbort



idAbort = 3



The user exited with the ABORT button.




mrRetry



idRetry = 4



The user exited with the RETRY button.




mrIgnore



idIgnore = 5



The user exited with the IGNORE button.




mrYes



idYes = 6



The user exited with the YES button.




mrNo



idNo = 7



The user exited with the NO button.




mrClose



idClose = 8



The user exited with the CLOSE button.




mrHelp



idHelp = 9



The user exited with the HELP button.




mrTryAgain



idTryAgain = 10



The user exited with the TRY AGAIN button.




mrContinue



idContinue = 11



The user exited with the CONTINUE button.




mrAll



mrContinue + 1 (12 or $C)



The user exited with the ALL button.




mrNoToAll



mrAll +1 (13 or $D)



The user exited with the NO TO ALL button.




mrYesToAll



mrNoToAll +1 (14 or $E)



The user exited with the YES TO ALL button.


You can check a ModalResult value using the global IsAbortResult, IsAnAllResult, IsNegativeResult, or IsPositiveResult functions, and use the StripAllFromResult function to convert ModalResult values that refer to &quot;ALL&quot; buttons to identifying values corresponding to simple buttons (Ok, No, or Yes). 
</summary></devnotes></property>
      <property name="RepeatClick" visibility="public" read="FRepeat" write="FRepeat" type="Boolean" default="0" file="FMX.StdCtrls.pas" line="443"><devnotes><summary>
Specifies whether to automatically repeat the button click after a preset time.
Set the RepeatClick property to True to make the button automatically repeat the clicking event, thus executing its OnClick event cyclically, after a preset time has passed since the last OnClick execution.
The timer interval starts with 500 milliseconds for the first wait and then moves to 100 milliseconds per wait cycle. This interval cannot be modified by the user.
Each time 100 milliseconds pass, DoRepeatDelayTimer is executed. DoRepeatDelayTimer internally calls the DoRepeatTimer method to perform the button's OnClick event.
</summary></devnotes></property>
      <property name="Images" visibility="public" read="GetImages" write="SetImages" type="TCustomImageList" file="FMX.StdCtrls.pas" line="445">
        <devnotes><summary>
Defines the reference to a TCustomImageList list of images to be used to draw images on the component.
If the TCustomImageList list is empty, then Images is nil/null.
Call ImagesChanged when Images is changed.
</summary></devnotes>
      </property>
      <property name="ImageIndex" visibility="public" read="GetImageIndex" write="SetImageIndex" stored="ImageIndexStored" type="TImageIndex" file="FMX.StdCtrls.pas" line="449">
        <devnotes><summary>
Defines the zero-based index enumerating images in the Images list of images.
If you use a non-existing ImageIndex value to access an image in the Images list, then no image is retrieved and no exception is raised. The usual default value is -1. Call ImagesChanged when ImageIndex is changed.
</summary></devnotes>
      </property>
    </members>
  <devnotes><summary>
Represents the base class for all buttons.
TCustomButton is the base class for all button components such as TButton. If you need to create a custom button for your application, then you should consider deriving your component from TCustomButton, as it already implements basic button drawing and operating functionality.
</summary></devnotes></class>
  <class name="TButton" file="FMX.StdCtrls.pas" line="454">
    
    <members>
      <field name="FDefault" type="Boolean" visibility="private" size="1" offset="1104" file="FMX.StdCtrls.pas" line="456"/>
      <field name="FCancel" type="Boolean" visibility="private" size="1" offset="1105" file="FMX.StdCtrls.pas" line="457"/>
      <property name="TintObject" visibility="public" read="FTintObject" type="ITintedObject" hoisted="true" file="FMX.StdCtrls.pas" line="459"/>
      <property name="IconTintObject" visibility="public" read="FIconTintObject" type="ITintedObject" hoisted="true" file="FMX.StdCtrls.pas" line="460"/>
      <procedure name="AfterDialogKey" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="462">
        <parameters>
          <parameter name="Key" type="Word" paramflags="var"/>
          <parameter name="Shift" type="TShiftState"/>
        </parameters>
      <devnotes><summary>


Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <property name="Font" visibility="protected" read="GetFont" write="SetFont" type="TFont" hoisted="true" file="FMX.StdCtrls.pas" line="463"><devnotes><summary>
Specifies the font to use when displaying the text.
</summary></devnotes></property>
      <property name="TextAlign" visibility="protected" read="GetTextAlign" write="SetTextAlign" type="TTextAlign" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="464"><devnotes><summary>
Specifies the horizontal alignment of the text in this control.
This property can take values of the TTextAlign enumeration.
</summary></devnotes></property>
      <property name="Trimming" visibility="protected" read="GetTrimming" write="SetTrimming" type="TTextTrimming" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="465"><devnotes><summary>
Specifies how the text is trimmed when it exceeds the edges of the text area in this control.
This property sets or returns a value of the TTextTrimming type.
</summary></devnotes></property>
      <property name="WordWrap" visibility="protected" read="GetWordWrap" write="SetWordWrap" type="Boolean" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="466"><devnotes><summary>
Specifies whether to wrap the text inside the control when the text length exceeds the text area width.
</summary></devnotes></property>
      <property name="StaysPressed" visibility="published" read="FStaysPressed" write="SetStaysPressed" stored="IsPressedStored" type="Boolean" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="468"/>
      <property name="Action" visibility="published" read="GetAction" write="SetAction" type="TBasicAction" hoisted="true" file="FMX.StdCtrls.pas" line="469"/>
      <property name="Align" visibility="published" read="FAlign" write="SetAlign" type="TAlignLayout" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="470"/>
      <property name="Anchors" visibility="published" read="FAnchors" write="SetAnchors" stored="IsAnchorsStored" type="TAnchors" hoisted="true" file="FMX.StdCtrls.pas" line="471"/>
      <property name="AutoTranslate" visibility="published" read="FAutoTranslate" write="FAutoTranslate" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="472"/>
      <property name="Cancel" visibility="published" read="FCancel" write="FCancel" type="Boolean" default="0" file="FMX.StdCtrls.pas" line="473"><devnotes><summary>
Determines whether the button's OnClick event handler executes when the ESCAPE key is pressed.
If Cancel is True, the button's OnClick event handler executes when you press the ESCAPE key. Although an application can have more than one Cancel button, the form calls the OnClick event handler only for the first visible button in the tab order.
</summary></devnotes></property>
      <property name="CanFocus" visibility="published" read="FCanFocus" write="FCanFocus" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="474"/>
      <property name="CanParentFocus" visibility="published" read="FCanParentFocus" write="FCanParentFocus" type="Boolean" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="475"/>
      <property name="ClipChildren" visibility="published" read="FClipChildren" write="SetClipChildren" type="Boolean" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="476"/>
      <property name="ClipParent" visibility="published" read="FClipParent" write="FClipParent" type="Boolean" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="477"/>
      <property name="ControlType" visibility="published" read="GetControlType" write="SetControlType" type="TControlType" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="478"/>
      <property name="Cursor" visibility="published" read="GetCursor" write="SetCursor" type="TCursor" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="479"/>
      <property name="Default" visibility="published" read="FDefault" write="FDefault" type="Boolean" default="0" file="FMX.StdCtrls.pas" line="480"><devnotes><summary>
Determines whether the button's OnClick event handler executes when the ENTER key is pressed.
If Default is True, the button's OnClick event handler executes when the you press the ENTER key. Although an application can have more than one Default button, the form calls the OnClick event handler only for the first visible button in the tab order. Moreover, any button that has focus becomes the Default button temporarily; hence, if you select another button before pressing ENTER, the selected button's OnClick event handler executes instead.
</summary></devnotes></property>
      <property name="DisableFocusEffect" visibility="published" read="FDisableFocusEffect" write="FDisableFocusEffect" type="Boolean" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="481"/>
      <property name="DragMode" visibility="published" read="GetDragMode" write="SetDragMode" type="TDragMode" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="482"/>
      <property name="EnableDragHighlight" visibility="published" read="FEnableDragHighlight" write="FEnableDragHighlight" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="483"/>
      <property name="Enabled" visibility="published" read="FEnabled" write="SetEnabled" stored="EnabledStored" type="Boolean" hoisted="true" file="FMX.StdCtrls.pas" line="484"/>
      <property name="StyledSettings" visibility="published" read="GetStyledSettings" write="SetStyledSettings" stored="StyledSettingsStored" type="TStyledSettings" hoisted="true" file="FMX.StdCtrls.pas" line="485"/>
      <property name="Height" visibility="published" read="GetHeight" write="SetHeight" stored="False" type="Single" hoisted="true" file="FMX.StdCtrls.pas" line="486"/>
      <property name="HelpContext" visibility="published" read="FHelpContext" write="SetHelpContext" stored="IsHelpContextStored" type="THelpContext" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="487"/>
      <property name="HelpKeyword" visibility="published" read="FHelpKeyword" write="SetHelpKeyword" stored="IsHelpContextStored" type="string" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="488"/>
      <property name="HelpType" visibility="published" read="FHelpType" write="FHelpType" type="THelpType" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="489"/>
      <property name="Hint" visibility="published" read="FHint" write="SetHint" stored="HintStored" type="string" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="490"/>
      <property name="HitTest" visibility="published" read="FHitTest" write="SetHitTest" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="491"/>
      <property name="IconTintColor" visibility="published" read="FIconTintColor" write="SetIconTintColor" stored="IsIconTintColorStored" type="TAlphaColor" hoisted="true" file="FMX.StdCtrls.pas" line="492"/>
      <property name="Images" visibility="published" read="GetImages" write="SetImages" type="TCustomImageList" hoisted="true" file="FMX.StdCtrls.pas" line="493"/>
      <property name="ImageIndex" visibility="published" read="GetImageIndex" write="SetImageIndex" stored="ImageIndexStored" type="TImageIndex" hoisted="true" file="FMX.StdCtrls.pas" line="494"/>
      <property name="IsPressed" visibility="published" read="FIsPressed" write="SetIsPressed" type="Boolean" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="495"/>
      <property name="Locked" visibility="published" read="FLocked" write="SetLocked" type="Boolean" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="496"/>
      <property name="Padding" visibility="published" read="GetPadding" write="SetPadding" type="TBounds" hoisted="true" file="FMX.StdCtrls.pas" line="497"/>
      <property name="ModalResult" visibility="published" read="FModalResult" write="FModalResult" type="TModalResult" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="498"/>
      <property name="Opacity" visibility="published" read="FOpacity" write="SetOpacity" stored="IsOpacityStored" type="Single" hoisted="true" file="FMX.StdCtrls.pas" line="499"/>
      <property name="Margins" visibility="published" read="GetMargins" write="SetMargins" type="TBounds" hoisted="true" file="FMX.StdCtrls.pas" line="500"/>
      <property name="PopupMenu" visibility="published" read="FPopupMenu" write="SetPopupMenu" stored="IsPopupMenuStored" type="TCustomPopupMenu" hoisted="true" file="FMX.StdCtrls.pas" line="501"/>
      <property name="Position" visibility="published" read="FPosition" write="SetPosition" stored="IsPositionStored" type="TPosition" hoisted="true" file="FMX.StdCtrls.pas" line="502"/>
      <property name="RepeatClick" visibility="published" read="FRepeat" write="FRepeat" type="Boolean" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="503"/>
      <property name="RotationAngle" visibility="published" read="GetRotationAngle" write="SetRotationAngle" type="Single" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="504"/>
      <property name="RotationCenter" visibility="published" read="GetRotationCenter" write="SetRotationCenter" type="TPosition" hoisted="true" file="FMX.StdCtrls.pas" line="505"/>
      <property name="Scale" visibility="published" read="GetScale" write="SetScale" type="TPosition" hoisted="true" file="FMX.StdCtrls.pas" line="506"/>
      <property name="Size" visibility="published" read="FSize" write="SetSize" stored="IsSizeStored" type="TControlSize" hoisted="true" file="FMX.StdCtrls.pas" line="507"/>
      <property name="StyleLookup" visibility="published" read="FStyleLookup" write="SetStyleLookup" type="string" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="508"/>
      <property name="TabOrder" visibility="published" read="GetTabOrder" write="SetTabOrder" type="TTabOrder" default="-1" hoisted="true" file="FMX.StdCtrls.pas" line="509"/>
      <property name="TabStop" visibility="published" read="GetTabStop" write="SetTabStop" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="510"/>
      <property name="Text" visibility="published" read="GetText" write="SetText" stored="TextStored" type="string" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="511"/>
      <property name="TextSettings" visibility="published" read="GetTextSettings" write="SetTextSettings" type="TTextSettings" hoisted="true" file="FMX.StdCtrls.pas" line="512"/>
      <property name="TintColor" visibility="published" read="FTintColor" write="SetTintColor" stored="IsTintColorStored" type="TAlphaColor" hoisted="true" file="FMX.StdCtrls.pas" line="513"/>
      <property name="TouchTargetExpansion" visibility="published" read="FTouchTargetExpansion" write="SetTouchTargetExpansion" type="TBounds" hoisted="true" file="FMX.StdCtrls.pas" line="514"/>
      <property name="Visible" visibility="published" read="FVisible" write="SetVisible" stored="VisibleStored" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="515"/>
      <property name="Width" visibility="published" read="GetWidth" write="SetWidth" stored="False" type="Single" hoisted="true" file="FMX.StdCtrls.pas" line="516"/>
      <property name="ParentShowHint" visibility="published" read="FParentShowHint" write="SetParentShowHint" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="517"/>
      <property name="ShowHint" visibility="published" read="FShowHint" write="SetShowHint" stored="IsShowHintStored" type="Boolean" hoisted="true" file="FMX.StdCtrls.pas" line="518"/>
      <event name="OnApplyStyleLookup" visibility="published" read="FOnApplyStyleLookup" write="FOnApplyStyleLookup" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="519"/>
      <event name="OnDragEnter" visibility="published" read="FOnDragEnter" write="FOnDragEnter" type="TDragEnterEvent" hoisted="true" file="FMX.StdCtrls.pas" line="520"/>
      <event name="OnDragLeave" visibility="published" read="FOnDragLeave" write="FOnDragLeave" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="521"/>
      <event name="OnDragOver" visibility="published" read="FOnDragOver" write="FOnDragOver" type="TDragOverEvent" hoisted="true" file="FMX.StdCtrls.pas" line="522"/>
      <event name="OnDragDrop" visibility="published" read="FOnDragDrop" write="FOnDragDrop" type="TDragDropEvent" hoisted="true" file="FMX.StdCtrls.pas" line="523"/>
      <event name="OnDragEnd" visibility="published" read="FOnDragEnd" write="FOnDragEnd" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="524"/>
      <event name="OnKeyDown" visibility="published" read="FOnKeyDown" write="FOnKeyDown" type="TKeyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="525"/>
      <event name="OnKeyUp" visibility="published" read="FOnKeyUp" write="FOnKeyUp" type="TKeyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="526"/>
      <event name="OnCanFocus" visibility="published" read="FOnCanFocus" write="FOnCanFocus" type="TCanFocusEvent" hoisted="true" file="FMX.StdCtrls.pas" line="527"/>
      <event name="OnClick" visibility="published" read="FOnClick" write="SetOnClick" stored="OnClickStored" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="528"/>
      <event name="OnDblClick" visibility="published" read="FOnDblClick" write="FOnDblClick" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="529"/>
      <event name="OnEnter" visibility="published" read="FOnEnter" write="FOnEnter" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="530"/>
      <event name="OnExit" visibility="published" read="FOnExit" write="FOnExit" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="531"/>
      <event name="OnMouseDown" visibility="published" read="FOnMouseDown" write="FOnMouseDown" type="TMouseEvent" hoisted="true" file="FMX.StdCtrls.pas" line="532"/>
      <event name="OnMouseMove" visibility="published" read="FOnMouseMove" write="FOnMouseMove" type="TMouseMoveEvent" hoisted="true" file="FMX.StdCtrls.pas" line="533"/>
      <event name="OnMouseUp" visibility="published" read="FOnMouseUp" write="FOnMouseUp" type="TMouseEvent" hoisted="true" file="FMX.StdCtrls.pas" line="534"/>
      <event name="OnMouseWheel" visibility="published" read="FOnMouseWheel" write="FOnMouseWheel" type="TMouseWheelEvent" hoisted="true" file="FMX.StdCtrls.pas" line="535"/>
      <event name="OnMouseEnter" visibility="published" read="FOnMouseEnter" write="FOnMouseEnter" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="536"/>
      <event name="OnMouseLeave" visibility="published" read="FOnMouseLeave" write="FOnMouseLeave" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="537"/>
      <event name="OnPainting" visibility="published" read="FOnPainting" write="FOnPainting" type="TOnPaintEvent" hoisted="true" file="FMX.StdCtrls.pas" line="538"/>
      <event name="OnPaint" visibility="published" read="FOnPaint" write="FOnPaint" type="TOnPaintEvent" hoisted="true" file="FMX.StdCtrls.pas" line="539"/>
      <event name="OnResize" visibility="published" read="FOnResize" write="FOnResize" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="540"/>
      <event name="OnResized" visibility="published" read="FOnResized" write="FOnResized" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="541"/>
    </members>
  <devnotes><summary>
Represents a push button that contains a text caption.
A TButton is a general-purpose push button for use in applications. Buttons can be enabled, disabled, pressed, and can respond to control keys such as ESCAPE and ENTER. These buttons can receive TAB focus.
Buttons can have a modal result attached, which is useful if these buttons are the main validating controls for a dialog box, for instance OK -- save and close; Cancel -- quit, no save; and so on.
The Text property can be used to define an accelerator key to a control. 
</summary></devnotes></class>
  <class name="TSpeedButtonGroupMessage" file="FMX.StdCtrls.pas" line="544">
    
  </class>
  <class name="TSpeedButton" file="FMX.StdCtrls.pas" line="546">
    
    <interfaces>
      <implements name="IIsChecked"/>
      <implements name="IGroupName"/>
    </interfaces>
    <members>
      <field name="FGroupName" type="string" visibility="private" size="4" offset="1104" file="FMX.StdCtrls.pas" line="548"/>
      <function name="GetIsChecked" visibility="private" file="FMX.StdCtrls.pas" line="550">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <procedure name="SetIsChecked" visibility="private" file="FMX.StdCtrls.pas" line="551">
        <parameters>
          <parameter name="Value" type="Boolean" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="IsCheckedStored" visibility="private" file="FMX.StdCtrls.pas" line="552">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <procedure name="GroupMessageCall" visibility="private" file="FMX.StdCtrls.pas" line="553">
        <parameters>
          <parameter name="Sender" type="TObject" paramflags="const"/>
          <parameter name="M" type="TMessageBase" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="GetGroupName" visibility="private" file="FMX.StdCtrls.pas" line="555">
        <parameters>
          <retval type="string"/>
        </parameters>
      </function>
      <function name="GroupNameStored" visibility="private" file="FMX.StdCtrls.pas" line="556">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <procedure name="SetGroupName" visibility="private" file="FMX.StdCtrls.pas" line="557">
        <parameters>
          <parameter name="Value" type="string" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="IsPressedStored" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="559">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>


Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></function>
      <procedure name="ToggleStaysPressed" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="560">
      <devnotes><summary>


Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="SetIsPressed" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="561">
        <parameters>
          <parameter name="Value" type="Boolean" paramflags="const"/>
        </parameters>
      <devnotes><summary>


Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="ActionChange" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="562">
        <parameters>
          <parameter name="Sender" type="TBasicAction"/>
          <parameter name="CheckDefaults" type="Boolean"/>
        </parameters>
      <devnotes><summary>




Sends a message to the presentation layer of the presentation proxy when the Action property changes.
FMX.StdCtrls.TSpeedButton.ActionChange inherits from FMX.Controls.Presentation.TPresentedControl.ActionChange. All content below this line refers to FMX.Controls.Presentation.TPresentedControl.ActionChange.
Sends a message to the presentation layer of the presentation proxy when the Action property changes.
The presentation layer receives a message with PM_ACTION_CHANGE as MsgID and an instance of TActionInfo as Value with the following data:



Property

Data



Value.Sender



ASender




Value.CheckDefaults



ACheckDefaults


 See Also
FMX.Controls.TControl.ActionChange
FMX.Controls.Presentation.TPresentedControl.PresentationProxy
FMX.Presentation.Messages.TMessageSender.SendMessage
FMX.Presentation.Messages.TMessageSender.Receiver
System.TObject.Dispatch
FMX.Presentation.Messages.TDispatchMessageWithValue
FMX.Presentation.Messages.TDispatchMessageWithValue.MsgID
FMX.Presentation.Messages.TDispatchMessageWithValue.Value
FMX.Controls.Presentation.TActionInfo
FMX.Controls.Presentation.TActionInfo.Sender
FMX.Controls.Presentation.TActionInfo.CheckDefaults

</summary></devnotes></procedure>
      <constructor name="Create" visibility="public" file="FMX.StdCtrls.pas" line="564">
        <parameters>
          <parameter name="AOwner" type="TComponent"/>
        </parameters>
      <devnotes><summary>




Creates a new instance of TPresentedControl.
FMX.StdCtrls.TSpeedButton.Create inherits from FMX.Controls.Presentation.TPresentedControl.Create. All content below this line refers to FMX.Controls.Presentation.TPresentedControl.Create.
Creates a new instance of TPresentedControl.
AOwner takes ownership of the control and becomes responsible of destroying the control once the control is no longer necessary.
The control constructor creates a data model for the control. DefineModelClass determines the default class of data model for each subclass of TPresentedControl.
Create also sets the value of the CanUseDefaultPresentation property to True.

 See Also
System.Classes.TComponent.Create
FMX.Controls.Presentation.TPresentedControl.Model
FMX.Controls.Presentation.TPresentedControl.DefineModelClass
FMX.Controls.Presentation.TPresentedControl.Destroy
FMX.Controls.Presentation.TPresentedControl.CanUseDefaultPresentation

</summary></devnotes></constructor>
      <destructor name="Destroy" visibility="public" file="FMX.StdCtrls.pas" line="565">
        <parameters>
        </parameters>
      <devnotes><summary>




Destroys this instance of TPresentedControl.
FMX.StdCtrls.TSpeedButton.Destroy inherits from FMX.Controls.Presentation.TPresentedControl.Destroy. All content below this line refers to FMX.Controls.Presentation.TPresentedControl.Destroy.
Destroys this instance of TPresentedControl.

 See Also
FMX.Controls.Presentation.TPresentedControl.Create

</summary></devnotes></destructor>
      <property name="Font" visibility="public" read="GetFont" write="SetFont" type="TFont" hoisted="true" file="FMX.StdCtrls.pas" line="566"/>
      <property name="IconTintObject" visibility="public" read="FIconTintObject" type="ITintedObject" hoisted="true" file="FMX.StdCtrls.pas" line="567"/>
      <property name="TextAlign" visibility="public" read="GetTextAlign" write="SetTextAlign" type="TTextAlign" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="568"/>
      <property name="TintObject" visibility="public" read="FTintObject" type="ITintedObject" hoisted="true" file="FMX.StdCtrls.pas" line="569"/>
      <property name="Trimming" visibility="public" read="GetTrimming" write="SetTrimming" type="TTextTrimming" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="570"/>
      <property name="WordWrap" visibility="public" read="GetWordWrap" write="SetWordWrap" type="Boolean" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="571"/>
      <property name="StaysPressed" visibility="published" read="FStaysPressed" write="SetStaysPressed" stored="IsPressedStored" type="Boolean" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="574"/>
      <property name="Action" visibility="published" read="GetAction" write="SetAction" type="TBasicAction" hoisted="true" file="FMX.StdCtrls.pas" line="575"/>
      <property name="Align" visibility="published" read="FAlign" write="SetAlign" type="TAlignLayout" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="576"/>
      <property name="Anchors" visibility="published" read="FAnchors" write="SetAnchors" stored="IsAnchorsStored" type="TAnchors" hoisted="true" file="FMX.StdCtrls.pas" line="577"/>
      <property name="AutoTranslate" visibility="published" read="FAutoTranslate" write="FAutoTranslate" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="578"/>
      <property name="CanFocus" visibility="published" read="FCanFocus" write="FCanFocus" type="Boolean" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="579"/>
      <property name="CanParentFocus" visibility="published" read="FCanParentFocus" write="FCanParentFocus" type="Boolean" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="580"/>
      <property name="ClipChildren" visibility="published" read="FClipChildren" write="SetClipChildren" type="Boolean" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="581"/>
      <property name="ClipParent" visibility="published" read="FClipParent" write="FClipParent" type="Boolean" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="582"/>
      <property name="ControlType" visibility="published" read="GetControlType" write="SetControlType" type="TControlType" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="583"/>
      <property name="Cursor" visibility="published" read="GetCursor" write="SetCursor" type="TCursor" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="584"/>
      <property name="DragMode" visibility="published" read="GetDragMode" write="SetDragMode" type="TDragMode" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="585"/>
      <property name="EnableDragHighlight" visibility="published" read="FEnableDragHighlight" write="FEnableDragHighlight" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="586"/>
      <property name="Enabled" visibility="published" read="FEnabled" write="SetEnabled" stored="EnabledStored" type="Boolean" hoisted="true" file="FMX.StdCtrls.pas" line="587"/>
      <property name="GroupName" visibility="published" read="GetGroupName" write="SetGroupName" stored="GroupNameStored" type="string" file="FMX.StdCtrls.pas" line="588"><devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></property>
      <property name="StyledSettings" visibility="published" read="GetStyledSettings" write="SetStyledSettings" stored="StyledSettingsStored" type="TStyledSettings" hoisted="true" file="FMX.StdCtrls.pas" line="589"/>
      <property name="Height" visibility="published" read="GetHeight" write="SetHeight" stored="False" type="Single" hoisted="true" file="FMX.StdCtrls.pas" line="590"/>
      <property name="HelpContext" visibility="published" read="FHelpContext" write="SetHelpContext" stored="IsHelpContextStored" type="THelpContext" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="591"/>
      <property name="HelpKeyword" visibility="published" read="FHelpKeyword" write="SetHelpKeyword" stored="IsHelpContextStored" type="string" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="592"/>
      <property name="HelpType" visibility="published" read="FHelpType" write="FHelpType" type="THelpType" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="593"/>
      <property name="Hint" visibility="published" read="FHint" write="SetHint" stored="HintStored" type="string" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="594"/>
      <property name="HitTest" visibility="published" read="FHitTest" write="SetHitTest" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="595"/>
      <property name="IsPressed" visibility="published" read="FIsPressed" write="SetIsPressed" type="Boolean" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="596"/>
      <property name="IconTintColor" visibility="published" read="FIconTintColor" write="SetIconTintColor" stored="IsIconTintColorStored" type="TAlphaColor" hoisted="true" file="FMX.StdCtrls.pas" line="597"/>
      <property name="Images" visibility="published" read="GetImages" write="SetImages" type="TCustomImageList" hoisted="true" file="FMX.StdCtrls.pas" line="598"/>
      <property name="ImageIndex" visibility="published" read="GetImageIndex" write="SetImageIndex" stored="ImageIndexStored" type="TImageIndex" hoisted="true" file="FMX.StdCtrls.pas" line="599"/>
      <property name="Locked" visibility="published" read="FLocked" write="SetLocked" type="Boolean" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="600"/>
      <property name="Padding" visibility="published" read="GetPadding" write="SetPadding" type="TBounds" hoisted="true" file="FMX.StdCtrls.pas" line="601"/>
      <property name="ModalResult" visibility="published" read="FModalResult" write="FModalResult" type="TModalResult" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="602"/>
      <property name="Opacity" visibility="published" read="FOpacity" write="SetOpacity" stored="IsOpacityStored" type="Single" hoisted="true" file="FMX.StdCtrls.pas" line="603"/>
      <property name="Margins" visibility="published" read="GetMargins" write="SetMargins" type="TBounds" hoisted="true" file="FMX.StdCtrls.pas" line="604"/>
      <property name="PopupMenu" visibility="published" read="FPopupMenu" write="SetPopupMenu" stored="IsPopupMenuStored" type="TCustomPopupMenu" hoisted="true" file="FMX.StdCtrls.pas" line="605"/>
      <property name="Position" visibility="published" read="FPosition" write="SetPosition" stored="IsPositionStored" type="TPosition" hoisted="true" file="FMX.StdCtrls.pas" line="606"/>
      <property name="RepeatClick" visibility="published" read="FRepeat" write="FRepeat" type="Boolean" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="607"/>
      <property name="RotationAngle" visibility="published" read="GetRotationAngle" write="SetRotationAngle" type="Single" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="608"/>
      <property name="RotationCenter" visibility="published" read="GetRotationCenter" write="SetRotationCenter" type="TPosition" hoisted="true" file="FMX.StdCtrls.pas" line="609"/>
      <property name="Scale" visibility="published" read="GetScale" write="SetScale" type="TPosition" hoisted="true" file="FMX.StdCtrls.pas" line="610"/>
      <property name="Size" visibility="published" read="FSize" write="SetSize" stored="IsSizeStored" type="TControlSize" hoisted="true" file="FMX.StdCtrls.pas" line="611"/>
      <property name="ParentShowHint" visibility="published" read="FParentShowHint" write="SetParentShowHint" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="612"/>
      <property name="ShowHint" visibility="published" read="FShowHint" write="SetShowHint" stored="IsShowHintStored" type="Boolean" hoisted="true" file="FMX.StdCtrls.pas" line="613"/>
      <property name="StyleLookup" visibility="published" read="FStyleLookup" write="SetStyleLookup" type="string" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="614"/>
      <property name="Text" visibility="published" read="GetText" write="SetText" stored="TextStored" type="string" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="615"/>
      <property name="TextSettings" visibility="published" read="GetTextSettings" write="SetTextSettings" type="TTextSettings" hoisted="true" file="FMX.StdCtrls.pas" line="616"/>
      <property name="TintColor" visibility="published" read="FTintColor" write="SetTintColor" stored="IsTintColorStored" type="TAlphaColor" hoisted="true" file="FMX.StdCtrls.pas" line="617"/>
      <property name="TouchTargetExpansion" visibility="published" read="FTouchTargetExpansion" write="SetTouchTargetExpansion" type="TBounds" hoisted="true" file="FMX.StdCtrls.pas" line="618"/>
      <property name="Visible" visibility="published" read="FVisible" write="SetVisible" stored="VisibleStored" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="619"/>
      <property name="Width" visibility="published" read="GetWidth" write="SetWidth" stored="False" type="Single" hoisted="true" file="FMX.StdCtrls.pas" line="620"/>
      <event name="OnApplyStyleLookup" visibility="published" read="FOnApplyStyleLookup" write="FOnApplyStyleLookup" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="621"/>
      <event name="OnDragEnter" visibility="published" read="FOnDragEnter" write="FOnDragEnter" type="TDragEnterEvent" hoisted="true" file="FMX.StdCtrls.pas" line="622"/>
      <event name="OnDragLeave" visibility="published" read="FOnDragLeave" write="FOnDragLeave" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="623"/>
      <event name="OnDragOver" visibility="published" read="FOnDragOver" write="FOnDragOver" type="TDragOverEvent" hoisted="true" file="FMX.StdCtrls.pas" line="624"/>
      <event name="OnDragDrop" visibility="published" read="FOnDragDrop" write="FOnDragDrop" type="TDragDropEvent" hoisted="true" file="FMX.StdCtrls.pas" line="625"/>
      <event name="OnDragEnd" visibility="published" read="FOnDragEnd" write="FOnDragEnd" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="626"/>
      <event name="OnClick" visibility="published" read="FOnClick" write="SetOnClick" stored="OnClickStored" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="627"/>
      <event name="OnDblClick" visibility="published" read="FOnDblClick" write="FOnDblClick" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="628"/>
      <event name="OnMouseDown" visibility="published" read="FOnMouseDown" write="FOnMouseDown" type="TMouseEvent" hoisted="true" file="FMX.StdCtrls.pas" line="629"/>
      <event name="OnMouseMove" visibility="published" read="FOnMouseMove" write="FOnMouseMove" type="TMouseMoveEvent" hoisted="true" file="FMX.StdCtrls.pas" line="630"/>
      <event name="OnMouseUp" visibility="published" read="FOnMouseUp" write="FOnMouseUp" type="TMouseEvent" hoisted="true" file="FMX.StdCtrls.pas" line="631"/>
      <event name="OnMouseWheel" visibility="published" read="FOnMouseWheel" write="FOnMouseWheel" type="TMouseWheelEvent" hoisted="true" file="FMX.StdCtrls.pas" line="632"/>
      <event name="OnMouseEnter" visibility="published" read="FOnMouseEnter" write="FOnMouseEnter" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="633"/>
      <event name="OnMouseLeave" visibility="published" read="FOnMouseLeave" write="FOnMouseLeave" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="634"/>
      <event name="OnPainting" visibility="published" read="FOnPainting" write="FOnPainting" type="TOnPaintEvent" hoisted="true" file="FMX.StdCtrls.pas" line="635"/>
      <event name="OnPaint" visibility="published" read="FOnPaint" write="FOnPaint" type="TOnPaintEvent" hoisted="true" file="FMX.StdCtrls.pas" line="636"/>
      <event name="OnResize" visibility="published" read="FOnResize" write="FOnResize" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="637"/>
      <event name="OnResized" visibility="published" read="FOnResized" write="FOnResized" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="638"/>
    </members>
  <devnotes><summary>
Represents a push button that contains a text caption, for usage in various toolbars that you might employ into your applications.
A TSpeedButton is a general-purpose push button for use in an application's toolbar. These buttons can be enabled, disabled, pressed, and can respond to control keys such as ESCAPE and ENTER.
These speed buttons can also have a modal result attached to them.
Their distinctive appearance differentiates them from other buttons. Also, speed buttons cannot receive TAB focus.

</summary></devnotes></class>
  <class name="TCustomCornerButton" file="FMX.StdCtrls.pas" line="643">
    
    <members>
      <field name="FYRadius" type="Single" visibility="private" size="4" offset="1104" file="FMX.StdCtrls.pas" line="645"/>
      <field name="FXRadius" type="Single" visibility="private" size="4" offset="1108" file="FMX.StdCtrls.pas" line="646"/>
      <field name="FCorners" type="TCorners" visibility="private" size="1" offset="1112" file="FMX.StdCtrls.pas" line="647"/>
      <field name="FCornerType" type="TCornerType" visibility="private" size="4" offset="1116" file="FMX.StdCtrls.pas" line="648"/>
      <field name="FSides" type="TSides" visibility="private" size="1" offset="1120" file="FMX.StdCtrls.pas" line="649"/>
      <function name="IsCornersStored" visibility="private" file="FMX.StdCtrls.pas" line="650">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <procedure name="SetXRadius" visibility="private" file="FMX.StdCtrls.pas" line="651">
        <parameters>
          <parameter name="Value" type="Single" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetYRadius" visibility="private" file="FMX.StdCtrls.pas" line="652">
        <parameters>
          <parameter name="Value" type="Single" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetCorners" visibility="private" file="FMX.StdCtrls.pas" line="653">
        <parameters>
          <parameter name="Value" type="TCorners" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetCornerType" visibility="private" file="FMX.StdCtrls.pas" line="654">
        <parameters>
          <parameter name="Value" type="TCornerType" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetSides" visibility="private" file="FMX.StdCtrls.pas" line="655">
        <parameters>
          <parameter name="Value" type="TSides" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="IsSidesStored" visibility="private" file="FMX.StdCtrls.pas" line="656">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <procedure name="ApplyStyle" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="658">
      <devnotes><summary>




Customizes styles in complex objects.
FMX.StdCtrls.TCustomCornerButton.ApplyStyle inherits from FMX.Controls.TStyledControl.ApplyStyle. All content below this line refers to FMX.Controls.TStyledControl.ApplyStyle.
Customizes styles in complex objects.
TStyledControl descendants override it to apply styles in concordance with their primitive components.      
Do not call ApplyStyle explicitly in an application. It is called by the ApplyStyleLookup method when object styles are updated.
For an example of an ApplyStyle implementation, see &quot;TCalloutPanel:Style Contracts&quot; in FireMonkey Component Design.
</summary></devnotes></procedure>
      <constructor name="Create" visibility="public" file="FMX.StdCtrls.pas" line="660">
        <parameters>
          <parameter name="AOwner" type="TComponent"/>
        </parameters>
      <devnotes><summary>




Creates a new instance of TPresentedControl.
FMX.StdCtrls.TCustomCornerButton.Create inherits from FMX.Controls.Presentation.TPresentedControl.Create. All content below this line refers to FMX.Controls.Presentation.TPresentedControl.Create.
Creates a new instance of TPresentedControl.
AOwner takes ownership of the control and becomes responsible of destroying the control once the control is no longer necessary.
The control constructor creates a data model for the control. DefineModelClass determines the default class of data model for each subclass of TPresentedControl.
Create also sets the value of the CanUseDefaultPresentation property to True.

 See Also
System.Classes.TComponent.Create
FMX.Controls.Presentation.TPresentedControl.Model
FMX.Controls.Presentation.TPresentedControl.DefineModelClass
FMX.Controls.Presentation.TPresentedControl.Destroy
FMX.Controls.Presentation.TPresentedControl.CanUseDefaultPresentation

</summary></devnotes></constructor>
      <destructor name="Destroy" visibility="public" file="FMX.StdCtrls.pas" line="661">
        <parameters>
        </parameters>
      <devnotes><summary>




Destroys this instance of TPresentedControl.
FMX.StdCtrls.TCustomCornerButton.Destroy inherits from FMX.Controls.Presentation.TPresentedControl.Destroy. All content below this line refers to FMX.Controls.Presentation.TPresentedControl.Destroy.
Destroys this instance of TPresentedControl.

 See Also
FMX.Controls.Presentation.TPresentedControl.Create

</summary></devnotes></destructor>
      <property name="XRadius" visibility="public" read="FXRadius" write="SetXRadius" type="Single" default="0" file="FMX.StdCtrls.pas" line="662"><devnotes><summary>
Specifies the distance from a corner to the start point of the corner shape customization, on the horizontal sides of the button.
How corners are customized is defined by the Corners,
CornerType, XRadius, and YRadius properties.
</summary></devnotes></property>
      <property name="YRadius" visibility="public" read="FYRadius" write="SetYRadius" type="Single" default="0" file="FMX.StdCtrls.pas" line="663"><devnotes><summary>
Specifies the distance from a corner to the start point of the corner shape customization, on the vertical sides of the button.
How corners are customized is defined by the Corners,
CornerType, XRadius, and YRadius properties.
</summary></devnotes></property>
      <property name="Corners" visibility="public" read="FCorners" write="SetCorners" stored="IsCornersStored" type="TCorners" file="FMX.StdCtrls.pas" line="664"><devnotes><summary>
Specifies which corners are customized by the CornerType, XRadius, and YRadius properties.
By default, all four corners are customized. 
Corners contains a set of values defined in the TCorner type: TopLeft, TopRight, BottomLeft, and BottomRight. Use the AllCorners constant to select all corners. 
If Corners is an empty set, then no corner shape customization is used.
</summary></devnotes></property>
      <property name="CornerType" visibility="public" read="FCornerType" write="SetCornerType" type="TCornerType" default="0" file="FMX.StdCtrls.pas" line="665"><devnotes><summary>
Specifies the type of the corner customization in the TCustomCornerButton control.
Values of CornerType are defined in the TCornerType: Round, Bevel, InnerRound, and InnerLine. These values define the following types of corner shape customizations: 


CornerType applies to corners specified in the Corners set.
XRadius and YRadius specify the distance from a corner to the start point of the corner customization, on the horizontal and vertical sides. 

Note: If Corners is an empty set, or any of the XRadius and YRadius properties is zero, modifying the CornerType property has no visual effect.</summary></devnotes></property>
      <property name="Sides" visibility="public" read="FSides" write="SetSides" stored="IsSidesStored" type="TSides" file="FMX.StdCtrls.pas" line="666"><devnotes><summary>
Specifies which sides of the control to display.
A side is a button boundary between two adjacent corners or end points of corner customizations. End points of corner customizations are defined by XRadius and YRadius. A corner customization applies to corners included into the Corners set.
By default, all sides of the control are displayed.
Sides can contain a set of values defined in TSide: Top, Left, Bottom, and Right. 
Use the AllSides constant to select all sides.
</summary></devnotes></property>
    </members>
  <devnotes><summary>
Represents a TCustomButton control and, additionally, provides the tools to customize shapes of TCustomCornerButton control's corners.
Use Corners to specify the corners to be customized. Use CornerType, XRadius, and YRadius to customize corners. See also TRectangle.
</summary></devnotes></class>
  <class name="TCornerButton" file="FMX.StdCtrls.pas" line="671">
    
    <members>
      <property name="Font" visibility="public" read="GetFont" write="SetFont" type="TFont" hoisted="true" file="FMX.StdCtrls.pas" line="673"/>
      <property name="TextAlign" visibility="public" read="GetTextAlign" write="SetTextAlign" type="TTextAlign" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="674"/>
      <property name="WordWrap" visibility="public" read="GetWordWrap" write="SetWordWrap" type="Boolean" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="675"/>
      <property name="StaysPressed" visibility="published" read="FStaysPressed" write="SetStaysPressed" stored="IsPressedStored" type="Boolean" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="677"/>
      <property name="Action" visibility="published" read="GetAction" write="SetAction" type="TBasicAction" hoisted="true" file="FMX.StdCtrls.pas" line="678"/>
      <property name="Align" visibility="published" read="FAlign" write="SetAlign" type="TAlignLayout" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="679"/>
      <property name="Anchors" visibility="published" read="FAnchors" write="SetAnchors" stored="IsAnchorsStored" type="TAnchors" hoisted="true" file="FMX.StdCtrls.pas" line="680"/>
      <property name="AutoTranslate" visibility="published" read="FAutoTranslate" write="FAutoTranslate" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="681"/>
      <property name="CanFocus" visibility="published" read="FCanFocus" write="FCanFocus" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="682"/>
      <property name="CanParentFocus" visibility="published" read="FCanParentFocus" write="FCanParentFocus" type="Boolean" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="683"/>
      <property name="ClipChildren" visibility="published" read="FClipChildren" write="SetClipChildren" type="Boolean" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="684"/>
      <property name="ClipParent" visibility="published" read="FClipParent" write="FClipParent" type="Boolean" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="685"/>
      <property name="ControlType" visibility="published" read="GetControlType" write="SetControlType" type="TControlType" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="686"/>
      <property name="Corners" visibility="published" read="FCorners" write="SetCorners" stored="IsCornersStored" type="TCorners" hoisted="true" file="FMX.StdCtrls.pas" line="687"/>
      <property name="CornerType" visibility="published" read="FCornerType" write="SetCornerType" type="TCornerType" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="688"/>
      <property name="Cursor" visibility="published" read="GetCursor" write="SetCursor" type="TCursor" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="689"/>
      <property name="DisableFocusEffect" visibility="published" read="FDisableFocusEffect" write="FDisableFocusEffect" type="Boolean" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="690"/>
      <property name="DragMode" visibility="published" read="GetDragMode" write="SetDragMode" type="TDragMode" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="691"/>
      <property name="EnableDragHighlight" visibility="published" read="FEnableDragHighlight" write="FEnableDragHighlight" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="692"/>
      <property name="Enabled" visibility="published" read="FEnabled" write="SetEnabled" stored="EnabledStored" type="Boolean" hoisted="true" file="FMX.StdCtrls.pas" line="693"/>
      <property name="StyledSettings" visibility="published" read="GetStyledSettings" write="SetStyledSettings" stored="StyledSettingsStored" type="TStyledSettings" hoisted="true" file="FMX.StdCtrls.pas" line="694"/>
      <property name="Height" visibility="published" read="GetHeight" write="SetHeight" stored="False" type="Single" hoisted="true" file="FMX.StdCtrls.pas" line="695"/>
      <property name="HelpContext" visibility="published" read="FHelpContext" write="SetHelpContext" stored="IsHelpContextStored" type="THelpContext" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="696"/>
      <property name="HelpKeyword" visibility="published" read="FHelpKeyword" write="SetHelpKeyword" stored="IsHelpContextStored" type="string" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="697"/>
      <property name="HelpType" visibility="published" read="FHelpType" write="FHelpType" type="THelpType" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="698"/>
      <property name="Hint" visibility="published" read="FHint" write="SetHint" stored="HintStored" type="string" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="699"/>
      <property name="HitTest" visibility="published" read="FHitTest" write="SetHitTest" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="700"/>
      <property name="Images" visibility="published" read="GetImages" write="SetImages" type="TCustomImageList" hoisted="true" file="FMX.StdCtrls.pas" line="701"/>
      <property name="ImageIndex" visibility="published" read="GetImageIndex" write="SetImageIndex" stored="ImageIndexStored" type="TImageIndex" hoisted="true" file="FMX.StdCtrls.pas" line="702"/>
      <property name="IsPressed" visibility="published" read="FIsPressed" write="SetIsPressed" type="Boolean" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="704"/>
      <property name="Locked" visibility="published" read="FLocked" write="SetLocked" type="Boolean" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="706"/>
      <property name="Padding" visibility="published" read="GetPadding" write="SetPadding" type="TBounds" hoisted="true" file="FMX.StdCtrls.pas" line="707"/>
      <property name="ModalResult" visibility="published" read="FModalResult" write="FModalResult" type="TModalResult" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="708"/>
      <property name="Opacity" visibility="published" read="FOpacity" write="SetOpacity" stored="IsOpacityStored" type="Single" hoisted="true" file="FMX.StdCtrls.pas" line="709"/>
      <property name="Margins" visibility="published" read="GetMargins" write="SetMargins" type="TBounds" hoisted="true" file="FMX.StdCtrls.pas" line="710"/>
      <property name="PopupMenu" visibility="published" read="FPopupMenu" write="SetPopupMenu" stored="IsPopupMenuStored" type="TCustomPopupMenu" hoisted="true" file="FMX.StdCtrls.pas" line="711"/>
      <property name="Position" visibility="published" read="FPosition" write="SetPosition" stored="IsPositionStored" type="TPosition" hoisted="true" file="FMX.StdCtrls.pas" line="712"/>
      <property name="RepeatClick" visibility="published" read="FRepeat" write="FRepeat" type="Boolean" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="713"/>
      <property name="RotationAngle" visibility="published" read="GetRotationAngle" write="SetRotationAngle" type="Single" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="714"/>
      <property name="RotationCenter" visibility="published" read="GetRotationCenter" write="SetRotationCenter" type="TPosition" hoisted="true" file="FMX.StdCtrls.pas" line="715"/>
      <property name="Scale" visibility="published" read="GetScale" write="SetScale" type="TPosition" hoisted="true" file="FMX.StdCtrls.pas" line="716"/>
      <property name="Sides" visibility="published" read="FSides" write="SetSides" stored="IsSidesStored" type="TSides" hoisted="true" file="FMX.StdCtrls.pas" line="717"/>
      <property name="Size" visibility="published" read="FSize" write="SetSize" stored="IsSizeStored" type="TControlSize" hoisted="true" file="FMX.StdCtrls.pas" line="718"/>
      <property name="StyleLookup" visibility="published" read="FStyleLookup" write="SetStyleLookup" type="string" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="719"/>
      <property name="TabOrder" visibility="published" read="GetTabOrder" write="SetTabOrder" type="TTabOrder" default="-1" hoisted="true" file="FMX.StdCtrls.pas" line="720"/>
      <property name="TabStop" visibility="published" read="GetTabStop" write="SetTabStop" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="721"/>
      <property name="Text" visibility="published" read="GetText" write="SetText" stored="TextStored" type="string" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="722"/>
      <property name="TextSettings" visibility="published" read="GetTextSettings" write="SetTextSettings" type="TTextSettings" hoisted="true" file="FMX.StdCtrls.pas" line="723"/>
      <property name="TouchTargetExpansion" visibility="published" read="FTouchTargetExpansion" write="SetTouchTargetExpansion" type="TBounds" hoisted="true" file="FMX.StdCtrls.pas" line="724"/>
      <property name="Visible" visibility="published" read="FVisible" write="SetVisible" stored="VisibleStored" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="725"/>
      <property name="Width" visibility="published" read="GetWidth" write="SetWidth" stored="False" type="Single" hoisted="true" file="FMX.StdCtrls.pas" line="726"/>
      <property name="XRadius" visibility="published" read="FXRadius" write="SetXRadius" type="Single" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="727"/>
      <property name="YRadius" visibility="published" read="FYRadius" write="SetYRadius" type="Single" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="728"/>
      <property name="ParentShowHint" visibility="published" read="FParentShowHint" write="SetParentShowHint" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="729"/>
      <property name="ShowHint" visibility="published" read="FShowHint" write="SetShowHint" stored="IsShowHintStored" type="Boolean" hoisted="true" file="FMX.StdCtrls.pas" line="730"/>
      <event name="OnApplyStyleLookup" visibility="published" read="FOnApplyStyleLookup" write="FOnApplyStyleLookup" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="733"/>
      <event name="OnDragEnter" visibility="published" read="FOnDragEnter" write="FOnDragEnter" type="TDragEnterEvent" hoisted="true" file="FMX.StdCtrls.pas" line="735"/>
      <event name="OnDragLeave" visibility="published" read="FOnDragLeave" write="FOnDragLeave" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="736"/>
      <event name="OnDragOver" visibility="published" read="FOnDragOver" write="FOnDragOver" type="TDragOverEvent" hoisted="true" file="FMX.StdCtrls.pas" line="737"/>
      <event name="OnDragDrop" visibility="published" read="FOnDragDrop" write="FOnDragDrop" type="TDragDropEvent" hoisted="true" file="FMX.StdCtrls.pas" line="738"/>
      <event name="OnDragEnd" visibility="published" read="FOnDragEnd" write="FOnDragEnd" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="739"/>
      <event name="OnKeyDown" visibility="published" read="FOnKeyDown" write="FOnKeyDown" type="TKeyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="741"/>
      <event name="OnKeyUp" visibility="published" read="FOnKeyUp" write="FOnKeyUp" type="TKeyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="742"/>
      <event name="OnCanFocus" visibility="published" read="FOnCanFocus" write="FOnCanFocus" type="TCanFocusEvent" hoisted="true" file="FMX.StdCtrls.pas" line="744"/>
      <event name="OnClick" visibility="published" read="FOnClick" write="SetOnClick" stored="OnClickStored" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="745"/>
      <event name="OnDblClick" visibility="published" read="FOnDblClick" write="FOnDblClick" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="746"/>
      <event name="OnEnter" visibility="published" read="FOnEnter" write="FOnEnter" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="748"/>
      <event name="OnExit" visibility="published" read="FOnExit" write="FOnExit" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="749"/>
      <event name="OnMouseDown" visibility="published" read="FOnMouseDown" write="FOnMouseDown" type="TMouseEvent" hoisted="true" file="FMX.StdCtrls.pas" line="750"/>
      <event name="OnMouseMove" visibility="published" read="FOnMouseMove" write="FOnMouseMove" type="TMouseMoveEvent" hoisted="true" file="FMX.StdCtrls.pas" line="751"/>
      <event name="OnMouseUp" visibility="published" read="FOnMouseUp" write="FOnMouseUp" type="TMouseEvent" hoisted="true" file="FMX.StdCtrls.pas" line="752"/>
      <event name="OnMouseWheel" visibility="published" read="FOnMouseWheel" write="FOnMouseWheel" type="TMouseWheelEvent" hoisted="true" file="FMX.StdCtrls.pas" line="753"/>
      <event name="OnMouseEnter" visibility="published" read="FOnMouseEnter" write="FOnMouseEnter" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="754"/>
      <event name="OnMouseLeave" visibility="published" read="FOnMouseLeave" write="FOnMouseLeave" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="755"/>
      <event name="OnPainting" visibility="published" read="FOnPainting" write="FOnPainting" type="TOnPaintEvent" hoisted="true" file="FMX.StdCtrls.pas" line="757"/>
      <event name="OnPaint" visibility="published" read="FOnPaint" write="FOnPaint" type="TOnPaintEvent" hoisted="true" file="FMX.StdCtrls.pas" line="758"/>
      <event name="OnResize" visibility="published" read="FOnResize" write="FOnResize" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="759"/>
      <event name="OnResized" visibility="published" read="FOnResized" write="FOnResized" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="760"/>
    </members>
  <devnotes><summary>
Represents a button with customizable corners.
Use the Corners property to choose the corners to be customized and the CornerType, XRadius, and YRadius  properties to customize the corners. 
</summary></devnotes></class>
  <class name="TCheckBox" file="FMX.StdCtrls.pas" line="765">
    
    <interfaces>
      <implements name="IIsChecked"/>
    </interfaces>
    <members>
      <field name="FPressing" type="Boolean" visibility="private" size="1" offset="1040" file="FMX.StdCtrls.pas" line="767"/>
      <field name="FOnChange" type="TNotifyEvent" visibility="private" size="8" offset="1048" file="FMX.StdCtrls.pas" line="768"/>
      <field name="FIsPressed" type="Boolean" visibility="private" size="1" offset="1056" file="FMX.StdCtrls.pas" line="769"/>
      <field name="FIsChecked" type="Boolean" visibility="private" size="1" offset="1057" file="FMX.StdCtrls.pas" line="770"/>
      <field name="FIsPan" type="Boolean" visibility="private" size="1" offset="1058" file="FMX.StdCtrls.pas" line="771"/>
      <function name="GetIsChecked" visibility="private" file="FMX.StdCtrls.pas" line="772">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <procedure name="SetIsChecked" visibility="private" file="FMX.StdCtrls.pas" line="773">
        <parameters>
          <parameter name="Value" type="Boolean" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="IsCheckedStored" visibility="private" file="FMX.StdCtrls.pas" line="774">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <procedure name="DoExit" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="776">
      <devnotes><summary>
Sends a PM_RESET_FOCUS message to the presentation layer through its presentation proxy, followed by a PM_DO_EXIT message.
FMX.StdCtrls.TCheckBox.DoExit inherits from FMX.Controls.Presentation.TPresentedControl.DoExit. All content below this line refers to FMX.Controls.Presentation.TPresentedControl.DoExit.
Sends a PM_RESET_FOCUS message to the presentation layer through its presentation proxy, followed by a PM_DO_EXIT message.
For details about the circumstances that trigger this procedure, see TControl.DoExit.

 See Also
FMX.Controls.Presentation.TPresentedControl.PresentationProxy
FMX.Presentation.Messages.TMessageSender.SendMessage
FMX.Controls.TControl.DoExit

</summary></devnotes></procedure>
      <procedure name="ApplyStyle" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="777">
      <devnotes><summary>


Customizes styles in complex objects.
FMX.StdCtrls.TCheckBox.ApplyStyle inherits from FMX.Controls.TStyledControl.ApplyStyle. All content below this line refers to FMX.Controls.TStyledControl.ApplyStyle.
Customizes styles in complex objects.
TStyledControl descendants override it to apply styles in concordance with their primitive components.      
Do not call ApplyStyle explicitly in an application. It is called by the ApplyStyleLookup method when object styles are updated.
For an example of an ApplyStyle implementation, see &quot;TCalloutPanel:Style Contracts&quot; in FireMonkey Component Design.
</summary></devnotes></procedure>
      <procedure name="FreeStyle" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="778">
      <devnotes><summary>


Frees the style of TStyledControl.
FMX.StdCtrls.TCheckBox.FreeStyle inherits from FMX.Controls.TStyledControl.FreeStyle. All content below this line refers to FMX.Controls.TStyledControl.FreeStyle.
Frees the style of TStyledControl.
Override it to free additional component-specific style resources.
</summary></devnotes></procedure>
      <function name="CanObserve" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="779">
        <parameters>
          <parameter name="ID" type="Integer" paramflags="const"/>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
For internal use only.
Do not use this member. It is for internal use only.


</summary></devnotes></function>
      <function name="GetData" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="780">
        <parameters>
          <retval type="TValue">
            <attributes>
              <attribute name="HPPGENAttribute"/>
            </attributes>
          </retval>
        </parameters>
      <devnotes><summary>
Protected getter implementation for the Data property.
GetData overrides FMX.Types.TFmxObject.GetData and returns the value of IsChecked.
</summary></devnotes></function>
      <procedure name="SetData" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="781">
        <parameters>
          <parameter name="Value" type="TValue" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Protected setter implementation for the Data property.
SetData overrides FMX.Types.TFmxObject.SetData and sets the value of IsChecked.
Value may be any of the following:

A Boolean value. IsChecked is assigned that value.
A String Boolean. IsChecked is assigned that value.
An event handler to be assigned to OnChange. IsChecked remains unchanged.</summary></devnotes></procedure>
      <procedure name="ActionChange" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="782">
        <parameters>
          <parameter name="Sender" type="TBasicAction"/>
          <parameter name="CheckDefaults" type="Boolean"/>
        </parameters>
      <devnotes><summary>
Specifies the behavior of a TCheckBox menu item when Action changes. 
ActionChange calls the inherited TTextControl.ActionChange method and then, depending on the CheckDefaults value,  ActionChange uses the Checked property of the Sender action to set the new value of the  
IsChecked property. 
Do not call ActionChange explicitly in an application. It is for internal use.
</summary></devnotes></procedure>
      <function name="GetDefaultSize" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="783">
        <parameters>
          <retval type="TSizeF"/>
        </parameters>
      <devnotes><summary>
Getter of DefaultSize.
FMX.StdCtrls.TCheckBox.GetDefaultSize inherits from FMX.Controls.TControl.GetDefaultSize. All content below this line refers to FMX.Controls.TControl.GetDefaultSize.
Getter of DefaultSize.


</summary></devnotes></function>
      <function name="GetTextSettingsClass" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="784">
        <parameters>
          <retval type="TTextSettingsInfo.TCustomTextSettingsClass"/>
        </parameters>
      <devnotes><summary>
Returns the class type that instance represents the used text settings.
FMX.StdCtrls.TCheckBox.GetTextSettingsClass inherits from FMX.StdCtrls.TPresentedTextControl.GetTextSettingsClass. All content below this line refers to FMX.StdCtrls.TPresentedTextControl.GetTextSettingsClass.
Returns the class type that instance represents the used text settings.
GetTextSettingsClass returns the TTextSettingsInfo.TCustomTextSettingsClass (or its descendant)  class reference. An instance of such class provides the DefaultTextSettings,   TextSettings, StyledSettings, ResultingTextSettings, and other properties handling the text representation settings of a control. 
You can override the method in descendant classes to modify the default behavior.
Typical implementations of GetTextSettingsClass returns the class declaring properties like the Font, FontColor, HorzAlign, and WordWrap. Some of these properties can be declared as published to be editable in the Object Inspector.

 See Also
FMX.Controls.TTextSettingsInfo
FMX.Controls.TTextSettingsInfo.TCustomTextSettingsClass
FMX.Controls.TTextSettingsInfo.DefaultTextSettings
FMX.Controls.TTextSettingsInfo.TextSettings
FMX.Controls.TTextSettingsInfo.StyledSettings
FMX.Controls.TTextSettingsInfo.ResultingTextSettings

</summary></devnotes></function>
      <function name="TryValueIsChecked" visibility="protected" file="FMX.StdCtrls.pas" line="785">
        <parameters>
          <parameter name="Value" type="TValue" paramflags="const"/>
          <parameter name="IsChecked" type="Boolean" paramflags="out"/>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Checks whether the provided Value is a Boolean or a Boolean String.
TryValueIsChecked returns True if Value is a Boolean or a Boolean String, False otherwise.
The out parameter IsChecked is assigned the the value of Value or False if Value is not a Boolean or a Boolean String.
</summary></devnotes></function>
      <procedure name="TriggerAcceleratorKey" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="789">
        <devnotes><summary>
Allows the object to perform an action when the accelerator key is pressed.
FMX.StdCtrls.TCheckBox.TriggerAcceleratorKey inherits from FMX.AcceleratorKey.IAcceleratorKeyReceiver.TriggerAcceleratorKey. All content below this line refers to FMX.AcceleratorKey.IAcceleratorKeyReceiver.TriggerAcceleratorKey.
Allows the object to perform an action when the accelerator key is pressed.
Use TriggerAcceleratorKey to trigger an action as a response to the accelerator key. For example, use TriggerAcceleratorKey to set focus to the acceleration key receiver control.

 See Also
FMX.AcceleratorKey.IAcceleratorKeyReceiver.CanTriggerAcceleratorKey

</summary></devnotes>
      </procedure>
      <constructor name="Create" visibility="public" file="FMX.StdCtrls.pas" line="791">
        <parameters>
          <parameter name="AOwner" type="TComponent"/>
        </parameters>
      <devnotes><summary>


Creates a new instance of TPresentedControl.
FMX.StdCtrls.TCheckBox.Create inherits from FMX.Controls.Presentation.TPresentedControl.Create. All content below this line refers to FMX.Controls.Presentation.TPresentedControl.Create.
Creates a new instance of TPresentedControl.
AOwner takes ownership of the control and becomes responsible of destroying the control once the control is no longer necessary.
The control constructor creates a data model for the control. DefineModelClass determines the default class of data model for each subclass of TPresentedControl.
Create also sets the value of the CanUseDefaultPresentation property to True.

 See Also
System.Classes.TComponent.Create
FMX.Controls.Presentation.TPresentedControl.Model
FMX.Controls.Presentation.TPresentedControl.DefineModelClass
FMX.Controls.Presentation.TPresentedControl.Destroy
FMX.Controls.Presentation.TPresentedControl.CanUseDefaultPresentation

</summary></devnotes></constructor>
      <procedure name="SetNewScene" visibility="public" procflags="override" file="FMX.StdCtrls.pas" line="792">
        <parameters>
          <parameter name="AScene" type="IScene"/>
        </parameters>
      <devnotes><summary>
Sets a new Scene for the current control.
Sets a new Scene for the current control.
FMX.StdCtrls.TCheckBox.SetNewScene inherits from FMX.Controls.TControl.SetNewScene. All content below this line refers to FMX.Controls.TControl.SetNewScene.
Sets a new Scene for the current control.
AScene specifies the new scene. If AScene is empty, SetNewScene does nothing.
SetNewScene sets the same scene for the control's children.
</summary></devnotes></procedure>
      <procedure name="MouseDown" visibility="public" procflags="override" file="FMX.StdCtrls.pas" line="793">
        <parameters>
          <parameter name="Button" type="TMouseButton"/>
          <parameter name="Shift" type="TShiftState"/>
          <parameter name="X" type="Single"/>
          <parameter name="Y" type="Single"/>
        </parameters>
      <devnotes><summary>
OnMouseDown event dispatcher. 
FMX.StdCtrls.TCheckBox.MouseDown inherits from FMX.Controls.TControl.MouseDown. All content below this line refers to FMX.Controls.TControl.MouseDown.
OnMouseDown event dispatcher. 
A control calls MouseDown in response to any of mouse-down messages, decoding the message parameters into the shift-key state and position, which it passes in the Shift, X, and Y parameters, respectively:

Button determines which mouse button is pressed: left, right, or middle.
Shift indicates which shift keys--SHIFT, CTRL, ALT, and CMD (only for Mac)--were down when the user pressed the mouse button.
X and Y are the pixel coordinates of the mouse pointer within the client area of the control. If Button is mbLeft, MouseDown sets PressedPosition as a TPointF(X,Y).
Override the protected MouseDown method to provide other responses when a mouse button is down while the cursor is over the control.

</summary></devnotes></procedure>
      <procedure name="MouseMove" visibility="public" procflags="override" file="FMX.StdCtrls.pas" line="794">
        <parameters>
          <parameter name="Shift" type="TShiftState"/>
          <parameter name="X" type="Single"/>
          <parameter name="Y" type="Single"/>
        </parameters>
      <devnotes><summary>
OnMouseMove event dispatcher. 
FMX.StdCtrls.TCheckBox.MouseMove inherits from FMX.Controls.TControl.MouseMove. All content below this line refers to FMX.Controls.TControl.MouseMove.
OnMouseMove event dispatcher. 
As the mouse cursor moves across a control, this method is called repeatedly. Each time it is called with the new coordinates that reflect the continuous path of the mouse cursor across the screen real estate covered by the control's visual representation:

Shift indicates which shift keys--SHIFT, CTRL, ALT, and CMD (only for Mac)--were down when the mouse cursor is over the control.
X and Y are the pixel coordinates of the mouse pointer within the client area of the control.
Override the protected MouseMove method to provide other responses when the mouse cursor moves over the control.
</summary></devnotes></procedure>
      <procedure name="MouseUp" visibility="public" procflags="override" file="FMX.StdCtrls.pas" line="795">
        <parameters>
          <parameter name="Button" type="TMouseButton"/>
          <parameter name="Shift" type="TShiftState"/>
          <parameter name="X" type="Single"/>
          <parameter name="Y" type="Single"/>
        </parameters>
      <devnotes><summary>
OnMouseUp event dispatcher. 
FMX.StdCtrls.TCheckBox.MouseUp inherits from FMX.Controls.TControl.MouseUp. All content below this line refers to FMX.Controls.TControl.MouseUp.
OnMouseUp event dispatcher. 
A control calls MouseUp in response to any of mouse-up messages, decoding the message parameters into the shift-key state and position, which it passes in the Shift, X and Y parameters, respectively: 

Button determines which mouse button was previously pressed: left, right, or middle.
Shift indicates which shift keys--SHIFT, CTRL, ALT, and CMD (only for Mac)--were down when the pressed mouse button is released.
X and Y are the pixel coordinates of the mouse pointer within the client area of the control.
Override the protected MouseUp method to provide other responses when the mouse button previously pressed is released while the cursor is over the control.
</summary></devnotes></procedure>
      <procedure name="KeyDown" visibility="public" procflags="override" file="FMX.StdCtrls.pas" line="796">
        <parameters>
          <parameter name="Key" type="Word" paramflags="var"/>
          <parameter name="KeyChar" type="Char" paramflags="var"/>
          <parameter name="Shift" type="TShiftState"/>
        </parameters>
      <devnotes><summary>
Sends a PM_KEYDOWN message to the presentation layer through its presentation proxy when a key is pressed down while your presented control has the focus.
FMX.StdCtrls.TCheckBox.KeyDown inherits from FMX.Controls.Presentation.TPresentedControl.KeyDown. All content below this line refers to FMX.Controls.Presentation.TPresentedControl.KeyDown.
Sends a PM_KEYDOWN message to the presentation layer through its presentation proxy when a key is pressed down while your presented control has the focus.
The message includes a TKeyInfo record that contains the data of the parameters (AKey, AKeyChar, AShift).

 See Also
FMX.Controls.Presentation.TPresentedControl.PresentationProxy
FMX.Presentation.Messages.TMessageSender.SendMessage
FMX.Controls.Presentation.TKeyInfo
FMX.Controls.TControl.KeyDown
FMX.Forms.TCommonCustomForm.KeyDown
FMX.Controls.Presentation.TPresentedControl.KeyUp

</summary></devnotes></procedure>
      <property name="IsPressed" visibility="public" read="FIsPressed" type="Boolean" default="0" file="FMX.StdCtrls.pas" line="797"><devnotes><summary>
Reads the pressed state of this check box.
The IsPressed read-only property is True when this check box is pressed, False otherwise.
</summary></devnotes></property>
      <property name="Font" visibility="public" read="GetFont" write="SetFont" type="TFont" hoisted="true" file="FMX.StdCtrls.pas" line="798"/>
      <property name="TextAlign" visibility="public" read="GetTextAlign" write="SetTextAlign" type="TTextAlign" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="799"/>
      <property name="WordWrap" visibility="public" read="GetWordWrap" write="SetWordWrap" type="Boolean" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="800"/>
      <property name="Action" visibility="published" read="GetAction" write="SetAction" type="TBasicAction" hoisted="true" file="FMX.StdCtrls.pas" line="802"/>
      <property name="Align" visibility="published" read="FAlign" write="SetAlign" type="TAlignLayout" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="803"/>
      <property name="Anchors" visibility="published" read="FAnchors" write="SetAnchors" stored="IsAnchorsStored" type="TAnchors" hoisted="true" file="FMX.StdCtrls.pas" line="804"/>
      <property name="AutoTranslate" visibility="published" read="FAutoTranslate" write="FAutoTranslate" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="805"/>
      <property name="CanFocus" visibility="published" read="FCanFocus" write="FCanFocus" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="806"/>
      <property name="CanParentFocus" visibility="published" read="FCanParentFocus" write="FCanParentFocus" type="Boolean" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="807"/>
      <property name="ClipChildren" visibility="published" read="FClipChildren" write="SetClipChildren" type="Boolean" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="808"/>
      <property name="ClipParent" visibility="published" read="FClipParent" write="FClipParent" type="Boolean" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="809"/>
      <property name="ControlType" visibility="published" read="GetControlType" write="SetControlType" type="TControlType" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="810"/>
      <property name="Cursor" visibility="published" read="GetCursor" write="SetCursor" type="TCursor" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="811"/>
      <property name="DisableFocusEffect" visibility="published" read="FDisableFocusEffect" write="FDisableFocusEffect" type="Boolean" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="812"/>
      <property name="DragMode" visibility="published" read="GetDragMode" write="SetDragMode" type="TDragMode" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="813"/>
      <property name="EnableDragHighlight" visibility="published" read="FEnableDragHighlight" write="FEnableDragHighlight" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="814"/>
      <property name="Enabled" visibility="published" read="FEnabled" write="SetEnabled" stored="EnabledStored" type="Boolean" hoisted="true" file="FMX.StdCtrls.pas" line="815"/>
      <property name="StyledSettings" visibility="published" read="GetStyledSettings" write="SetStyledSettings" stored="StyledSettingsStored" type="TStyledSettings" hoisted="true" file="FMX.StdCtrls.pas" line="816"/>
      <property name="Locked" visibility="published" read="FLocked" write="SetLocked" type="Boolean" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="817"/>
      <property name="Height" visibility="published" read="GetHeight" write="SetHeight" stored="False" type="Single" hoisted="true" file="FMX.StdCtrls.pas" line="818"/>
      <property name="HelpContext" visibility="published" read="FHelpContext" write="SetHelpContext" stored="IsHelpContextStored" type="THelpContext" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="819"/>
      <property name="HelpKeyword" visibility="published" read="FHelpKeyword" write="SetHelpKeyword" stored="IsHelpContextStored" type="string" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="820"/>
      <property name="HelpType" visibility="published" read="FHelpType" write="FHelpType" type="THelpType" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="821"/>
      <property name="Hint" visibility="published" read="FHint" write="SetHint" stored="HintStored" type="string" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="822"/>
      <property name="HitTest" visibility="published" read="FHitTest" write="SetHitTest" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="823"/>
      <property name="IsChecked" visibility="published" read="GetIsChecked" write="SetIsChecked" stored="IsCheckedStored" type="Boolean" default="0" file="FMX.StdCtrls.pas" line="824"><devnotes><summary>
Specifies whether the default state of this check box is selected or cleared.
Set the IsChecked property to True in order to force this check box's default state to be selected. The check box becomes cleared once you click it again.
</summary></devnotes></property>
      <property name="Padding" visibility="published" read="GetPadding" write="SetPadding" type="TBounds" hoisted="true" file="FMX.StdCtrls.pas" line="825"/>
      <property name="Opacity" visibility="published" read="FOpacity" write="SetOpacity" stored="IsOpacityStored" type="Single" hoisted="true" file="FMX.StdCtrls.pas" line="826"/>
      <property name="Margins" visibility="published" read="GetMargins" write="SetMargins" type="TBounds" hoisted="true" file="FMX.StdCtrls.pas" line="827"/>
      <property name="PopupMenu" visibility="published" read="FPopupMenu" write="SetPopupMenu" stored="IsPopupMenuStored" type="TCustomPopupMenu" hoisted="true" file="FMX.StdCtrls.pas" line="828"/>
      <property name="Position" visibility="published" read="FPosition" write="SetPosition" stored="IsPositionStored" type="TPosition" hoisted="true" file="FMX.StdCtrls.pas" line="829"/>
      <property name="RotationAngle" visibility="published" read="GetRotationAngle" write="SetRotationAngle" type="Single" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="830"/>
      <property name="RotationCenter" visibility="published" read="GetRotationCenter" write="SetRotationCenter" type="TPosition" hoisted="true" file="FMX.StdCtrls.pas" line="831"/>
      <property name="Scale" visibility="published" read="GetScale" write="SetScale" type="TPosition" hoisted="true" file="FMX.StdCtrls.pas" line="832"/>
      <property name="Size" visibility="published" read="FSize" write="SetSize" stored="IsSizeStored" type="TControlSize" hoisted="true" file="FMX.StdCtrls.pas" line="833"/>
      <property name="StyleLookup" visibility="published" read="FStyleLookup" write="SetStyleLookup" type="string" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="834"/>
      <property name="TabOrder" visibility="published" read="GetTabOrder" write="SetTabOrder" type="TTabOrder" default="-1" hoisted="true" file="FMX.StdCtrls.pas" line="835"/>
      <property name="TabStop" visibility="published" read="GetTabStop" write="SetTabStop" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="836"/>
      <property name="Text" visibility="published" read="GetText" write="SetText" stored="TextStored" type="string" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="837"/>
      <property name="TextSettings" visibility="published" read="GetTextSettings" write="SetTextSettings" type="TTextSettings" hoisted="true" file="FMX.StdCtrls.pas" line="838"/>
      <property name="TouchTargetExpansion" visibility="published" read="FTouchTargetExpansion" write="SetTouchTargetExpansion" type="TBounds" hoisted="true" file="FMX.StdCtrls.pas" line="839"/>
      <property name="Visible" visibility="published" read="FVisible" write="SetVisible" stored="VisibleStored" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="840"/>
      <property name="Width" visibility="published" read="GetWidth" write="SetWidth" stored="False" type="Single" hoisted="true" file="FMX.StdCtrls.pas" line="841"/>
      <property name="ParentShowHint" visibility="published" read="FParentShowHint" write="SetParentShowHint" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="842"/>
      <property name="ShowHint" visibility="published" read="FShowHint" write="SetShowHint" stored="IsShowHintStored" type="Boolean" hoisted="true" file="FMX.StdCtrls.pas" line="843"/>
      <event name="OnApplyStyleLookup" visibility="published" read="FOnApplyStyleLookup" write="FOnApplyStyleLookup" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="845"/>
      <event name="OnChange" visibility="published" read="FOnChange" write="FOnChange" type="TNotifyEvent" file="FMX.StdCtrls.pas" line="846"><devnotes><summary>
Occurs when the state of TCheckBox is changed.
Usually, the OnChange event happens when the check box's state is changed. This can happen:

When the state is altered programmatically by setting the IsChecked property.
By user interaction, after the box is clicked by mouse.
When the control has keyboard focus, by pressing SPACE or ENTER.
Write an OnChange event handler to customize what happens when the box is selected. 

Tip: The OnClick event happens before the OnChange event. </summary></devnotes></event>
      <event name="OnDragEnter" visibility="published" read="FOnDragEnter" write="FOnDragEnter" type="TDragEnterEvent" hoisted="true" file="FMX.StdCtrls.pas" line="848"/>
      <event name="OnDragLeave" visibility="published" read="FOnDragLeave" write="FOnDragLeave" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="849"/>
      <event name="OnDragOver" visibility="published" read="FOnDragOver" write="FOnDragOver" type="TDragOverEvent" hoisted="true" file="FMX.StdCtrls.pas" line="850"/>
      <event name="OnDragDrop" visibility="published" read="FOnDragDrop" write="FOnDragDrop" type="TDragDropEvent" hoisted="true" file="FMX.StdCtrls.pas" line="851"/>
      <event name="OnDragEnd" visibility="published" read="FOnDragEnd" write="FOnDragEnd" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="852"/>
      <event name="OnKeyDown" visibility="published" read="FOnKeyDown" write="FOnKeyDown" type="TKeyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="854"/>
      <event name="OnKeyUp" visibility="published" read="FOnKeyUp" write="FOnKeyUp" type="TKeyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="855"/>
      <event name="OnCanFocus" visibility="published" read="FOnCanFocus" write="FOnCanFocus" type="TCanFocusEvent" hoisted="true" file="FMX.StdCtrls.pas" line="857"/>
      <event name="OnClick" visibility="published" read="FOnClick" write="SetOnClick" stored="OnClickStored" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="858"/>
      <event name="OnDblClick" visibility="published" read="FOnDblClick" write="FOnDblClick" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="859"/>
      <event name="OnEnter" visibility="published" read="FOnEnter" write="FOnEnter" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="861"/>
      <event name="OnExit" visibility="published" read="FOnExit" write="FOnExit" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="862"/>
      <event name="OnMouseDown" visibility="published" read="FOnMouseDown" write="FOnMouseDown" type="TMouseEvent" hoisted="true" file="FMX.StdCtrls.pas" line="863"/>
      <event name="OnMouseMove" visibility="published" read="FOnMouseMove" write="FOnMouseMove" type="TMouseMoveEvent" hoisted="true" file="FMX.StdCtrls.pas" line="864"/>
      <event name="OnMouseUp" visibility="published" read="FOnMouseUp" write="FOnMouseUp" type="TMouseEvent" hoisted="true" file="FMX.StdCtrls.pas" line="865"/>
      <event name="OnMouseWheel" visibility="published" read="FOnMouseWheel" write="FOnMouseWheel" type="TMouseWheelEvent" hoisted="true" file="FMX.StdCtrls.pas" line="866"/>
      <event name="OnMouseEnter" visibility="published" read="FOnMouseEnter" write="FOnMouseEnter" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="867"/>
      <event name="OnMouseLeave" visibility="published" read="FOnMouseLeave" write="FOnMouseLeave" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="868"/>
      <event name="OnPainting" visibility="published" read="FOnPainting" write="FOnPainting" type="TOnPaintEvent" hoisted="true" file="FMX.StdCtrls.pas" line="870"/>
      <event name="OnPaint" visibility="published" read="FOnPaint" write="FOnPaint" type="TOnPaintEvent" hoisted="true" file="FMX.StdCtrls.pas" line="871"/>
      <event name="OnResize" visibility="published" read="FOnResize" write="FOnResize" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="872"/>
      <event name="OnResized" visibility="published" read="FOnResized" write="FOnResized" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="873"/>
    </members>
  <devnotes><summary>
Represents a FireMonkey styled check box that can be either on (selected) or off (cleared).
TCheckBox represents a FireMonkey styled check box that can be either on (selected) or off (cleared). A TCheckBox component presents you an option. Select the box to turn on the option, or clear it to turn off the option.
A FireMonkey TCheckBox control supports linking to a Boolean database field. The Boolean field can be null, so there are actually three states: True, False, Null. The TCheckBox control treats the Null state as False.
The Text property can be used to define an accelerator key to a control. The accelerator key behavior for TCheckBox is to check and uncheck the box control.
</summary></devnotes></class>
  <class name="TRadioButtonGroupMessage" file="FMX.StdCtrls.pas" line="878">
    
    <members>
      <field name="FGroupName" type="string" visibility="private" size="4" offset="4" file="FMX.StdCtrls.pas" line="880"/>
      <constructor name="Create" visibility="public" file="FMX.StdCtrls.pas" line="882">
        <parameters>
          <parameter name="AGroupName" type="string" paramflags="const"/>
        </parameters>
      </constructor>
      <property name="GroupName" visibility="public" read="FGroupName" type="string" default="0" file="FMX.StdCtrls.pas" line="883"/>
    </members>
  </class>
  <class name="TRadioButton" file="FMX.StdCtrls.pas" line="886">
    
    <interfaces>
      <implements name="IIsChecked"/>
      <implements name="IGroupName"/>
    </interfaces>
    <members>
      <field name="FPressing" type="Boolean" visibility="private" size="1" offset="1040" file="FMX.StdCtrls.pas" line="888"/>
      <field name="FOnChange" type="TNotifyEvent" visibility="private" size="8" offset="1048" file="FMX.StdCtrls.pas" line="889"/>
      <field name="FIsPressed" type="Boolean" visibility="private" size="1" offset="1056" file="FMX.StdCtrls.pas" line="890"/>
      <field name="FIsChecked" type="Boolean" visibility="private" size="1" offset="1057" file="FMX.StdCtrls.pas" line="891"/>
      <field name="FGroupName" type="string" visibility="private" size="4" offset="1060" file="FMX.StdCtrls.pas" line="892"/>
      <function name="GetIsChecked" visibility="private" file="FMX.StdCtrls.pas" line="893">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <procedure name="SetIsChecked" visibility="private" file="FMX.StdCtrls.pas" line="894">
        <parameters>
          <parameter name="Value" type="Boolean" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="IsCheckedStored" visibility="private" file="FMX.StdCtrls.pas" line="895">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <function name="GetGroupName" visibility="private" file="FMX.StdCtrls.pas" line="896">
        <parameters>
          <retval type="string"/>
        </parameters>
      </function>
      <procedure name="SetGroupName" visibility="private" file="FMX.StdCtrls.pas" line="897">
        <parameters>
          <parameter name="Value" type="string" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="GroupNameStored" visibility="private" file="FMX.StdCtrls.pas" line="898">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <procedure name="GroupMessageCall" visibility="private" file="FMX.StdCtrls.pas" line="899">
        <parameters>
          <parameter name="Sender" type="TObject" paramflags="const"/>
          <parameter name="M" type="TMessageBase" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="ApplyStyle" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="901">
      <devnotes><summary>


Customizes styles in complex objects.
FMX.StdCtrls.TRadioButton.ApplyStyle inherits from FMX.Controls.TStyledControl.ApplyStyle. All content below this line refers to FMX.Controls.TStyledControl.ApplyStyle.
Customizes styles in complex objects.
TStyledControl descendants override it to apply styles in concordance with their primitive components.      
Do not call ApplyStyle explicitly in an application. It is called by the ApplyStyleLookup method when object styles are updated.
For an example of an ApplyStyle implementation, see &quot;TCalloutPanel:Style Contracts&quot; in FireMonkey Component Design.
</summary></devnotes></procedure>
      <procedure name="FreeStyle" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="902">
      <devnotes><summary>


Frees the style of TStyledControl.
FMX.StdCtrls.TRadioButton.FreeStyle inherits from FMX.Controls.TStyledControl.FreeStyle. All content below this line refers to FMX.Controls.TStyledControl.FreeStyle.
Frees the style of TStyledControl.
Override it to free additional component-specific style resources.
</summary></devnotes></procedure>
      <function name="GetData" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="903">
        <parameters>
          <retval type="TValue">
            <attributes>
              <attribute name="HPPGENAttribute"/>
            </attributes>
          </retval>
        </parameters>
      <devnotes><summary>
Protected getter implementation for the Data property.
GetData overrides FMX.Types.TFmxObject.GetData and returns the value of IsChecked.
</summary></devnotes></function>
      <procedure name="SetData" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="904">
        <parameters>
          <parameter name="Value" type="TValue" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Protected setter implementation for the Data property.
SetData overrides FMX.Types.TFmxObject.SetData and sets the value of IsChecked.
Value is the new Boolean value of IsChecked, or an event handler to be assigned to OnChange.
</summary></devnotes></procedure>
      <procedure name="ActionChange" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="905">
        <parameters>
          <parameter name="Sender" type="TBasicAction"/>
          <parameter name="CheckDefaults" type="Boolean"/>
        </parameters>
      <devnotes><summary>
Specifies the behavior of a TRadioButton menu item when Action changes. 
ActionChange calls the inherited TTextControl.ActionChange method and then, depending on the CheckDefaults value,  ActionChange uses properties of the Sender action to set new values to the  
IsChecked and GroupName properties of TRadioButton. 
Do not call ActionChange explicitly in an application. It is for internal use.
</summary></devnotes></procedure>
      <function name="GetDefaultSize" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="906">
        <parameters>
          <retval type="TSizeF"/>
        </parameters>
      <devnotes><summary>
Getter of DefaultSize.
FMX.StdCtrls.TRadioButton.GetDefaultSize inherits from FMX.Controls.TControl.GetDefaultSize. All content below this line refers to FMX.Controls.TControl.GetDefaultSize.
Getter of DefaultSize.


</summary></devnotes></function>
      <function name="GetTextSettingsClass" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="907">
        <parameters>
          <retval type="TTextSettingsInfo.TCustomTextSettingsClass"/>
        </parameters>
      <devnotes><summary>
Returns the class type that instance represents the used text settings.
FMX.StdCtrls.TRadioButton.GetTextSettingsClass inherits from FMX.StdCtrls.TPresentedTextControl.GetTextSettingsClass. All content below this line refers to FMX.StdCtrls.TPresentedTextControl.GetTextSettingsClass.
Returns the class type that instance represents the used text settings.
GetTextSettingsClass returns the TTextSettingsInfo.TCustomTextSettingsClass (or its descendant)  class reference. An instance of such class provides the DefaultTextSettings,   TextSettings, StyledSettings, ResultingTextSettings, and other properties handling the text representation settings of a control. 
You can override the method in descendant classes to modify the default behavior.
Typical implementations of GetTextSettingsClass returns the class declaring properties like the Font, FontColor, HorzAlign, and WordWrap. Some of these properties can be declared as published to be editable in the Object Inspector.

 See Also
FMX.Controls.TTextSettingsInfo
FMX.Controls.TTextSettingsInfo.TCustomTextSettingsClass
FMX.Controls.TTextSettingsInfo.DefaultTextSettings
FMX.Controls.TTextSettingsInfo.TextSettings
FMX.Controls.TTextSettingsInfo.StyledSettings
FMX.Controls.TTextSettingsInfo.ResultingTextSettings

</summary></devnotes></function>
      <procedure name="TriggerAcceleratorKey" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="911">
        <devnotes><summary>
Allows the object to perform an action when the accelerator key is pressed.
FMX.StdCtrls.TRadioButton.TriggerAcceleratorKey inherits from FMX.AcceleratorKey.IAcceleratorKeyReceiver.TriggerAcceleratorKey. All content below this line refers to FMX.AcceleratorKey.IAcceleratorKeyReceiver.TriggerAcceleratorKey.
Allows the object to perform an action when the accelerator key is pressed.
Use TriggerAcceleratorKey to trigger an action as a response to the accelerator key. For example, use TriggerAcceleratorKey to set focus to the acceleration key receiver control.

 See Also
FMX.AcceleratorKey.IAcceleratorKeyReceiver.CanTriggerAcceleratorKey

</summary></devnotes>
      </procedure>
      <constructor name="Create" visibility="public" file="FMX.StdCtrls.pas" line="913">
        <parameters>
          <parameter name="AOwner" type="TComponent"/>
        </parameters>
      <devnotes><summary>


Creates a new instance of TPresentedControl.
FMX.StdCtrls.TRadioButton.Create inherits from FMX.Controls.Presentation.TPresentedControl.Create. All content below this line refers to FMX.Controls.Presentation.TPresentedControl.Create.
Creates a new instance of TPresentedControl.
AOwner takes ownership of the control and becomes responsible of destroying the control once the control is no longer necessary.
The control constructor creates a data model for the control. DefineModelClass determines the default class of data model for each subclass of TPresentedControl.
Create also sets the value of the CanUseDefaultPresentation property to True.

 See Also
System.Classes.TComponent.Create
FMX.Controls.Presentation.TPresentedControl.Model
FMX.Controls.Presentation.TPresentedControl.DefineModelClass
FMX.Controls.Presentation.TPresentedControl.Destroy
FMX.Controls.Presentation.TPresentedControl.CanUseDefaultPresentation

</summary></devnotes></constructor>
      <destructor name="Destroy" visibility="public" file="FMX.StdCtrls.pas" line="914">
        <parameters>
        </parameters>
      <devnotes><summary>


Destroys this instance of TPresentedControl.
FMX.StdCtrls.TRadioButton.Destroy inherits from FMX.Controls.Presentation.TPresentedControl.Destroy. All content below this line refers to FMX.Controls.Presentation.TPresentedControl.Destroy.
Destroys this instance of TPresentedControl.

 See Also
FMX.Controls.Presentation.TPresentedControl.Create

</summary></devnotes></destructor>
      <procedure name="SetNewScene" visibility="public" procflags="override" file="FMX.StdCtrls.pas" line="915">
        <parameters>
          <parameter name="AScene" type="IScene"/>
        </parameters>
      <devnotes><summary>
Sets a new Scene for the current control.
Sets a new Scene for the current control.
FMX.StdCtrls.TRadioButton.SetNewScene inherits from FMX.Controls.TControl.SetNewScene. All content below this line refers to FMX.Controls.TControl.SetNewScene.
Sets a new Scene for the current control.
AScene specifies the new scene. If AScene is empty, SetNewScene does nothing.
SetNewScene sets the same scene for the control's children.
</summary></devnotes></procedure>
      <procedure name="MouseDown" visibility="public" procflags="override" file="FMX.StdCtrls.pas" line="916">
        <parameters>
          <parameter name="Button" type="TMouseButton"/>
          <parameter name="Shift" type="TShiftState"/>
          <parameter name="X" type="Single"/>
          <parameter name="Y" type="Single"/>
        </parameters>
      <devnotes><summary>
OnMouseDown event dispatcher. 
FMX.StdCtrls.TRadioButton.MouseDown inherits from FMX.Controls.TControl.MouseDown. All content below this line refers to FMX.Controls.TControl.MouseDown.
OnMouseDown event dispatcher. 
A control calls MouseDown in response to any of mouse-down messages, decoding the message parameters into the shift-key state and position, which it passes in the Shift, X, and Y parameters, respectively:

Button determines which mouse button is pressed: left, right, or middle.
Shift indicates which shift keys--SHIFT, CTRL, ALT, and CMD (only for Mac)--were down when the user pressed the mouse button.
X and Y are the pixel coordinates of the mouse pointer within the client area of the control. If Button is mbLeft, MouseDown sets PressedPosition as a TPointF(X,Y).
Override the protected MouseDown method to provide other responses when a mouse button is down while the cursor is over the control.

</summary></devnotes></procedure>
      <procedure name="MouseMove" visibility="public" procflags="override" file="FMX.StdCtrls.pas" line="917">
        <parameters>
          <parameter name="Shift" type="TShiftState"/>
          <parameter name="X" type="Single"/>
          <parameter name="Y" type="Single"/>
        </parameters>
      <devnotes><summary>
OnMouseMove event dispatcher. 
FMX.StdCtrls.TRadioButton.MouseMove inherits from FMX.Controls.TControl.MouseMove. All content below this line refers to FMX.Controls.TControl.MouseMove.
OnMouseMove event dispatcher. 
As the mouse cursor moves across a control, this method is called repeatedly. Each time it is called with the new coordinates that reflect the continuous path of the mouse cursor across the screen real estate covered by the control's visual representation:

Shift indicates which shift keys--SHIFT, CTRL, ALT, and CMD (only for Mac)--were down when the mouse cursor is over the control.
X and Y are the pixel coordinates of the mouse pointer within the client area of the control.
Override the protected MouseMove method to provide other responses when the mouse cursor moves over the control.
</summary></devnotes></procedure>
      <procedure name="MouseUp" visibility="public" procflags="override" file="FMX.StdCtrls.pas" line="918">
        <parameters>
          <parameter name="Button" type="TMouseButton"/>
          <parameter name="Shift" type="TShiftState"/>
          <parameter name="X" type="Single"/>
          <parameter name="Y" type="Single"/>
        </parameters>
      <devnotes><summary>
OnMouseUp event dispatcher. 
FMX.StdCtrls.TRadioButton.MouseUp inherits from FMX.Controls.TControl.MouseUp. All content below this line refers to FMX.Controls.TControl.MouseUp.
OnMouseUp event dispatcher. 
A control calls MouseUp in response to any of mouse-up messages, decoding the message parameters into the shift-key state and position, which it passes in the Shift, X and Y parameters, respectively: 

Button determines which mouse button was previously pressed: left, right, or middle.
Shift indicates which shift keys--SHIFT, CTRL, ALT, and CMD (only for Mac)--were down when the pressed mouse button is released.
X and Y are the pixel coordinates of the mouse pointer within the client area of the control.
Override the protected MouseUp method to provide other responses when the mouse button previously pressed is released while the cursor is over the control.
</summary></devnotes></procedure>
      <procedure name="KeyDown" visibility="public" procflags="override" file="FMX.StdCtrls.pas" line="919">
        <parameters>
          <parameter name="Key" type="Word" paramflags="var"/>
          <parameter name="KeyChar" type="Char" paramflags="var"/>
          <parameter name="Shift" type="TShiftState"/>
        </parameters>
      <devnotes><summary>
Sends a PM_KEYDOWN message to the presentation layer through its presentation proxy when a key is pressed down while your presented control has the focus.
FMX.StdCtrls.TRadioButton.KeyDown inherits from FMX.Controls.Presentation.TPresentedControl.KeyDown. All content below this line refers to FMX.Controls.Presentation.TPresentedControl.KeyDown.
Sends a PM_KEYDOWN message to the presentation layer through its presentation proxy when a key is pressed down while your presented control has the focus.
The message includes a TKeyInfo record that contains the data of the parameters (AKey, AKeyChar, AShift).

 See Also
FMX.Controls.Presentation.TPresentedControl.PresentationProxy
FMX.Presentation.Messages.TMessageSender.SendMessage
FMX.Controls.Presentation.TKeyInfo
FMX.Controls.TControl.KeyDown
FMX.Forms.TCommonCustomForm.KeyDown
FMX.Controls.Presentation.TPresentedControl.KeyUp

</summary></devnotes></procedure>
      <property name="IsPressed" visibility="public" read="FIsPressed" type="Boolean" file="FMX.StdCtrls.pas" line="920"><devnotes><summary>
Reads the pressed state of this radio button.
The IsPressed read-only property is True when this radio button is pressed, False otherwise.
</summary></devnotes></property>
      <property name="TextAlign" visibility="public" read="GetTextAlign" write="SetTextAlign" type="TTextAlign" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="921"/>
      <property name="Font" visibility="public" read="GetFont" write="SetFont" type="TFont" hoisted="true" file="FMX.StdCtrls.pas" line="922"/>
      <property name="WordWrap" visibility="public" read="GetWordWrap" write="SetWordWrap" type="Boolean" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="923"/>
      <property name="Action" visibility="published" read="GetAction" write="SetAction" type="TBasicAction" hoisted="true" file="FMX.StdCtrls.pas" line="925"/>
      <property name="Align" visibility="published" read="FAlign" write="SetAlign" type="TAlignLayout" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="926"/>
      <property name="Anchors" visibility="published" read="FAnchors" write="SetAnchors" stored="IsAnchorsStored" type="TAnchors" hoisted="true" file="FMX.StdCtrls.pas" line="927"/>
      <property name="AutoTranslate" visibility="published" read="FAutoTranslate" write="FAutoTranslate" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="928"/>
      <property name="CanFocus" visibility="published" read="FCanFocus" write="FCanFocus" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="929"/>
      <property name="CanParentFocus" visibility="published" read="FCanParentFocus" write="FCanParentFocus" type="Boolean" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="930"/>
      <property name="ClipChildren" visibility="published" read="FClipChildren" write="SetClipChildren" type="Boolean" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="931"/>
      <property name="ClipParent" visibility="published" read="FClipParent" write="FClipParent" type="Boolean" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="932"/>
      <property name="ControlType" visibility="published" read="GetControlType" write="SetControlType" type="TControlType" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="933"/>
      <property name="Cursor" visibility="published" read="GetCursor" write="SetCursor" type="TCursor" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="934"/>
      <property name="DisableFocusEffect" visibility="published" read="FDisableFocusEffect" write="FDisableFocusEffect" type="Boolean" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="935"/>
      <property name="DragMode" visibility="published" read="GetDragMode" write="SetDragMode" type="TDragMode" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="936"/>
      <property name="EnableDragHighlight" visibility="published" read="FEnableDragHighlight" write="FEnableDragHighlight" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="937"/>
      <property name="Enabled" visibility="published" read="FEnabled" write="SetEnabled" stored="EnabledStored" type="Boolean" hoisted="true" file="FMX.StdCtrls.pas" line="938"/>
      <property name="StyledSettings" visibility="published" read="GetStyledSettings" write="SetStyledSettings" stored="StyledSettingsStored" type="TStyledSettings" hoisted="true" file="FMX.StdCtrls.pas" line="939"/>
      <property name="GroupName" visibility="published" read="GetGroupName" write="SetGroupName" stored="GroupNameStored" type="string" file="FMX.StdCtrls.pas" line="940"><devnotes><summary>
Specifies the name of the group this radio button is part of.
Set the GroupName property to the name of the group this radio button belongs to. If multiple radio buttons are part of the same group, that is, all of them have the same GroupName, when you click one of them, it becomes selected, while the others in this group become cleared.
</summary></devnotes></property>
      <property name="Locked" visibility="published" read="FLocked" write="SetLocked" type="Boolean" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="941"/>
      <property name="Height" visibility="published" read="GetHeight" write="SetHeight" stored="False" type="Single" hoisted="true" file="FMX.StdCtrls.pas" line="942"/>
      <property name="HelpContext" visibility="published" read="FHelpContext" write="SetHelpContext" stored="IsHelpContextStored" type="THelpContext" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="943"/>
      <property name="HelpKeyword" visibility="published" read="FHelpKeyword" write="SetHelpKeyword" stored="IsHelpContextStored" type="string" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="944"/>
      <property name="HelpType" visibility="published" read="FHelpType" write="FHelpType" type="THelpType" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="945"/>
      <property name="Hint" visibility="published" read="FHint" write="SetHint" stored="HintStored" type="string" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="946"/>
      <property name="HitTest" visibility="published" read="FHitTest" write="SetHitTest" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="947"/>
      <property name="IsChecked" visibility="published" read="GetIsChecked" write="SetIsChecked" stored="IsCheckedStored" type="Boolean" default="0" file="FMX.StdCtrls.pas" line="949"><devnotes><summary>
Specifies whether the default state of this radio button is selected or cleared.
Set the IsChecked property to True to force this radio button's default state to be selected. The button comes back to its initial cleared state once you click it.
</summary></devnotes></property>
      <property name="Padding" visibility="published" read="GetPadding" write="SetPadding" type="TBounds" hoisted="true" file="FMX.StdCtrls.pas" line="951"/>
      <property name="Opacity" visibility="published" read="FOpacity" write="SetOpacity" stored="IsOpacityStored" type="Single" hoisted="true" file="FMX.StdCtrls.pas" line="952"/>
      <property name="Margins" visibility="published" read="GetMargins" write="SetMargins" type="TBounds" hoisted="true" file="FMX.StdCtrls.pas" line="953"/>
      <property name="PopupMenu" visibility="published" read="FPopupMenu" write="SetPopupMenu" stored="IsPopupMenuStored" type="TCustomPopupMenu" hoisted="true" file="FMX.StdCtrls.pas" line="954"/>
      <property name="Position" visibility="published" read="FPosition" write="SetPosition" stored="IsPositionStored" type="TPosition" hoisted="true" file="FMX.StdCtrls.pas" line="955"/>
      <property name="RotationAngle" visibility="published" read="GetRotationAngle" write="SetRotationAngle" type="Single" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="956"/>
      <property name="RotationCenter" visibility="published" read="GetRotationCenter" write="SetRotationCenter" type="TPosition" hoisted="true" file="FMX.StdCtrls.pas" line="957"/>
      <property name="Scale" visibility="published" read="GetScale" write="SetScale" type="TPosition" hoisted="true" file="FMX.StdCtrls.pas" line="958"/>
      <property name="Size" visibility="published" read="FSize" write="SetSize" stored="IsSizeStored" type="TControlSize" hoisted="true" file="FMX.StdCtrls.pas" line="959"/>
      <property name="StyleLookup" visibility="published" read="FStyleLookup" write="SetStyleLookup" type="string" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="960"/>
      <property name="TabOrder" visibility="published" read="GetTabOrder" write="SetTabOrder" type="TTabOrder" default="-1" hoisted="true" file="FMX.StdCtrls.pas" line="961"/>
      <property name="TabStop" visibility="published" read="GetTabStop" write="SetTabStop" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="962"/>
      <property name="Text" visibility="published" read="GetText" write="SetText" stored="TextStored" type="string" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="963"/>
      <property name="TextSettings" visibility="published" read="GetTextSettings" write="SetTextSettings" type="TTextSettings" hoisted="true" file="FMX.StdCtrls.pas" line="964"/>
      <property name="TouchTargetExpansion" visibility="published" read="FTouchTargetExpansion" write="SetTouchTargetExpansion" type="TBounds" hoisted="true" file="FMX.StdCtrls.pas" line="965"/>
      <property name="Visible" visibility="published" read="FVisible" write="SetVisible" stored="VisibleStored" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="966"/>
      <property name="Width" visibility="published" read="GetWidth" write="SetWidth" stored="False" type="Single" hoisted="true" file="FMX.StdCtrls.pas" line="967"/>
      <property name="ParentShowHint" visibility="published" read="FParentShowHint" write="SetParentShowHint" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="968"/>
      <property name="ShowHint" visibility="published" read="FShowHint" write="SetShowHint" stored="IsShowHintStored" type="Boolean" hoisted="true" file="FMX.StdCtrls.pas" line="969"/>
      <event name="OnApplyStyleLookup" visibility="published" read="FOnApplyStyleLookup" write="FOnApplyStyleLookup" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="972"/>
      <event name="OnChange" visibility="published" read="FOnChange" write="FOnChange" type="TNotifyEvent" file="FMX.StdCtrls.pas" line="973"><devnotes><summary>
Occurs when the state of TRadioButton is changed.
Usually, an OnChange event happens when the radio button state is changed. 
This can happen:

When the state is altered programmatically by setting the IsChecked property.
By user interaction, after the radio button is clicked.
When the control has keyboard focus, by pressing SPACE or ENTER.
Selecting the state of a radio button will clear all the other radio buttons within the defined GroupName, causing their respective OnChange events. OnChange will not occur on those TRadioButtons whose state would not have changed.
TRadioButtons that have their GroupName undefined form a default group of radio buttons.

Tip: The OnClick event happens before the OnChange event. </summary></devnotes></event>
      <event name="OnDragEnter" visibility="published" read="FOnDragEnter" write="FOnDragEnter" type="TDragEnterEvent" hoisted="true" file="FMX.StdCtrls.pas" line="975"/>
      <event name="OnDragLeave" visibility="published" read="FOnDragLeave" write="FOnDragLeave" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="976"/>
      <event name="OnDragOver" visibility="published" read="FOnDragOver" write="FOnDragOver" type="TDragOverEvent" hoisted="true" file="FMX.StdCtrls.pas" line="977"/>
      <event name="OnDragDrop" visibility="published" read="FOnDragDrop" write="FOnDragDrop" type="TDragDropEvent" hoisted="true" file="FMX.StdCtrls.pas" line="978"/>
      <event name="OnDragEnd" visibility="published" read="FOnDragEnd" write="FOnDragEnd" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="979"/>
      <event name="OnKeyDown" visibility="published" read="FOnKeyDown" write="FOnKeyDown" type="TKeyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="981"/>
      <event name="OnKeyUp" visibility="published" read="FOnKeyUp" write="FOnKeyUp" type="TKeyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="982"/>
      <event name="OnCanFocus" visibility="published" read="FOnCanFocus" write="FOnCanFocus" type="TCanFocusEvent" hoisted="true" file="FMX.StdCtrls.pas" line="984"/>
      <event name="OnClick" visibility="published" read="FOnClick" write="SetOnClick" stored="OnClickStored" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="985"/>
      <event name="OnDblClick" visibility="published" read="FOnDblClick" write="FOnDblClick" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="986"/>
      <event name="OnEnter" visibility="published" read="FOnEnter" write="FOnEnter" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="988"/>
      <event name="OnExit" visibility="published" read="FOnExit" write="FOnExit" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="989"/>
      <event name="OnMouseDown" visibility="published" read="FOnMouseDown" write="FOnMouseDown" type="TMouseEvent" hoisted="true" file="FMX.StdCtrls.pas" line="990"/>
      <event name="OnMouseMove" visibility="published" read="FOnMouseMove" write="FOnMouseMove" type="TMouseMoveEvent" hoisted="true" file="FMX.StdCtrls.pas" line="991"/>
      <event name="OnMouseUp" visibility="published" read="FOnMouseUp" write="FOnMouseUp" type="TMouseEvent" hoisted="true" file="FMX.StdCtrls.pas" line="992"/>
      <event name="OnMouseWheel" visibility="published" read="FOnMouseWheel" write="FOnMouseWheel" type="TMouseWheelEvent" hoisted="true" file="FMX.StdCtrls.pas" line="993"/>
      <event name="OnMouseEnter" visibility="published" read="FOnMouseEnter" write="FOnMouseEnter" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="994"/>
      <event name="OnMouseLeave" visibility="published" read="FOnMouseLeave" write="FOnMouseLeave" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="995"/>
      <event name="OnPainting" visibility="published" read="FOnPainting" write="FOnPainting" type="TOnPaintEvent" hoisted="true" file="FMX.StdCtrls.pas" line="997"/>
      <event name="OnPaint" visibility="published" read="FOnPaint" write="FOnPaint" type="TOnPaintEvent" hoisted="true" file="FMX.StdCtrls.pas" line="998"/>
      <event name="OnResize" visibility="published" read="FOnResize" write="FOnResize" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="999"/>
      <event name="OnResized" visibility="published" read="FOnResized" write="FOnResized" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1000"/>
    </members>
  <devnotes><summary>
Represents a radio (option) button.
TRadioButton, also called option button, presents a set of mutually exclusive choices. You can create individual radio buttons using TRadioButton or use a group to automatically arrange radio buttons into groups. You can group radio buttons to let the user select one from a limited set of choices.
A selected radio button is displayed as a circle filled in the middle. When not selected, the radio button shows an empty circle. Assign the value True or False to the IsChecked property to change the visual state of the radio button.
The Text property can be used to define an accelerator key to the control. The accelerator key behavior for TRadioButton is to select the radio button.
</summary></devnotes></class>
  <class name="TGroupBox" file="FMX.StdCtrls.pas" line="1005">
    
    <members>
      <procedure name="DefineProperties" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="1007">
        <parameters>
          <parameter name="Filer" type="TFiler"/>
        </parameters>
      <devnotes><summary>






Designates methods for storing an object's unpublished data on a stream such as a form file.
FMX.StdCtrls.TGroupBox.DefineProperties inherits from System.Classes.TComponent.DefineProperties. All content below this line refers to System.Classes.TComponent.DefineProperties.
Designates methods for storing an object's unpublished data on a stream such as a form file.
TComponent overrides the DefineProperties method defined in TPersistent to define &quot;fake&quot; Top and Left properties. These are defined so that components that are not controls can be manipulated at design time. However, the Top and Left properties are hidden, that is, they are not published, because only controls appear at run time.
DefineProperties is virtual; descendent classes can override it. When overriding DefineProperties, be aware that the Ancestor property of Filer might be set, and that this property can determine whether or not it is appropriate to write properties.
DefineProperties is called automatically as part of the component streaming system; do not call it directly.
</summary></devnotes></procedure>
      <function name="GetDefaultSize" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="1008">
        <parameters>
          <retval type="TSizeF"/>
        </parameters>
      <devnotes><summary>
Getter of DefaultSize.
FMX.StdCtrls.TGroupBox.GetDefaultSize inherits from FMX.Controls.TControl.GetDefaultSize. All content below this line refers to FMX.Controls.TControl.GetDefaultSize.
Getter of DefaultSize.


</summary></devnotes></function>
      <function name="StyledSettingsStored" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="1009">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Indicates whether the set of styled text representation properties stored in StyledSettings differs from the default set for this control.
FMX.StdCtrls.TGroupBox.StyledSettingsStored inherits from FMX.StdCtrls.TPresentedTextControl.StyledSettingsStored. All content below this line refers to FMX.StdCtrls.TPresentedTextControl.StyledSettingsStored.
Indicates whether the set of styled text representation properties stored in StyledSettings differs from the default set for this control.
StyledSettingsStored returns True when the set of styled text representation properties stored in 
StyledSettings differs from the default set of styled text representation properties for this control.
When StyledSettingsStored returns True, then values of text representation properties of this control are stored in the corresponding FMX file.
</summary></devnotes></function>
      <function name="GetTextSettingsClass" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="1010">
        <parameters>
          <retval type="TTextSettingsInfo.TCustomTextSettingsClass"/>
        </parameters>
      <devnotes><summary>
Returns the class type that instance represents the used text settings.
FMX.StdCtrls.TGroupBox.GetTextSettingsClass inherits from FMX.StdCtrls.TPresentedTextControl.GetTextSettingsClass. All content below this line refers to FMX.StdCtrls.TPresentedTextControl.GetTextSettingsClass.
Returns the class type that instance represents the used text settings.
GetTextSettingsClass returns the TTextSettingsInfo.TCustomTextSettingsClass (or its descendant)  class reference. An instance of such class provides the DefaultTextSettings,   TextSettings, StyledSettings, ResultingTextSettings, and other properties handling the text representation settings of a control. 
You can override the method in descendant classes to modify the default behavior.
Typical implementations of GetTextSettingsClass returns the class declaring properties like the Font, FontColor, HorzAlign, and WordWrap. Some of these properties can be declared as published to be editable in the Object Inspector.

 See Also
FMX.Controls.TTextSettingsInfo
FMX.Controls.TTextSettingsInfo.TCustomTextSettingsClass
FMX.Controls.TTextSettingsInfo.DefaultTextSettings
FMX.Controls.TTextSettingsInfo.TextSettings
FMX.Controls.TTextSettingsInfo.StyledSettings
FMX.Controls.TTextSettingsInfo.ResultingTextSettings

</summary></devnotes></function>
      <constructor name="Create" visibility="public" file="FMX.StdCtrls.pas" line="1012">
        <parameters>
          <parameter name="AOwner" type="TComponent"/>
        </parameters>
      <devnotes><summary>


Creates a new instance of TPresentedControl.
FMX.StdCtrls.TGroupBox.Create inherits from FMX.Controls.Presentation.TPresentedControl.Create. All content below this line refers to FMX.Controls.Presentation.TPresentedControl.Create.
Creates a new instance of TPresentedControl.
AOwner takes ownership of the control and becomes responsible of destroying the control once the control is no longer necessary.
The control constructor creates a data model for the control. DefineModelClass determines the default class of data model for each subclass of TPresentedControl.
Create also sets the value of the CanUseDefaultPresentation property to True.

 See Also
System.Classes.TComponent.Create
FMX.Controls.Presentation.TPresentedControl.Model
FMX.Controls.Presentation.TPresentedControl.DefineModelClass
FMX.Controls.Presentation.TPresentedControl.Destroy
FMX.Controls.Presentation.TPresentedControl.CanUseDefaultPresentation

</summary></devnotes></constructor>
      <property name="Font" visibility="public" read="GetFont" write="SetFont" type="TFont" hoisted="true" file="FMX.StdCtrls.pas" line="1013"/>
      <property name="Action" visibility="published" read="GetAction" write="SetAction" type="TBasicAction" hoisted="true" file="FMX.StdCtrls.pas" line="1015"/>
      <property name="Align" visibility="published" read="FAlign" write="SetAlign" type="TAlignLayout" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="1016"/>
      <property name="Anchors" visibility="published" read="FAnchors" write="SetAnchors" stored="IsAnchorsStored" type="TAnchors" hoisted="true" file="FMX.StdCtrls.pas" line="1017"/>
      <property name="AutoTranslate" visibility="published" read="FAutoTranslate" write="FAutoTranslate" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="1018"/>
      <property name="ClipChildren" visibility="published" read="FClipChildren" write="SetClipChildren" type="Boolean" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="1019"/>
      <property name="ClipParent" visibility="published" read="FClipParent" write="FClipParent" type="Boolean" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="1020"/>
      <property name="ControlType" visibility="published" read="GetControlType" write="SetControlType" type="TControlType" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="1021"/>
      <property name="Cursor" visibility="published" read="GetCursor" write="SetCursor" type="TCursor" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="1022"/>
      <property name="DragMode" visibility="published" read="GetDragMode" write="SetDragMode" type="TDragMode" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="1023"/>
      <property name="EnableDragHighlight" visibility="published" read="FEnableDragHighlight" write="FEnableDragHighlight" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="1024"/>
      <property name="Enabled" visibility="published" read="FEnabled" write="SetEnabled" stored="EnabledStored" type="Boolean" hoisted="true" file="FMX.StdCtrls.pas" line="1025"/>
      <property name="StyledSettings" visibility="published" read="GetStyledSettings" write="SetStyledSettings" stored="StyledSettingsStored" type="TStyledSettings" hoisted="true" file="FMX.StdCtrls.pas" line="1026"/>
      <property name="Locked" visibility="published" read="FLocked" write="SetLocked" type="Boolean" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="1027"/>
      <property name="Height" visibility="published" read="GetHeight" write="SetHeight" stored="False" type="Single" hoisted="true" file="FMX.StdCtrls.pas" line="1028"/>
      <property name="HelpContext" visibility="published" read="FHelpContext" write="SetHelpContext" stored="IsHelpContextStored" type="THelpContext" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="1029"/>
      <property name="HelpKeyword" visibility="published" read="FHelpKeyword" write="SetHelpKeyword" stored="IsHelpContextStored" type="string" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="1030"/>
      <property name="HelpType" visibility="published" read="FHelpType" write="FHelpType" type="THelpType" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="1031"/>
      <property name="Hint" visibility="published" read="FHint" write="SetHint" stored="HintStored" type="string" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="1032"/>
      <property name="HitTest" visibility="published" read="FHitTest" write="SetHitTest" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="1033"/>
      <property name="Padding" visibility="published" read="GetPadding" write="SetPadding" type="TBounds" hoisted="true" file="FMX.StdCtrls.pas" line="1034"/>
      <property name="Opacity" visibility="published" read="FOpacity" write="SetOpacity" stored="IsOpacityStored" type="Single" hoisted="true" file="FMX.StdCtrls.pas" line="1035"/>
      <property name="Margins" visibility="published" read="GetMargins" write="SetMargins" type="TBounds" hoisted="true" file="FMX.StdCtrls.pas" line="1036"/>
      <property name="PopupMenu" visibility="published" read="FPopupMenu" write="SetPopupMenu" stored="IsPopupMenuStored" type="TCustomPopupMenu" hoisted="true" file="FMX.StdCtrls.pas" line="1037"/>
      <property name="Position" visibility="published" read="FPosition" write="SetPosition" stored="IsPositionStored" type="TPosition" hoisted="true" file="FMX.StdCtrls.pas" line="1038"/>
      <property name="RotationAngle" visibility="published" read="GetRotationAngle" write="SetRotationAngle" type="Single" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="1039"/>
      <property name="RotationCenter" visibility="published" read="GetRotationCenter" write="SetRotationCenter" type="TPosition" hoisted="true" file="FMX.StdCtrls.pas" line="1040"/>
      <property name="Scale" visibility="published" read="GetScale" write="SetScale" type="TPosition" hoisted="true" file="FMX.StdCtrls.pas" line="1041"/>
      <property name="Size" visibility="published" read="FSize" write="SetSize" stored="IsSizeStored" type="TControlSize" hoisted="true" file="FMX.StdCtrls.pas" line="1042"/>
      <property name="StyleLookup" visibility="published" read="FStyleLookup" write="SetStyleLookup" type="string" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="1043"/>
      <property name="Text" visibility="published" read="GetText" write="SetText" stored="TextStored" type="string" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="1044"/>
      <property name="TextSettings" visibility="published" read="GetTextSettings" write="SetTextSettings" type="TTextSettings" hoisted="true" file="FMX.StdCtrls.pas" line="1045"/>
      <property name="TouchTargetExpansion" visibility="published" read="FTouchTargetExpansion" write="SetTouchTargetExpansion" type="TBounds" hoisted="true" file="FMX.StdCtrls.pas" line="1046"/>
      <property name="Visible" visibility="published" read="FVisible" write="SetVisible" stored="VisibleStored" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="1047"/>
      <property name="Width" visibility="published" read="GetWidth" write="SetWidth" stored="False" type="Single" hoisted="true" file="FMX.StdCtrls.pas" line="1048"/>
      <property name="TabOrder" visibility="published" read="GetTabOrder" write="SetTabOrder" type="TTabOrder" default="-1" hoisted="true" file="FMX.StdCtrls.pas" line="1049"/>
      <property name="TabStop" visibility="published" read="GetTabStop" write="SetTabStop" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="1050"/>
      <property name="ParentShowHint" visibility="published" read="FParentShowHint" write="SetParentShowHint" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="1051"/>
      <property name="ShowHint" visibility="published" read="FShowHint" write="SetShowHint" stored="IsShowHintStored" type="Boolean" hoisted="true" file="FMX.StdCtrls.pas" line="1052"/>
      <event name="OnApplyStyleLookup" visibility="published" read="FOnApplyStyleLookup" write="FOnApplyStyleLookup" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1054"/>
      <event name="OnDragEnter" visibility="published" read="FOnDragEnter" write="FOnDragEnter" type="TDragEnterEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1056"/>
      <event name="OnDragLeave" visibility="published" read="FOnDragLeave" write="FOnDragLeave" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1057"/>
      <event name="OnDragOver" visibility="published" read="FOnDragOver" write="FOnDragOver" type="TDragOverEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1058"/>
      <event name="OnDragDrop" visibility="published" read="FOnDragDrop" write="FOnDragDrop" type="TDragDropEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1059"/>
      <event name="OnDragEnd" visibility="published" read="FOnDragEnd" write="FOnDragEnd" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1060"/>
      <event name="OnKeyDown" visibility="published" read="FOnKeyDown" write="FOnKeyDown" type="TKeyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1062"/>
      <event name="OnKeyUp" visibility="published" read="FOnKeyUp" write="FOnKeyUp" type="TKeyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1063"/>
      <event name="OnCanFocus" visibility="published" read="FOnCanFocus" write="FOnCanFocus" type="TCanFocusEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1065"/>
      <event name="OnClick" visibility="published" read="FOnClick" write="SetOnClick" stored="OnClickStored" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1066"/>
      <event name="OnDblClick" visibility="published" read="FOnDblClick" write="FOnDblClick" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1067"/>
      <event name="OnEnter" visibility="published" read="FOnEnter" write="FOnEnter" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1068"/>
      <event name="OnExit" visibility="published" read="FOnExit" write="FOnExit" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1069"/>
      <event name="OnMouseDown" visibility="published" read="FOnMouseDown" write="FOnMouseDown" type="TMouseEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1070"/>
      <event name="OnMouseMove" visibility="published" read="FOnMouseMove" write="FOnMouseMove" type="TMouseMoveEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1071"/>
      <event name="OnMouseUp" visibility="published" read="FOnMouseUp" write="FOnMouseUp" type="TMouseEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1072"/>
      <event name="OnMouseWheel" visibility="published" read="FOnMouseWheel" write="FOnMouseWheel" type="TMouseWheelEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1073"/>
      <event name="OnMouseEnter" visibility="published" read="FOnMouseEnter" write="FOnMouseEnter" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1074"/>
      <event name="OnMouseLeave" visibility="published" read="FOnMouseLeave" write="FOnMouseLeave" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1075"/>
      <event name="OnPainting" visibility="published" read="FOnPainting" write="FOnPainting" type="TOnPaintEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1076"/>
      <event name="OnPaint" visibility="published" read="FOnPaint" write="FOnPaint" type="TOnPaintEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1077"/>
      <event name="OnResize" visibility="published" read="FOnResize" write="FOnResize" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1078"/>
      <event name="OnResized" visibility="published" read="FOnResized" write="FOnResized" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1079"/>
    </members>
  <devnotes><summary>
Represents a graphical control used to arrange multiple related graphical controls on the surface of a form.
Use TGroupBox whenever you need to arrange multiple related controls on a form (for instance, multiple radio buttons or check boxes). The most commonly grouped controls are radio buttons. After placing a group box on a FireMonkey form, select components from the Tool Palette and place them in the group box. The Text property contains text that labels the group box at run time.

Similar components are:

TPanel (without the frame and text caption)
TExpander (additionally provides collapse/expand functionality)</summary></devnotes></class>
  <class name="TStatusBar" file="FMX.StdCtrls.pas" line="1084">
    
    <interfaces>
      <implements name="IHintReceiver"/>
    </interfaces>
    <members>
      <field name="FShowSizeGrip" type="Boolean" visibility="private" size="1" offset="992" file="FMX.StdCtrls.pas" line="1086"/>
      <field name="FOnHint" type="TNotifyEvent" visibility="private" size="8" offset="1000" file="FMX.StdCtrls.pas" line="1087"/>
      <field name="FAutoHint" type="Boolean" visibility="private" size="1" offset="1008" file="FMX.StdCtrls.pas" line="1088"/>
      <procedure name="SetShowSizeGrip" visibility="private" file="FMX.StdCtrls.pas" line="1089">
        <parameters>
          <parameter name="Value" type="Boolean" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="ApplyStyle" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="1091">
      <devnotes><summary>
Applies the style to this status bar component.
Do not call ApplyStyle explicitly in an application. It is called when a style specified by StyleLookup is applied or when the control is visually changed. To check whether a style exists, use the FindStyleResource method.  
For an example of the ApplyStyle implementation, see Style Contracts.
</summary></devnotes></procedure>
      <procedure name="DefineProperties" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="1092">
        <parameters>
          <parameter name="Filer" type="TFiler"/>
        </parameters>
      <devnotes><summary>




Designates methods for storing an object's unpublished data on a stream such as a form file.
FMX.StdCtrls.TStatusBar.DefineProperties inherits from System.Classes.TComponent.DefineProperties. All content below this line refers to System.Classes.TComponent.DefineProperties.
Designates methods for storing an object's unpublished data on a stream such as a form file.
TComponent overrides the DefineProperties method defined in TPersistent to define &quot;fake&quot; Top and Left properties. These are defined so that components that are not controls can be manipulated at design time. However, the Top and Left properties are hidden, that is, they are not published, because only controls appear at run time.
DefineProperties is virtual; descendent classes can override it. When overriding DefineProperties, be aware that the Ancestor property of Filer might be set, and that this property can determine whether or not it is appropriate to write properties.
DefineProperties is called automatically as part of the component streaming system; do not call it directly.
</summary></devnotes></procedure>
      <function name="GetDefaultSize" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="1093">
        <parameters>
          <retval type="TSizeF"/>
        </parameters>
      <devnotes><summary>
Getter of DefaultSize.
FMX.StdCtrls.TStatusBar.GetDefaultSize inherits from FMX.Controls.TControl.GetDefaultSize. All content below this line refers to FMX.Controls.TControl.GetDefaultSize.
Getter of DefaultSize.


</summary></devnotes></function>
      <procedure name="DoRootChanging" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="1097">
        <devnotes><summary>
A reimplementation of TFmxObject.DoRootChanging.
Allows the control to be unregistered from the old root and registered to the new root. This is useful for a control to be registered on unregistered as a hint receiver.
</summary></devnotes>
        <parameters>
          <parameter name="NewRoot" type="IRoot" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="TriggerOnHint" visibility="protected" file="FMX.StdCtrls.pas" line="1100">
        <devnotes><summary>
Triggers the hint event.
TriggerOnHint calls DoHint
</summary></devnotes>
      </procedure>
      <function name="DoHint" visibility="protected" procflags="virtual" file="FMX.StdCtrls.pas" line="1102">
        <devnotes><summary>
Triggers the OnHint event.
</summary></devnotes>
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <constructor name="Create" visibility="public" file="FMX.StdCtrls.pas" line="1104">
        <parameters>
          <parameter name="AOwner" type="TComponent"/>
        </parameters>
      <devnotes><summary>
Creates an instance of the TStatusBar class and places a status bar component on the form.
</summary></devnotes></constructor>
      <property name="Action" visibility="published" read="GetAction" write="SetAction" type="TBasicAction" hoisted="true" file="FMX.StdCtrls.pas" line="1106"/>
      <property name="Align" visibility="published" read="FAlign" write="SetAlign" type="TAlignLayout" default="4" hoisted="true" file="FMX.StdCtrls.pas" line="1107"/>
      <property name="Anchors" visibility="published" read="FAnchors" write="SetAnchors" stored="IsAnchorsStored" type="TAnchors" hoisted="true" file="FMX.StdCtrls.pas" line="1108"/>
      <property name="ClipChildren" visibility="published" read="FClipChildren" write="SetClipChildren" type="Boolean" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="1109"/>
      <property name="ClipParent" visibility="published" read="FClipParent" write="FClipParent" type="Boolean" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="1110"/>
      <property name="ControlType" visibility="published" read="GetControlType" write="SetControlType" type="TControlType" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="1111"/>
      <property name="Cursor" visibility="published" read="GetCursor" write="SetCursor" type="TCursor" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="1112"/>
      <property name="DragMode" visibility="published" read="GetDragMode" write="SetDragMode" type="TDragMode" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="1113"/>
      <property name="EnableDragHighlight" visibility="published" read="FEnableDragHighlight" write="FEnableDragHighlight" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="1114"/>
      <property name="Enabled" visibility="published" read="FEnabled" write="SetEnabled" stored="EnabledStored" type="Boolean" hoisted="true" file="FMX.StdCtrls.pas" line="1115"/>
      <property name="Locked" visibility="published" read="FLocked" write="SetLocked" type="Boolean" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="1116"/>
      <property name="Height" visibility="published" read="GetHeight" write="SetHeight" stored="False" type="Single" hoisted="true" file="FMX.StdCtrls.pas" line="1117"/>
      <property name="HelpContext" visibility="published" read="FHelpContext" write="SetHelpContext" stored="IsHelpContextStored" type="THelpContext" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="1118"/>
      <property name="HelpKeyword" visibility="published" read="FHelpKeyword" write="SetHelpKeyword" stored="IsHelpContextStored" type="string" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="1119"/>
      <property name="HelpType" visibility="published" read="FHelpType" write="FHelpType" type="THelpType" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="1120"/>
      <property name="Hint" visibility="published" read="FHint" write="SetHint" stored="HintStored" type="string" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="1121"/>
      <property name="HitTest" visibility="published" read="FHitTest" write="SetHitTest" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="1122"/>
      <property name="Padding" visibility="published" read="GetPadding" write="SetPadding" type="TBounds" hoisted="true" file="FMX.StdCtrls.pas" line="1123"/>
      <property name="Opacity" visibility="published" read="FOpacity" write="SetOpacity" stored="IsOpacityStored" type="Single" hoisted="true" file="FMX.StdCtrls.pas" line="1124"/>
      <property name="Margins" visibility="published" read="GetMargins" write="SetMargins" type="TBounds" hoisted="true" file="FMX.StdCtrls.pas" line="1125"/>
      <property name="PopupMenu" visibility="published" read="FPopupMenu" write="SetPopupMenu" stored="IsPopupMenuStored" type="TCustomPopupMenu" hoisted="true" file="FMX.StdCtrls.pas" line="1126"/>
      <property name="Position" visibility="published" read="FPosition" write="SetPosition" stored="IsPositionStored" type="TPosition" hoisted="true" file="FMX.StdCtrls.pas" line="1127"/>
      <property name="RotationAngle" visibility="published" read="GetRotationAngle" write="SetRotationAngle" type="Single" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="1128"/>
      <property name="RotationCenter" visibility="published" read="GetRotationCenter" write="SetRotationCenter" type="TPosition" hoisted="true" file="FMX.StdCtrls.pas" line="1129"/>
      <property name="Scale" visibility="published" read="GetScale" write="SetScale" type="TPosition" hoisted="true" file="FMX.StdCtrls.pas" line="1130"/>
      <property name="ShowSizeGrip" visibility="published" read="FShowSizeGrip" write="SetShowSizeGrip" type="Boolean" file="FMX.StdCtrls.pas" line="1131"><devnotes><summary>
Specifies whether the status bar displays its size grip or not.
</summary></devnotes></property>
      <property name="Size" visibility="published" read="FSize" write="SetSize" stored="IsSizeStored" type="TControlSize" hoisted="true" file="FMX.StdCtrls.pas" line="1132"/>
      <property name="StyleLookup" visibility="published" read="FStyleLookup" write="SetStyleLookup" type="string" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="1133"/>
      <property name="TouchTargetExpansion" visibility="published" read="FTouchTargetExpansion" write="SetTouchTargetExpansion" type="TBounds" hoisted="true" file="FMX.StdCtrls.pas" line="1134"/>
      <property name="Visible" visibility="published" read="FVisible" write="SetVisible" stored="VisibleStored" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="1135"/>
      <property name="Width" visibility="published" read="GetWidth" write="SetWidth" stored="False" type="Single" hoisted="true" file="FMX.StdCtrls.pas" line="1136"/>
      <property name="TabOrder" visibility="published" read="GetTabOrder" write="SetTabOrder" type="TTabOrder" default="-1" hoisted="true" file="FMX.StdCtrls.pas" line="1137"/>
      <property name="TabStop" visibility="published" read="GetTabStop" write="SetTabStop" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="1138"/>
      <property name="ParentShowHint" visibility="published" read="FParentShowHint" write="SetParentShowHint" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="1139"/>
      <property name="ShowHint" visibility="published" read="FShowHint" write="SetShowHint" stored="IsShowHintStored" type="Boolean" hoisted="true" file="FMX.StdCtrls.pas" line="1140"/>
      <property name="AutoHint" visibility="published" read="FAutoHint" write="FAutoHint" type="Boolean" default="0" file="FMX.StdCtrls.pas" line="1142">
        <devnotes><summary>
Indicates whether the OnHint event is enabled.
Set this property to False to disable the OnHint event.
</summary></devnotes>
      </property>
      <event name="OnApplyStyleLookup" visibility="published" read="FOnApplyStyleLookup" write="FOnApplyStyleLookup" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1144"/>
      <event name="OnDragEnter" visibility="published" read="FOnDragEnter" write="FOnDragEnter" type="TDragEnterEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1146"/>
      <event name="OnDragLeave" visibility="published" read="FOnDragLeave" write="FOnDragLeave" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1147"/>
      <event name="OnDragOver" visibility="published" read="FOnDragOver" write="FOnDragOver" type="TDragOverEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1148"/>
      <event name="OnDragDrop" visibility="published" read="FOnDragDrop" write="FOnDragDrop" type="TDragDropEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1149"/>
      <event name="OnDragEnd" visibility="published" read="FOnDragEnd" write="FOnDragEnd" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1150"/>
      <event name="OnKeyDown" visibility="published" read="FOnKeyDown" write="FOnKeyDown" type="TKeyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1152"/>
      <event name="OnKeyUp" visibility="published" read="FOnKeyUp" write="FOnKeyUp" type="TKeyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1153"/>
      <event name="OnCanFocus" visibility="published" read="FOnCanFocus" write="FOnCanFocus" type="TCanFocusEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1155"/>
      <event name="OnClick" visibility="published" read="FOnClick" write="SetOnClick" stored="OnClickStored" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1156"/>
      <event name="OnDblClick" visibility="published" read="FOnDblClick" write="FOnDblClick" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1157"/>
      <event name="OnEnter" visibility="published" read="FOnEnter" write="FOnEnter" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1159"/>
      <event name="OnExit" visibility="published" read="FOnExit" write="FOnExit" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1160"/>
      <event name="OnMouseDown" visibility="published" read="FOnMouseDown" write="FOnMouseDown" type="TMouseEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1161"/>
      <event name="OnMouseMove" visibility="published" read="FOnMouseMove" write="FOnMouseMove" type="TMouseMoveEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1162"/>
      <event name="OnMouseUp" visibility="published" read="FOnMouseUp" write="FOnMouseUp" type="TMouseEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1163"/>
      <event name="OnMouseWheel" visibility="published" read="FOnMouseWheel" write="FOnMouseWheel" type="TMouseWheelEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1164"/>
      <event name="OnMouseEnter" visibility="published" read="FOnMouseEnter" write="FOnMouseEnter" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1165"/>
      <event name="OnMouseLeave" visibility="published" read="FOnMouseLeave" write="FOnMouseLeave" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1166"/>
      <event name="OnPainting" visibility="published" read="FOnPainting" write="FOnPainting" type="TOnPaintEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1168"/>
      <event name="OnPaint" visibility="published" read="FOnPaint" write="FOnPaint" type="TOnPaintEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1169"/>
      <event name="OnResize" visibility="published" read="FOnResize" write="FOnResize" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1170"/>
      <event name="OnResized" visibility="published" read="FOnResized" write="FOnResized" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1171"/>
      <event name="OnHint" visibility="published" read="FOnHint" write="FOnHint" type="TNotifyEvent" file="FMX.StdCtrls.pas" line="1174">
        <devnotes><summary>
Occurs when a hint is triggered.
See Using Hints to Show Contextual Help in a FireMonkey Application for more information on how to use hints.
</summary></devnotes>
      </event>
    </members>
  <devnotes><summary>
Represents a status bar component for use in FireMonkey forms.
The status bar is usually aligned at the bottom of a form, and displays information about an application as it runs. A status bar can display a size grip, so if your form is sizable, there is no need to add a TSizeGrip component as long as you have a status bar already.
The status bar can also intercept hints. See Using Hints to Show Contextual Help in a FireMonkey Application for more information on how to use hints.

</summary></devnotes></class>
  <class name="TToolBar" file="FMX.StdCtrls.pas" line="1179">
    
    <members>
      <field name="FTintColor" type="TAlphaColor" visibility="private" size="4" offset="992" file="FMX.StdCtrls.pas" line="1181"/>
      <field name="FTintObject" type="ITintedObject" visibility="private" size="4" offset="996" file="FMX.StdCtrls.pas" line="1182"/>
      <procedure name="SetTintColor" visibility="private" file="FMX.StdCtrls.pas" line="1183">
        <parameters>
          <parameter name="Value" type="TAlphaColor" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="IsTintColorStored" visibility="private" file="FMX.StdCtrls.pas" line="1184">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <procedure name="ApplyStyle" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="1186">
      <devnotes><summary>
Customizes styles in complex objects.
FMX.StdCtrls.TToolBar.ApplyStyle inherits from FMX.Controls.TStyledControl.ApplyStyle. All content below this line refers to FMX.Controls.TStyledControl.ApplyStyle.
Customizes styles in complex objects.
TStyledControl descendants override it to apply styles in concordance with their primitive components.      
Do not call ApplyStyle explicitly in an application. It is called by the ApplyStyleLookup method when object styles are updated.
For an example of an ApplyStyle implementation, see &quot;TCalloutPanel:Style Contracts&quot; in FireMonkey Component Design.
</summary></devnotes></procedure>
      <procedure name="FreeStyle" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="1187">
      <devnotes><summary>
Frees the style of TStyledControl.
FMX.StdCtrls.TToolBar.FreeStyle inherits from FMX.Controls.TStyledControl.FreeStyle. All content below this line refers to FMX.Controls.TStyledControl.FreeStyle.
Frees the style of TStyledControl.
Override it to free additional component-specific style resources.
</summary></devnotes></procedure>
      <procedure name="DefineProperties" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="1188">
        <parameters>
          <parameter name="Filer" type="TFiler"/>
        </parameters>
      <devnotes><summary>




Designates methods for storing an object's unpublished data on a stream such as a form file.
FMX.StdCtrls.TToolBar.DefineProperties inherits from System.Classes.TComponent.DefineProperties. All content below this line refers to System.Classes.TComponent.DefineProperties.
Designates methods for storing an object's unpublished data on a stream such as a form file.
TComponent overrides the DefineProperties method defined in TPersistent to define &quot;fake&quot; Top and Left properties. These are defined so that components that are not controls can be manipulated at design time. However, the Top and Left properties are hidden, that is, they are not published, because only controls appear at run time.
DefineProperties is virtual; descendent classes can override it. When overriding DefineProperties, be aware that the Ancestor property of Filer might be set, and that this property can determine whether or not it is appropriate to write properties.
DefineProperties is called automatically as part of the component streaming system; do not call it directly.
</summary></devnotes></procedure>
      <function name="GetDefaultSize" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="1189">
        <parameters>
          <retval type="TSizeF"/>
        </parameters>
      <devnotes><summary>
Getter of DefaultSize.
FMX.StdCtrls.TToolBar.GetDefaultSize inherits from FMX.Controls.TControl.GetDefaultSize. All content below this line refers to FMX.Controls.TControl.GetDefaultSize.
Getter of DefaultSize.


</summary></devnotes></function>
      <constructor name="Create" visibility="public" file="FMX.StdCtrls.pas" line="1191">
        <parameters>
          <parameter name="AOwner" type="TComponent"/>
        </parameters>
      <devnotes><summary>
Creates a new instance of TPresentedControl.
FMX.StdCtrls.TToolBar.Create inherits from FMX.Controls.Presentation.TPresentedControl.Create. All content below this line refers to FMX.Controls.Presentation.TPresentedControl.Create.
Creates a new instance of TPresentedControl.
AOwner takes ownership of the control and becomes responsible of destroying the control once the control is no longer necessary.
The control constructor creates a data model for the control. DefineModelClass determines the default class of data model for each subclass of TPresentedControl.
Create also sets the value of the CanUseDefaultPresentation property to True.

 See Also
System.Classes.TComponent.Create
FMX.Controls.Presentation.TPresentedControl.Model
FMX.Controls.Presentation.TPresentedControl.DefineModelClass
FMX.Controls.Presentation.TPresentedControl.Destroy
FMX.Controls.Presentation.TPresentedControl.CanUseDefaultPresentation

</summary></devnotes></constructor>
      <property name="TintObject" visibility="public" read="FTintObject" type="ITintedObject" file="FMX.StdCtrls.pas" line="1192"><devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></property>
      <property name="Action" visibility="published" read="GetAction" write="SetAction" type="TBasicAction" hoisted="true" file="FMX.StdCtrls.pas" line="1194"/>
      <property name="Align" visibility="published" read="FAlign" write="SetAlign" type="TAlignLayout" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="1195"/>
      <property name="Anchors" visibility="published" read="FAnchors" write="SetAnchors" stored="IsAnchorsStored" type="TAnchors" hoisted="true" file="FMX.StdCtrls.pas" line="1196"/>
      <property name="ClipChildren" visibility="published" read="FClipChildren" write="SetClipChildren" type="Boolean" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="1197"/>
      <property name="ClipParent" visibility="published" read="FClipParent" write="FClipParent" type="Boolean" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="1198"/>
      <property name="ControlType" visibility="published" read="GetControlType" write="SetControlType" type="TControlType" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="1199"/>
      <property name="Cursor" visibility="published" read="GetCursor" write="SetCursor" type="TCursor" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="1200"/>
      <property name="DragMode" visibility="published" read="GetDragMode" write="SetDragMode" type="TDragMode" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="1201"/>
      <property name="EnableDragHighlight" visibility="published" read="FEnableDragHighlight" write="FEnableDragHighlight" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="1202"/>
      <property name="Enabled" visibility="published" read="FEnabled" write="SetEnabled" stored="EnabledStored" type="Boolean" hoisted="true" file="FMX.StdCtrls.pas" line="1203"/>
      <property name="Locked" visibility="published" read="FLocked" write="SetLocked" type="Boolean" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="1204"/>
      <property name="Height" visibility="published" read="GetHeight" write="SetHeight" stored="False" type="Single" hoisted="true" file="FMX.StdCtrls.pas" line="1205"/>
      <property name="HelpContext" visibility="published" read="FHelpContext" write="SetHelpContext" stored="IsHelpContextStored" type="THelpContext" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="1206"/>
      <property name="HelpKeyword" visibility="published" read="FHelpKeyword" write="SetHelpKeyword" stored="IsHelpContextStored" type="string" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="1207"/>
      <property name="HelpType" visibility="published" read="FHelpType" write="FHelpType" type="THelpType" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="1208"/>
      <property name="Hint" visibility="published" read="FHint" write="SetHint" stored="HintStored" type="string" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="1209"/>
      <property name="HitTest" visibility="published" read="FHitTest" write="SetHitTest" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="1210"/>
      <property name="Padding" visibility="published" read="GetPadding" write="SetPadding" type="TBounds" hoisted="true" file="FMX.StdCtrls.pas" line="1211"/>
      <property name="Opacity" visibility="published" read="FOpacity" write="SetOpacity" stored="IsOpacityStored" type="Single" hoisted="true" file="FMX.StdCtrls.pas" line="1212"/>
      <property name="Margins" visibility="published" read="GetMargins" write="SetMargins" type="TBounds" hoisted="true" file="FMX.StdCtrls.pas" line="1213"/>
      <property name="PopupMenu" visibility="published" read="FPopupMenu" write="SetPopupMenu" stored="IsPopupMenuStored" type="TCustomPopupMenu" hoisted="true" file="FMX.StdCtrls.pas" line="1214"/>
      <property name="Position" visibility="published" read="FPosition" write="SetPosition" stored="IsPositionStored" type="TPosition" hoisted="true" file="FMX.StdCtrls.pas" line="1215"/>
      <property name="RotationAngle" visibility="published" read="GetRotationAngle" write="SetRotationAngle" type="Single" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="1216"/>
      <property name="RotationCenter" visibility="published" read="GetRotationCenter" write="SetRotationCenter" type="TPosition" hoisted="true" file="FMX.StdCtrls.pas" line="1217"/>
      <property name="Scale" visibility="published" read="GetScale" write="SetScale" type="TPosition" hoisted="true" file="FMX.StdCtrls.pas" line="1218"/>
      <property name="Size" visibility="published" read="FSize" write="SetSize" stored="IsSizeStored" type="TControlSize" hoisted="true" file="FMX.StdCtrls.pas" line="1219"/>
      <property name="StyleLookup" visibility="published" read="FStyleLookup" write="SetStyleLookup" type="string" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="1220"/>
      <property name="TabOrder" visibility="published" read="GetTabOrder" write="SetTabOrder" type="TTabOrder" default="-1" hoisted="true" file="FMX.StdCtrls.pas" line="1221"/>
      <property name="TabStop" visibility="published" read="GetTabStop" write="SetTabStop" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="1222"/>
      <property name="TintColor" visibility="published" read="FTintColor" write="SetTintColor" stored="IsTintColorStored" type="TAlphaColor" file="FMX.StdCtrls.pas" line="1223"><devnotes><summary>
Allows you to apply a tint to a toolbar. 
This property is a value of the TAlphaColor type.

Note: Currently, the TintColor property is only available for mobile platforms (iOS and Android). For more information, see Using Styled and Colored Buttons on Target Platforms.</summary></devnotes></property>
      <property name="TouchTargetExpansion" visibility="published" read="FTouchTargetExpansion" write="SetTouchTargetExpansion" type="TBounds" hoisted="true" file="FMX.StdCtrls.pas" line="1224"/>
      <property name="Visible" visibility="published" read="FVisible" write="SetVisible" stored="VisibleStored" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="1225"/>
      <property name="Width" visibility="published" read="GetWidth" write="SetWidth" stored="False" type="Single" hoisted="true" file="FMX.StdCtrls.pas" line="1226"/>
      <property name="ParentShowHint" visibility="published" read="FParentShowHint" write="SetParentShowHint" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="1227"/>
      <property name="ShowHint" visibility="published" read="FShowHint" write="SetShowHint" stored="IsShowHintStored" type="Boolean" hoisted="true" file="FMX.StdCtrls.pas" line="1228"/>
      <event name="OnApplyStyleLookup" visibility="published" read="FOnApplyStyleLookup" write="FOnApplyStyleLookup" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1229"/>
      <event name="OnDragEnter" visibility="published" read="FOnDragEnter" write="FOnDragEnter" type="TDragEnterEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1230"/>
      <event name="OnDragLeave" visibility="published" read="FOnDragLeave" write="FOnDragLeave" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1231"/>
      <event name="OnDragOver" visibility="published" read="FOnDragOver" write="FOnDragOver" type="TDragOverEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1232"/>
      <event name="OnDragDrop" visibility="published" read="FOnDragDrop" write="FOnDragDrop" type="TDragDropEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1233"/>
      <event name="OnDragEnd" visibility="published" read="FOnDragEnd" write="FOnDragEnd" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1234"/>
      <event name="OnKeyDown" visibility="published" read="FOnKeyDown" write="FOnKeyDown" type="TKeyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1235"/>
      <event name="OnKeyUp" visibility="published" read="FOnKeyUp" write="FOnKeyUp" type="TKeyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1236"/>
      <event name="OnCanFocus" visibility="published" read="FOnCanFocus" write="FOnCanFocus" type="TCanFocusEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1237"/>
      <event name="OnClick" visibility="published" read="FOnClick" write="SetOnClick" stored="OnClickStored" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1238"/>
      <event name="OnDblClick" visibility="published" read="FOnDblClick" write="FOnDblClick" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1239"/>
      <event name="OnEnter" visibility="published" read="FOnEnter" write="FOnEnter" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1240"/>
      <event name="OnExit" visibility="published" read="FOnExit" write="FOnExit" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1241"/>
      <event name="OnMouseDown" visibility="published" read="FOnMouseDown" write="FOnMouseDown" type="TMouseEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1242"/>
      <event name="OnMouseMove" visibility="published" read="FOnMouseMove" write="FOnMouseMove" type="TMouseMoveEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1243"/>
      <event name="OnMouseUp" visibility="published" read="FOnMouseUp" write="FOnMouseUp" type="TMouseEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1244"/>
      <event name="OnMouseWheel" visibility="published" read="FOnMouseWheel" write="FOnMouseWheel" type="TMouseWheelEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1245"/>
      <event name="OnMouseEnter" visibility="published" read="FOnMouseEnter" write="FOnMouseEnter" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1246"/>
      <event name="OnMouseLeave" visibility="published" read="FOnMouseLeave" write="FOnMouseLeave" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1247"/>
      <event name="OnPainting" visibility="published" read="FOnPainting" write="FOnPainting" type="TOnPaintEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1248"/>
      <event name="OnPaint" visibility="published" read="FOnPaint" write="FOnPaint" type="TOnPaintEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1249"/>
      <event name="OnResize" visibility="published" read="FOnResize" write="FOnResize" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1250"/>
      <event name="OnResized" visibility="published" read="FOnResized" write="FOnResized" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1251"/>
    </members>
  <devnotes><summary>
Represents a toolbar component for use in FireMonkey forms.
The toolbar is usually aligned at the top of a form, and has a bunch of buttons that represent shortcuts or ways to access the functionality embedded into your application. A toolbar holds essentially speed buttons, but any other FireMonkey control can sit inside a toolbar. All tool buttons on a toolbar should maintain a uniform width and height for consistency.
Typically, the tool buttons correspond to items in an application's menu and give the user more direct access to the application's commands, but they can access other functionality implemented into your application.

</summary></devnotes></class>
  <class name="TSizeGrip" file="FMX.StdCtrls.pas" line="1256">
    
    <interfaces>
      <implements name="ISizeGrip"/>
    </interfaces>
    <members>
      <procedure name="DefineProperties" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="1258">
        <parameters>
          <parameter name="Filer" type="TFiler"/>
        </parameters>
      <devnotes><summary>




Designates methods for storing an object's unpublished data on a stream such as a form file.
FMX.StdCtrls.TSizeGrip.DefineProperties inherits from System.Classes.TComponent.DefineProperties. All content below this line refers to System.Classes.TComponent.DefineProperties.
Designates methods for storing an object's unpublished data on a stream such as a form file.
TComponent overrides the DefineProperties method defined in TPersistent to define &quot;fake&quot; Top and Left properties. These are defined so that components that are not controls can be manipulated at design time. However, the Top and Left properties are hidden, that is, they are not published, because only controls appear at run time.
DefineProperties is virtual; descendent classes can override it. When overriding DefineProperties, be aware that the Ancestor property of Filer might be set, and that this property can determine whether or not it is appropriate to write properties.
DefineProperties is called automatically as part of the component streaming system; do not call it directly.
</summary></devnotes></procedure>
      <constructor name="Create" visibility="public" file="FMX.StdCtrls.pas" line="1260">
        <parameters>
          <parameter name="AOwner" type="TComponent"/>
        </parameters>
      <devnotes><summary>
Allocates memory and constructs a safely initialized instance of a component.
Allocates memory and constructs a safely initialized instance of a component.
FMX.StdCtrls.TSizeGrip.Create inherits from System.Classes.TComponent.Create. All content below this line refers to System.Classes.TComponent.Create.
Allocates memory and constructs a safely initialized instance of a component.
All objects have a Create method that constructs the object. TComponent redefines Create so that, for components, Create also:

Establishes the relationship of a component and its Owner, as indicated by the AOwner parameter.
Sets the ComponentStyle property to csInheritable, meaning that the component can be inherited by a descendent form type.
It is not necessary to explicitly create components added in the Form Designer. These components are created automatically when the application is run, and they are destroyed when the application is closed.
For components created programmatically, that is, not created in the Form Designer, call Create and pass in an owner component as the AOwner parameter. The owner disposes of the component when it is destroyed. If the component is not owned, then use Free when it needs to be destroyed.

Tip:  When passing in Self as the Owner parameter, consider what Self references. If a component creates another component in one of its methods, then Self refers to the first component and not the component being created, which is then owned by the first component.
Note:  The TComponent constructor is virtual in part to allow polymorphic instantiation of class references. This is critical to the streaming system and to the Form Designer. Do not forget to use the override directive when declaring a new component's Create constructor.</summary></devnotes></constructor>
      <property name="Action" visibility="published" read="GetAction" write="SetAction" type="TBasicAction" hoisted="true" file="FMX.StdCtrls.pas" line="1262"/>
      <property name="Align" visibility="published" read="FAlign" write="SetAlign" type="TAlignLayout" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="1263"/>
      <property name="Anchors" visibility="published" read="FAnchors" write="SetAnchors" stored="IsAnchorsStored" type="TAnchors" hoisted="true" file="FMX.StdCtrls.pas" line="1264"/>
      <property name="ClipChildren" visibility="published" read="FClipChildren" write="SetClipChildren" type="Boolean" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="1265"/>
      <property name="ClipParent" visibility="published" read="FClipParent" write="FClipParent" type="Boolean" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="1266"/>
      <property name="Cursor" visibility="published" read="GetCursor" write="SetCursor" type="TCursor" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="1267"/>
      <property name="DragMode" visibility="published" read="GetDragMode" write="SetDragMode" type="TDragMode" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="1268"/>
      <property name="EnableDragHighlight" visibility="published" read="FEnableDragHighlight" write="FEnableDragHighlight" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="1269"/>
      <property name="Enabled" visibility="published" read="FEnabled" write="SetEnabled" stored="EnabledStored" type="Boolean" hoisted="true" file="FMX.StdCtrls.pas" line="1270"/>
      <property name="Locked" visibility="published" read="FLocked" write="SetLocked" type="Boolean" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="1271"/>
      <property name="Height" visibility="published" read="GetHeight" write="SetHeight" stored="False" type="Single" hoisted="true" file="FMX.StdCtrls.pas" line="1272"/>
      <property name="HelpContext" visibility="published" read="FHelpContext" write="SetHelpContext" stored="IsHelpContextStored" type="THelpContext" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="1273"/>
      <property name="HelpKeyword" visibility="published" read="FHelpKeyword" write="SetHelpKeyword" stored="IsHelpContextStored" type="string" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="1274"/>
      <property name="HelpType" visibility="published" read="FHelpType" write="FHelpType" type="THelpType" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="1275"/>
      <property name="Hint" visibility="published" read="FHint" write="SetHint" stored="HintStored" type="string" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="1276"/>
      <property name="HitTest" visibility="published" read="FHitTest" write="SetHitTest" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="1277"/>
      <property name="Padding" visibility="published" read="GetPadding" write="SetPadding" type="TBounds" hoisted="true" file="FMX.StdCtrls.pas" line="1278"/>
      <property name="Opacity" visibility="published" read="FOpacity" write="SetOpacity" stored="IsOpacityStored" type="Single" hoisted="true" file="FMX.StdCtrls.pas" line="1279"/>
      <property name="Margins" visibility="published" read="GetMargins" write="SetMargins" type="TBounds" hoisted="true" file="FMX.StdCtrls.pas" line="1280"/>
      <property name="PopupMenu" visibility="published" read="FPopupMenu" write="SetPopupMenu" stored="IsPopupMenuStored" type="TCustomPopupMenu" hoisted="true" file="FMX.StdCtrls.pas" line="1281"/>
      <property name="Position" visibility="published" read="FPosition" write="SetPosition" stored="IsPositionStored" type="TPosition" hoisted="true" file="FMX.StdCtrls.pas" line="1282"/>
      <property name="RotationAngle" visibility="published" read="GetRotationAngle" write="SetRotationAngle" type="Single" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="1283"/>
      <property name="RotationCenter" visibility="published" read="GetRotationCenter" write="SetRotationCenter" type="TPosition" hoisted="true" file="FMX.StdCtrls.pas" line="1284"/>
      <property name="Scale" visibility="published" read="GetScale" write="SetScale" type="TPosition" hoisted="true" file="FMX.StdCtrls.pas" line="1285"/>
      <property name="Size" visibility="published" read="FSize" write="SetSize" stored="IsSizeStored" type="TControlSize" hoisted="true" file="FMX.StdCtrls.pas" line="1286"/>
      <property name="StyleLookup" visibility="published" read="FStyleLookup" write="SetStyleLookup" type="string" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="1287"/>
      <property name="TouchTargetExpansion" visibility="published" read="FTouchTargetExpansion" write="SetTouchTargetExpansion" type="TBounds" hoisted="true" file="FMX.StdCtrls.pas" line="1288"/>
      <property name="Visible" visibility="published" read="FVisible" write="SetVisible" stored="VisibleStored" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="1289"/>
      <property name="Width" visibility="published" read="GetWidth" write="SetWidth" stored="False" type="Single" hoisted="true" file="FMX.StdCtrls.pas" line="1290"/>
      <property name="ParentShowHint" visibility="published" read="FParentShowHint" write="SetParentShowHint" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="1291"/>
      <property name="ShowHint" visibility="published" read="FShowHint" write="SetShowHint" stored="IsShowHintStored" type="Boolean" hoisted="true" file="FMX.StdCtrls.pas" line="1292"/>
      <event name="OnApplyStyleLookup" visibility="published" read="FOnApplyStyleLookup" write="FOnApplyStyleLookup" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1295"/>
      <event name="OnDragEnter" visibility="published" read="FOnDragEnter" write="FOnDragEnter" type="TDragEnterEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1297"/>
      <event name="OnDragLeave" visibility="published" read="FOnDragLeave" write="FOnDragLeave" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1298"/>
      <event name="OnDragOver" visibility="published" read="FOnDragOver" write="FOnDragOver" type="TDragOverEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1299"/>
      <event name="OnDragDrop" visibility="published" read="FOnDragDrop" write="FOnDragDrop" type="TDragDropEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1300"/>
      <event name="OnDragEnd" visibility="published" read="FOnDragEnd" write="FOnDragEnd" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1301"/>
      <event name="OnKeyDown" visibility="published" read="FOnKeyDown" write="FOnKeyDown" type="TKeyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1303"/>
      <event name="OnKeyUp" visibility="published" read="FOnKeyUp" write="FOnKeyUp" type="TKeyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1304"/>
      <event name="OnCanFocus" visibility="published" read="FOnCanFocus" write="FOnCanFocus" type="TCanFocusEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1306"/>
      <event name="OnClick" visibility="published" read="FOnClick" write="SetOnClick" stored="OnClickStored" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1307"/>
      <event name="OnDblClick" visibility="published" read="FOnDblClick" write="FOnDblClick" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1308"/>
      <event name="OnEnter" visibility="published" read="FOnEnter" write="FOnEnter" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1310"/>
      <event name="OnExit" visibility="published" read="FOnExit" write="FOnExit" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1311"/>
      <event name="OnMouseDown" visibility="published" read="FOnMouseDown" write="FOnMouseDown" type="TMouseEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1312"/>
      <event name="OnMouseMove" visibility="published" read="FOnMouseMove" write="FOnMouseMove" type="TMouseMoveEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1313"/>
      <event name="OnMouseUp" visibility="published" read="FOnMouseUp" write="FOnMouseUp" type="TMouseEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1314"/>
      <event name="OnMouseWheel" visibility="published" read="FOnMouseWheel" write="FOnMouseWheel" type="TMouseWheelEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1315"/>
      <event name="OnMouseEnter" visibility="published" read="FOnMouseEnter" write="FOnMouseEnter" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1316"/>
      <event name="OnMouseLeave" visibility="published" read="FOnMouseLeave" write="FOnMouseLeave" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1317"/>
      <event name="OnPainting" visibility="published" read="FOnPainting" write="FOnPainting" type="TOnPaintEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1319"/>
      <event name="OnPaint" visibility="published" read="FOnPaint" write="FOnPaint" type="TOnPaintEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1320"/>
      <event name="OnResize" visibility="published" read="FOnResize" write="FOnResize" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1321"/>
      <event name="OnResized" visibility="published" read="FOnResized" write="FOnResized" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1322"/>
    </members>
  <devnotes><summary>
Represents a graphical control used to dynamically resize FireMonkey forms.
Use a TSizeGrip component in a FireMonkey form  to add a custom-placed size grip used to dynamically resize the form.

It is better that you position this size grip control in the bottom-rightmost position of the form, for consistency. If your FireMonkey form already contains a TStatusBar component, there is no need to add a TSizeGrip, because the status bar can display the size grip for your resizable form.
</summary></devnotes></class>
  <class name="TSplitter" file="FMX.StdCtrls.pas" line="1327">
    
    <members>
      <field name="FPressed" type="Boolean" visibility="private" size="1" offset="944" file="FMX.StdCtrls.pas" line="1329"/>
      <field name="FControl" type="TControl" visibility="private" size="4" offset="948" file="FMX.StdCtrls.pas" line="1330"/>
      <field name="FDownPos" type="TPointF" visibility="private" size="8" offset="952" file="FMX.StdCtrls.pas" line="1331"/>
      <field name="FMinSize" type="Single" visibility="private" size="4" offset="960" file="FMX.StdCtrls.pas" line="1332"/>
      <field name="FMaxSize" type="Single" visibility="private" size="4" offset="964" file="FMX.StdCtrls.pas" line="1333"/>
      <field name="FNewSize" type="Single" visibility="private" size="4" offset="968" file="FMX.StdCtrls.pas" line="1334"/>
      <field name="FOldSize" type="Single" visibility="private" size="4" offset="972" file="FMX.StdCtrls.pas" line="1334"/>
      <field name="FSplit" type="Single" visibility="private" size="4" offset="976" file="FMX.StdCtrls.pas" line="1335"/>
      <field name="FShowGrip" type="Boolean" visibility="private" size="1" offset="980" file="FMX.StdCtrls.pas" line="1336"/>
      <procedure name="SetShowGrip" visibility="private" file="FMX.StdCtrls.pas" line="1337">
        <parameters>
          <parameter name="Value" type="Boolean" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="ApplyStyle" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="1339">
      <devnotes><summary>
Customizes styles in complex objects.
FMX.StdCtrls.TSplitter.ApplyStyle inherits from FMX.Controls.TStyledControl.ApplyStyle. All content below this line refers to FMX.Controls.TStyledControl.ApplyStyle.
Customizes styles in complex objects.
TStyledControl descendants override it to apply styles in concordance with their primitive components.      
Do not call ApplyStyle explicitly in an application. It is called by the ApplyStyleLookup method when object styles are updated.
For an example of an ApplyStyle implementation, see &quot;TCalloutPanel:Style Contracts&quot; in FireMonkey Component Design.
</summary></devnotes></procedure>
      <procedure name="DefineProperties" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="1340">
        <parameters>
          <parameter name="Filer" type="TFiler"/>
        </parameters>
      <devnotes><summary>




Designates methods for storing an object's unpublished data on a stream such as a form file.
FMX.StdCtrls.TSplitter.DefineProperties inherits from System.Classes.TComponent.DefineProperties. All content below this line refers to System.Classes.TComponent.DefineProperties.
Designates methods for storing an object's unpublished data on a stream such as a form file.
TComponent overrides the DefineProperties method defined in TPersistent to define &quot;fake&quot; Top and Left properties. These are defined so that components that are not controls can be manipulated at design time. However, the Top and Left properties are hidden, that is, they are not published, because only controls appear at run time.
DefineProperties is virtual; descendent classes can override it. When overriding DefineProperties, be aware that the Ancestor property of Filer might be set, and that this property can determine whether or not it is appropriate to write properties.
DefineProperties is called automatically as part of the component streaming system; do not call it directly.
</summary></devnotes></procedure>
      <procedure name="Paint" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="1341">
      <devnotes><summary>
Renders the control's surface. 
FMX.StdCtrls.TSplitter.Paint inherits from FMX.Controls.TControl.Paint. All content below this line refers to FMX.Controls.TControl.Paint.
Renders the control's surface. 
The Paint method is called by DoPaint when a control is being painted by the PaintTo method. Before DoPaint, Painting is called. AfterPaint is called immediately after. 
FireMonkey internally calls Paint to paint the control when the window is being painted. You must not call Paint explicitly.
The base class TControl implements an empty Paint. The descendants of TControl override Paint to provide specific rendering of the respective controls.
For example, Paint methods in classes of the FMX.Objects unit draw and fill shapes using the properties defined in these classes. See the descriptions of these classes to find the properties of the respective shapes. 
</summary></devnotes></procedure>
      <procedure name="SetAlign" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="1342">
        <parameters>
          <parameter name="Value" type="TAlignLayout" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Setter function for the Align property.
FMX.StdCtrls.TSplitter.SetAlign inherits from FMX.Controls.TControl.SetAlign. All content below this line refers to FMX.Controls.TControl.SetAlign.
Setter function for the Align property. Value specifies the new value of the Align property.
</summary></devnotes></procedure>
      <function name="FindObject" visibility="protected" file="FMX.StdCtrls.pas" line="1343">
        <parameters>
          <retval type="TControl"/>
        </parameters>
      <devnotes><summary>
Internally used to locate the controls that are about to be resized.
</summary></devnotes></function>
      <procedure name="CalcSplitSize" visibility="protected" file="FMX.StdCtrls.pas" line="1344">
        <parameters>
          <parameter name="X" type="Single"/>
          <parameter name="Y" type="Single"/>
          <parameter name="NewSize" type="Single" paramflags="var"/>
          <parameter name="Split" type="Single" paramflags="var"/>
        </parameters>
      <devnotes><summary>
Internally used for calculating the new dimensions of the controls that are being split.
</summary></devnotes></procedure>
      <procedure name="UpdateSize" visibility="protected" file="FMX.StdCtrls.pas" line="1345">
        <parameters>
          <parameter name="X" type="Single"/>
          <parameter name="Y" type="Single"/>
        </parameters>
      <devnotes><summary>
Internally called whenever you change the position of this splitter.
UpdateSize internally calls CalcSplitSize to update the dimensions of the controls that are being split by this splitter.
</summary></devnotes></procedure>
      <function name="DoCanResize" visibility="protected" file="FMX.StdCtrls.pas" line="1346">
        <parameters>
          <parameter name="NewSize" type="Single" paramflags="var"/>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Internally used to know whether the controls that are about to be resized can actually be resized.
</summary></devnotes></function>
      <procedure name="UpdateControlSize" visibility="protected" file="FMX.StdCtrls.pas" line="1347">
      <devnotes><summary>
Internally used for updating the size of the controls that are being split.
</summary></devnotes></procedure>
      <function name="GetDefaultSize" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="1348">
        <parameters>
          <retval type="TSizeF"/>
        </parameters>
      <devnotes><summary>
Getter of DefaultSize.
FMX.StdCtrls.TSplitter.GetDefaultSize inherits from FMX.Controls.TControl.GetDefaultSize. All content below this line refers to FMX.Controls.TControl.GetDefaultSize.
Getter of DefaultSize.


</summary></devnotes></function>
      <constructor name="Create" visibility="public" file="FMX.StdCtrls.pas" line="1350">
        <parameters>
          <parameter name="AOwner" type="TComponent"/>
        </parameters>
      <devnotes><summary>
Allocates memory and constructs a safely initialized instance of a component.
Allocates memory and constructs a safely initialized instance of a component.
FMX.StdCtrls.TSplitter.Create inherits from System.Classes.TComponent.Create. All content below this line refers to System.Classes.TComponent.Create.
Allocates memory and constructs a safely initialized instance of a component.
All objects have a Create method that constructs the object. TComponent redefines Create so that, for components, Create also:

Establishes the relationship of a component and its Owner, as indicated by the AOwner parameter.
Sets the ComponentStyle property to csInheritable, meaning that the component can be inherited by a descendent form type.
It is not necessary to explicitly create components added in the Form Designer. These components are created automatically when the application is run, and they are destroyed when the application is closed.
For components created programmatically, that is, not created in the Form Designer, call Create and pass in an owner component as the AOwner parameter. The owner disposes of the component when it is destroyed. If the component is not owned, then use Free when it needs to be destroyed.

Tip:  When passing in Self as the Owner parameter, consider what Self references. If a component creates another component in one of its methods, then Self refers to the first component and not the component being created, which is then owned by the first component.
Note:  The TComponent constructor is virtual in part to allow polymorphic instantiation of class references. This is critical to the streaming system and to the Form Designer. Do not forget to use the override directive when declaring a new component's Create constructor.</summary></devnotes></constructor>
      <procedure name="MouseDown" visibility="public" procflags="override" file="FMX.StdCtrls.pas" line="1351">
        <parameters>
          <parameter name="Button" type="TMouseButton"/>
          <parameter name="Shift" type="TShiftState"/>
          <parameter name="X" type="Single"/>
          <parameter name="Y" type="Single"/>
        </parameters>
      <devnotes><summary>
OnMouseDown event dispatcher. 
FMX.StdCtrls.TSplitter.MouseDown inherits from FMX.Controls.TControl.MouseDown. All content below this line refers to FMX.Controls.TControl.MouseDown.
OnMouseDown event dispatcher. 
A control calls MouseDown in response to any of mouse-down messages, decoding the message parameters into the shift-key state and position, which it passes in the Shift, X, and Y parameters, respectively:

Button determines which mouse button is pressed: left, right, or middle.
Shift indicates which shift keys--SHIFT, CTRL, ALT, and CMD (only for Mac)--were down when the user pressed the mouse button.
X and Y are the pixel coordinates of the mouse pointer within the client area of the control. If Button is mbLeft, MouseDown sets PressedPosition as a TPointF(X,Y).
Override the protected MouseDown method to provide other responses when a mouse button is down while the cursor is over the control.

</summary></devnotes></procedure>
      <procedure name="MouseMove" visibility="public" procflags="override" file="FMX.StdCtrls.pas" line="1352">
        <parameters>
          <parameter name="Shift" type="TShiftState"/>
          <parameter name="X" type="Single"/>
          <parameter name="Y" type="Single"/>
        </parameters>
      <devnotes><summary>
OnMouseMove event dispatcher. 
FMX.StdCtrls.TSplitter.MouseMove inherits from FMX.Controls.TControl.MouseMove. All content below this line refers to FMX.Controls.TControl.MouseMove.
OnMouseMove event dispatcher. 
As the mouse cursor moves across a control, this method is called repeatedly. Each time it is called with the new coordinates that reflect the continuous path of the mouse cursor across the screen real estate covered by the control's visual representation:

Shift indicates which shift keys--SHIFT, CTRL, ALT, and CMD (only for Mac)--were down when the mouse cursor is over the control.
X and Y are the pixel coordinates of the mouse pointer within the client area of the control.
Override the protected MouseMove method to provide other responses when the mouse cursor moves over the control.
</summary></devnotes></procedure>
      <procedure name="MouseUp" visibility="public" procflags="override" file="FMX.StdCtrls.pas" line="1353">
        <parameters>
          <parameter name="Button" type="TMouseButton"/>
          <parameter name="Shift" type="TShiftState"/>
          <parameter name="X" type="Single"/>
          <parameter name="Y" type="Single"/>
        </parameters>
      <devnotes><summary>
OnMouseUp event dispatcher. 
FMX.StdCtrls.TSplitter.MouseUp inherits from FMX.Controls.TControl.MouseUp. All content below this line refers to FMX.Controls.TControl.MouseUp.
OnMouseUp event dispatcher. 
A control calls MouseUp in response to any of mouse-up messages, decoding the message parameters into the shift-key state and position, which it passes in the Shift, X and Y parameters, respectively: 

Button determines which mouse button was previously pressed: left, right, or middle.
Shift indicates which shift keys--SHIFT, CTRL, ALT, and CMD (only for Mac)--were down when the pressed mouse button is released.
X and Y are the pixel coordinates of the mouse pointer within the client area of the control.
Override the protected MouseUp method to provide other responses when the mouse button previously pressed is released while the cursor is over the control.
</summary></devnotes></procedure>
      <property name="Action" visibility="published" read="GetAction" write="SetAction" type="TBasicAction" hoisted="true" file="FMX.StdCtrls.pas" line="1355"/>
      <property name="Align" visibility="published" read="FAlign" write="SetAlign" type="TAlignLayout" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="1356"/>
      <property name="ClipChildren" visibility="published" read="FClipChildren" write="SetClipChildren" type="Boolean" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="1357"/>
      <property name="ClipParent" visibility="published" read="FClipParent" write="FClipParent" type="Boolean" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="1358"/>
      <property name="Cursor" visibility="published" read="GetCursor" write="SetCursor" type="TCursor" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="1359"/>
      <property name="DragMode" visibility="published" read="GetDragMode" write="SetDragMode" type="TDragMode" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="1360"/>
      <property name="EnableDragHighlight" visibility="published" read="FEnableDragHighlight" write="FEnableDragHighlight" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="1361"/>
      <property name="Enabled" visibility="published" read="FEnabled" write="SetEnabled" stored="EnabledStored" type="Boolean" hoisted="true" file="FMX.StdCtrls.pas" line="1362"/>
      <property name="Locked" visibility="published" read="FLocked" write="SetLocked" type="Boolean" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="1363"/>
      <property name="Height" visibility="published" read="GetHeight" write="SetHeight" stored="False" type="Single" hoisted="true" file="FMX.StdCtrls.pas" line="1364"/>
      <property name="HelpContext" visibility="published" read="FHelpContext" write="SetHelpContext" stored="IsHelpContextStored" type="THelpContext" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="1365"/>
      <property name="HelpKeyword" visibility="published" read="FHelpKeyword" write="SetHelpKeyword" stored="IsHelpContextStored" type="string" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="1366"/>
      <property name="HelpType" visibility="published" read="FHelpType" write="FHelpType" type="THelpType" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="1367"/>
      <property name="Hint" visibility="published" read="FHint" write="SetHint" stored="HintStored" type="string" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="1368"/>
      <property name="HitTest" visibility="published" read="FHitTest" write="SetHitTest" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="1369"/>
      <property name="Padding" visibility="published" read="GetPadding" write="SetPadding" type="TBounds" hoisted="true" file="FMX.StdCtrls.pas" line="1370"/>
      <property name="MinSize" visibility="published" read="FMinSize" write="FMinSize" type="Single" default="0" file="FMX.StdCtrls.pas" line="1371"><devnotes><summary>
Specifies the minimum size, in pixels, of the controls that are being split in case of sliding the splitter to the maximum of one of the left, right, top, or bottom margins.
Use MinSize to set the minimum width or height of the controls that are being split using this splitter.
</summary></devnotes></property>
      <property name="Opacity" visibility="published" read="FOpacity" write="SetOpacity" stored="IsOpacityStored" type="Single" hoisted="true" file="FMX.StdCtrls.pas" line="1372"/>
      <property name="Margins" visibility="published" read="GetMargins" write="SetMargins" type="TBounds" hoisted="true" file="FMX.StdCtrls.pas" line="1373"/>
      <property name="PopupMenu" visibility="published" read="FPopupMenu" write="SetPopupMenu" stored="IsPopupMenuStored" type="TCustomPopupMenu" hoisted="true" file="FMX.StdCtrls.pas" line="1374"/>
      <property name="Position" visibility="published" read="FPosition" write="SetPosition" stored="IsPositionStored" type="TPosition" hoisted="true" file="FMX.StdCtrls.pas" line="1375"/>
      <property name="RotationAngle" visibility="published" read="GetRotationAngle" write="SetRotationAngle" type="Single" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="1376"/>
      <property name="RotationCenter" visibility="published" read="GetRotationCenter" write="SetRotationCenter" type="TPosition" hoisted="true" file="FMX.StdCtrls.pas" line="1377"/>
      <property name="Scale" visibility="published" read="GetScale" write="SetScale" type="TPosition" hoisted="true" file="FMX.StdCtrls.pas" line="1378"/>
      <property name="ShowGrip" visibility="published" read="FShowGrip" write="SetShowGrip" type="Boolean" default="1" file="FMX.StdCtrls.pas" line="1379"><devnotes><summary>
Specifies whether to show the grip control of the  TSplitter.
Set the  ShowGrip property to False to hide the grip control from the  TSplitter component. The default value is True so the  TSplitter shows the grip by default.
</summary></devnotes></property>
      <property name="Size" visibility="published" read="FSize" write="SetSize" stored="IsSizeStored" type="TControlSize" hoisted="true" file="FMX.StdCtrls.pas" line="1380"/>
      <property name="StyleLookup" visibility="published" read="FStyleLookup" write="SetStyleLookup" type="string" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="1381"/>
      <property name="TouchTargetExpansion" visibility="published" read="FTouchTargetExpansion" write="SetTouchTargetExpansion" type="TBounds" hoisted="true" file="FMX.StdCtrls.pas" line="1382"/>
      <property name="Visible" visibility="published" read="FVisible" write="SetVisible" stored="VisibleStored" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="1383"/>
      <property name="Width" visibility="published" read="GetWidth" write="SetWidth" stored="False" type="Single" hoisted="true" file="FMX.StdCtrls.pas" line="1384"/>
      <property name="TabStop" visibility="published" read="GetTabStop" write="SetTabStop" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="1385"/>
      <property name="ParentShowHint" visibility="published" read="FParentShowHint" write="SetParentShowHint" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="1386"/>
      <property name="ShowHint" visibility="published" read="FShowHint" write="SetShowHint" stored="IsShowHintStored" type="Boolean" hoisted="true" file="FMX.StdCtrls.pas" line="1387"/>
      <event name="OnApplyStyleLookup" visibility="published" read="FOnApplyStyleLookup" write="FOnApplyStyleLookup" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1390"/>
      <event name="OnDragEnter" visibility="published" read="FOnDragEnter" write="FOnDragEnter" type="TDragEnterEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1392"/>
      <event name="OnDragLeave" visibility="published" read="FOnDragLeave" write="FOnDragLeave" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1393"/>
      <event name="OnDragOver" visibility="published" read="FOnDragOver" write="FOnDragOver" type="TDragOverEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1394"/>
      <event name="OnDragDrop" visibility="published" read="FOnDragDrop" write="FOnDragDrop" type="TDragDropEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1395"/>
      <event name="OnDragEnd" visibility="published" read="FOnDragEnd" write="FOnDragEnd" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1396"/>
      <event name="OnKeyDown" visibility="published" read="FOnKeyDown" write="FOnKeyDown" type="TKeyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1398"/>
      <event name="OnKeyUp" visibility="published" read="FOnKeyUp" write="FOnKeyUp" type="TKeyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1399"/>
      <event name="OnCanFocus" visibility="published" read="FOnCanFocus" write="FOnCanFocus" type="TCanFocusEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1401"/>
      <event name="OnClick" visibility="published" read="FOnClick" write="SetOnClick" stored="OnClickStored" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1402"/>
      <event name="OnDblClick" visibility="published" read="FOnDblClick" write="FOnDblClick" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1403"/>
      <event name="OnEnter" visibility="published" read="FOnEnter" write="FOnEnter" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1405"/>
      <event name="OnExit" visibility="published" read="FOnExit" write="FOnExit" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1406"/>
      <event name="OnMouseDown" visibility="published" read="FOnMouseDown" write="FOnMouseDown" type="TMouseEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1407"/>
      <event name="OnMouseMove" visibility="published" read="FOnMouseMove" write="FOnMouseMove" type="TMouseMoveEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1408"/>
      <event name="OnMouseUp" visibility="published" read="FOnMouseUp" write="FOnMouseUp" type="TMouseEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1409"/>
      <event name="OnMouseWheel" visibility="published" read="FOnMouseWheel" write="FOnMouseWheel" type="TMouseWheelEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1410"/>
      <event name="OnMouseEnter" visibility="published" read="FOnMouseEnter" write="FOnMouseEnter" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1411"/>
      <event name="OnMouseLeave" visibility="published" read="FOnMouseLeave" write="FOnMouseLeave" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1412"/>
      <event name="OnPainting" visibility="published" read="FOnPainting" write="FOnPainting" type="TOnPaintEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1414"/>
      <event name="OnPaint" visibility="published" read="FOnPaint" write="FOnPaint" type="TOnPaintEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1415"/>
      <event name="OnResize" visibility="published" read="FOnResize" write="FOnResize" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1416"/>
      <event name="OnResized" visibility="published" read="FOnResized" write="FOnResized" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1417"/>
    </members>
  <devnotes><summary>
TSplitter divides the client area of a FireMonkey form into resizable panes.
Add a splitter to a form between two aligned controls to allow users to resize the controls at run time. The splitter sits between a control aligned to one edge of the form and the controls that fill up the rest of the client area. Give the splitter the same alignment as the control that is anchored to the edge of the form. When the user moves the splitter, it resizes the anchored control. This, in turn, changes the client area of the form, and the controls that fill up the rest of the client area resize accordingly.
Use each control on the form as a separate pane. After each pane is placed, place a splitter with the same alignment to allow that pane to be resized. The last pane to be placed on the form should be client-aligned, so that it resizes automatically to fill up the remaining space after all other panes are resized.
</summary></devnotes></class>
  <class name="TProgressBar" file="FMX.StdCtrls.pas" line="1422">
    
    <interfaces>
      <implements name="IValueRange"/>
    </interfaces>
    <members>
      <field name="FOrientation" type="TOrientation" visibility="private" size="1" offset="992" file="FMX.StdCtrls.pas" line="1424"/>
      <field name="FValueRange" type="TValueRange" visibility="private" size="4" offset="996" file="FMX.StdCtrls.pas" line="1425"/>
      <field name="FDefaultValueRange" type="TBaseValueRange" visibility="private" size="4" offset="1000" file="FMX.StdCtrls.pas" line="1426"/>
      <procedure name="SetOrientation" visibility="private" file="FMX.StdCtrls.pas" line="1427">
        <parameters>
          <parameter name="Value" type="TOrientation" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="GetMax" visibility="private" file="FMX.StdCtrls.pas" line="1428">
        <parameters>
          <retval type="Single"/>
        </parameters>
      </function>
      <function name="GetMin" visibility="private" file="FMX.StdCtrls.pas" line="1429">
        <parameters>
          <retval type="Single"/>
        </parameters>
      </function>
      <function name="GetValue" visibility="private" file="FMX.StdCtrls.pas" line="1430">
        <parameters>
          <retval type="Single"/>
        </parameters>
      </function>
      <procedure name="SetMax" visibility="private" file="FMX.StdCtrls.pas" line="1431">
        <parameters>
          <parameter name="Value" type="Single" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetMin" visibility="private" file="FMX.StdCtrls.pas" line="1432">
        <parameters>
          <parameter name="Value" type="Single" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetValue" visibility="private" file="FMX.StdCtrls.pas" line="1433">
        <parameters>
          <parameter name="Value" type="Single" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="GetValueRange" visibility="private" file="FMX.StdCtrls.pas" line="1434">
        <parameters>
          <retval type="TCustomValueRange">
            <devnotes>
               <summary>Extends the TBaseValueRange class providing methods and
               properties used to control the correctness of the Value handling within
               its Min to Max range.</summary>
            </devnotes>
          </retval>
        </parameters>
      </function>
      <procedure name="SetValueRange" visibility="private" file="FMX.StdCtrls.pas" line="1435">
        <parameters>
          <parameter name="AValue" type="TCustomValueRange" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="DefStored" visibility="private" file="FMX.StdCtrls.pas" line="1436">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <procedure name="ChangedProc" visibility="private" file="FMX.StdCtrls.pas" line="1437">
        <parameters>
          <parameter name="Sender" type="TObject"/>
        </parameters>
      </procedure>
      <function name="MaxStored" visibility="private" file="FMX.StdCtrls.pas" line="1438">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <function name="MinStored" visibility="private" file="FMX.StdCtrls.pas" line="1439">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <function name="ValueStored" visibility="private" file="FMX.StdCtrls.pas" line="1440">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <function name="ChooseAdjustType" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="1442">
        <parameters>
          <parameter name="FixedSize" type="TSize" paramflags="const"/>
          <retval type="TAdjustType"/>
        </parameters>
      <devnotes><summary>
Returns an adjust type based on the provided FixedSize.
FMX.StdCtrls.TProgressBar.ChooseAdjustType inherits from FMX.Controls.TStyledControl.ChooseAdjustType. All content below this line refers to FMX.Controls.TStyledControl.ChooseAdjustType.
Returns an adjust type based on the provided FixedSize.
FixedSize is the value of the FixedSize property of the control that is passed to AdjustFixedSize.

 See Also
System.Types.TSize
FMX.Controls.TControl.FixedSize
FMX.Types.TAdjustType
FMX.Controls.TStyledControl.AdjustFixedSize

</summary></devnotes></function>
      <procedure name="ApplyStyle" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="1443">
      <devnotes><summary>
Customizes styles in complex objects.
FMX.StdCtrls.TProgressBar.ApplyStyle inherits from FMX.Controls.TStyledControl.ApplyStyle. All content below this line refers to FMX.Controls.TStyledControl.ApplyStyle.
Customizes styles in complex objects.
TStyledControl descendants override it to apply styles in concordance with their primitive components.      
Do not call ApplyStyle explicitly in an application. It is called by the ApplyStyleLookup method when object styles are updated.
For an example of an ApplyStyle implementation, see &quot;TCalloutPanel:Style Contracts&quot; in FireMonkey Component Design.
</summary></devnotes></procedure>
      <procedure name="DefineProperties" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="1444">
        <parameters>
          <parameter name="Filer" type="TFiler"/>
        </parameters>
      <devnotes><summary>




Designates methods for storing an object's unpublished data on a stream such as a form file.
FMX.StdCtrls.TProgressBar.DefineProperties inherits from System.Classes.TComponent.DefineProperties. All content below this line refers to System.Classes.TComponent.DefineProperties.
Designates methods for storing an object's unpublished data on a stream such as a form file.
TComponent overrides the DefineProperties method defined in TPersistent to define &quot;fake&quot; Top and Left properties. These are defined so that components that are not controls can be manipulated at design time. However, the Top and Left properties are hidden, that is, they are not published, because only controls appear at run time.
DefineProperties is virtual; descendent classes can override it. When overriding DefineProperties, be aware that the Ancestor property of Filer might be set, and that this property can determine whether or not it is appropriate to write properties.
DefineProperties is called automatically as part of the component streaming system; do not call it directly.
</summary></devnotes></procedure>
      <function name="GetData" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="1445">
        <parameters>
          <retval type="TValue">
            <attributes>
              <attribute name="HPPGENAttribute"/>
            </attributes>
          </retval>
        </parameters>
      <devnotes><summary>
Protected getter implementation for the Data property.
FMX.StdCtrls.TProgressBar.GetData inherits from FMX.Types.TFmxObject.GetData. All content below this line refers to FMX.Types.TFmxObject.GetData.
Protected getter implementation for the Data property.
</summary></devnotes></function>
      <procedure name="SetData" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="1446">
        <parameters>
          <parameter name="Value" type="TValue" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Protected setter implementation for the Data property.
FMX.StdCtrls.TProgressBar.SetData inherits from FMX.Types.TFmxObject.SetData. All content below this line refers to FMX.Types.TFmxObject.SetData.
Protected setter implementation for the Data property.
</summary></devnotes></procedure>
      <procedure name="DoRealign" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="1447">
      <devnotes><summary>
Sends a PM_REALIGN message to the presentation layer through its presentation proxy.
FMX.StdCtrls.TProgressBar.DoRealign inherits from FMX.Controls.Presentation.TPresentedControl.DoRealign. All content below this line refers to FMX.Controls.Presentation.TPresentedControl.DoRealign.
Sends a PM_REALIGN message to the presentation layer through its presentation proxy.
For details about the circumstances that trigger this procedure, see TControl.DoRealign.

 See Also
FMX.Controls.Presentation.TPresentedControl.PresentationProxy
FMX.Presentation.Messages.TMessageSender.SendMessage
FMX.Controls.TControl.DoRealign

</summary></devnotes></procedure>
      <function name="GetActionLinkClass" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="1448">
        <parameters>
          <retval type="TActionLinkClass"/>
        </parameters>
      <devnotes><summary>


Returns the associated action link class.
FMX.StdCtrls.TProgressBar.GetActionLinkClass inherits from FMX.Types.TFmxObject.GetActionLinkClass. All content below this line refers to FMX.Types.TFmxObject.GetActionLinkClass.
Returns the associated action link class.
Returns the class reference for the TActionLink class or for one of its descendants. 
In TFmxObject, GetActionLinkClass always returns nil.
In descendant classes, GetActionLinkClass should return the appropriate class type for the action link used with the class object. When a control object of the descendant from the TFmxObject class tries to assign a value to the Action property, the setter method for Action calls GetActionLinkClass. If GetActionLinkClass returns a non-nil value, then the action object is assigned to Action. If the control object does not support actions, then GetActionLinkClass should return nil. In this case, attempting to set a value to the Action property raises the following exception:  

StrEActionNoSuported = 'Class %s does not support the action'    
</summary></devnotes></function>
      <procedure name="ActionChange" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="1449">
        <parameters>
          <parameter name="Sender" type="TBasicAction"/>
          <parameter name="CheckDefaults" type="Boolean"/>
        </parameters>
      <devnotes><summary>
Specifies the behavior of a TProgressBar control when Action changes. 
Depending on the CheckDefaults value,  ActionChange uses the TValueRangeAction.ValueRange property of the Sender action to set the new value to the  
value range property of TProgressBar. Then ActionChange calls the inherited TControl.ActionChange method.  
Do not call ActionChange explicitly in an application. It is for internal use.
</summary></devnotes></procedure>
      <procedure name="AfterChangeProc" visibility="protected" procflags="virtual" file="FMX.StdCtrls.pas" line="1450">
        <parameters>
          <parameter name="Sender" type="TObject"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <property name="DefaultValueRange" visibility="protected" read="FDefaultValueRange" type="TBaseValueRange" file="FMX.StdCtrls.pas" line="1451"><devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></property>
      <procedure name="Loaded" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="1452">
      <devnotes><summary>
Initializes the control after the form file has been read into memory and loads its presentation.
FMX.StdCtrls.TProgressBar.Loaded inherits from FMX.Controls.Presentation.TPresentedControl.Loaded. All content below this line refers to FMX.Controls.Presentation.TPresentedControl.Loaded.
Initializes the control after the form file has been read into memory and loads its presentation.
For details, see TControl.Loaded.

 See Also
FMX.Controls.Presentation.TPresentedControl.LoadPresentation
FMX.Controls.TControl.Loaded

</summary></devnotes></procedure>
      <function name="GetDefaultSize" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="1453">
        <parameters>
          <retval type="TSizeF"/>
        </parameters>
      <devnotes><summary>
Getter of DefaultSize.
FMX.StdCtrls.TProgressBar.GetDefaultSize inherits from FMX.Controls.TControl.GetDefaultSize. All content below this line refers to FMX.Controls.TControl.GetDefaultSize.
Getter of DefaultSize.


</summary></devnotes></function>
      <constructor name="Create" visibility="public" file="FMX.StdCtrls.pas" line="1455">
        <parameters>
          <parameter name="AOwner" type="TComponent"/>
        </parameters>
      <devnotes><summary>
Creates a new instance of TPresentedControl.
FMX.StdCtrls.TProgressBar.Create inherits from FMX.Controls.Presentation.TPresentedControl.Create. All content below this line refers to FMX.Controls.Presentation.TPresentedControl.Create.
Creates a new instance of TPresentedControl.
AOwner takes ownership of the control and becomes responsible of destroying the control once the control is no longer necessary.
The control constructor creates a data model for the control. DefineModelClass determines the default class of data model for each subclass of TPresentedControl.
Create also sets the value of the CanUseDefaultPresentation property to True.

 See Also
System.Classes.TComponent.Create
FMX.Controls.Presentation.TPresentedControl.Model
FMX.Controls.Presentation.TPresentedControl.DefineModelClass
FMX.Controls.Presentation.TPresentedControl.Destroy
FMX.Controls.Presentation.TPresentedControl.CanUseDefaultPresentation

</summary></devnotes></constructor>
      <procedure name="AfterConstruction" visibility="public" procflags="override" file="FMX.StdCtrls.pas" line="1456">
      <devnotes><summary>
Responds after the last constructor has executed and loads the control presentation.
FMX.StdCtrls.TProgressBar.AfterConstruction inherits from FMX.Controls.Presentation.TPresentedControl.AfterConstruction. All content below this line refers to FMX.Controls.Presentation.TPresentedControl.AfterConstruction.
Responds after the last constructor has executed and loads the control presentation.
AfterConstruction is called automatically after the object's last constructor has executed. Do not call it explicitly in your applications.
</summary></devnotes></procedure>
      <destructor name="Destroy" visibility="public" file="FMX.StdCtrls.pas" line="1457">
        <parameters>
        </parameters>
      <devnotes><summary>
Destroys this instance of TPresentedControl.
FMX.StdCtrls.TProgressBar.Destroy inherits from FMX.Controls.Presentation.TPresentedControl.Destroy. All content below this line refers to FMX.Controls.Presentation.TPresentedControl.Destroy.
Destroys this instance of TPresentedControl.

 See Also
FMX.Controls.Presentation.TPresentedControl.Create

</summary></devnotes></destructor>
      <property name="Action" visibility="published" read="GetAction" write="SetAction" type="TBasicAction" hoisted="true" file="FMX.StdCtrls.pas" line="1459"/>
      <property name="Align" visibility="published" read="FAlign" write="SetAlign" type="TAlignLayout" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="1460"/>
      <property name="Anchors" visibility="published" read="FAnchors" write="SetAnchors" stored="IsAnchorsStored" type="TAnchors" hoisted="true" file="FMX.StdCtrls.pas" line="1461"/>
      <property name="ClipChildren" visibility="published" read="FClipChildren" write="SetClipChildren" type="Boolean" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="1462"/>
      <property name="ClipParent" visibility="published" read="FClipParent" write="FClipParent" type="Boolean" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="1463"/>
      <property name="ControlType" visibility="published" read="GetControlType" write="SetControlType" type="TControlType" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="1464"/>
      <property name="Cursor" visibility="published" read="GetCursor" write="SetCursor" type="TCursor" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="1465"/>
      <property name="DragMode" visibility="published" read="GetDragMode" write="SetDragMode" type="TDragMode" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="1466"/>
      <property name="EnableDragHighlight" visibility="published" read="FEnableDragHighlight" write="FEnableDragHighlight" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="1467"/>
      <property name="Enabled" visibility="published" read="FEnabled" write="SetEnabled" stored="EnabledStored" type="Boolean" hoisted="true" file="FMX.StdCtrls.pas" line="1468"/>
      <property name="Locked" visibility="published" read="FLocked" write="SetLocked" type="Boolean" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="1469"/>
      <property name="Height" visibility="published" read="GetHeight" write="SetHeight" stored="False" type="Single" hoisted="true" file="FMX.StdCtrls.pas" line="1470"/>
      <property name="HelpContext" visibility="published" read="FHelpContext" write="SetHelpContext" stored="IsHelpContextStored" type="THelpContext" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="1471"/>
      <property name="HelpKeyword" visibility="published" read="FHelpKeyword" write="SetHelpKeyword" stored="IsHelpContextStored" type="string" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="1472"/>
      <property name="HelpType" visibility="published" read="FHelpType" write="FHelpType" type="THelpType" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="1473"/>
      <property name="Hint" visibility="published" read="FHint" write="SetHint" stored="HintStored" type="string" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="1474"/>
      <property name="HitTest" visibility="published" read="FHitTest" write="SetHitTest" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="1475"/>
      <property name="Padding" visibility="published" read="GetPadding" write="SetPadding" type="TBounds" hoisted="true" file="FMX.StdCtrls.pas" line="1476"/>
      <property name="Max" visibility="published" read="GetMax" write="SetMax" stored="MaxStored" type="Single" file="FMX.StdCtrls.pas" line="1477"><devnotes><summary>
Specifies the maximum value for this progress bar. As you place a TProgressBar component on a form, the default value for the Max property is set to 100.
</summary></devnotes></property>
      <property name="Min" visibility="published" read="GetMin" write="SetMin" stored="MinStored" type="Single" file="FMX.StdCtrls.pas" line="1478"><devnotes><summary>
Specifies the minimum value for this progress bar. The default value for the Min property is 0.
</summary></devnotes></property>
      <property name="Opacity" visibility="published" read="FOpacity" write="SetOpacity" stored="IsOpacityStored" type="Single" hoisted="true" file="FMX.StdCtrls.pas" line="1479"/>
      <property name="Orientation" visibility="published" read="FOrientation" write="SetOrientation" type="TOrientation" file="FMX.StdCtrls.pas" line="1480"><devnotes><summary>
Specifies the orientation (Horizontal or Vertical) for the progress bar.
</summary></devnotes></property>
      <property name="Margins" visibility="published" read="GetMargins" write="SetMargins" type="TBounds" hoisted="true" file="FMX.StdCtrls.pas" line="1481"/>
      <property name="PopupMenu" visibility="published" read="FPopupMenu" write="SetPopupMenu" stored="IsPopupMenuStored" type="TCustomPopupMenu" hoisted="true" file="FMX.StdCtrls.pas" line="1482"/>
      <property name="Position" visibility="published" read="FPosition" write="SetPosition" stored="IsPositionStored" type="TPosition" hoisted="true" file="FMX.StdCtrls.pas" line="1483"/>
      <property name="RotationAngle" visibility="published" read="GetRotationAngle" write="SetRotationAngle" type="Single" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="1484"/>
      <property name="RotationCenter" visibility="published" read="GetRotationCenter" write="SetRotationCenter" type="TPosition" hoisted="true" file="FMX.StdCtrls.pas" line="1485"/>
      <property name="Scale" visibility="published" read="GetScale" write="SetScale" type="TPosition" hoisted="true" file="FMX.StdCtrls.pas" line="1486"/>
      <property name="Size" visibility="published" read="FSize" write="SetSize" stored="IsSizeStored" type="TControlSize" hoisted="true" file="FMX.StdCtrls.pas" line="1487"/>
      <property name="StyleLookup" visibility="published" read="FStyleLookup" write="SetStyleLookup" type="string" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="1488"/>
      <property name="TouchTargetExpansion" visibility="published" read="FTouchTargetExpansion" write="SetTouchTargetExpansion" type="TBounds" hoisted="true" file="FMX.StdCtrls.pas" line="1489"/>
      <property name="Value" visibility="published" read="GetValue" write="SetValue" stored="ValueStored" type="Single" file="FMX.StdCtrls.pas" line="1490"><devnotes><summary>
Specifies the current position of the progress bar.
You can read Value to determine the progress from Min to Max. 
Set a needed value for the Value property, and the progress bar will display a position between Min and Max. For example, when the process completes, set Value to Max so that it appears completely filled.
By default, the Min and Max values of the progress bar are represented in percentage terms, where Min is 0 (0% complete) and Max is 100 (100% complete). 
</summary></devnotes></property>
      <property name="Visible" visibility="published" read="FVisible" write="SetVisible" stored="VisibleStored" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="1491"/>
      <property name="Width" visibility="published" read="GetWidth" write="SetWidth" stored="False" type="Single" hoisted="true" file="FMX.StdCtrls.pas" line="1492"/>
      <property name="ParentShowHint" visibility="published" read="FParentShowHint" write="SetParentShowHint" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="1493"/>
      <property name="ShowHint" visibility="published" read="FShowHint" write="SetShowHint" stored="IsShowHintStored" type="Boolean" hoisted="true" file="FMX.StdCtrls.pas" line="1494"/>
      <event name="OnApplyStyleLookup" visibility="published" read="FOnApplyStyleLookup" write="FOnApplyStyleLookup" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1496"/>
      <event name="OnDragEnter" visibility="published" read="FOnDragEnter" write="FOnDragEnter" type="TDragEnterEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1498"/>
      <event name="OnDragLeave" visibility="published" read="FOnDragLeave" write="FOnDragLeave" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1499"/>
      <event name="OnDragOver" visibility="published" read="FOnDragOver" write="FOnDragOver" type="TDragOverEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1500"/>
      <event name="OnDragDrop" visibility="published" read="FOnDragDrop" write="FOnDragDrop" type="TDragDropEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1501"/>
      <event name="OnDragEnd" visibility="published" read="FOnDragEnd" write="FOnDragEnd" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1502"/>
      <event name="OnKeyDown" visibility="published" read="FOnKeyDown" write="FOnKeyDown" type="TKeyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1504"/>
      <event name="OnKeyUp" visibility="published" read="FOnKeyUp" write="FOnKeyUp" type="TKeyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1505"/>
      <event name="OnCanFocus" visibility="published" read="FOnCanFocus" write="FOnCanFocus" type="TCanFocusEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1507"/>
      <event name="OnClick" visibility="published" read="FOnClick" write="SetOnClick" stored="OnClickStored" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1508"/>
      <event name="OnDblClick" visibility="published" read="FOnDblClick" write="FOnDblClick" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1509"/>
      <event name="OnEnter" visibility="published" read="FOnEnter" write="FOnEnter" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1511"/>
      <event name="OnExit" visibility="published" read="FOnExit" write="FOnExit" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1512"/>
      <event name="OnMouseDown" visibility="published" read="FOnMouseDown" write="FOnMouseDown" type="TMouseEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1513"/>
      <event name="OnMouseMove" visibility="published" read="FOnMouseMove" write="FOnMouseMove" type="TMouseMoveEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1514"/>
      <event name="OnMouseUp" visibility="published" read="FOnMouseUp" write="FOnMouseUp" type="TMouseEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1515"/>
      <event name="OnMouseWheel" visibility="published" read="FOnMouseWheel" write="FOnMouseWheel" type="TMouseWheelEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1516"/>
      <event name="OnMouseEnter" visibility="published" read="FOnMouseEnter" write="FOnMouseEnter" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1517"/>
      <event name="OnMouseLeave" visibility="published" read="FOnMouseLeave" write="FOnMouseLeave" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1518"/>
      <event name="OnPainting" visibility="published" read="FOnPainting" write="FOnPainting" type="TOnPaintEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1520"/>
      <event name="OnPaint" visibility="published" read="FOnPaint" write="FOnPaint" type="TOnPaintEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1521"/>
      <event name="OnResize" visibility="published" read="FOnResize" write="FOnResize" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1522"/>
      <event name="OnResized" visibility="published" read="FOnResized" write="FOnResized" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1523"/>
    </members>
  <devnotes><summary>
Represents an animated progress bar indicator for general progress indication.
Use a TProgressBar in applications where you need to inform the user about the progress of one or multiple tasks effectuated by your application. A TProgressBar control can display its progress (Value) in the range specified by Min and Max.

Metropolis UI ProgressBar:

When a task with an indefinite amount of time or operations is in progress, we recommend that you use a TAniIndicator to illustrate the progress.
</summary></devnotes></class>
  <class name="TThumb" file="FMX.StdCtrls.pas" line="1530">
    
    <members>
      <field name="FTrack" type="TCustomTrack" visibility="private" size="4" offset="944" file="FMX.StdCtrls.pas" line="1532">
        <attributes>
          <attribute name="TObject"/>
        </attributes>
      </field>
      <field name="FDownOffset" type="TPointF" visibility="private" size="8" offset="948" file="FMX.StdCtrls.pas" line="1533"/>
      <field name="FPressed" type="Boolean" visibility="private" size="1" offset="956" file="FMX.StdCtrls.pas" line="1534"/>
      <function name="PointToValue" visibility="private" file="FMX.StdCtrls.pas" line="1535">
        <parameters>
          <parameter name="X" type="Single"/>
          <parameter name="Y" type="Single"/>
          <retval type="Single"/>
        </parameters>
      </function>
      <constructor name="Create" visibility="public" file="FMX.StdCtrls.pas" line="1537">
        <parameters>
          <parameter name="AOwner" type="TComponent"/>
        </parameters>
      <devnotes><summary>
Allocates memory and constructs a safely initialized instance of a component.
Allocates memory and constructs a safely initialized instance of a component.
FMX.StdCtrls.TThumb.Create inherits from System.Classes.TComponent.Create. All content below this line refers to System.Classes.TComponent.Create.
Allocates memory and constructs a safely initialized instance of a component.
All objects have a Create method that constructs the object. TComponent redefines Create so that, for components, Create also:

Establishes the relationship of a component and its Owner, as indicated by the AOwner parameter.
Sets the ComponentStyle property to csInheritable, meaning that the component can be inherited by a descendent form type.
It is not necessary to explicitly create components added in the Form Designer. These components are created automatically when the application is run, and they are destroyed when the application is closed.
For components created programmatically, that is, not created in the Form Designer, call Create and pass in an owner component as the AOwner parameter. The owner disposes of the component when it is destroyed. If the component is not owned, then use Free when it needs to be destroyed.

Tip:  When passing in Self as the Owner parameter, consider what Self references. If a component creates another component in one of its methods, then Self refers to the first component and not the component being created, which is then owned by the first component.
Note:  The TComponent constructor is virtual in part to allow polymorphic instantiation of class references. This is critical to the streaming system and to the Form Designer. Do not forget to use the override directive when declaring a new component's Create constructor.</summary></devnotes></constructor>
      <procedure name="MouseDown" visibility="public" procflags="override" file="FMX.StdCtrls.pas" line="1538">
        <parameters>
          <parameter name="Button" type="TMouseButton"/>
          <parameter name="Shift" type="TShiftState"/>
          <parameter name="X" type="Single"/>
          <parameter name="Y" type="Single"/>
        </parameters>
      <devnotes><summary>
OnMouseDown event dispatcher. 
FMX.StdCtrls.TThumb.MouseDown inherits from FMX.Controls.TControl.MouseDown. All content below this line refers to FMX.Controls.TControl.MouseDown.
OnMouseDown event dispatcher. 
A control calls MouseDown in response to any of mouse-down messages, decoding the message parameters into the shift-key state and position, which it passes in the Shift, X, and Y parameters, respectively:

Button determines which mouse button is pressed: left, right, or middle.
Shift indicates which shift keys--SHIFT, CTRL, ALT, and CMD (only for Mac)--were down when the user pressed the mouse button.
X and Y are the pixel coordinates of the mouse pointer within the client area of the control. If Button is mbLeft, MouseDown sets PressedPosition as a TPointF(X,Y).
Override the protected MouseDown method to provide other responses when a mouse button is down while the cursor is over the control.

</summary></devnotes></procedure>
      <procedure name="MouseMove" visibility="public" procflags="override" file="FMX.StdCtrls.pas" line="1539">
        <parameters>
          <parameter name="Shift" type="TShiftState"/>
          <parameter name="X" type="Single"/>
          <parameter name="Y" type="Single"/>
        </parameters>
      <devnotes><summary>
OnMouseMove event dispatcher. 
FMX.StdCtrls.TThumb.MouseMove inherits from FMX.Controls.TControl.MouseMove. All content below this line refers to FMX.Controls.TControl.MouseMove.
OnMouseMove event dispatcher. 
As the mouse cursor moves across a control, this method is called repeatedly. Each time it is called with the new coordinates that reflect the continuous path of the mouse cursor across the screen real estate covered by the control's visual representation:

Shift indicates which shift keys--SHIFT, CTRL, ALT, and CMD (only for Mac)--were down when the mouse cursor is over the control.
X and Y are the pixel coordinates of the mouse pointer within the client area of the control.
Override the protected MouseMove method to provide other responses when the mouse cursor moves over the control.
</summary></devnotes></procedure>
      <procedure name="MouseUp" visibility="public" procflags="override" file="FMX.StdCtrls.pas" line="1540">
        <parameters>
          <parameter name="Button" type="TMouseButton"/>
          <parameter name="Shift" type="TShiftState"/>
          <parameter name="X" type="Single"/>
          <parameter name="Y" type="Single"/>
        </parameters>
      <devnotes><summary>
OnMouseUp event dispatcher. 
FMX.StdCtrls.TThumb.MouseUp inherits from FMX.Controls.TControl.MouseUp. All content below this line refers to FMX.Controls.TControl.MouseUp.
OnMouseUp event dispatcher. 
A control calls MouseUp in response to any of mouse-up messages, decoding the message parameters into the shift-key state and position, which it passes in the Shift, X and Y parameters, respectively: 

Button determines which mouse button was previously pressed: left, right, or middle.
Shift indicates which shift keys--SHIFT, CTRL, ALT, and CMD (only for Mac)--were down when the pressed mouse button is released.
X and Y are the pixel coordinates of the mouse pointer within the client area of the control.
Override the protected MouseUp method to provide other responses when the mouse button previously pressed is released while the cursor is over the control.
</summary></devnotes></procedure>
      <function name="GetDefaultTouchTargetExpansion" visibility="public" procflags="override" file="FMX.StdCtrls.pas" line="1541">
        <parameters>
          <retval type="TRectF"/>
        </parameters>
      <devnotes><summary>


Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></function>
      <property name="IsPressed" visibility="public" read="FPressed" type="Boolean" file="FMX.StdCtrls.pas" line="1542"><devnotes><summary>
Specifies the state of this thumb component (pressed or unpressed).
Use the IsPressed property to specify the status of this thumb (pressed - True; unpressed - False).
</summary></devnotes></property>
      <property name="Action" visibility="published" read="GetAction" write="SetAction" type="TBasicAction" hoisted="true" file="FMX.StdCtrls.pas" line="1544"/>
      <property name="Align" visibility="published" read="FAlign" write="SetAlign" type="TAlignLayout" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="1545"/>
      <property name="ClipChildren" visibility="published" read="FClipChildren" write="SetClipChildren" type="Boolean" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="1546"/>
      <property name="ClipParent" visibility="published" read="FClipParent" write="FClipParent" type="Boolean" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="1547"/>
      <property name="Cursor" visibility="published" read="GetCursor" write="SetCursor" type="TCursor" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="1548"/>
      <property name="DragMode" visibility="published" read="GetDragMode" write="SetDragMode" type="TDragMode" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="1549"/>
      <property name="EnableDragHighlight" visibility="published" read="FEnableDragHighlight" write="FEnableDragHighlight" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="1550"/>
      <property name="Enabled" visibility="published" read="FEnabled" write="SetEnabled" stored="EnabledStored" type="Boolean" hoisted="true" file="FMX.StdCtrls.pas" line="1551"/>
      <property name="Locked" visibility="published" read="FLocked" write="SetLocked" type="Boolean" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="1552"/>
      <property name="Height" visibility="published" read="GetHeight" write="SetHeight" stored="False" type="Single" hoisted="true" file="FMX.StdCtrls.pas" line="1553"/>
      <property name="HelpContext" visibility="published" read="FHelpContext" write="SetHelpContext" stored="IsHelpContextStored" type="THelpContext" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="1554"/>
      <property name="HelpKeyword" visibility="published" read="FHelpKeyword" write="SetHelpKeyword" stored="IsHelpContextStored" type="string" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="1555"/>
      <property name="HelpType" visibility="published" read="FHelpType" write="FHelpType" type="THelpType" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="1556"/>
      <property name="Hint" visibility="published" read="FHint" write="SetHint" stored="HintStored" type="string" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="1557"/>
      <property name="HitTest" visibility="published" read="FHitTest" write="SetHitTest" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="1558"/>
      <property name="Padding" visibility="published" read="GetPadding" write="SetPadding" type="TBounds" hoisted="true" file="FMX.StdCtrls.pas" line="1559"/>
      <property name="Opacity" visibility="published" read="FOpacity" write="SetOpacity" stored="IsOpacityStored" type="Single" hoisted="true" file="FMX.StdCtrls.pas" line="1560"/>
      <property name="Margins" visibility="published" read="GetMargins" write="SetMargins" type="TBounds" hoisted="true" file="FMX.StdCtrls.pas" line="1561"/>
      <property name="PopupMenu" visibility="published" read="FPopupMenu" write="SetPopupMenu" stored="IsPopupMenuStored" type="TCustomPopupMenu" hoisted="true" file="FMX.StdCtrls.pas" line="1562"/>
      <property name="Position" visibility="published" read="FPosition" write="SetPosition" stored="IsPositionStored" type="TPosition" hoisted="true" file="FMX.StdCtrls.pas" line="1563"/>
      <property name="RotationAngle" visibility="published" read="GetRotationAngle" write="SetRotationAngle" type="Single" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="1564"/>
      <property name="RotationCenter" visibility="published" read="GetRotationCenter" write="SetRotationCenter" type="TPosition" hoisted="true" file="FMX.StdCtrls.pas" line="1565"/>
      <property name="Scale" visibility="published" read="GetScale" write="SetScale" type="TPosition" hoisted="true" file="FMX.StdCtrls.pas" line="1566"/>
      <property name="Size" visibility="published" read="FSize" write="SetSize" stored="IsSizeStored" type="TControlSize" hoisted="true" file="FMX.StdCtrls.pas" line="1567"/>
      <property name="StyleLookup" visibility="published" read="FStyleLookup" write="SetStyleLookup" type="string" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="1568"/>
      <property name="TabOrder" visibility="published" read="GetTabOrder" write="SetTabOrder" type="TTabOrder" default="-1" hoisted="true" file="FMX.StdCtrls.pas" line="1569"/>
      <property name="TabStop" visibility="published" read="GetTabStop" write="SetTabStop" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="1570"/>
      <property name="TouchTargetExpansion" visibility="published" read="FTouchTargetExpansion" write="SetTouchTargetExpansion" type="TBounds" hoisted="true" file="FMX.StdCtrls.pas" line="1571"/>
      <property name="Visible" visibility="published" read="FVisible" write="SetVisible" stored="VisibleStored" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="1572"/>
      <property name="Width" visibility="published" read="GetWidth" write="SetWidth" stored="False" type="Single" hoisted="true" file="FMX.StdCtrls.pas" line="1573"/>
      <property name="ParentShowHint" visibility="published" read="FParentShowHint" write="SetParentShowHint" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="1574"/>
      <property name="ShowHint" visibility="published" read="FShowHint" write="SetShowHint" stored="IsShowHintStored" type="Boolean" hoisted="true" file="FMX.StdCtrls.pas" line="1575"/>
      <event name="OnApplyStyleLookup" visibility="published" read="FOnApplyStyleLookup" write="FOnApplyStyleLookup" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1578"/>
      <event name="OnDragEnter" visibility="published" read="FOnDragEnter" write="FOnDragEnter" type="TDragEnterEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1580"/>
      <event name="OnDragLeave" visibility="published" read="FOnDragLeave" write="FOnDragLeave" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1581"/>
      <event name="OnDragOver" visibility="published" read="FOnDragOver" write="FOnDragOver" type="TDragOverEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1582"/>
      <event name="OnDragDrop" visibility="published" read="FOnDragDrop" write="FOnDragDrop" type="TDragDropEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1583"/>
      <event name="OnDragEnd" visibility="published" read="FOnDragEnd" write="FOnDragEnd" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1584"/>
      <event name="OnKeyDown" visibility="published" read="FOnKeyDown" write="FOnKeyDown" type="TKeyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1586"/>
      <event name="OnKeyUp" visibility="published" read="FOnKeyUp" write="FOnKeyUp" type="TKeyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1587"/>
      <event name="OnCanFocus" visibility="published" read="FOnCanFocus" write="FOnCanFocus" type="TCanFocusEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1589"/>
      <event name="OnClick" visibility="published" read="FOnClick" write="SetOnClick" stored="OnClickStored" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1590"/>
      <event name="OnDblClick" visibility="published" read="FOnDblClick" write="FOnDblClick" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1591"/>
      <event name="OnEnter" visibility="published" read="FOnEnter" write="FOnEnter" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1593"/>
      <event name="OnExit" visibility="published" read="FOnExit" write="FOnExit" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1594"/>
      <event name="OnMouseDown" visibility="published" read="FOnMouseDown" write="FOnMouseDown" type="TMouseEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1595"/>
      <event name="OnMouseMove" visibility="published" read="FOnMouseMove" write="FOnMouseMove" type="TMouseMoveEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1596"/>
      <event name="OnMouseUp" visibility="published" read="FOnMouseUp" write="FOnMouseUp" type="TMouseEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1597"/>
      <event name="OnMouseWheel" visibility="published" read="FOnMouseWheel" write="FOnMouseWheel" type="TMouseWheelEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1598"/>
      <event name="OnMouseEnter" visibility="published" read="FOnMouseEnter" write="FOnMouseEnter" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1599"/>
      <event name="OnMouseLeave" visibility="published" read="FOnMouseLeave" write="FOnMouseLeave" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1600"/>
      <event name="OnPainting" visibility="published" read="FOnPainting" write="FOnPainting" type="TOnPaintEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1602"/>
      <event name="OnPaint" visibility="published" read="FOnPaint" write="FOnPaint" type="TOnPaintEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1603"/>
      <event name="OnResize" visibility="published" read="FOnResize" write="FOnResize" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1604"/>
      <event name="OnResized" visibility="published" read="FOnResized" write="FOnResized" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1605"/>
    </members>
  <devnotes><summary>
Represents a thumb control for use with track bars.
</summary></devnotes></class>
  <enum name="TMouseDownAction" file="FMX.StdCtrls.pas" line="1608">
    <element value="0" name="Goto" file="FMX.StdCtrls.pas" line="1608"/>
    <element value="1" name="None" file="FMX.StdCtrls.pas" line="1608"/>
  </enum>
  <class name="TCustomTrack" file="FMX.StdCtrls.pas" line="1612">
    
    <interfaces>
      <implements name="IValueRange"/>
    </interfaces>
    <members>
      <const name="FirstInterval" visibility="private" type="Integer" file="FMX.StdCtrls.pas" line="1614">
        <value>
          $A
        </value>
      </const>
      <const name="SecondInterval" visibility="private" type="Integer" file="FMX.StdCtrls.pas" line="1615">
        <value>
          $1F4
        </value>
      </const>
      <const name="OtherInterval" visibility="private" type="Integer" file="FMX.StdCtrls.pas" line="1616">
        <value>
          $14
        </value>
      </const>
      <field name="FValueRange" type="TValueRange" visibility="private" size="4" offset="992" file="FMX.StdCtrls.pas" line="1618"/>
      <field name="FDefaultValueRange" type="TBaseValueRange" visibility="private" size="4" offset="996" file="FMX.StdCtrls.pas" line="1619"/>
      <field name="FThumb" type="TThumb" visibility="private" size="4" offset="1000" file="FMX.StdCtrls.pas" line="1620">
        <attributes>
          <attribute name="TObject"/>
        </attributes>
      </field>
      <field name="FMouseDownAction" type="TMouseDownAction" visibility="private" size="1" offset="1004" file="FMX.StdCtrls.pas" line="1621"/>
      <field name="FPushedValue" type="Single" visibility="private" size="4" offset="1008" file="FMX.StdCtrls.pas" line="1622"/>
      <field name="FPushedSign" type="TValueSign" visibility="private" size="1" offset="1012" file="FMX.StdCtrls.pas" line="1623"/>
      <field name="FPushedShift" type="TShiftState" visibility="private" size="2" offset="1013" file="FMX.StdCtrls.pas" line="1624"/>
      <field name="FPushedTimer" type="TTimer" visibility="private" size="4" offset="1016" file="FMX.StdCtrls.pas" line="1625"/>
      <field name="FSmallChange" type="Single" visibility="private" size="4" offset="1020" file="FMX.StdCtrls.pas" line="1626"/>
      <function name="GetIsTracking" visibility="private" file="FMX.StdCtrls.pas" line="1627">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <procedure name="SetMax" visibility="private" file="FMX.StdCtrls.pas" line="1628">
        <parameters>
          <parameter name="Value" type="Single" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetMin" visibility="private" file="FMX.StdCtrls.pas" line="1629">
        <parameters>
          <parameter name="Value" type="Single" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetValue" visibility="private" file="FMX.StdCtrls.pas" line="1630">
        <parameters>
          <parameter name="Value" type="Single"/>
        </parameters>
      </procedure>
      <procedure name="SetFrequency" visibility="private" file="FMX.StdCtrls.pas" line="1631">
        <parameters>
          <parameter name="Value" type="Single" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetViewportSize" visibility="private" file="FMX.StdCtrls.pas" line="1632">
        <parameters>
          <parameter name="Value" type="Single" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="GetFrequency" visibility="private" file="FMX.StdCtrls.pas" line="1633">
        <parameters>
          <retval type="Single"/>
        </parameters>
      </function>
      <function name="GetMax" visibility="private" file="FMX.StdCtrls.pas" line="1634">
        <parameters>
          <retval type="Single"/>
        </parameters>
      </function>
      <function name="GetMin" visibility="private" file="FMX.StdCtrls.pas" line="1635">
        <parameters>
          <retval type="Single"/>
        </parameters>
      </function>
      <function name="GetValue" visibility="private" file="FMX.StdCtrls.pas" line="1636">
        <parameters>
          <retval type="Single"/>
        </parameters>
      </function>
      <function name="GetViewportSize" visibility="private" file="FMX.StdCtrls.pas" line="1637">
        <parameters>
          <retval type="Single"/>
        </parameters>
      </function>
      <function name="GetValueRange" visibility="private" file="FMX.StdCtrls.pas" line="1638">
        <parameters>
          <retval type="TCustomValueRange">
            <devnotes>
               <summary>Extends the TBaseValueRange class providing methods and
               properties used to control the correctness of the Value handling within
               its Min to Max range.</summary>
            </devnotes>
          </retval>
        </parameters>
      </function>
      <procedure name="SetValueRange" visibility="private" file="FMX.StdCtrls.pas" line="1639">
        <parameters>
          <parameter name="AValue" type="TCustomValueRange" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetValueRange_" visibility="private" file="FMX.StdCtrls.pas" line="1640">
        <parameters>
          <parameter name="Value" type="TValueRange" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="DefStored" visibility="private" file="FMX.StdCtrls.pas" line="1641">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <procedure name="SetNewValue" visibility="private" file="FMX.StdCtrls.pas" line="1642">
        <parameters>
          <parameter name="LValue" type="Single" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="UpdateHighlight" visibility="private" file="FMX.StdCtrls.pas" line="1643">
      </procedure>
      <function name="FrequencyStored" visibility="private" file="FMX.StdCtrls.pas" line="1644">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <function name="MaxStored" visibility="private" file="FMX.StdCtrls.pas" line="1645">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <function name="MinStored" visibility="private" file="FMX.StdCtrls.pas" line="1646">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <function name="ValueStored" visibility="private" file="FMX.StdCtrls.pas" line="1647">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <function name="ViewportSizeStored" visibility="private" file="FMX.StdCtrls.pas" line="1648">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <procedure name="ObserversValueUpdate" visibility="private" file="FMX.StdCtrls.pas" line="1649">
      </procedure>
      <function name="GetIncrement" visibility="private" file="FMX.StdCtrls.pas" line="1650">
        <parameters>
          <retval type="Double"/>
        </parameters>
      </function>
      <function name="DoSmallChange" visibility="private" file="FMX.StdCtrls.pas" line="1651">
        <parameters>
          <parameter name="N" type="Integer"/>
          <parameter name="TargetValue" type="Double" paramflags="const"/>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <function name="MousePosToValue" visibility="private" file="FMX.StdCtrls.pas" line="1652">
        <parameters>
          <parameter name="MousePos" type="TPointF" paramflags="const"/>
          <retval type="Single"/>
        </parameters>
      </function>
      <procedure name="TimerProc" visibility="private" file="FMX.StdCtrls.pas" line="1653">
        <parameters>
          <parameter name="Sender" type="TObject"/>
        </parameters>
      </procedure>
      <field name="FOnChange" type="TNotifyEvent" visibility="protected" size="8" offset="1024" file="FMX.StdCtrls.pas" line="1655"/>
      <field name="FOnTracking" type="TNotifyEvent" visibility="protected" size="8" offset="1032" file="FMX.StdCtrls.pas" line="1655"/>
      <field name="FIgnoreViewportSize" type="Boolean" visibility="protected" size="1" offset="1040" file="FMX.StdCtrls.pas" line="1656"/>
      <field name="FOrientation" type="TOrientation" visibility="protected" size="1" offset="1041" file="FMX.StdCtrls.pas" line="1657"/>
      <field name="FTracking" type="Boolean" visibility="protected" size="1" offset="1042" file="FMX.StdCtrls.pas" line="1658"/>
      <field name="FTrack" type="TControl" visibility="protected" size="4" offset="1044" file="FMX.StdCtrls.pas" line="1659"/>
      <field name="FTrackHighlight" type="TControl" visibility="protected" size="4" offset="1048" file="FMX.StdCtrls.pas" line="1660"/>
      <field name="FThumbSize" type="Single" visibility="protected" size="4" offset="1052" file="FMX.StdCtrls.pas" line="1661"/>
      <field name="FMinThumbSize" type="Single" visibility="protected" size="4" offset="1056" file="FMX.StdCtrls.pas" line="1662"/>
      <function name="GetData" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="1663">
        <parameters>
          <retval type="TValue">
            <attributes>
              <attribute name="HPPGENAttribute"/>
            </attributes>
          </retval>
        </parameters>
      <devnotes><summary>
Protected getter implementation for the Data property.
FMX.StdCtrls.TCustomTrack.GetData inherits from FMX.Types.TFmxObject.GetData. All content below this line refers to FMX.Types.TFmxObject.GetData.
Protected getter implementation for the Data property.
</summary></devnotes></function>
      <procedure name="SetData" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="1664">
        <parameters>
          <parameter name="Value" type="TValue" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Protected setter implementation for the Data property.
FMX.StdCtrls.TCustomTrack.SetData inherits from FMX.Types.TFmxObject.SetData. All content below this line refers to FMX.Types.TFmxObject.SetData.
Protected setter implementation for the Data property.
</summary></devnotes></procedure>
      <function name="CanObserve" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="1665">
        <parameters>
          <parameter name="ID" type="Integer" paramflags="const"/>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
For internal use only.
Do not use this member. It is for internal use only.


</summary></devnotes></function>
      <procedure name="SetOrientation" visibility="protected" procflags="virtual" file="FMX.StdCtrls.pas" line="1666">
        <parameters>
          <parameter name="Value" type="TOrientation" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Protected setter implementation for the Orientation property.
</summary></devnotes></procedure>
      <function name="GetThumbRect" visibility="protected" procflags="overload virtual" file="FMX.StdCtrls.pas" line="1667">
        <parameters>
          <parameter name="Value" type="Single"/>
          <retval type="TRectF"/>
        </parameters>
      <devnotes><summary>
Returns a TRectF with the coordinates of the area that the thumb has access to.
</summary></devnotes></function>
      <function name="GetThumbRect" visibility="protected" procflags="overload" file="FMX.StdCtrls.pas" line="1668">
        <parameters>
          <retval type="TRectF"/>
        </parameters>
      <devnotes><summary>
Returns a TRectF with the coordinates of the area that the thumb has access to.
</summary></devnotes></function>
      <procedure name="MouseDown" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="1669">
        <parameters>
          <parameter name="Button" type="TMouseButton"/>
          <parameter name="Shift" type="TShiftState"/>
          <parameter name="X" type="Single"/>
          <parameter name="Y" type="Single"/>
        </parameters>
      <devnotes><summary>
OnMouseDown event dispatcher. 
FMX.StdCtrls.TCustomTrack.MouseDown inherits from FMX.Controls.TControl.MouseDown. All content below this line refers to FMX.Controls.TControl.MouseDown.
OnMouseDown event dispatcher. 
A control calls MouseDown in response to any of mouse-down messages, decoding the message parameters into the shift-key state and position, which it passes in the Shift, X, and Y parameters, respectively:

Button determines which mouse button is pressed: left, right, or middle.
Shift indicates which shift keys--SHIFT, CTRL, ALT, and CMD (only for Mac)--were down when the user pressed the mouse button.
X and Y are the pixel coordinates of the mouse pointer within the client area of the control. If Button is mbLeft, MouseDown sets PressedPosition as a TPointF(X,Y).
Override the protected MouseDown method to provide other responses when a mouse button is down while the cursor is over the control.

</summary></devnotes></procedure>
      <procedure name="MouseUp" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="1670">
        <parameters>
          <parameter name="Button" type="TMouseButton"/>
          <parameter name="Shift" type="TShiftState"/>
          <parameter name="X" type="Single"/>
          <parameter name="Y" type="Single"/>
        </parameters>
      <devnotes><summary>
OnMouseUp event dispatcher. 
FMX.StdCtrls.TCustomTrack.MouseUp inherits from FMX.Controls.TControl.MouseUp. All content below this line refers to FMX.Controls.TControl.MouseUp.
OnMouseUp event dispatcher. 
A control calls MouseUp in response to any of mouse-up messages, decoding the message parameters into the shift-key state and position, which it passes in the Shift, X and Y parameters, respectively: 

Button determines which mouse button was previously pressed: left, right, or middle.
Shift indicates which shift keys--SHIFT, CTRL, ALT, and CMD (only for Mac)--were down when the pressed mouse button is released.
X and Y are the pixel coordinates of the mouse pointer within the client area of the control.
Override the protected MouseUp method to provide other responses when the mouse button previously pressed is released while the cursor is over the control.
</summary></devnotes></procedure>
      <procedure name="DoMouseUp" visibility="protected" procflags="virtual" file="FMX.StdCtrls.pas" line="1671">
        <parameters>
          <parameter name="Button" type="TMouseButton"/>
          <parameter name="Shift" type="TShiftState"/>
          <parameter name="X" type="Single"/>
          <parameter name="Y" type="Single"/>
          <parameter name="LValue" type="Single"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="KeyDown" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="1672">
        <parameters>
          <parameter name="Key" type="Word" paramflags="var"/>
          <parameter name="KeyChar" type="Char" paramflags="var"/>
          <parameter name="Shift" type="TShiftState"/>
        </parameters>
      <devnotes><summary>
Sends a PM_KEYDOWN message to the presentation layer through its presentation proxy when a key is pressed down while your presented control has the focus.
FMX.StdCtrls.TCustomTrack.KeyDown inherits from FMX.Controls.Presentation.TPresentedControl.KeyDown. All content below this line refers to FMX.Controls.Presentation.TPresentedControl.KeyDown.
Sends a PM_KEYDOWN message to the presentation layer through its presentation proxy when a key is pressed down while your presented control has the focus.
The message includes a TKeyInfo record that contains the data of the parameters (AKey, AKeyChar, AShift).

 See Also
FMX.Controls.Presentation.TPresentedControl.PresentationProxy
FMX.Presentation.Messages.TMessageSender.SendMessage
FMX.Controls.Presentation.TKeyInfo
FMX.Controls.TControl.KeyDown
FMX.Forms.TCommonCustomForm.KeyDown
FMX.Controls.Presentation.TPresentedControl.KeyUp

</summary></devnotes></procedure>
      <procedure name="ApplyStyle" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="1673">
      <devnotes><summary>
Customizes styles in complex objects.
FMX.StdCtrls.TCustomTrack.ApplyStyle inherits from FMX.Controls.TStyledControl.ApplyStyle. All content below this line refers to FMX.Controls.TStyledControl.ApplyStyle.
Customizes styles in complex objects.
TStyledControl descendants override it to apply styles in concordance with their primitive components.      
Do not call ApplyStyle explicitly in an application. It is called by the ApplyStyleLookup method when object styles are updated.
For an example of an ApplyStyle implementation, see &quot;TCalloutPanel:Style Contracts&quot; in FireMonkey Component Design.
</summary></devnotes></procedure>
      <procedure name="FreeStyle" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="1674">
      <devnotes><summary>
Frees the style of TStyledControl.
FMX.StdCtrls.TCustomTrack.FreeStyle inherits from FMX.Controls.TStyledControl.FreeStyle. All content below this line refers to FMX.Controls.TStyledControl.FreeStyle.
Frees the style of TStyledControl.
Override it to free additional component-specific style resources.
</summary></devnotes></procedure>
      <function name="ChooseAdjustType" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="1675">
        <parameters>
          <parameter name="FixedSize" type="TSize" paramflags="const"/>
          <retval type="TAdjustType"/>
        </parameters>
      <devnotes><summary>
Returns an adjust type based on the provided FixedSize.
FMX.StdCtrls.TCustomTrack.ChooseAdjustType inherits from FMX.Controls.TStyledControl.ChooseAdjustType. All content below this line refers to FMX.Controls.TStyledControl.ChooseAdjustType.
Returns an adjust type based on the provided FixedSize.
FixedSize is the value of the FixedSize property of the control that is passed to AdjustFixedSize.

 See Also
System.Types.TSize
FMX.Controls.TControl.FixedSize
FMX.Types.TAdjustType
FMX.Controls.TStyledControl.AdjustFixedSize

</summary></devnotes></function>
      <function name="GetDefaultTouchTargetExpansion" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="1676">
        <parameters>
          <retval type="TRectF"/>
        </parameters>
      <devnotes><summary>


Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></function>
      <procedure name="DoThumbClick" visibility="protected" procflags="virtual" file="FMX.StdCtrls.pas" line="1677">
        <parameters>
          <parameter name="Sender" type="TObject"/>
        </parameters>
      <devnotes><summary>
Executes internally each time the OnClick event of the attached TThumb component fires.
</summary></devnotes></procedure>
      <procedure name="DoThumbDblClick" visibility="protected" procflags="virtual" file="FMX.StdCtrls.pas" line="1678">
        <parameters>
          <parameter name="Sender" type="TObject"/>
        </parameters>
      <devnotes><summary>
Executes internally each time the OnDblClick event of the attached TThumb component fires.
</summary></devnotes></procedure>
      <function name="GetThumbSize" visibility="protected" procflags="virtual" file="FMX.StdCtrls.pas" line="1679">
        <parameters>
          <parameter name="IgnoreViewportSize" type="Boolean" paramflags="var"/>
          <retval type="Integer"/>
        </parameters>
      <devnotes><summary>
Returns the size of the thumb. The thumb size represents the percentage of the viewport relative to the content size. 
</summary></devnotes></function>
      <procedure name="DoRealign" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="1680">
      <devnotes><summary>
Sends a PM_REALIGN message to the presentation layer through its presentation proxy.
FMX.StdCtrls.TCustomTrack.DoRealign inherits from FMX.Controls.Presentation.TPresentedControl.DoRealign. All content below this line refers to FMX.Controls.Presentation.TPresentedControl.DoRealign.
Sends a PM_REALIGN message to the presentation layer through its presentation proxy.
For details about the circumstances that trigger this procedure, see TControl.DoRealign.

 See Also
FMX.Controls.Presentation.TPresentedControl.PresentationProxy
FMX.Presentation.Messages.TMessageSender.SendMessage
FMX.Controls.TControl.DoRealign

</summary></devnotes></procedure>
      <property name="IsTracking" visibility="protected" read="GetIsTracking" type="Boolean" file="FMX.StdCtrls.pas" line="1681"><devnotes><summary>
Indicates whether the Thumb that is associated with this TCustomTrack is pressed.
This is a read-only property.
The following table shows the value of IsTracking in some common scenarios:



Tracking

Scenario

Behaviour

Events fired

IsTracking



True or False



Press an arrow key on the keyboard.



The Thumb moves for one &quot;step&quot;.



OnTracking
OnChange


False




True



Click on the Thumb of the track bar and move the Thumb.



The Thumb moves as much as you move it.



For each &quot;step&quot; of the movement:

OnTracking
OnChange


True




False



Click on the Thumb of the track bar and move the Thumb.



The Thumb moves as much as you move it.



For each step of the movement:

OnTracking
After you release the Thumb

OnChange


True




True



Click anywhere on the track bar (excluding the Thumb).



The Thumb moves for one &quot;step&quot;.



OnTracking
OnChange


False




False



Click anywhere on the track bar (excluding the Thumb).



The Thumb moves to the position where you click.



OnTracking
OnChange


False




True or False



Hold the Shift button and click anywhere on the track bar (excluding the Thumb).



The Thumb moves to the position where you click.



OnTracking
OnChange


False



</summary></devnotes></property>
      <function name="GetActionLinkClass" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="1682">
        <parameters>
          <retval type="TActionLinkClass"/>
        </parameters>
      <devnotes><summary>


Returns the associated action link class.
FMX.StdCtrls.TCustomTrack.GetActionLinkClass inherits from FMX.Types.TFmxObject.GetActionLinkClass. All content below this line refers to FMX.Types.TFmxObject.GetActionLinkClass.
Returns the associated action link class.
Returns the class reference for the TActionLink class or for one of its descendants. 
In TFmxObject, GetActionLinkClass always returns nil.
In descendant classes, GetActionLinkClass should return the appropriate class type for the action link used with the class object. When a control object of the descendant from the TFmxObject class tries to assign a value to the Action property, the setter method for Action calls GetActionLinkClass. If GetActionLinkClass returns a non-nil value, then the action object is assigned to Action. If the control object does not support actions, then GetActionLinkClass should return nil. In this case, attempting to set a value to the Action property raises the following exception:  

StrEActionNoSuported = 'Class %s does not support the action'    
</summary></devnotes></function>
      <procedure name="ActionChange" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="1683">
        <parameters>
          <parameter name="Sender" type="TBasicAction"/>
          <parameter name="CheckDefaults" type="Boolean"/>
        </parameters>
      <devnotes><summary>
Specifies the behavior of a TCustomTrack control when Action changes. 
Depending on the CheckDefaults value,  ActionChange uses the TValueRangeAction.ValueRange property of the Sender action to set the new value to the  
ValueRange property of TCustomTrack. Then ActionChange calls the inherited TControl.ActionChange method.  
Do not call ActionChange explicitly in an application. It is for internal use.
</summary></devnotes></procedure>
      <procedure name="Loaded" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="1684">
      <devnotes><summary>
Initializes the control after the form file has been read into memory and loads its presentation.
FMX.StdCtrls.TCustomTrack.Loaded inherits from FMX.Controls.Presentation.TPresentedControl.Loaded. All content below this line refers to FMX.Controls.Presentation.TPresentedControl.Loaded.
Initializes the control after the form file has been read into memory and loads its presentation.
For details, see TControl.Loaded.

 See Also
FMX.Controls.Presentation.TPresentedControl.LoadPresentation
FMX.Controls.TControl.Loaded

</summary></devnotes></procedure>
      <procedure name="DoChanged" visibility="protected" procflags="virtual" file="FMX.StdCtrls.pas" line="1685">
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="DoTracking" visibility="protected" procflags="virtual" file="FMX.StdCtrls.pas" line="1686">
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <function name="GetDefaultSize" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="1687">
        <parameters>
          <retval type="TSizeF"/>
        </parameters>
      <devnotes><summary>
Getter of DefaultSize.
FMX.StdCtrls.TCustomTrack.GetDefaultSize inherits from FMX.Controls.TControl.GetDefaultSize. All content below this line refers to FMX.Controls.TControl.GetDefaultSize.
Getter of DefaultSize.


</summary></devnotes></function>
      <function name="CreateValueRangeTrack" visibility="protected" procflags="virtual" file="FMX.StdCtrls.pas" line="1688">
        <parameters>
          <retval type="TValueRange">
            <devnotes>
               <summary>Extends the TCustomValueRange class declaring Value, Min, Max,
               and some other properties to be published.</summary>
            </devnotes>
          </retval>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></function>
      <property name="MouseDownAction" visibility="protected" read="FMouseDownAction" write="FMouseDownAction" type="TMouseDownAction" file="FMX.StdCtrls.pas" line="1689"><devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></property>
      <property name="DefaultValueRange" visibility="protected" read="FDefaultValueRange" type="TBaseValueRange" file="FMX.StdCtrls.pas" line="1690"><devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></property>
      <procedure name="Resize" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="1691">
      <devnotes><summary>
OnResize event dispatcher. 
FMX.StdCtrls.TCustomTrack.Resize inherits from FMX.Controls.TControl.Resize. All content below this line refers to FMX.Controls.TControl.Resize.
OnResize event dispatcher. 
A control calls Resize when the dimensions of the control change.
Derived classes can override the protected Resize method to implement specific responses to control resizing.
</summary></devnotes></procedure>
      <procedure name="Notification" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="1692">
        <parameters>
          <parameter name="AComponent" type="TComponent"/>
          <parameter name="Operation" type="TOperation"/>
        </parameters>
      <devnotes><summary>






Forwards notification messages to all owned components.
FMX.StdCtrls.TCustomTrack.Notification inherits from System.Classes.TComponent.Notification. All content below this line refers to System.Classes.TComponent.Notification.
Forwards notification messages to all owned components.
Do not call the Notification method in an application. Notification is called automatically when the component specified by AComponent is about to be inserted or removed, as specified by Operation. By default, components pass along the notification to their owned components, if any.
A component can, if needed, act on the notification that a component is being inserted or removed. For example, if a component has object fields or properties that contain references to other components, it can check the notifications of component removals and invalidate those references as needed.

Note: Notification is not called for components that are freed implicitly (because their Owner is freed).</summary></devnotes></procedure>
      <constructor name="Create" visibility="public" file="FMX.StdCtrls.pas" line="1694">
        <parameters>
          <parameter name="AOwner" type="TComponent"/>
        </parameters>
      <devnotes><summary>
Creates a new instance of TPresentedControl.
FMX.StdCtrls.TCustomTrack.Create inherits from FMX.Controls.Presentation.TPresentedControl.Create. All content below this line refers to FMX.Controls.Presentation.TPresentedControl.Create.
Creates a new instance of TPresentedControl.
AOwner takes ownership of the control and becomes responsible of destroying the control once the control is no longer necessary.
The control constructor creates a data model for the control. DefineModelClass determines the default class of data model for each subclass of TPresentedControl.
Create also sets the value of the CanUseDefaultPresentation property to True.

 See Also
System.Classes.TComponent.Create
FMX.Controls.Presentation.TPresentedControl.Model
FMX.Controls.Presentation.TPresentedControl.DefineModelClass
FMX.Controls.Presentation.TPresentedControl.Destroy
FMX.Controls.Presentation.TPresentedControl.CanUseDefaultPresentation

</summary></devnotes></constructor>
      <destructor name="Destroy" visibility="public" file="FMX.StdCtrls.pas" line="1695">
        <parameters>
        </parameters>
      <devnotes><summary>
Destroys this instance of TPresentedControl.
FMX.StdCtrls.TCustomTrack.Destroy inherits from FMX.Controls.Presentation.TPresentedControl.Destroy. All content below this line refers to FMX.Controls.Presentation.TPresentedControl.Destroy.
Destroys this instance of TPresentedControl.

 See Also
FMX.Controls.Presentation.TPresentedControl.Create

</summary></devnotes></destructor>
      <procedure name="AfterConstruction" visibility="public" procflags="override" file="FMX.StdCtrls.pas" line="1696">
      <devnotes><summary>
Responds after the last constructor has executed and loads the control presentation.
FMX.StdCtrls.TCustomTrack.AfterConstruction inherits from FMX.Controls.Presentation.TPresentedControl.AfterConstruction. All content below this line refers to FMX.Controls.Presentation.TPresentedControl.AfterConstruction.
Responds after the last constructor has executed and loads the control presentation.
AfterConstruction is called automatically after the object's last constructor has executed. Do not call it explicitly in your applications.
</summary></devnotes></procedure>
      <property name="ValueRange" visibility="public" read="FValueRange" write="SetValueRange_" stored="ValueStored" type="TValueRange" file="FMX.StdCtrls.pas" line="1697"><devnotes><summary>
Provides access to the Value value, to its Min and Max boundaries, and to the Frequency and ViewportSize properties.
</summary></devnotes></property>
      <property name="Min" visibility="public" read="GetMin" write="SetMin" stored="MinStored" type="Single" file="FMX.StdCtrls.pas" line="1698"><devnotes><summary>
Specifies the minimum value of this track bar, for the minimum position of the slider.
Use the Min property to set a minimum value down to which the slider of this track bar can go. For instance, if Min is set to 0 (a default value), then attempting to move the slider to the minimum will result in a Value of 0.
</summary></devnotes></property>
      <property name="Max" visibility="public" read="GetMax" write="SetMax" stored="MaxStored" type="Single" file="FMX.StdCtrls.pas" line="1699"><devnotes><summary>
Specifies the maximum value of this track bar for the maximum position of the slider.
Use the Max property to set a maximum value up to which the slider of this track bar can go. For instance, if Max is set to 100 (a default value), then attempting to move the slider to the maximum will result in a Value of 100.
</summary></devnotes></property>
      <property name="Frequency" visibility="public" read="GetFrequency" write="SetFrequency" stored="FrequencyStored" type="Single" file="FMX.StdCtrls.pas" line="1700"><devnotes><summary>
Specifies the number of positions the slider advances with each move.
Use the Frequency property to specify how many steps at once the slider advances with each move. For instance, if you set Frequency to 10, Min to 0, and Max to 100, then there are only 10 steps for this slider to move within the 0 to 100 range; Value is incremented or decremented with 10 divisions.
Frequency is a floating-point Single value; setting Frequency to 0 enables this track bar to increment or decrement by 0.01 divisions by step. Setting Frequency to any integer value (for instance 1, or 5, and so on) will enable this track bar to increment or decrement by the specified value.
However, please take into consideration that if you set Frequency to any value greater than 0 and you try to programmatically assign a value to Value, then your value will be converted to the nearest multiple of Frequency.
For instance, setting Frequency to 5 and then attempting to programmatically set Value to 12 will actually set Value to 10.

  MyTrackBar.Frequency := 5;
  MyTrackBar.Value := 12; { actually sets Value to 10 }

  MyTrackBar-&gt;Frequency = 5;
  MyTrackBar-&gt;Value = 12; /* actually sets Value to 10 */
</summary></devnotes></property>
      <property name="SmallChange" visibility="public" read="FSmallChange" write="FSmallChange" type="Single" default="0" file="FMX.StdCtrls.pas" line="1702">
        <devnotes><summary>
Controls the number of positions that the Thumb of the TCustomTrack moves each time the user presses on a free area.
</summary></devnotes>
      </property>
      <property name="Value" visibility="public" read="GetValue" write="SetValue" stored="ValueStored" type="Single" file="FMX.StdCtrls.pas" line="1703"><devnotes><summary>
Specifies the current value of this track bar.
Set or get Value to specify or obtain the current value of this track bar. You can set Value programmatically or visually at run time, with any value within the interval delimited by Min and Max.
</summary></devnotes></property>
      <property name="ViewportSize" visibility="public" read="GetViewportSize" write="SetViewportSize" stored="ViewportSizeStored" type="Single" file="FMX.StdCtrls.pas" line="1704"><devnotes><summary>
Specifies the size, in pixels, of the area that the slider cannot span to the left or right of this track bar.
Use the ViewportSize property to specify the size of the view port of this track bar, that is, the area, in pixels, that the slider of this track bar cannot span. As an example, the picture below shows two track bars, one with ViewportSize set to 0 and the other with ViewportSize set to 50.


Tip: Changing the ViewportSize property does not affect the limits (Min or Max) or the Value of this track bar.</summary></devnotes></property>
      <property name="Orientation" visibility="public" read="FOrientation" write="SetOrientation" type="TOrientation" file="FMX.StdCtrls.pas" line="1705"><devnotes><summary>
Specifies the orientation of this track bar (from left to right or from bottom to top).
Use the Orientation property to specify how this track bar will be displayed in terms of left-to-right orientation or bottom-to-top orientation. Orientation can have one of the following values:



Value

Meaning



Vertical



The track bar is rendered with the bottom-to-top orientation.




Horizontal



The track bar is rendered with the left-to-right orientation.

</summary></devnotes></property>
      <property name="Tracking" visibility="public" read="FTracking" write="FTracking" type="Boolean" default="1" file="FMX.StdCtrls.pas" line="1706"><devnotes><summary>
Indicates whether thumb tracking is active or not. The default value of Tracking is True.
The following table shows how the value of Tracking impacts the behavior of a track bar and the related events:



Tracking

Scenario

Behaviour

Events fired

IsTracking



True or False



Press an arrow key on the keyboard.



The Thumb moves for one &quot;step&quot;.



OnTracking
OnChange


False




True



Click on the Thumb of the track bar and move the Thumb.



The Thumb moves as much as you move it.



For each &quot;step&quot; of the movement:

OnTracking
OnChange


True




False



Click on the Thumb of the track bar and move the Thumb.



The Thumb moves as much as you move it.



For each step of the movement:

OnTracking
After you release the Thumb

OnChange


True




True



Click anywhere on the track bar (excluding the Thumb).



The Thumb moves for one &quot;step&quot;.



OnTracking
OnChange


False




False



Click anywhere on the track bar (excluding the Thumb).



The Thumb moves to the position where you click.



OnTracking
OnChange


False




True or False



Hold the Shift button and click anywhere on the track bar (excluding the Thumb).



The Thumb moves to the position where you click.



OnTracking
OnChange


False

</summary></devnotes></property>
      <property name="Thumb" visibility="public" read="FThumb" type="TThumb" file="FMX.StdCtrls.pas" line="1707"><devnotes><summary>
The part of a track bar that you move to change the value of the track bar.
The default appearance of the Thumb depends on the platform:

Windows: The Thumb is a rectangle.
OS X: The Thumb is a circle.
iOS: The Thumb is a circle.
Android: The Thumb is a circle.</summary></devnotes></property>
      <event name="OnChange" visibility="public" read="FOnChange" write="FOnChange" type="TNotifyEvent" file="FMX.StdCtrls.pas" line="1708"><devnotes><summary>
Occurs immediately after the position of the slider of this track bar changes.
Write an OnChange event handler to provide additional functionality when changing the position of the slider of this track bar component.
The OnTracking is very similar to OnChange. The following table shows the difference in the behavior of these events in certain scenarios:



Tracking

Scenario

Behaviour

Events fired

IsTracking



True or False



Press an arrow key on the keyboard.



The Thumb moves for one &quot;step&quot;.



OnTracking
OnChange


False




True



Click on the Thumb of the track bar and move the Thumb.



The Thumb moves as much as you move it.



For each &quot;step&quot; of the movement:

OnTracking
OnChange


True




False



Click on the Thumb of the track bar and move the Thumb.



The Thumb moves as much as you move it.



For each step of the movement:

OnTracking
After you release the Thumb

OnChange


True




True



Click anywhere on the track bar (excluding the Thumb).



The Thumb moves for one &quot;step&quot;.



OnTracking
OnChange


False




False



Click anywhere on the track bar (excluding the Thumb).



The Thumb moves to the position where you click.



OnTracking
OnChange


False




True or False



Hold the Shift button and click anywhere on the track bar (excluding the Thumb).



The Thumb moves to the position where you click.



OnTracking
OnChange


False

</summary></devnotes></event>
      <event name="OnTracking" visibility="public" read="FOnTracking" write="FOnTracking" type="TNotifyEvent" file="FMX.StdCtrls.pas" line="1709"><devnotes><summary>
Occurs immediately after the position of the slider of this track bar changes.
Write an OnTracking event handler to provide additional functionality when changing the position of the slider of this track bar component.
The OnTracking is very similar to OnChange. The following table shows the difference in the behavior of these events in certain scenarios:



Tracking

Scenario

Behaviour

Events fired

IsTracking



True or False



Press an arrow key on the keyboard.



The Thumb moves for one &quot;step&quot;.



OnTracking
OnChange


False




True



Click on the Thumb of the track bar and move the Thumb.



The Thumb moves as much as you move it.



For each &quot;step&quot; of the movement:

OnTracking
OnChange


True




False



Click on the Thumb of the track bar and move the Thumb.



The Thumb moves as much as you move it.



For each step of the movement:

OnTracking
After you release the Thumb

OnChange


True




True



Click anywhere on the track bar (excluding the Thumb).



The Thumb moves for one &quot;step&quot;.



OnTracking
OnChange


False




False



Click anywhere on the track bar (excluding the Thumb).



The Thumb moves to the position where you click.



OnTracking
OnChange


False




True or False



Hold the Shift button and click anywhere on the track bar (excluding the Thumb).



The Thumb moves to the position where you click.



OnTracking
OnChange


False

</summary></devnotes></event>
    </members>
  <devnotes><summary>
Base class for all track bar components.
TCustomTrack is the base class for all track bar components such as TTrackBar.
If you need to create your own custom track bar, then you should derive your component from TCustomTrack, as it already implements functionality for drawing and manipulating the track bar.
</summary></devnotes></class>
  <class name="TTrack" file="FMX.StdCtrls.pas" line="1714">
    
    <members>
      <property name="Action" visibility="published" read="GetAction" write="SetAction" type="TBasicAction" hoisted="true" file="FMX.StdCtrls.pas" line="1716"/>
      <property name="Align" visibility="published" read="FAlign" write="SetAlign" type="TAlignLayout" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="1717"/>
      <property name="Anchors" visibility="published" read="FAnchors" write="SetAnchors" stored="IsAnchorsStored" type="TAnchors" hoisted="true" file="FMX.StdCtrls.pas" line="1718"/>
      <property name="ClipChildren" visibility="published" read="FClipChildren" write="SetClipChildren" type="Boolean" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="1719"/>
      <property name="ClipParent" visibility="published" read="FClipParent" write="FClipParent" type="Boolean" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="1720"/>
      <property name="Cursor" visibility="published" read="GetCursor" write="SetCursor" type="TCursor" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="1721"/>
      <property name="DragMode" visibility="published" read="GetDragMode" write="SetDragMode" type="TDragMode" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="1722"/>
      <property name="EnableDragHighlight" visibility="published" read="FEnableDragHighlight" write="FEnableDragHighlight" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="1723"/>
      <property name="Enabled" visibility="published" read="FEnabled" write="SetEnabled" stored="EnabledStored" type="Boolean" hoisted="true" file="FMX.StdCtrls.pas" line="1724"/>
      <property name="Frequency" visibility="published" read="GetFrequency" write="SetFrequency" stored="FrequencyStored" type="Single" hoisted="true" file="FMX.StdCtrls.pas" line="1725"/>
      <property name="Locked" visibility="published" read="FLocked" write="SetLocked" type="Boolean" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="1726"/>
      <property name="Height" visibility="published" read="GetHeight" write="SetHeight" stored="False" type="Single" hoisted="true" file="FMX.StdCtrls.pas" line="1727"/>
      <property name="HelpContext" visibility="published" read="FHelpContext" write="SetHelpContext" stored="IsHelpContextStored" type="THelpContext" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="1728"/>
      <property name="HelpKeyword" visibility="published" read="FHelpKeyword" write="SetHelpKeyword" stored="IsHelpContextStored" type="string" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="1729"/>
      <property name="HelpType" visibility="published" read="FHelpType" write="FHelpType" type="THelpType" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="1730"/>
      <property name="Hint" visibility="published" read="FHint" write="SetHint" stored="HintStored" type="string" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="1731"/>
      <property name="HitTest" visibility="published" read="FHitTest" write="SetHitTest" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="1732"/>
      <property name="Padding" visibility="published" read="GetPadding" write="SetPadding" type="TBounds" hoisted="true" file="FMX.StdCtrls.pas" line="1733"/>
      <property name="Max" visibility="published" read="GetMax" write="SetMax" stored="MaxStored" type="Single" hoisted="true" file="FMX.StdCtrls.pas" line="1734"/>
      <property name="Min" visibility="published" read="GetMin" write="SetMin" stored="MinStored" type="Single" hoisted="true" file="FMX.StdCtrls.pas" line="1735"/>
      <property name="Opacity" visibility="published" read="FOpacity" write="SetOpacity" stored="IsOpacityStored" type="Single" hoisted="true" file="FMX.StdCtrls.pas" line="1736"/>
      <property name="Orientation" visibility="published" read="FOrientation" write="SetOrientation" type="TOrientation" hoisted="true" file="FMX.StdCtrls.pas" line="1737"/>
      <property name="Margins" visibility="published" read="GetMargins" write="SetMargins" type="TBounds" hoisted="true" file="FMX.StdCtrls.pas" line="1738"/>
      <property name="PopupMenu" visibility="published" read="FPopupMenu" write="SetPopupMenu" stored="IsPopupMenuStored" type="TCustomPopupMenu" hoisted="true" file="FMX.StdCtrls.pas" line="1739"/>
      <property name="Position" visibility="published" read="FPosition" write="SetPosition" stored="IsPositionStored" type="TPosition" hoisted="true" file="FMX.StdCtrls.pas" line="1740"/>
      <property name="RotationAngle" visibility="published" read="GetRotationAngle" write="SetRotationAngle" type="Single" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="1741"/>
      <property name="RotationCenter" visibility="published" read="GetRotationCenter" write="SetRotationCenter" type="TPosition" hoisted="true" file="FMX.StdCtrls.pas" line="1742"/>
      <property name="Scale" visibility="published" read="GetScale" write="SetScale" type="TPosition" hoisted="true" file="FMX.StdCtrls.pas" line="1743"/>
      <property name="Size" visibility="published" read="FSize" write="SetSize" stored="IsSizeStored" type="TControlSize" hoisted="true" file="FMX.StdCtrls.pas" line="1744"/>
      <property name="StyleLookup" visibility="published" read="FStyleLookup" write="SetStyleLookup" type="string" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="1745"/>
      <property name="TabOrder" visibility="published" read="GetTabOrder" write="SetTabOrder" type="TTabOrder" default="-1" hoisted="true" file="FMX.StdCtrls.pas" line="1746"/>
      <property name="TabStop" visibility="published" read="GetTabStop" write="SetTabStop" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="1747"/>
      <property name="TouchTargetExpansion" visibility="published" read="FTouchTargetExpansion" write="SetTouchTargetExpansion" type="TBounds" hoisted="true" file="FMX.StdCtrls.pas" line="1748"/>
      <property name="Tracking" visibility="published" read="FTracking" write="FTracking" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="1749"/>
      <property name="Value" visibility="published" read="GetValue" write="SetValue" stored="ValueStored" type="Single" hoisted="true" file="FMX.StdCtrls.pas" line="1750"/>
      <property name="ViewportSize" visibility="published" read="GetViewportSize" write="SetViewportSize" stored="ViewportSizeStored" type="Single" hoisted="true" file="FMX.StdCtrls.pas" line="1751"/>
      <property name="Visible" visibility="published" read="FVisible" write="SetVisible" stored="VisibleStored" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="1752"/>
      <property name="Width" visibility="published" read="GetWidth" write="SetWidth" stored="False" type="Single" hoisted="true" file="FMX.StdCtrls.pas" line="1753"/>
      <property name="ParentShowHint" visibility="published" read="FParentShowHint" write="SetParentShowHint" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="1754"/>
      <property name="ShowHint" visibility="published" read="FShowHint" write="SetShowHint" stored="IsShowHintStored" type="Boolean" hoisted="true" file="FMX.StdCtrls.pas" line="1755"/>
      <event name="OnApplyStyleLookup" visibility="published" read="FOnApplyStyleLookup" write="FOnApplyStyleLookup" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1758"/>
      <event name="OnChange" visibility="published" read="FOnChange" write="FOnChange" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1759"/>
      <event name="OnDragEnter" visibility="published" read="FOnDragEnter" write="FOnDragEnter" type="TDragEnterEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1761"/>
      <event name="OnDragLeave" visibility="published" read="FOnDragLeave" write="FOnDragLeave" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1762"/>
      <event name="OnDragOver" visibility="published" read="FOnDragOver" write="FOnDragOver" type="TDragOverEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1763"/>
      <event name="OnDragDrop" visibility="published" read="FOnDragDrop" write="FOnDragDrop" type="TDragDropEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1764"/>
      <event name="OnDragEnd" visibility="published" read="FOnDragEnd" write="FOnDragEnd" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1765"/>
      <event name="OnKeyDown" visibility="published" read="FOnKeyDown" write="FOnKeyDown" type="TKeyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1767"/>
      <event name="OnKeyUp" visibility="published" read="FOnKeyUp" write="FOnKeyUp" type="TKeyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1768"/>
      <event name="OnCanFocus" visibility="published" read="FOnCanFocus" write="FOnCanFocus" type="TCanFocusEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1770"/>
      <event name="OnClick" visibility="published" read="FOnClick" write="SetOnClick" stored="OnClickStored" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1771"/>
      <event name="OnDblClick" visibility="published" read="FOnDblClick" write="FOnDblClick" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1772"/>
      <event name="OnEnter" visibility="published" read="FOnEnter" write="FOnEnter" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1774"/>
      <event name="OnExit" visibility="published" read="FOnExit" write="FOnExit" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1775"/>
      <event name="OnMouseDown" visibility="published" read="FOnMouseDown" write="FOnMouseDown" type="TMouseEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1776"/>
      <event name="OnMouseMove" visibility="published" read="FOnMouseMove" write="FOnMouseMove" type="TMouseMoveEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1777"/>
      <event name="OnMouseUp" visibility="published" read="FOnMouseUp" write="FOnMouseUp" type="TMouseEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1778"/>
      <event name="OnMouseWheel" visibility="published" read="FOnMouseWheel" write="FOnMouseWheel" type="TMouseWheelEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1779"/>
      <event name="OnMouseEnter" visibility="published" read="FOnMouseEnter" write="FOnMouseEnter" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1780"/>
      <event name="OnMouseLeave" visibility="published" read="FOnMouseLeave" write="FOnMouseLeave" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1781"/>
      <event name="OnPainting" visibility="published" read="FOnPainting" write="FOnPainting" type="TOnPaintEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1783"/>
      <event name="OnPaint" visibility="published" read="FOnPaint" write="FOnPaint" type="TOnPaintEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1784"/>
      <event name="OnResize" visibility="published" read="FOnResize" write="FOnResize" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1785"/>
      <event name="OnResized" visibility="published" read="FOnResized" write="FOnResized" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1786"/>
    </members>
  <devnotes><summary>
Is a TCustomTrack with a set of published properties.
TTrack publishes a set of properties from the TCustomTrack base component, but is not registered to the Tool Palette, so it cannot be added directly to a FireMonkey form.
You can derive your own custom track bar component from TTrack.
</summary></devnotes></class>
  <class name="TTrackBar" file="FMX.StdCtrls.pas" line="1791">
    
    <members>
      <constructor name="Create" visibility="public" file="FMX.StdCtrls.pas" line="1793">
        <parameters>
          <parameter name="AOwner" type="TComponent"/>
        </parameters>
      <devnotes><summary>


Creates a new instance of TPresentedControl.
FMX.StdCtrls.TTrackBar.Create inherits from FMX.Controls.Presentation.TPresentedControl.Create. All content below this line refers to FMX.Controls.Presentation.TPresentedControl.Create.
Creates a new instance of TPresentedControl.
AOwner takes ownership of the control and becomes responsible of destroying the control once the control is no longer necessary.
The control constructor creates a data model for the control. DefineModelClass determines the default class of data model for each subclass of TPresentedControl.
Create also sets the value of the CanUseDefaultPresentation property to True.

 See Also
System.Classes.TComponent.Create
FMX.Controls.Presentation.TPresentedControl.Model
FMX.Controls.Presentation.TPresentedControl.DefineModelClass
FMX.Controls.Presentation.TPresentedControl.Destroy
FMX.Controls.Presentation.TPresentedControl.CanUseDefaultPresentation

</summary></devnotes></constructor>
      <property name="Action" visibility="published" read="GetAction" write="SetAction" type="TBasicAction" hoisted="true" file="FMX.StdCtrls.pas" line="1795"/>
      <property name="Align" visibility="published" read="FAlign" write="SetAlign" type="TAlignLayout" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="1796"/>
      <property name="Anchors" visibility="published" read="FAnchors" write="SetAnchors" stored="IsAnchorsStored" type="TAnchors" hoisted="true" file="FMX.StdCtrls.pas" line="1797"/>
      <property name="CanFocus" visibility="published" read="FCanFocus" write="FCanFocus" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="1798"/>
      <property name="CanParentFocus" visibility="published" read="FCanParentFocus" write="FCanParentFocus" type="Boolean" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="1799"/>
      <property name="ClipChildren" visibility="published" read="FClipChildren" write="SetClipChildren" type="Boolean" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="1800"/>
      <property name="ClipParent" visibility="published" read="FClipParent" write="FClipParent" type="Boolean" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="1801"/>
      <property name="Cursor" visibility="published" read="GetCursor" write="SetCursor" type="TCursor" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="1802"/>
      <property name="ControlType" visibility="published" read="GetControlType" write="SetControlType" type="TControlType" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="1803"/>
      <property name="DisableFocusEffect" visibility="published" read="FDisableFocusEffect" write="FDisableFocusEffect" type="Boolean" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="1804"/>
      <property name="DragMode" visibility="published" read="GetDragMode" write="SetDragMode" type="TDragMode" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="1805"/>
      <property name="EnableDragHighlight" visibility="published" read="FEnableDragHighlight" write="FEnableDragHighlight" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="1806"/>
      <property name="Enabled" visibility="published" read="FEnabled" write="SetEnabled" stored="EnabledStored" type="Boolean" hoisted="true" file="FMX.StdCtrls.pas" line="1807"/>
      <property name="Frequency" visibility="published" read="GetFrequency" write="SetFrequency" stored="FrequencyStored" type="Single" hoisted="true" file="FMX.StdCtrls.pas" line="1808"/>
      <property name="Locked" visibility="published" read="FLocked" write="SetLocked" type="Boolean" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="1809"/>
      <property name="Height" visibility="published" read="GetHeight" write="SetHeight" stored="False" type="Single" hoisted="true" file="FMX.StdCtrls.pas" line="1810"/>
      <property name="HelpContext" visibility="published" read="FHelpContext" write="SetHelpContext" stored="IsHelpContextStored" type="THelpContext" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="1811"/>
      <property name="HelpKeyword" visibility="published" read="FHelpKeyword" write="SetHelpKeyword" stored="IsHelpContextStored" type="string" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="1812"/>
      <property name="HelpType" visibility="published" read="FHelpType" write="FHelpType" type="THelpType" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="1813"/>
      <property name="Hint" visibility="published" read="FHint" write="SetHint" stored="HintStored" type="string" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="1814"/>
      <property name="HitTest" visibility="published" read="FHitTest" write="SetHitTest" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="1815"/>
      <property name="Padding" visibility="published" read="GetPadding" write="SetPadding" type="TBounds" hoisted="true" file="FMX.StdCtrls.pas" line="1816"/>
      <property name="Max" visibility="published" read="GetMax" write="SetMax" stored="MaxStored" type="Single" hoisted="true" file="FMX.StdCtrls.pas" line="1817"/>
      <property name="Min" visibility="published" read="GetMin" write="SetMin" stored="MinStored" type="Single" hoisted="true" file="FMX.StdCtrls.pas" line="1818"/>
      <property name="Orientation" visibility="published" read="FOrientation" write="SetOrientation" type="TOrientation" hoisted="true" file="FMX.StdCtrls.pas" line="1819"/>
      <property name="Opacity" visibility="published" read="FOpacity" write="SetOpacity" stored="IsOpacityStored" type="Single" hoisted="true" file="FMX.StdCtrls.pas" line="1820"/>
      <property name="Margins" visibility="published" read="GetMargins" write="SetMargins" type="TBounds" hoisted="true" file="FMX.StdCtrls.pas" line="1821"/>
      <property name="PopupMenu" visibility="published" read="FPopupMenu" write="SetPopupMenu" stored="IsPopupMenuStored" type="TCustomPopupMenu" hoisted="true" file="FMX.StdCtrls.pas" line="1822"/>
      <property name="Position" visibility="published" read="FPosition" write="SetPosition" stored="IsPositionStored" type="TPosition" hoisted="true" file="FMX.StdCtrls.pas" line="1823"/>
      <property name="RotationAngle" visibility="published" read="GetRotationAngle" write="SetRotationAngle" type="Single" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="1824"/>
      <property name="RotationCenter" visibility="published" read="GetRotationCenter" write="SetRotationCenter" type="TPosition" hoisted="true" file="FMX.StdCtrls.pas" line="1825"/>
      <property name="Scale" visibility="published" read="GetScale" write="SetScale" type="TPosition" hoisted="true" file="FMX.StdCtrls.pas" line="1826"/>
      <property name="Size" visibility="published" read="FSize" write="SetSize" stored="IsSizeStored" type="TControlSize" hoisted="true" file="FMX.StdCtrls.pas" line="1827"/>
      <property name="StyleLookup" visibility="published" read="FStyleLookup" write="SetStyleLookup" type="string" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="1828"/>
      <property name="TabOrder" visibility="published" read="GetTabOrder" write="SetTabOrder" type="TTabOrder" default="-1" hoisted="true" file="FMX.StdCtrls.pas" line="1829"/>
      <property name="TabStop" visibility="published" read="GetTabStop" write="SetTabStop" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="1830"/>
      <property name="TouchTargetExpansion" visibility="published" read="FTouchTargetExpansion" write="SetTouchTargetExpansion" type="TBounds" hoisted="true" file="FMX.StdCtrls.pas" line="1831"/>
      <property name="Tracking" visibility="published" read="FTracking" write="FTracking" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="1832"/>
      <property name="Value" visibility="published" read="GetValue" write="SetValue" stored="ValueStored" type="Single" hoisted="true" file="FMX.StdCtrls.pas" line="1833"/>
      <property name="Visible" visibility="published" read="FVisible" write="SetVisible" stored="VisibleStored" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="1834"/>
      <property name="Width" visibility="published" read="GetWidth" write="SetWidth" stored="False" type="Single" hoisted="true" file="FMX.StdCtrls.pas" line="1835"/>
      <property name="ParentShowHint" visibility="published" read="FParentShowHint" write="SetParentShowHint" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="1836"/>
      <property name="ShowHint" visibility="published" read="FShowHint" write="SetShowHint" stored="IsShowHintStored" type="Boolean" hoisted="true" file="FMX.StdCtrls.pas" line="1837"/>
      <event name="OnApplyStyleLookup" visibility="published" read="FOnApplyStyleLookup" write="FOnApplyStyleLookup" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1840"/>
      <event name="OnChange" visibility="published" read="FOnChange" write="FOnChange" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1841"/>
      <event name="OnTracking" visibility="published" read="FOnTracking" write="FOnTracking" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1842"/>
      <event name="OnDragEnter" visibility="published" read="FOnDragEnter" write="FOnDragEnter" type="TDragEnterEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1844"/>
      <event name="OnDragLeave" visibility="published" read="FOnDragLeave" write="FOnDragLeave" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1845"/>
      <event name="OnDragOver" visibility="published" read="FOnDragOver" write="FOnDragOver" type="TDragOverEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1846"/>
      <event name="OnDragDrop" visibility="published" read="FOnDragDrop" write="FOnDragDrop" type="TDragDropEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1847"/>
      <event name="OnDragEnd" visibility="published" read="FOnDragEnd" write="FOnDragEnd" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1848"/>
      <event name="OnKeyDown" visibility="published" read="FOnKeyDown" write="FOnKeyDown" type="TKeyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1850"/>
      <event name="OnKeyUp" visibility="published" read="FOnKeyUp" write="FOnKeyUp" type="TKeyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1851"/>
      <event name="OnCanFocus" visibility="published" read="FOnCanFocus" write="FOnCanFocus" type="TCanFocusEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1853"/>
      <event name="OnClick" visibility="published" read="FOnClick" write="SetOnClick" stored="OnClickStored" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1854"/>
      <event name="OnDblClick" visibility="published" read="FOnDblClick" write="FOnDblClick" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1855"/>
      <event name="OnEnter" visibility="published" read="FOnEnter" write="FOnEnter" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1857"/>
      <event name="OnExit" visibility="published" read="FOnExit" write="FOnExit" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1858"/>
      <event name="OnMouseDown" visibility="published" read="FOnMouseDown" write="FOnMouseDown" type="TMouseEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1859"/>
      <event name="OnMouseMove" visibility="published" read="FOnMouseMove" write="FOnMouseMove" type="TMouseMoveEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1860"/>
      <event name="OnMouseUp" visibility="published" read="FOnMouseUp" write="FOnMouseUp" type="TMouseEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1861"/>
      <event name="OnMouseWheel" visibility="published" read="FOnMouseWheel" write="FOnMouseWheel" type="TMouseWheelEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1862"/>
      <event name="OnMouseEnter" visibility="published" read="FOnMouseEnter" write="FOnMouseEnter" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1863"/>
      <event name="OnMouseLeave" visibility="published" read="FOnMouseLeave" write="FOnMouseLeave" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1864"/>
      <event name="OnPainting" visibility="published" read="FOnPainting" write="FOnPainting" type="TOnPaintEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1866"/>
      <event name="OnPaint" visibility="published" read="FOnPaint" write="FOnPaint" type="TOnPaintEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1867"/>
      <event name="OnResize" visibility="published" read="FOnResize" write="FOnResize" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1868"/>
      <event name="OnResized" visibility="published" read="FOnResized" write="FOnResized" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1869"/>
    </members>
  <devnotes><summary>
Represents a general-purpose track bar for use in applications where tracking is required.
TTrackBar represents a FireMonkey styled track bar that can be used for various types of tracking operations; for instance, it is useful for adjusting properties such as color, volume, and brightness. Move the slide indicator by dragging it to a particular location or click in the bar to change its Value. Adjust this track bar's view port by affecting the value of the ViewportSize property.

Use the Max and Min properties to set the upper and lower range of the track bar. The Orientation property determines whether this track bar is vertical or horizontal.
</summary></devnotes></class>
  <class name="TBitmapTrackBar" file="FMX.StdCtrls.pas" line="1874">
    
    <members>
      <field name="FBitmap" type="TBitmap" visibility="protected" size="4" offset="1064" file="FMX.StdCtrls.pas" line="1876"/>
      <field name="FBackground" type="TShape" visibility="protected" size="4" offset="1068" file="FMX.StdCtrls.pas" line="1877"/>
      <procedure name="ApplyStyle" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="1878">
      <devnotes><summary>


Customizes styles in complex objects.
FMX.StdCtrls.TBitmapTrackBar.ApplyStyle inherits from FMX.Controls.TStyledControl.ApplyStyle. All content below this line refers to FMX.Controls.TStyledControl.ApplyStyle.
Customizes styles in complex objects.
TStyledControl descendants override it to apply styles in concordance with their primitive components.      
Do not call ApplyStyle explicitly in an application. It is called by the ApplyStyleLookup method when object styles are updated.
For an example of an ApplyStyle implementation, see &quot;TCalloutPanel:Style Contracts&quot; in FireMonkey Component Design.
</summary></devnotes></procedure>
      <procedure name="FreeStyle" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="1879">
      <devnotes><summary>


Frees the style of TStyledControl.
FMX.StdCtrls.TBitmapTrackBar.FreeStyle inherits from FMX.Controls.TStyledControl.FreeStyle. All content below this line refers to FMX.Controls.TStyledControl.FreeStyle.
Frees the style of TStyledControl.
Override it to free additional component-specific style resources.
</summary></devnotes></procedure>
      <procedure name="DoRealign" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="1880">
      <devnotes><summary>


Sends a PM_REALIGN message to the presentation layer through its presentation proxy.
FMX.StdCtrls.TBitmapTrackBar.DoRealign inherits from FMX.Controls.Presentation.TPresentedControl.DoRealign. All content below this line refers to FMX.Controls.Presentation.TPresentedControl.DoRealign.
Sends a PM_REALIGN message to the presentation layer through its presentation proxy.
For details about the circumstances that trigger this procedure, see TControl.DoRealign.

 See Also
FMX.Controls.Presentation.TPresentedControl.PresentationProxy
FMX.Presentation.Messages.TMessageSender.SendMessage
FMX.Controls.TControl.DoRealign

</summary></devnotes></procedure>
      <function name="GetDefaultStyleLookupName" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="1881">
        <parameters>
          <retval type="string"/>
        </parameters>
      <devnotes><summary>


Protected getter implementation for the DefaultStyleLookupName property.
FMX.StdCtrls.TBitmapTrackBar.GetDefaultStyleLookupName inherits from FMX.Controls.TStyledControl.GetDefaultStyleLookupName. All content below this line refers to FMX.Controls.TStyledControl.GetDefaultStyleLookupName.
Protected getter implementation for the DefaultStyleLookupName property.
When you Create a styled FireMonkey component by extending an existing component, override this method, if you want your component to inherit styles from the parent component. See Step 2 - Implement a Property to Specify the Format: Inheriting Styles of the Parent Component for more information and example code.
</summary></devnotes></function>
      <procedure name="UpdateBitmap" visibility="protected" file="FMX.StdCtrls.pas" line="1882">
      <devnotes><summary>
Internally executed whenever there is a need to update this component's bitmap image. The bitmap image is updated when it is changed, when the orientation of this bitmap track bar control changes, or when it needs a repaint.
</summary></devnotes></procedure>
      <procedure name="FillBitmap" visibility="protected" procflags="virtual" file="FMX.StdCtrls.pas" line="1883">
      <devnotes><summary>
Draws the bitmap behind this track bar.
The FillBitmap virtual method is provided in order to be overridden in derived classes to allow for custom drawing of the bitmap image behind this track bar.
</summary></devnotes></procedure>
      <procedure name="SetOrientation" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="1884">
        <parameters>
          <parameter name="Value" type="TOrientation" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Protected setter implementation for the Orientation property.
FMX.StdCtrls.TBitmapTrackBar.SetOrientation inherits from FMX.StdCtrls.TCustomTrack.SetOrientation. All content below this line refers to FMX.StdCtrls.TCustomTrack.SetOrientation.
Protected setter implementation for the Orientation property.
</summary></devnotes></procedure>
      <constructor name="Create" visibility="public" file="FMX.StdCtrls.pas" line="1886">
        <parameters>
          <parameter name="AOwner" type="TComponent"/>
        </parameters>
      <devnotes><summary>




Creates a new instance of TPresentedControl.
FMX.StdCtrls.TBitmapTrackBar.Create inherits from FMX.Controls.Presentation.TPresentedControl.Create. All content below this line refers to FMX.Controls.Presentation.TPresentedControl.Create.
Creates a new instance of TPresentedControl.
AOwner takes ownership of the control and becomes responsible of destroying the control once the control is no longer necessary.
The control constructor creates a data model for the control. DefineModelClass determines the default class of data model for each subclass of TPresentedControl.
Create also sets the value of the CanUseDefaultPresentation property to True.

 See Also
System.Classes.TComponent.Create
FMX.Controls.Presentation.TPresentedControl.Model
FMX.Controls.Presentation.TPresentedControl.DefineModelClass
FMX.Controls.Presentation.TPresentedControl.Destroy
FMX.Controls.Presentation.TPresentedControl.CanUseDefaultPresentation

</summary></devnotes></constructor>
      <destructor name="Destroy" visibility="public" file="FMX.StdCtrls.pas" line="1887">
        <parameters>
        </parameters>
      <devnotes><summary>


Destroys this instance of TPresentedControl.
FMX.StdCtrls.TBitmapTrackBar.Destroy inherits from FMX.Controls.Presentation.TPresentedControl.Destroy. All content below this line refers to FMX.Controls.Presentation.TPresentedControl.Destroy.
Destroys this instance of TPresentedControl.

 See Also
FMX.Controls.Presentation.TPresentedControl.Create

</summary></devnotes></destructor>
    </members>
  <devnotes><summary>
Represents a track bar similar to that implemented by TTrackBar.
TBitmapTrackBar is not registered to the IDE, thus it cannot be dragged and dropped from the tool palette. You can manually instantiate such component, override the constructor, and create a track bar that can display bitmaps.
TBitmapTrackBar is intended for component designers as a base component for other custom track bars.
Use TTrackBar in applications, instead.
</summary></devnotes></class>
  <const name="MM_VALUE_CHANGED" type="Integer" file="FMX.StdCtrls.pas" line="1893">
    <value>
      $1701
    </value>
  </const>
  <class name="TSwitchModel" file="FMX.StdCtrls.pas" line="1898">
    
    <ancestor name="TDataModel" namespace="FMX.Controls.Model">
      <methodref name="GetData" visibility="private"/>
      <methodref name="SetData" visibility="private"/>
      <methodref name="RemoveData" visibility="private"/>
      <methodref name="QueryInterface" visibility="protected" procflags="virtual"/>
      <methodref name="_AddRef" visibility="protected"/>
      <methodref name="_Release" visibility="protected"/>
      <methodref name="Create" visibility="public" procflags="constructor overload virtual">
      </methodref>
      <methodref name="Destroy" visibility="public" procflags="destructor override">
      </methodref>
      <propertyref name="Owner" visibility="public">
      </propertyref>
      <propertyref name="Data" visibility="public">
      </propertyref>
      <propertyref name="DataSource" visibility="public">
      </propertyref>
      <ancestor name="TMessageSender" namespace="FMX.Presentation.Messages">
        <methodref name="SetReceiver" visibility="private"/>
        <methodref name="CreateReceiver" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="FreeReceiver" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="Create" visibility="public" procflags="constructor overload virtual"/>
        <methodref name="Destroy" visibility="public" procflags="destructor override"/>
        <methodref name="HasReceiver" visibility="public">
        </methodref>
        <methodref name="SendMessage" visibility="public" procflags="overload">
        </methodref>
        <methodref name="SendMessage" visibility="public" procflags="overload">
        </methodref>
        <methodref name="SendMessageWithResult" visibility="public">
        </methodref>
        <methodref name="DisableNotify" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="EnableNotify" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="CanNotify" visibility="public" procflags="virtual">
        </methodref>
        <propertyref name="Receiver" visibility="public">
        </propertyref>
        <ancestor name="TPersistent" namespace="System.Classes">
          <methodref name="AssignError" visibility="private">
          </methodref>
          <methodref name="AssignTo" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="DefineProperties" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="GetOwner" visibility="protected" procflags="dynamic">
          </methodref>
          <methodref name="Destroy" visibility="public" procflags="destructor override">
          </methodref>
          <methodref name="Assign" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="GetNamePath" visibility="public" procflags="dynamic">
          </methodref>
          <ancestor name="TObject" namespace="System">
            <methodref name="Create" visibility="public" procflags="constructor">
            </methodref>
            <methodref name="Free" visibility="public">
            </methodref>
            <methodref name="DisposeOf" visibility="public" procflags="inline">
            </methodref>
            <methodref name="InitInstance" visibility="public" procflags="class">
            </methodref>
            <methodref name="CleanupInstance" visibility="public">
            </methodref>
            <methodref name="ClassType" visibility="public" procflags="inline">
            </methodref>
            <methodref name="ClassName" visibility="public" procflags="class">
            </methodref>
            <methodref name="ClassNameIs" visibility="public" procflags="class">
            </methodref>
            <methodref name="ClassParent" visibility="public" procflags="class inline">
            </methodref>
            <methodref name="ClassInfo" visibility="public" procflags="class inline">
            </methodref>
            <methodref name="InstanceSize" visibility="public" procflags="class inline">
            </methodref>
            <methodref name="InheritsFrom" visibility="public" procflags="class">
            </methodref>
            <methodref name="MethodAddress" visibility="public" procflags="class overload">
            </methodref>
            <methodref name="MethodAddress" visibility="public" procflags="class overload">
            </methodref>
            <methodref name="MethodName" visibility="public" procflags="class">
            </methodref>
            <methodref name="QualifiedClassName" visibility="public" procflags="class">
            </methodref>
            <methodref name="FieldAddress" visibility="public" procflags="overload">
            </methodref>
            <methodref name="FieldAddress" visibility="public" procflags="overload">
            </methodref>
            <methodref name="GetInterface" visibility="public">
            </methodref>
            <methodref name="GetInterfaceEntry" visibility="public" procflags="class">
            </methodref>
            <methodref name="GetInterfaceTable" visibility="public" procflags="class inline">
            </methodref>
            <methodref name="UnitName" visibility="public" procflags="class">
            </methodref>
            <methodref name="UnitScope" visibility="public" procflags="class">
            </methodref>
            <methodref name="Equals" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="GetHashCode" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="ToString" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="SafeCallException" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="AfterConstruction" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="BeforeDestruction" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="Dispatch" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="DefaultHandler" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="NewInstance" visibility="public" procflags="class virtual">
            </methodref>
            <methodref name="FreeInstance" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="Destroy" visibility="public" procflags="destructor virtual">
            </methodref>
            <methodref name="GetDisposed" visibility="protected" procflags="inline">
            </methodref>
            <methodref name="CheckDisposed" visibility="protected" procflags="inline">
            </methodref>
            <propertyref name="Disposed" visibility="protected">
            </propertyref>
          </ancestor>
        </ancestor>
      </ancestor>
    </ancestor>
    <members>
      <field name="FValue" type="Boolean" visibility="private" size="1" offset="24" file="FMX.StdCtrls.pas" line="1900"/>
      <field name="FOnSwitch" type="TNotifyEvent" visibility="private" size="8" offset="32" file="FMX.StdCtrls.pas" line="1901"/>
      <procedure name="SetValue" visibility="private" file="FMX.StdCtrls.pas" line="1902">
        <parameters>
          <parameter name="AValue" type="Boolean"/>
        </parameters>
      </procedure>
      <procedure name="DoChanged" visibility="protected" procflags="virtual" file="FMX.StdCtrls.pas" line="1905">
        <devnotes>
           <summary>Invokes OnSwitch event handler</summary>
        </devnotes>
      </procedure>
      <procedure name="Change" visibility="public" file="FMX.StdCtrls.pas" line="1908">
        <devnotes>
           <summary>Invokes OnSwitch event handler</summary>
        </devnotes>
      </procedure>
      <property name="Value" visibility="public" read="FValue" write="SetValue" type="Boolean" file="FMX.StdCtrls.pas" line="1912">
        <devnotes>
           <summary>Property representing the boolean value of the switch. When the switch is On, the boolean value is
           True. When the switch is Off, the boolean value is False.</summary>
        </devnotes>
      </property>
      <event name="OnSwitch" visibility="public" read="FOnSwitch" write="FOnSwitch" type="TNotifyEvent" file="FMX.StdCtrls.pas" line="1914">
        <devnotes>
           <summary>Event handler is called, when <c>TSwitch</c> changed <c>IsChecked</c></summary>
        </devnotes>
      </event>
    </members>
  </class>
  <class name="TCustomSwitch" file="FMX.StdCtrls.pas" line="1919">
    
    <ancestor name="TPresentedControl" namespace="FMX.Controls.Presentation">
      <interfaces>
        <implements name="ISceneChildrenObserver"/>
        <implements name="IControlTypeSupportable"/>
        <implements name="IMessageSendingCompatible"/>
      </interfaces>
      <methodref name="GetPresentation" visibility="private"/>
      <methodref name="GetPresentationScene" visibility="private"/>
      <methodref name="CreateModel" visibility="private"/>
      <methodref name="DoPresentationNameChoosing" visibility="private"/>
      <methodref name="RemoveStyleResource" visibility="private"/>
      <methodref name="GetMessageSender" visibility="private"/>
      <methodref name="GetControlType" visibility="private"/>
      <methodref name="SetControlType" visibility="private"/>
      <methodref name="ChildWasRemoved" visibility="private"/>
      <methodref name="Loaded" visibility="protected" procflags="override"/>
      <methodref name="PaintChildren" visibility="protected" procflags="override"/>
      <methodref name="ControlTypeChanged" visibility="protected" procflags="virtual">
      </methodref>
      <methodref name="ClipChildrenChanged" visibility="protected" procflags="override">
      </methodref>
      <methodref name="HitTestChanged" visibility="protected" procflags="override">
      </methodref>
      <methodref name="GetDefaultStyleLookupName" visibility="protected" procflags="override"/>
      <methodref name="StyleLookupChanged" visibility="protected" procflags="override"/>
      <methodref name="StyleDataChanged" visibility="protected" procflags="override"/>
      <methodref name="RequestStyleData" visibility="protected" procflags="override"/>
      <methodref name="GetResourceLink" visibility="protected" procflags="override"/>
      <methodref name="AncestorParentChanged" visibility="protected" procflags="override"/>
      <methodref name="AncestorVisibleChanged" visibility="protected" procflags="override"/>
      <methodref name="SetVisible" visibility="protected" procflags="override"/>
      <methodref name="ObjectAtPoint" visibility="protected" procflags="override"/>
      <methodref name="ChangeOrder" visibility="protected" procflags="override"/>
      <methodref name="ParentChanged" visibility="protected" procflags="override"/>
      <methodref name="DoAddObject" visibility="protected" procflags="override"/>
      <methodref name="DoInsertObject" visibility="protected" procflags="override"/>
      <methodref name="DoRemoveObject" visibility="protected" procflags="override"/>
      <methodref name="DoDeleteChildren" visibility="protected" procflags="override"/>
      <methodref name="DoRootChanged" visibility="protected" procflags="override"/>
      <methodref name="DoSetSize" visibility="protected" procflags="override"/>
      <methodref name="DoAbsoluteChanged" visibility="protected" procflags="override"/>
      <methodref name="DoRealign" visibility="protected" procflags="override"/>
      <methodref name="RecommendSize" visibility="protected" procflags="virtual">
      </methodref>
      <methodref name="KeyDown" visibility="protected" procflags="override"/>
      <methodref name="KeyUp" visibility="protected" procflags="override"/>
      <methodref name="DoEnter" visibility="protected" procflags="override"/>
      <methodref name="DoExit" visibility="protected" procflags="override"/>
      <methodref name="AfterPaint" visibility="protected" procflags="override"/>
      <methodref name="GetFirstControlWithGesture" visibility="protected" procflags="override"/>
      <methodref name="SetAdjustSizeValue" visibility="protected" procflags="override"/>
      <methodref name="GetAdjustSizeValue" visibility="protected" procflags="override"/>
      <methodref name="GetAdjustType" visibility="protected" procflags="override"/>
      <methodref name="SetAdjustType" visibility="protected" procflags="override"/>
      <methodref name="ActionChange" visibility="protected" procflags="override"/>
      <methodref name="DoActionClientChanged" visibility="protected" procflags="override"/>
      <methodref name="DefinePresentationName" visibility="protected" procflags="virtual">
      </methodref>
      <methodref name="GetPresentationSuffix" visibility="protected">
      </methodref>
      <methodref name="InitPresentation" visibility="protected" procflags="virtual">
      </methodref>
      <methodref name="AncestorPresentationLoaded" visibility="protected">
      </methodref>
      <methodref name="AncestorPresentationUnloading" visibility="protected">
      </methodref>
      <methodref name="GetModel" visibility="protected">
      </methodref>
      <methodref name="DefineModelClass" visibility="protected" procflags="virtual">
      </methodref>
      <propertyref name="CanUseDefaultPresentation" visibility="protected">
      </propertyref>
      <methodref name="QueryInterface" visibility="protected" procflags="override">
      </methodref>
      <propertyref name="PresentationScene" visibility="protected">
      </propertyref>
      <methodref name="Create" visibility="public" procflags="constructor overload override"/>
      <methodref name="Destroy" visibility="public" procflags="destructor override"/>
      <methodref name="HasPresentationProxy" visibility="public"/>
      <methodref name="RecalcEnabled" visibility="public" procflags="override"/>
      <methodref name="RecalcOpacity" visibility="public" procflags="override"/>
      <methodref name="AfterConstruction" visibility="public" procflags="override"/>
      <methodref name="BeforeDestruction" visibility="public" procflags="override"/>
      <methodref name="ApplyStyleLookup" visibility="public" procflags="override"/>
      <methodref name="NeedStyleLookup" visibility="public" procflags="override"/>
      <methodref name="FindStyleResource" visibility="public" procflags="overload override"/>
      <methodref name="PointInObjectLocal" visibility="public" procflags="override"/>
      <methodref name="ApplyTriggerEffect" visibility="public" procflags="override"/>
      <methodref name="StartTriggerAnimation" visibility="public" procflags="override"/>
      <methodref name="StartTriggerAnimationWait" visibility="public" procflags="override"/>
      <methodref name="LoadPresentation" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="UnloadPresentation" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="ReloadPresentation" visibility="public">
      </methodref>
      <propertyref name="ControlType" visibility="public"/>
      <propertyref name="Presentation" visibility="public">
      </propertyref>
      <propertyref name="PresentationProxy" visibility="public">
      </propertyref>
      <propertyref name="PresentationState" visibility="public">
      </propertyref>
      <propertyref name="Model" visibility="public">
      </propertyref>
      <eventref name="OnPresentationNameChoosing" visibility="public">
      </eventref>
      <ancestor name="TStyledControl" namespace="FMX.Controls">
        <methodref name="GetStyleData" visibility="class private"/>
        <methodref name="SetStyleData" visibility="class private"/>
        <methodref name="SetStyleLookup" visibility="class private"/>
        <methodref name="ScaleChangedHandler" visibility="class private"/>
        <methodref name="StyleChangedHandler" visibility="class private"/>
        <methodref name="InternalFreeStyle" visibility="private"/>
        <methodref name="SearchInto" visibility="protected" procflags="override"/>
        <methodref name="GetBackIndex" visibility="protected" procflags="override"/>
        <methodref name="IsHelpContextStored" visibility="protected"/>
        <methodref name="SetHelpContext" visibility="protected"/>
        <methodref name="SetHelpKeyword" visibility="protected"/>
        <methodref name="Notification" visibility="protected" procflags="override"/>
        <methodref name="DoSetSize" visibility="protected" procflags="override"/>
        <methodref name="DoApplyStyleLookup" visibility="protected" procflags="virtual"/>
        <methodref name="StyleDataChanged" visibility="protected" procflags="virtual"/>
        <methodref name="RequestStyleData" visibility="protected" procflags="virtual"/>
        <methodref name="Painting" visibility="protected" procflags="override"/>
        <methodref name="ApplyStyle" visibility="protected" procflags="virtual"/>
        <methodref name="FreeStyle" visibility="protected" procflags="virtual"/>
        <methodref name="GetStyleContext" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="GetDefaultStyleLookupName" visibility="protected" procflags="virtual"/>
        <methodref name="GetParentClassStyleLookupName" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="DoEnter" visibility="protected" procflags="override"/>
        <methodref name="Disappear" visibility="protected" procflags="override"/>
        <methodref name="AdjustSize" visibility="protected" procflags="virtual"/>
        <methodref name="AdjustFixedSize" visibility="protected" procflags="virtual"/>
        <methodref name="ChooseAdjustType" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="DoStyleChanged" visibility="protected" procflags="virtual"/>
        <methodref name="StyleLookupChanged" visibility="protected" procflags="virtual"/>
        <methodref name="RecycleResourceLink" visibility="protected"/>
        <methodref name="KillResourceLink" visibility="protected"/>
        <methodref name="DoDeleteChildren" visibility="protected" procflags="override"/>
        <methodref name="GenerateStyleName" visibility="protected">
        </methodref>
        <methodref name="GetStyleObject" visibility="protected" procflags="overload virtual"/>
        <methodref name="GetStyleObject" visibility="protected" procflags="overload virtual"/>
        <methodref name="SetAdjustSizeValue" visibility="protected" procflags="virtual"/>
        <methodref name="SetAdjustType" visibility="protected" procflags="virtual"/>
        <methodref name="GetResourceLink" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="GetResourceControl" visibility="protected">
        </methodref>
        <propertyref name="IsNeedStyleLookup" visibility="protected"/>
        <propertyref name="ResourceLink" visibility="protected"/>
        <propertyref name="ResourceControl" visibility="protected"/>
        <methodref name="GetAdjustSizeValue" visibility="protected" procflags="override"/>
        <methodref name="GetAdjustType" visibility="protected" procflags="override"/>
        <methodref name="Create" visibility="public" procflags="constructor overload override"/>
        <methodref name="BeforeDestruction" visibility="public" procflags="override"/>
        <methodref name="Destroy" visibility="public" procflags="destructor override"/>
        <propertyref name="AdjustType" visibility="public"/>
        <propertyref name="AdjustSizeValue" visibility="public"/>
        <propertyref name="StyleState" visibility="public">
        </propertyref>
        <methodref name="RecalcSize" visibility="public" procflags="override"/>
        <methodref name="FindStyleResource" visibility="public" procflags="overload override"/>
        <methodref name="FindStyleResource" visibility="public" procflags="overload">
        </methodref>
        <methodref name="FindAndCloneStyleResource" visibility="public">
        </methodref>
        <methodref name="SetNewScene" visibility="public" procflags="override"/>
        <methodref name="ApplyStyleLookup" visibility="public" procflags="virtual"/>
        <methodref name="NeedStyleLookup" visibility="public" procflags="virtual"/>
        <methodref name="Inflate" visibility="public" procflags="virtual"/>
        <methodref name="PrepareForPaint" visibility="public" procflags="override"/>
        <methodref name="StartTriggerAnimation" visibility="public" procflags="override"/>
        <methodref name="StartTriggerAnimationWait" visibility="public" procflags="override"/>
        <propertyref name="AutoTranslate" visibility="public"/>
        <propertyref name="DefaultStyleLookupName" visibility="public"/>
        <propertyref name="ParentClassStyleLookupName" visibility="public">
        </propertyref>
        <propertyref name="HelpType" visibility="public"/>
        <propertyref name="HelpKeyword" visibility="public"/>
        <propertyref name="HelpContext" visibility="public"/>
        <propertyref name="StylesData" visibility="public"/>
        <propertyref name="StyleLookup" visibility="public"/>
        <propertyref name="LoadableStyle" visibility="public">
        </propertyref>
        <methodref name="LookupStyleObject" visibility="public" procflags="class">
        </methodref>
        <ancestor name="TControl" namespace="FMX.Controls">
          <interfaces>
            <implements name="ITriggerEffect"/>
            <implements name="ITriggerAnimation"/>
            <implements name="ITabStopController"/>
            <implements name="IGestureControl"/>
            <implements name="IEffectContainer"/>
            <implements name="IAlignableObject"/>
            <implements name="IRotatedControl"/>
            <implements name="IAlignRoot"/>
            <implements name="IContainerObject"/>
            <implements name="IControl"/>
          </interfaces>
          <methodref name="AddToEffectsList" visibility="class private"/>
          <methodref name="RemoveFromEffectsList" visibility="class private"/>
          <methodref name="GetInvertAbsoluteMatrix" visibility="class private"/>
          <methodref name="SetPosition" visibility="class private"/>
          <methodref name="SetHitTest" visibility="class private"/>
          <methodref name="SetClipChildren" visibility="class private"/>
          <methodref name="GetCanvas" visibility="class private" procflags="inline"/>
          <methodref name="SetLocked" visibility="class private"/>
          <methodref name="SetTempCanvas" visibility="class private"/>
          <methodref name="SetOpacity" visibility="class private"/>
          <methodref name="IsOpacityStored" visibility="class private"/>
          <methodref name="SetCursor" visibility="class private"/>
          <methodref name="RefreshInheritedCursor" visibility="class private"/>
          <methodref name="RefreshInheritedCursorForChildren" visibility="class private"/>
          <methodref name="GetAbsoluteWidth" visibility="class private"/>
          <methodref name="GetAbsoluteHeight" visibility="class private"/>
          <methodref name="IsAnchorsStored" visibility="class private"/>
          <methodref name="GetEnabled" visibility="class private"/>
          <methodref name="GetCursor" visibility="class private"/>
          <methodref name="GetInheritedCursor" visibility="class private"/>
          <methodref name="GetAbsoluteHasEffect" visibility="class private"/>
          <methodref name="GetAbsoluteHasDisablePaintEffect" visibility="class private"/>
          <methodref name="GetAbsoluteHasAfterPaintEffect" visibility="class private"/>
          <methodref name="PaddingChangedHandler" visibility="class private" procflags="overload"/>
          <methodref name="MarginsChanged" visibility="class private"/>
          <methodref name="MatrixChanged" visibility="class private"/>
          <methodref name="SizeChanged" visibility="class private"/>
          <methodref name="GetControlsCount" visibility="class private"/>
          <methodref name="OnClickStored" visibility="class private"/>
          <methodref name="IsPopupMenuStored" visibility="class private"/>
          <methodref name="RequestAlign" visibility="class private"/>
          <methodref name="SetMinClipHeight" visibility="class private"/>
          <methodref name="SetMinClipWidth" visibility="class private"/>
          <methodref name="UpdateSmallSizeControl" visibility="class private"/>
          <methodref name="Create@" visibility="class private" procflags="class constructor noself"/>
          <methodref name="Destroy@" visibility="class private" procflags="class destructor noself"/>
          <methodref name="SetOnClick" visibility="class private"/>
          <methodref name="GetIsFocused" visibility="class private"/>
          <methodref name="SetPadding" visibility="class private"/>
          <methodref name="SetMargins" visibility="class private"/>
          <methodref name="SetTouchTargetExpansion" visibility="class private"/>
          <methodref name="InternalSizeChanged" visibility="class private"/>
          <methodref name="ReadFixedWidth" visibility="class private"/>
          <methodref name="WriteFixedWidth" visibility="class private"/>
          <methodref name="ReadFixedHeight" visibility="class private"/>
          <methodref name="WriteFixedHeight" visibility="class private"/>
          <methodref name="ReadDesignVisible" visibility="class private"/>
          <methodref name="ReadHint" visibility="class private"/>
          <methodref name="ReadShowHint" visibility="class private"/>
          <methodref name="DisabledOpacityStored" visibility="class private"/>
          <methodref name="SetDisabledOpacity" visibility="class private"/>
          <methodref name="GetAxisAlignedRect" visibility="class private"/>
          <methodref name="GetRotationAngle" visibility="class private"/>
          <methodref name="GetRotationCenter" visibility="class private"/>
          <methodref name="GetScale" visibility="class private"/>
          <methodref name="SetRotationAngle" visibility="class private"/>
          <methodref name="SetRotationCenter" visibility="class private"/>
          <methodref name="SetScale" visibility="class private"/>
          <methodref name="GetTabOrder" visibility="class private"/>
          <methodref name="SetTabOrder" visibility="class private"/>
          <methodref name="GetTabStop" visibility="class private"/>
          <methodref name="SetTabStop" visibility="class private"/>
          <methodref name="SetDisableDisappear" visibility="class private"/>
          <methodref name="GetDisableDisappear" visibility="class private"/>
          <methodref name="UpdateParentProperties" visibility="class private"/>
          <methodref name="CreateTouchManagerIfRequired" visibility="private"/>
          <methodref name="GetTouchManager" visibility="private"/>
          <methodref name="SetTouchManager" visibility="private"/>
          <methodref name="IsShowHintStored" visibility="private"/>
          <methodref name="SetParentShowHint" visibility="private"/>
          <methodref name="SetShowHint" visibility="private"/>
          <methodref name="GetAbsoluteClipRect" visibility="private"/>
          <methodref name="HintStored" visibility="private"/>
          <methodref name="RepaintJointArea" visibility="class protected"/>
          <methodref name="DoAbsoluteChanged" visibility="protected" procflags="virtual"/>
          <methodref name="CheckHitTest" visibility="protected" procflags="virtual"/>
          <methodref name="SetInPaintTo" visibility="protected"/>
          <methodref name="EndUpdateNoChanges" visibility="protected"/>
          <methodref name="SetHint" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="SetEnabled" visibility="protected" procflags="virtual"/>
          <methodref name="Loaded" visibility="protected" procflags="override"/>
          <methodref name="Updated" visibility="protected" procflags="override"/>
          <methodref name="DefineProperties" visibility="protected" procflags="override"/>
          <methodref name="Notification" visibility="protected" procflags="override"/>
          <methodref name="ParentChanged" visibility="protected" procflags="override"/>
          <methodref name="ChangeOrder" visibility="protected" procflags="override"/>
          <methodref name="ChangeChildren" visibility="protected" procflags="override"/>
          <methodref name="SetVisible" visibility="protected" procflags="virtual"/>
          <methodref name="DoSetWidth" visibility="protected" procflags="virtual" symflags="deprecated">
          </methodref>
          <methodref name="DoSetHeight" visibility="protected" procflags="virtual" symflags="deprecated">
          </methodref>
          <methodref name="DoSetSize" visibility="protected" procflags="virtual"/>
          <methodref name="HandleSizeChanged" visibility="protected" procflags="virtual"/>
          <methodref name="DoMatrixChanged" visibility="protected" procflags="virtual"/>
          <methodref name="SetHeight" visibility="protected" procflags="virtual"/>
          <methodref name="SetWidth" visibility="protected" procflags="virtual"/>
          <methodref name="SetSize" visibility="protected" procflags="overload virtual"/>
          <methodref name="SetSize" visibility="protected" procflags="overload virtual"/>
          <methodref name="GetAbsoluteRect" visibility="protected" procflags="virtual"/>
          <methodref name="GetChildrenMatrix" visibility="protected" procflags="virtual"/>
          <methodref name="GetAbsoluteScale" visibility="protected" procflags="virtual"/>
          <methodref name="GetParentedRect" visibility="protected" procflags="virtual" symflags="deprecated">
          </methodref>
          <methodref name="GetClipRect" visibility="protected" procflags="virtual"/>
          <methodref name="GetEffectsRect" visibility="protected" procflags="virtual"/>
          <methodref name="GetAbsoluteEnabled" visibility="protected" procflags="virtual"/>
          <methodref name="GetChildrenRect" visibility="protected" procflags="virtual"/>
          <methodref name="GetLocalRect" visibility="protected" procflags="virtual"/>
          <methodref name="GetBoundsRect" visibility="protected" procflags="virtual"/>
          <methodref name="SetBoundsRect" visibility="protected" procflags="virtual"/>
          <methodref name="IsHeightStored" visibility="protected" procflags="virtual" symflags="deprecated">
          </methodref>
          <methodref name="IsWidthStored" visibility="protected" procflags="virtual" symflags="deprecated">
          </methodref>
          <methodref name="IsPositionStored" visibility="protected" procflags="virtual"/>
          <methodref name="IsSizeStored" visibility="protected" procflags="virtual"/>
          <methodref name="SetPopupMenu" visibility="protected"/>
          <methodref name="GetAbsoluteMatrix" visibility="protected" procflags="virtual"/>
          <methodref name="GetHasClipParent" visibility="protected"/>
          <methodref name="GetUpdateRect" visibility="protected"/>
          <methodref name="DoGetUpdateRect" visibility="protected" procflags="virtual"/>
          <methodref name="GetAbsoluteOpacity" visibility="protected" procflags="virtual"/>
          <methodref name="BeginAutoDrag" visibility="protected" procflags="virtual"/>
          <methodref name="Capture" visibility="protected"/>
          <methodref name="ReleaseCapture" visibility="protected"/>
          <propertyref name="EnableExecuteAction" visibility="protected"/>
          <methodref name="Click" visibility="protected" procflags="virtual"/>
          <methodref name="DblClick" visibility="protected" procflags="virtual"/>
          <methodref name="MouseDown" visibility="protected" procflags="virtual"/>
          <methodref name="MouseMove" visibility="protected" procflags="virtual"/>
          <methodref name="MouseUp" visibility="protected" procflags="virtual"/>
          <methodref name="MouseWheel" visibility="protected" procflags="virtual"/>
          <methodref name="MouseClick" visibility="protected" procflags="virtual"/>
          <methodref name="KeyDown" visibility="protected" procflags="virtual"/>
          <methodref name="KeyUp" visibility="protected" procflags="virtual"/>
          <methodref name="DialogKey" visibility="protected" procflags="virtual"/>
          <methodref name="AfterDialogKey" visibility="protected" procflags="virtual"/>
          <methodref name="ShowContextMenu" visibility="protected" procflags="virtual"/>
          <methodref name="DragEnter" visibility="protected" procflags="virtual"/>
          <methodref name="DragOver" visibility="protected" procflags="virtual"/>
          <methodref name="DragDrop" visibility="protected" procflags="virtual"/>
          <methodref name="DragLeave" visibility="protected" procflags="virtual"/>
          <methodref name="DragEnd" visibility="protected" procflags="virtual"/>
          <methodref name="GetDefaultTouchTargetExpansion" visibility="protected" procflags="virtual"/>
          <methodref name="GetCanFocus" visibility="protected" procflags="virtual"/>
          <methodref name="GetCanParentFocus" visibility="protected" procflags="virtual"/>
          <methodref name="EnterChildren" visibility="protected" procflags="virtual"/>
          <methodref name="ExitChildren" visibility="protected" procflags="virtual"/>
          <methodref name="GetParentedVisible" visibility="protected" procflags="virtual"/>
          <methodref name="NeedUpdateEffects" visibility="protected"/>
          <methodref name="BeforeEffectEnabledChanged" visibility="protected"/>
          <methodref name="EffectEnabledChanged" visibility="protected"/>
          <methodref name="Realign" visibility="protected"/>
          <methodref name="ChildrenAlignChanged" visibility="protected"/>
          <methodref name="GetAlign" visibility="protected"/>
          <methodref name="SetAlign" visibility="protected" procflags="virtual"/>
          <methodref name="GetAnchors" visibility="protected"/>
          <methodref name="SetAnchors" visibility="protected" procflags="virtual"/>
          <methodref name="GetMargins" visibility="protected"/>
          <methodref name="GetPadding" visibility="protected"/>
          <methodref name="GetWidth" visibility="protected" procflags="virtual"/>
          <methodref name="GetHeight" visibility="protected" procflags="virtual"/>
          <methodref name="GetLeft" visibility="protected" procflags="virtual"/>
          <methodref name="GetTop" visibility="protected" procflags="virtual"/>
          <methodref name="GetAllowAlign" visibility="protected"/>
          <methodref name="GetAnchorRules" visibility="protected"/>
          <methodref name="GetAnchorOrigin" visibility="protected"/>
          <methodref name="GetOriginalParentSize" visibility="protected"/>
          <methodref name="GetAnchorMove" visibility="protected"/>
          <methodref name="SetAnchorMove" visibility="protected"/>
          <methodref name="GetAdjustSizeValue" visibility="protected" procflags="virtual"/>
          <methodref name="GetAdjustType" visibility="protected" procflags="virtual"/>
          <methodref name="GetContainerWidth" visibility="protected"/>
          <methodref name="GetContainerHeight" visibility="protected"/>
          <methodref name="GetObject" visibility="protected"/>
          <methodref name="GetParent" visibility="protected"/>
          <methodref name="GetVisible" visibility="protected"/>
          <methodref name="GetDesignInteractive" visibility="protected"/>
          <methodref name="GetPopupMenu" visibility="protected"/>
          <methodref name="DoEnter" visibility="protected" procflags="virtual"/>
          <methodref name="DoExit" visibility="protected" procflags="virtual"/>
          <methodref name="DoActivate" visibility="protected" procflags="virtual"/>
          <methodref name="DoDeactivate" visibility="protected" procflags="virtual"/>
          <methodref name="DoMouseEnter" visibility="protected" procflags="virtual"/>
          <methodref name="DoMouseLeave" visibility="protected" procflags="virtual"/>
          <methodref name="CheckForAllowFocus" visibility="protected"/>
          <methodref name="GetDragMode" visibility="protected" procflags="virtual"/>
          <methodref name="SetDragMode" visibility="protected" procflags="virtual"/>
          <methodref name="GetLocked" visibility="protected"/>
          <methodref name="GetHitTest" visibility="protected"/>
          <methodref name="GetAcceptsControls" visibility="protected"/>
          <methodref name="SetAcceptsControls" visibility="protected"/>
          <methodref name="FindTarget" visibility="protected" procflags="virtual"/>
          <methodref name="ObjectAtPoint" visibility="protected" procflags="virtual"/>
          <methodref name="HasHint" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="GetHintString" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="GetHintObject" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="CanShowHint" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="BroadcastGesture" visibility="protected"/>
          <methodref name="CMGesture" visibility="protected" procflags="virtual"/>
          <methodref name="TouchManager" visibility="protected"/>
          <methodref name="GetFirstControlWithGesture" visibility="protected" procflags="virtual"/>
          <methodref name="GetFirstControlWithGestureEngine" visibility="protected"/>
          <methodref name="GetListOfInteractiveGestures" visibility="protected"/>
          <methodref name="Tap" visibility="protected" procflags="virtual"/>
          <methodref name="GetFirstVisibleObjectIndex" visibility="protected" procflags="virtual"/>
          <methodref name="GetLastVisibleObjectIndex" visibility="protected" procflags="virtual"/>
          <methodref name="GetDefaultSize" visibility="protected" procflags="virtual"/>
          <methodref name="FillTextFlags" visibility="protected" procflags="virtual"/>
          <methodref name="ApplyEffect" visibility="protected" procflags="virtual"/>
          <methodref name="PaintInternal" visibility="protected"/>
          <methodref name="SupportsPaintStage" visibility="protected" procflags="virtual"/>
          <methodref name="CanRepaint" visibility="protected" procflags="virtual"/>
          <methodref name="RepaintRect" visibility="protected"/>
          <methodref name="PaintChildren" visibility="protected" procflags="virtual"/>
          <methodref name="Painting" visibility="protected" procflags="virtual"/>
          <methodref name="Paint" visibility="protected" procflags="virtual"/>
          <methodref name="DoPaint" visibility="protected" procflags="virtual"/>
          <methodref name="AfterPaint" visibility="protected" procflags="virtual"/>
          <methodref name="DrawDesignBorder" visibility="protected"/>
          <methodref name="DoRealign" visibility="protected" procflags="virtual"/>
          <methodref name="DoBeginUpdate" visibility="protected" procflags="virtual"/>
          <methodref name="DoEndUpdate" visibility="protected" procflags="virtual"/>
          <methodref name="Move" visibility="protected" procflags="virtual"/>
          <methodref name="Resize" visibility="protected" procflags="virtual"/>
          <methodref name="DoResized" visibility="protected" procflags="virtual"/>
          <methodref name="Disappear" visibility="protected" procflags="virtual"/>
          <methodref name="Show" visibility="protected" procflags="virtual"/>
          <methodref name="Hide" visibility="protected" procflags="virtual"/>
          <methodref name="AncestorVisibleChanged" visibility="protected" procflags="virtual"/>
          <methodref name="AncestorParentChanged" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="ClipChildrenChanged" visibility="protected" procflags="virtual"/>
          <methodref name="HitTestChanged" visibility="protected" procflags="virtual"/>
          <methodref name="PaddingChanged" visibility="protected" procflags="overload virtual">
          </methodref>
          <propertyref name="MinClipWidth" visibility="protected"/>
          <propertyref name="MinClipHeight" visibility="protected"/>
          <propertyref name="SmallSizeControl" visibility="protected"/>
          <methodref name="DoAddObject" visibility="protected" procflags="override"/>
          <methodref name="DoInsertObject" visibility="protected" procflags="override"/>
          <methodref name="DoRemoveObject" visibility="protected" procflags="override"/>
          <methodref name="DoDeleteChildren" visibility="protected" procflags="override"/>
          <propertyref name="PaintStage" visibility="protected"/>
          <propertyref name="TempCanvas" visibility="protected"/>
          <methodref name="SetLeft" visibility="protected"/>
          <methodref name="SetTop" visibility="protected"/>
          <methodref name="UpdateExplicitBounds" visibility="protected"/>
          <methodref name="UpdateAnchorRules" visibility="protected"/>
          <propertyref name="Left" visibility="protected"/>
          <propertyref name="Top" visibility="protected"/>
          <propertyref name="ExplicitLeft" visibility="protected"/>
          <propertyref name="ExplicitTop" visibility="protected"/>
          <propertyref name="ExplicitWidth" visibility="protected"/>
          <propertyref name="ExplicitHeight" visibility="protected"/>
          <methodref name="GetActionLinkClass" visibility="protected" procflags="override"/>
          <methodref name="ActionChange" visibility="protected" procflags="override"/>
          <methodref name="EnabledStored" visibility="protected" procflags="virtual"/>
          <methodref name="VisibleStored" visibility="protected" procflags="virtual"/>
          <methodref name="EnabledChanged" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="VisibleChanged" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="IsControlRectEmpty" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="GetControls" visibility="protected"/>
          <methodref name="DoGesture" visibility="protected" procflags="virtual"/>
          <methodref name="GetTabStopController" visibility="protected" procflags="virtual"/>
          <methodref name="GetTabListClass" visibility="protected" procflags="virtual"/>
          <propertyref name="DoubleClick" visibility="protected"/>
          <propertyref name="RotationAngle" visibility="protected"/>
          <propertyref name="RotationCenter" visibility="protected"/>
          <propertyref name="Scale" visibility="protected"/>
          <propertyref name="DisabledOpacity" visibility="protected"/>
          <propertyref name="ParentContent" visibility="protected"/>
          <propertyref name="ParentShowHint" visibility="protected">
          </propertyref>
          <methodref name="Create" visibility="public" procflags="constructor override"/>
          <methodref name="Destroy" visibility="public" procflags="destructor override"/>
          <methodref name="SetNewScene" visibility="public" procflags="virtual"/>
          <methodref name="SetBounds" visibility="public" procflags="virtual"/>
          <methodref name="AbsoluteToLocal" visibility="public" procflags="overload virtual">
          </methodref>
          <methodref name="AbsoluteToLocal" visibility="public" procflags="overload">
          </methodref>
          <methodref name="LocalToAbsolute" visibility="public" procflags="overload virtual">
          </methodref>
          <methodref name="LocalToAbsolute" visibility="public" procflags="overload">
          </methodref>
          <methodref name="ScreenToLocal" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="LocalToScreen" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="ConvertLocalPointFrom" visibility="public">
          </methodref>
          <methodref name="ConvertLocalPointTo" visibility="public">
          </methodref>
          <methodref name="AbsoluteToLocalVector" visibility="public" procflags="virtual"/>
          <methodref name="LocalToAbsoluteVector" visibility="public" procflags="virtual"/>
          <methodref name="PointInObject" visibility="public" procflags="virtual"/>
          <methodref name="PointInObjectLocal" visibility="public" procflags="virtual"/>
          <methodref name="MakeScreenshot" visibility="public"/>
          <methodref name="BeginUpdate" visibility="public" procflags="virtual"/>
          <methodref name="IsUpdating" visibility="public" procflags="virtual"/>
          <methodref name="EndUpdate" visibility="public" procflags="virtual"/>
          <methodref name="RecalcAbsoluteNow" visibility="public"/>
          <methodref name="RecalcUpdateRect" visibility="public" procflags="virtual"/>
          <methodref name="RecalcOpacity" visibility="public" procflags="virtual"/>
          <methodref name="RecalcAbsolute" visibility="public" procflags="virtual"/>
          <methodref name="RecalcEnabled" visibility="public" procflags="virtual"/>
          <methodref name="RecalcHasEffect" visibility="public" procflags="virtual"/>
          <methodref name="RecalcHasClipParent" visibility="public" procflags="virtual"/>
          <methodref name="PrepareForPaint" visibility="public" procflags="virtual"/>
          <methodref name="RecalcSize" visibility="public" procflags="virtual"/>
          <methodref name="UpdateEffects" visibility="public"/>
          <methodref name="ApplyTriggerEffect" visibility="public" procflags="virtual"/>
          <methodref name="StartTriggerAnimation" visibility="public" procflags="virtual"/>
          <methodref name="StartTriggerAnimationWait" visibility="public" procflags="virtual"/>
          <methodref name="SetFocus" visibility="public"/>
          <methodref name="ResetFocus" visibility="public"/>
          <methodref name="PaintTo" visibility="public">
          </methodref>
          <methodref name="Repaint" visibility="public"/>
          <methodref name="InvalidateRect" visibility="public"/>
          <methodref name="Lock" visibility="public"/>
          <propertyref name="AbsoluteMatrix" visibility="public"/>
          <propertyref name="AbsoluteOpacity" visibility="public"/>
          <propertyref name="AbsoluteWidth" visibility="public"/>
          <propertyref name="AbsoluteHeight" visibility="public"/>
          <propertyref name="AbsoluteScale" visibility="public"/>
          <propertyref name="AbsoluteEnabled" visibility="public"/>
          <propertyref name="AbsoluteRect" visibility="public"/>
          <propertyref name="AbsoluteClipRect" visibility="public">
          </propertyref>
          <propertyref name="AxisAlignedRect" visibility="public"/>
          <propertyref name="ApplyingEffect" visibility="public">
          </propertyref>
          <propertyref name="HasEffect" visibility="public"/>
          <propertyref name="HasDisablePaintEffect" visibility="public"/>
          <propertyref name="HasAfterPaintEffect" visibility="public"/>
          <propertyref name="HasClipParent" visibility="public"/>
          <propertyref name="ChildrenRect" visibility="public"/>
          <propertyref name="DefaultSize" visibility="public"/>
          <propertyref name="FixedSize" visibility="public"/>
          <propertyref name="InvertAbsoluteMatrix" visibility="public"/>
          <propertyref name="InPaintTo" visibility="public"/>
          <propertyref name="LocalRect" visibility="public"/>
          <propertyref name="Pressed" visibility="public"/>
          <propertyref name="PressedPosition" visibility="public">
          </propertyref>
          <propertyref name="UpdateRect" visibility="public"/>
          <propertyref name="BoundsRect" visibility="public"/>
          <propertyref name="ParentedRect" visibility="public"/>
          <propertyref name="ParentedVisible" visibility="public"/>
          <propertyref name="ClipRect" visibility="public"/>
          <propertyref name="Canvas" visibility="public"/>
          <propertyref name="Controls" visibility="public"/>
          <propertyref name="ControlsCount" visibility="public"/>
          <propertyref name="ParentControl" visibility="public"/>
          <propertyref name="Scene" visibility="public"/>
          <propertyref name="AutoCapture" visibility="public"/>
          <propertyref name="CanFocus" visibility="public"/>
          <propertyref name="CanParentFocus" visibility="public"/>
          <propertyref name="DisableFocusEffect" visibility="public"/>
          <propertyref name="IsInflated" visibility="public"/>
          <methodref name="EnumControls" visibility="public" procflags="overload"/>
          <methodref name="EnumControls" visibility="public" procflags="overload" symflags="deprecated">
          </methodref>
          <methodref name="GetTabList" visibility="public" procflags="virtual"/>
          <methodref name="ShowInDesigner" visibility="public" procflags="virtual"/>
          <methodref name="ShouldTestMouseHits" visibility="public" procflags="virtual">
          </methodref>
          <propertyref name="IsMouseOver" visibility="public"/>
          <propertyref name="IsDragOver" visibility="public"/>
          <propertyref name="IsFocused" visibility="public"/>
          <propertyref name="IsVisible" visibility="public"/>
          <propertyref name="Align" visibility="public"/>
          <propertyref name="Anchors" visibility="public"/>
          <propertyref name="Cursor" visibility="public"/>
          <propertyref name="InheritedCursor" visibility="public"/>
          <propertyref name="DragMode" visibility="public"/>
          <propertyref name="EnableDragHighlight" visibility="public"/>
          <propertyref name="Enabled" visibility="public"/>
          <propertyref name="Position" visibility="public"/>
          <propertyref name="Locked" visibility="public"/>
          <propertyref name="Width" visibility="public"/>
          <propertyref name="Height" visibility="public"/>
          <propertyref name="Size" visibility="public"/>
          <propertyref name="Padding" visibility="public"/>
          <propertyref name="Margins" visibility="public"/>
          <propertyref name="Opacity" visibility="public"/>
          <propertyref name="ClipChildren" visibility="public"/>
          <propertyref name="ClipParent" visibility="public"/>
          <propertyref name="HitTest" visibility="public"/>
          <propertyref name="PopupMenu" visibility="public"/>
          <propertyref name="TabOrder" visibility="public"/>
          <propertyref name="Visible" visibility="public"/>
          <eventref name="CustomSceneAddRect" visibility="public"/>
          <eventref name="OnDragEnter" visibility="public"/>
          <eventref name="OnDragLeave" visibility="public"/>
          <eventref name="OnDragOver" visibility="public"/>
          <eventref name="OnDragDrop" visibility="public"/>
          <eventref name="OnDragEnd" visibility="public"/>
          <eventref name="OnKeyDown" visibility="public"/>
          <eventref name="OnKeyUp" visibility="public"/>
          <eventref name="OnClick" visibility="public"/>
          <eventref name="OnDblClick" visibility="public"/>
          <eventref name="OnCanFocus" visibility="public"/>
          <eventref name="OnEnter" visibility="public"/>
          <eventref name="OnExit" visibility="public"/>
          <eventref name="OnMouseDown" visibility="public"/>
          <eventref name="OnMouseMove" visibility="public"/>
          <eventref name="OnMouseUp" visibility="public"/>
          <eventref name="OnMouseWheel" visibility="public"/>
          <eventref name="OnMouseEnter" visibility="public"/>
          <eventref name="OnMouseLeave" visibility="public"/>
          <eventref name="OnPainting" visibility="public"/>
          <eventref name="OnPaint" visibility="public"/>
          <eventref name="OnResize" visibility="public"/>
          <eventref name="OnResized" visibility="public"/>
          <eventref name="OnActivate" visibility="public"/>
          <eventref name="OnDeactivate" visibility="public"/>
          <eventref name="OnApplyStyleLookup" visibility="public"/>
          <propertyref name="TouchTargetExpansion" visibility="public"/>
          <propertyref name="TabStop" visibility="public"/>
          <propertyref name="DisableDisappear" visibility="public"/>
          <propertyref name="ShowHint" visibility="public">
          </propertyref>
          <propertyref name="Hint" visibility="public">
          </propertyref>
          <propertyref name="Touch" visibility="published"/>
          <eventref name="OnGesture" visibility="published"/>
          <eventref name="OnTap" visibility="published"/>
          <ancestor name="TFmxObject" namespace="FMX.Types">
            <interfaces>
              <implements name="IActionClient"/>
              <implements name="IFreeNotification"/>
            </interfaces>
            <methodref name="SetStyleName" visibility="private"/>
            <methodref name="SetStored" visibility="private"/>
            <methodref name="GetChildrenCount" visibility="private" procflags="inline"/>
            <methodref name="GetIndexOfChild" visibility="private"/>
            <methodref name="SetIndexOfChild" visibility="private"/>
            <methodref name="SetIndex" visibility="private"/>
            <methodref name="GetActionRoot" visibility="private"/>
            <methodref name="GetActionClient" visibility="private" procflags="inline"/>
            <methodref name="SetActionClient" visibility="private"/>
            <methodref name="GetAction" visibility="private"/>
            <methodref name="SetAction" visibility="private"/>
            <methodref name="GetIndex" visibility="private"/>
            <methodref name="Create@" visibility="class private" procflags="class constructor noself"/>
            <methodref name="Destroy@" visibility="class private" procflags="class destructor noself"/>
            <methodref name="CreateChildrenList" visibility="protected" procflags="virtual"/>
            <methodref name="ResetChildrenIndicesSpan" visibility="protected"/>
            <methodref name="ResetChildrenIndices" visibility="protected"/>
            <methodref name="GetBackIndex" visibility="protected" procflags="virtual"/>
            <methodref name="DefineProperties" visibility="protected" procflags="override"/>
            <methodref name="IgnoreBindingName" visibility="protected"/>
            <methodref name="GetChildren" visibility="protected" procflags="override"/>
            <methodref name="SetParentComponent" visibility="protected" procflags="override"/>
            <methodref name="Notification" visibility="protected" procflags="override"/>
            <methodref name="GetActionLinkClass" visibility="protected" procflags="virtual"/>
            <methodref name="InitiateAction" visibility="protected" procflags="virtual"/>
            <methodref name="DoActionChange" visibility="protected" procflags="virtual"/>
            <methodref name="ActionChange" visibility="protected" procflags="virtual"/>
            <methodref name="DoActionClientChanged" visibility="protected" procflags="virtual"/>
            <propertyref name="ActionLink" visibility="protected"/>
            <propertyref name="Action" visibility="protected"/>
            <propertyref name="StyleIndexer" visibility="protected"/>
            <methodref name="GetParentComponent" visibility="public" procflags="override"/>
            <methodref name="HasParent" visibility="public" procflags="override"/>
            <methodref name="AddToResourcePool" visibility="protected" procflags="virtual"/>
            <methodref name="RemoveFromResourcePool" visibility="protected" procflags="virtual"/>
            <methodref name="SetParent" visibility="protected" procflags="virtual"/>
            <methodref name="DoRootChanging" visibility="protected" procflags="virtual"/>
            <methodref name="DoRootChanged" visibility="protected" procflags="virtual"/>
            <methodref name="ParentChanged" visibility="protected" procflags="virtual"/>
            <methodref name="ChangeOrder" visibility="protected" procflags="virtual"/>
            <methodref name="ChangeChildren" visibility="protected" procflags="virtual"/>
            <methodref name="DoAddObject" visibility="protected" procflags="virtual"/>
            <methodref name="DoInsertObject" visibility="protected" procflags="virtual"/>
            <methodref name="DoRemoveObject" visibility="protected" procflags="virtual"/>
            <methodref name="DoDeleteChildren" visibility="protected" procflags="virtual"/>
            <methodref name="SearchInto" visibility="protected" procflags="virtual"/>
            <methodref name="FreeNotification" visibility="protected" procflags="virtual"/>
            <methodref name="SupportsPlatformService" visibility="protected" procflags="virtual"/>
            <methodref name="GetData" visibility="protected" procflags="virtual"/>
            <methodref name="SetData" visibility="protected" procflags="virtual"/>
            <methodref name="IgnoreIntegerValue" visibility="protected"/>
            <methodref name="IgnoreFloatValue" visibility="protected"/>
            <methodref name="IgnoreBooleanValue" visibility="protected"/>
            <methodref name="IgnoreIdentValue" visibility="protected"/>
            <methodref name="Create" visibility="public" procflags="constructor override"/>
            <methodref name="Destroy" visibility="public" procflags="destructor override"/>
            <methodref name="BeforeDestruction" visibility="public" procflags="override"/>
            <methodref name="Release" visibility="public" procflags="virtual"/>
            <methodref name="Released" visibility="public" symflags="deprecated">
            </methodref>
            <methodref name="ObjectState" visibility="public" symflags="deprecated">
            </methodref>
            <methodref name="SetRoot" visibility="public"/>
            <methodref name="SetDesign" visibility="public"/>
            <methodref name="Clone" visibility="public"/>
            <methodref name="AddObject" visibility="public"/>
            <methodref name="InsertObject" visibility="public"/>
            <methodref name="RemoveObject" visibility="public" procflags="overload"/>
            <methodref name="RemoveObject" visibility="public" procflags="overload"/>
            <methodref name="ContainsObject" visibility="public" procflags="virtual"/>
            <methodref name="Exchange" visibility="public" procflags="virtual"/>
            <methodref name="DeleteChildren" visibility="public"/>
            <methodref name="IsChild" visibility="public" procflags="virtual"/>
            <methodref name="BringChildToFront" visibility="public"/>
            <methodref name="SendChildToBack" visibility="public"/>
            <methodref name="BringToFront" visibility="public" procflags="virtual"/>
            <methodref name="SendToBack" visibility="public" procflags="virtual"/>
            <methodref name="AddObjectsToList" visibility="public"/>
            <methodref name="Sort" visibility="public" procflags="virtual"/>
            <methodref name="EnumObjects" visibility="public">
            </methodref>
            <methodref name="AnimateFloat" visibility="public" symflags="deprecated">
            </methodref>
            <methodref name="AnimateFloatDelay" visibility="public" symflags="deprecated">
            </methodref>
            <methodref name="AnimateFloatWait" visibility="public" symflags="deprecated">
            </methodref>
            <methodref name="AnimateInt" visibility="public" symflags="deprecated">
            </methodref>
            <methodref name="AnimateIntWait" visibility="public" symflags="deprecated">
            </methodref>
            <methodref name="AnimateColor" visibility="public" symflags="deprecated">
            </methodref>
            <methodref name="StopPropertyAnimation" visibility="public"/>
            <methodref name="AddFreeNotify" visibility="public"/>
            <methodref name="RemoveFreeNotify" visibility="public"/>
            <methodref name="FindStyleResource" visibility="public" procflags="overload virtual"/>
            <propertyref name="Root" visibility="public"/>
            <propertyref name="Stored" visibility="public"/>
            <propertyref name="TagObject" visibility="public"/>
            <propertyref name="TagFloat" visibility="public"/>
            <propertyref name="TagString" visibility="public"/>
            <propertyref name="ChildrenCount" visibility="public"/>
            <propertyref name="Children" visibility="public"/>
            <propertyref name="Data" visibility="public"/>
            <propertyref name="Parent" visibility="public"/>
            <propertyref name="Index" visibility="public"/>
            <propertyref name="ActionClient" visibility="public"/>
            <propertyref name="StyleName" visibility="published"/>
            <ancestor name="TComponent" namespace="System.Classes">
              <interfaces>
                <implements name="IInterfaceComponentReference"/>
                <implements name="IInterface"/>
              </interfaces>
              <methodref name="GetComObject" visibility="private">
              </methodref>
              <methodref name="GetComponent" visibility="private">
              </methodref>
              <methodref name="GetComponentCount" visibility="private">
              </methodref>
              <methodref name="GetComponentIndex" visibility="private">
              </methodref>
              <methodref name="Insert" visibility="private">
              </methodref>
              <methodref name="ReadLeft" visibility="private">
              </methodref>
              <methodref name="ReadTop" visibility="private">
              </methodref>
              <methodref name="Remove" visibility="private">
              </methodref>
              <methodref name="RemoveNotification" visibility="private">
              </methodref>
              <methodref name="SetComponentIndex" visibility="private">
              </methodref>
              <methodref name="SetReference" visibility="private">
              </methodref>
              <methodref name="WriteLeft" visibility="private">
              </methodref>
              <methodref name="WriteTop" visibility="private">
              </methodref>
              <methodref name="IntfGetComponent" visibility="private">
              </methodref>
              <methodref name="DoGetDeltaStreams" visibility="private">
              </methodref>
              <methodref name="ReadDeltaStream" visibility="private">
              </methodref>
              <methodref name="ReadDeltaState" visibility="private">
              </methodref>
              <methodref name="FindSortedComponent" visibility="private">
              </methodref>
              <methodref name="AddSortedComponent" visibility="private">
              </methodref>
              <methodref name="RemoveSortedComponent" visibility="private" procflags="inline">
              </methodref>
              <methodref name="Create@" visibility="class private" procflags="class constructor noself">
              </methodref>
              <methodref name="AsyncSchedule" visibility="protected" procflags="virtual">
              </methodref>
              <methodref name="ChangeName" visibility="protected">
              </methodref>
              <methodref name="DefineProperties" visibility="protected" procflags="override">
              </methodref>
              <methodref name="GetChildren" visibility="protected" procflags="dynamic">
              </methodref>
              <methodref name="GetChildOwner" visibility="protected" procflags="dynamic">
              </methodref>
              <methodref name="GetChildParent" visibility="protected" procflags="dynamic">
              </methodref>
              <methodref name="GetOwner" visibility="protected" procflags="override">
              </methodref>
              <methodref name="Loaded" visibility="protected" procflags="virtual">
              </methodref>
              <methodref name="Notification" visibility="protected" procflags="virtual">
              </methodref>
              <methodref name="GetDeltaStreams" visibility="protected" procflags="dynamic">
              </methodref>
              <methodref name="ReadState" visibility="protected" procflags="virtual">
              </methodref>
              <methodref name="CanObserve" visibility="protected" procflags="virtual">
              </methodref>
              <methodref name="ObserverAdded" visibility="protected" procflags="virtual">
              </methodref>
              <methodref name="GetObservers" visibility="protected" procflags="virtual">
              </methodref>
              <methodref name="SetAncestor" visibility="protected">
              </methodref>
              <methodref name="SetDesigning" visibility="protected">
              </methodref>
              <methodref name="SetInline" visibility="protected">
              </methodref>
              <methodref name="SetDesignInstance" visibility="protected">
              </methodref>
              <methodref name="SetName" visibility="protected" procflags="virtual">
              </methodref>
              <methodref name="SetChildOrder" visibility="protected" procflags="dynamic">
              </methodref>
              <methodref name="SetParentComponent" visibility="protected" procflags="dynamic">
              </methodref>
              <methodref name="Updating" visibility="protected" procflags="dynamic">
              </methodref>
              <methodref name="Updated" visibility="protected" procflags="dynamic">
              </methodref>
              <methodref name="UpdateRegistry" visibility="protected" procflags="class virtual">
              </methodref>
              <methodref name="ValidateRename" visibility="protected" procflags="virtual">
              </methodref>
              <methodref name="ValidateContainer" visibility="protected" procflags="dynamic">
              </methodref>
              <methodref name="ValidateInsert" visibility="protected" procflags="dynamic">
              </methodref>
              <methodref name="WriteState" visibility="protected" procflags="virtual">
              </methodref>
              <methodref name="RemoveFreeNotifications" visibility="protected">
              </methodref>
              <methodref name="QueryInterface" visibility="protected" procflags="virtual">
              </methodref>
              <methodref name="_AddRef" visibility="protected">
              </methodref>
              <methodref name="_Release" visibility="protected">
              </methodref>
              <methodref name="GetTypeInfoCount" visibility="protected">
              </methodref>
              <methodref name="GetTypeInfo" visibility="protected">
              </methodref>
              <methodref name="GetIDsOfNames" visibility="protected">
              </methodref>
              <methodref name="Invoke" visibility="protected">
              </methodref>
              <eventref name="OnGetDeltaStreams" visibility="protected">
              </eventref>
              <methodref name="Create" visibility="public" procflags="constructor virtual">
              </methodref>
              <methodref name="Destroy" visibility="public" procflags="destructor override">
              </methodref>
              <methodref name="BeforeDestruction" visibility="public" procflags="override">
              </methodref>
              <methodref name="BeginInvoke" visibility="public" procflags="overload">
              </methodref>
              <methodref name="BeginInvoke" visibility="public" procflags="overload">
              </methodref>
              <methodref name="BeginInvoke" visibility="public" procflags="overload">
              </methodref>
              <methodref name="BeginInvoke" visibility="public" procflags="overload">
              </methodref>
              <methodref name="BeginInvoke" visibility="public" procflags="overload">
              </methodref>
              <methodref name="BeginInvoke" visibility="public" procflags="overload">
              </methodref>
              <methodref name="BeginInvoke" visibility="public" procflags="overload">
              </methodref>
              <methodref name="BeginInvoke" visibility="public" procflags="overload">
              </methodref>
              <methodref name="EndInvoke" visibility="public" procflags="overload">
              </methodref>
              <methodref name="EndInvoke" visibility="public" procflags="overload">
              </methodref>
              <methodref name="EndFunctionInvoke" visibility="public">
              </methodref>
              <methodref name="DestroyComponents" visibility="public">
              </methodref>
              <methodref name="Destroying" visibility="public">
              </methodref>
              <methodref name="ExecuteAction" visibility="public" procflags="dynamic">
              </methodref>
              <methodref name="FindComponent" visibility="public">
              </methodref>
              <methodref name="FreeNotification" visibility="public">
              </methodref>
              <methodref name="RemoveFreeNotification" visibility="public">
              </methodref>
              <methodref name="FreeOnRelease" visibility="public">
              </methodref>
              <methodref name="GetEnumerator" visibility="public" procflags="inline">
              </methodref>
              <methodref name="GetParentComponent" visibility="public" procflags="dynamic">
              </methodref>
              <methodref name="GetNamePath" visibility="public" procflags="override">
              </methodref>
              <methodref name="HasParent" visibility="public" procflags="dynamic">
              </methodref>
              <methodref name="InsertComponent" visibility="public">
              </methodref>
              <methodref name="RemoveComponent" visibility="public">
              </methodref>
              <methodref name="SetSubComponent" visibility="public">
              </methodref>
              <methodref name="SafeCallException" visibility="public" procflags="override">
              </methodref>
              <methodref name="UpdateAction" visibility="public" procflags="virtual">
              </methodref>
              <methodref name="IsImplementorOf" visibility="public">
              </methodref>
              <methodref name="ReferenceInterface" visibility="public">
              </methodref>
              <propertyref name="ComObject" visibility="public">
              </propertyref>
              <propertyref name="Components" visibility="public">
              </propertyref>
              <propertyref name="ComponentCount" visibility="public">
              </propertyref>
              <propertyref name="ComponentIndex" visibility="public">
              </propertyref>
              <propertyref name="ComponentState" visibility="public">
              </propertyref>
              <propertyref name="ComponentStyle" visibility="public">
              </propertyref>
              <propertyref name="DesignInfo" visibility="public">
              </propertyref>
              <propertyref name="Owner" visibility="public">
              </propertyref>
              <propertyref name="VCLComObject" visibility="public">
              </propertyref>
              <propertyref name="Observers" visibility="public">
              </propertyref>
              <propertyref name="Name" visibility="published">
              </propertyref>
              <propertyref name="Tag" visibility="published">
              </propertyref>
              <ancestor name="TPersistent" namespace="System.Classes">
                <methodref name="AssignError" visibility="private">
                </methodref>
                <methodref name="AssignTo" visibility="protected" procflags="virtual">
                </methodref>
                <methodref name="DefineProperties" visibility="protected" procflags="virtual">
                </methodref>
                <methodref name="GetOwner" visibility="protected" procflags="dynamic">
                </methodref>
                <methodref name="Destroy" visibility="public" procflags="destructor override">
                </methodref>
                <methodref name="Assign" visibility="public" procflags="virtual">
                </methodref>
                <methodref name="GetNamePath" visibility="public" procflags="dynamic">
                </methodref>
                <ancestor name="TObject" namespace="System">
                  <methodref name="Create" visibility="public" procflags="constructor">
                  </methodref>
                  <methodref name="Free" visibility="public">
                  </methodref>
                  <methodref name="DisposeOf" visibility="public" procflags="inline">
                  </methodref>
                  <methodref name="InitInstance" visibility="public" procflags="class">
                  </methodref>
                  <methodref name="CleanupInstance" visibility="public">
                  </methodref>
                  <methodref name="ClassType" visibility="public" procflags="inline">
                  </methodref>
                  <methodref name="ClassName" visibility="public" procflags="class">
                  </methodref>
                  <methodref name="ClassNameIs" visibility="public" procflags="class">
                  </methodref>
                  <methodref name="ClassParent" visibility="public" procflags="class inline">
                  </methodref>
                  <methodref name="ClassInfo" visibility="public" procflags="class inline">
                  </methodref>
                  <methodref name="InstanceSize" visibility="public" procflags="class inline">
                  </methodref>
                  <methodref name="InheritsFrom" visibility="public" procflags="class">
                  </methodref>
                  <methodref name="MethodAddress" visibility="public" procflags="class overload">
                  </methodref>
                  <methodref name="MethodAddress" visibility="public" procflags="class overload">
                  </methodref>
                  <methodref name="MethodName" visibility="public" procflags="class">
                  </methodref>
                  <methodref name="QualifiedClassName" visibility="public" procflags="class">
                  </methodref>
                  <methodref name="FieldAddress" visibility="public" procflags="overload">
                  </methodref>
                  <methodref name="FieldAddress" visibility="public" procflags="overload">
                  </methodref>
                  <methodref name="GetInterface" visibility="public">
                  </methodref>
                  <methodref name="GetInterfaceEntry" visibility="public" procflags="class">
                  </methodref>
                  <methodref name="GetInterfaceTable" visibility="public" procflags="class inline">
                  </methodref>
                  <methodref name="UnitName" visibility="public" procflags="class">
                  </methodref>
                  <methodref name="UnitScope" visibility="public" procflags="class">
                  </methodref>
                  <methodref name="Equals" visibility="public" procflags="virtual">
                  </methodref>
                  <methodref name="GetHashCode" visibility="public" procflags="virtual">
                  </methodref>
                  <methodref name="ToString" visibility="public" procflags="virtual">
                  </methodref>
                  <methodref name="SafeCallException" visibility="public" procflags="virtual">
                  </methodref>
                  <methodref name="AfterConstruction" visibility="public" procflags="virtual">
                  </methodref>
                  <methodref name="BeforeDestruction" visibility="public" procflags="virtual">
                  </methodref>
                  <methodref name="Dispatch" visibility="public" procflags="virtual">
                  </methodref>
                  <methodref name="DefaultHandler" visibility="public" procflags="virtual">
                  </methodref>
                  <methodref name="NewInstance" visibility="public" procflags="class virtual">
                  </methodref>
                  <methodref name="FreeInstance" visibility="public" procflags="virtual">
                  </methodref>
                  <methodref name="Destroy" visibility="public" procflags="destructor virtual">
                  </methodref>
                  <methodref name="GetDisposed" visibility="protected" procflags="inline">
                  </methodref>
                  <methodref name="CheckDisposed" visibility="protected" procflags="inline">
                  </methodref>
                  <propertyref name="Disposed" visibility="protected">
                  </propertyref>
                </ancestor>
              </ancestor>
            </ancestor>
          </ancestor>
        </ancestor>
      </ancestor>
    </ancestor>
    <interfaces>
      <implements name="IIsChecked"/>
    </interfaces>
    <members>
      <set name="TNeededToDo" visibility="private" alias="FMX.StdCtrls.TNeededToDo" file="FMX.StdCtrls.pas" line="1921">
        <element name="SetChecked"/>
        <element name="CallClick"/>
      </set>
      <field name="FNeededToDo" type="TCustomSwitch.TNeededToDo" visibility="private" size="1" offset="992" file="FMX.StdCtrls.pas" line="1923"/>
      <function name="GetModel" visibility="private" procflags="overload" file="FMX.StdCtrls.pas" line="1924">
        <parameters>
          <retval type="TSwitchModel">
            <devnotes>
               <summary>Data model for the TSwitch control.</summary>
            </devnotes>
          </retval>
        </parameters>
      </function>
      <procedure name="SetOnSwitch" visibility="private" file="FMX.StdCtrls.pas" line="1925">
        <parameters>
          <parameter name="Value" type="TNotifyEvent" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="GetOnSwitch" visibility="private" file="FMX.StdCtrls.pas" line="1926">
        <parameters>
          <retval type="TNotifyEvent"/>
        </parameters>
      </function>
      <procedure name="SetIsChecked" visibility="private" file="FMX.StdCtrls.pas" line="1928">
        <parameters>
          <parameter name="AValue" type="Boolean" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="GetIsChecked" visibility="private" file="FMX.StdCtrls.pas" line="1929">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <function name="IsCheckedStored" visibility="private" file="FMX.StdCtrls.pas" line="1930">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <procedure name="ActionChange" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="1933">
        <parameters>
          <parameter name="Sender" type="TBasicAction"/>
          <parameter name="CheckDefaults" type="Boolean"/>
        </parameters>
      <devnotes><summary>
Sends a message to the presentation layer of the presentation proxy when the Action property changes.
FMX.StdCtrls.TCustomSwitch.ActionChange inherits from FMX.Controls.Presentation.TPresentedControl.ActionChange. All content below this line refers to FMX.Controls.Presentation.TPresentedControl.ActionChange.
Sends a message to the presentation layer of the presentation proxy when the Action property changes.
The presentation layer receives a message with PM_ACTION_CHANGE as MsgID and an instance of TActionInfo as Value with the following data:



Property

Data



Value.Sender



ASender




Value.CheckDefaults



ACheckDefaults


 See Also
FMX.Controls.TControl.ActionChange
FMX.Controls.Presentation.TPresentedControl.PresentationProxy
FMX.Presentation.Messages.TMessageSender.SendMessage
FMX.Presentation.Messages.TMessageSender.Receiver
System.TObject.Dispatch
FMX.Presentation.Messages.TDispatchMessageWithValue
FMX.Presentation.Messages.TDispatchMessageWithValue.MsgID
FMX.Presentation.Messages.TDispatchMessageWithValue.Value
FMX.Controls.Presentation.TActionInfo
FMX.Controls.Presentation.TActionInfo.Sender
FMX.Controls.Presentation.TActionInfo.CheckDefaults

</summary></devnotes></procedure>
      <function name="GetActionLinkClass" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="1934">
        <parameters>
          <retval type="TActionLinkClass"/>
        </parameters>
      <devnotes><summary>


Returns the associated action link class.
FMX.StdCtrls.TCustomSwitch.GetActionLinkClass inherits from FMX.Types.TFmxObject.GetActionLinkClass. All content below this line refers to FMX.Types.TFmxObject.GetActionLinkClass.
Returns the associated action link class.
Returns the class reference for the TActionLink class or for one of its descendants. 
In TFmxObject, GetActionLinkClass always returns nil.
In descendant classes, GetActionLinkClass should return the appropriate class type for the action link used with the class object. When a control object of the descendant from the TFmxObject class tries to assign a value to the Action property, the setter method for Action calls GetActionLinkClass. If GetActionLinkClass returns a non-nil value, then the action object is assigned to Action. If the control object does not support actions, then GetActionLinkClass should return nil. In this case, attempting to set a value to the Action property raises the following exception:  

StrEActionNoSuported = 'Class %s does not support the action'    
</summary></devnotes></function>
      <function name="CanObserve" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="1936">
        <parameters>
          <parameter name="ID" type="Integer" paramflags="const"/>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>


Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></function>
      <procedure name="SetData" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="1937">
        <parameters>
          <parameter name="Value" type="TValue" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Protected setter implementation for the Data property.
FMX.StdCtrls.TCustomSwitch.SetData inherits from FMX.Types.TFmxObject.SetData. All content below this line refers to FMX.Types.TFmxObject.SetData.
Protected setter implementation for the Data property.
</summary></devnotes></procedure>
      <function name="GetData" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="1938">
        <parameters>
          <retval type="TValue">
            <attributes>
              <attribute name="HPPGENAttribute"/>
            </attributes>
          </retval>
        </parameters>
      <devnotes><summary>
Protected getter implementation for the Data property.
FMX.StdCtrls.TCustomSwitch.GetData inherits from FMX.Types.TFmxObject.GetData. All content below this line refers to FMX.Types.TFmxObject.GetData.
Protected getter implementation for the Data property.
</summary></devnotes></function>
      <procedure name="MouseDown" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="1940">
        <parameters>
          <parameter name="Button" type="TMouseButton"/>
          <parameter name="Shift" type="TShiftState"/>
          <parameter name="X" type="Single"/>
          <parameter name="Y" type="Single"/>
        </parameters>
      <devnotes><summary>
OnMouseDown event dispatcher. 
FMX.StdCtrls.TCustomSwitch.MouseDown inherits from FMX.Controls.TControl.MouseDown. All content below this line refers to FMX.Controls.TControl.MouseDown.
OnMouseDown event dispatcher. 
A control calls MouseDown in response to any of mouse-down messages, decoding the message parameters into the shift-key state and position, which it passes in the Shift, X, and Y parameters, respectively:

Button determines which mouse button is pressed: left, right, or middle.
Shift indicates which shift keys--SHIFT, CTRL, ALT, and CMD (only for Mac)--were down when the user pressed the mouse button.
X and Y are the pixel coordinates of the mouse pointer within the client area of the control. If Button is mbLeft, MouseDown sets PressedPosition as a TPointF(X,Y).
Override the protected MouseDown method to provide other responses when a mouse button is down while the cursor is over the control.

</summary></devnotes></procedure>
      <procedure name="Click" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="1941">
      <devnotes><summary>
Responds to user clicks, key pressing, and input on touch devices (gestures).
FMX.StdCtrls.TCustomSwitch.Click inherits from FMX.Controls.TControl.Click. All content below this line refers to FMX.Controls.TControl.Click.
Responds to user clicks, key pressing, and input on touch devices (gestures).
Click is an event handler for the OnClick event. It is automatically called when the left mouse button is pressed and released with the pointer over the control. Click also can be called in DialogKey and other methods handling an input from keyboards and touch devices.
Call Click in applications to simulate an OnClick mouse event.  
If EnableExecuteAction is True and the OnClick event handler is not assigned (or is equal to Action.OnExecute), then Click executes the assigned Action, otherwise executes the OnClick event handler.
</summary></devnotes></procedure>
      <function name="GetDefaultTouchTargetExpansion" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="1942">
        <parameters>
          <retval type="TRectF"/>
        </parameters>
      <devnotes><summary>


Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></function>
      <function name="DefineModelClass" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="1943">
        <parameters>
          <retval type="TDataModelClass">
            <devnotes>
               <summary>Class reference of TDataModel.</summary>
            </devnotes>
          </retval>
        </parameters>
      <devnotes><summary>
Returns a class reference to a data model of this presented control.
FMX.StdCtrls.TCustomSwitch.DefineModelClass inherits from FMX.Controls.Presentation.TPresentedControl.DefineModelClass. All content below this line refers to FMX.Controls.Presentation.TPresentedControl.DefineModelClass.
Returns a class reference to a data model of this presented control.
Returns a class reference to a data model class that the constructor of this presented control uses to create a data model for the control.
By default DefineModelClass returns TDataModel. Descendant classes reimplement DefineModelClass to determine the data model class that a descendant presented control uses for its data model.

 See Also
FMX.Controls.Model.TDataModelClass
FMX.Controls.Model.TDataModel
FMX.Controls.Presentation.TPresentedControl.Create
FMX.Controls.Presentation.TPresentedControl.Model
FMX.Presentation.Style.TStyledPresentation.DefineModelClass
Class References

</summary></devnotes></function>
      <procedure name="DoSwitch" visibility="protected" procflags="virtual" file="FMX.StdCtrls.pas" line="1946">
        <devnotes><summary>
Updates the action of the switch and calls the handler of the OnSwitch event.
Called by the DoChanged procedure of the data model of the control when the value of the switch control changes.
</summary></devnotes>
      </procedure>
      <function name="GetDefaultSize" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="1947">
        <parameters>
          <retval type="TSizeF"/>
        </parameters>
      <devnotes><summary>
Getter of DefaultSize.
FMX.StdCtrls.TCustomSwitch.GetDefaultSize inherits from FMX.Controls.TControl.GetDefaultSize. All content below this line refers to FMX.Controls.TControl.GetDefaultSize.
Getter of DefaultSize.


</summary></devnotes></function>
      <constructor name="Create" visibility="public" file="FMX.StdCtrls.pas" line="1949">
        <parameters>
          <parameter name="AOwner" type="TComponent"/>
        </parameters>
      <devnotes><summary>
Creates a new instance of TPresentedControl.
FMX.StdCtrls.TCustomSwitch.Create inherits from FMX.Controls.Presentation.TPresentedControl.Create. All content below this line refers to FMX.Controls.Presentation.TPresentedControl.Create.
Creates a new instance of TPresentedControl.
AOwner takes ownership of the control and becomes responsible of destroying the control once the control is no longer necessary.
The control constructor creates a data model for the control. DefineModelClass determines the default class of data model for each subclass of TPresentedControl.
Create also sets the value of the CanUseDefaultPresentation property to True.

 See Also
System.Classes.TComponent.Create
FMX.Controls.Presentation.TPresentedControl.Model
FMX.Controls.Presentation.TPresentedControl.DefineModelClass
FMX.Controls.Presentation.TPresentedControl.Destroy
FMX.Controls.Presentation.TPresentedControl.CanUseDefaultPresentation

</summary></devnotes></constructor>
      <property name="Model" visibility="public" read="GetModel" type="TSwitchModel" file="FMX.StdCtrls.pas" line="1951">
        <devnotes><summary>
A data model for this control.
</summary></devnotes>
      </property>
      <property name="IsChecked" visibility="public" read="GetIsChecked" write="SetIsChecked" stored="IsCheckedStored" type="Boolean" file="FMX.StdCtrls.pas" line="1954">
        <devnotes><summary>
Indicates if the Switch is turned on or off.
IsChecked is True if the Switch is turned on, False otherwise.
</summary></devnotes>
      </property>
      <event name="OnSwitch" visibility="public" read="GetOnSwitch" write="SetOnSwitch" type="TNotifyEvent" file="FMX.StdCtrls.pas" line="1956">
        <devnotes><summary>
Event handler that is invoked when Switch changes the value of IsChecked.
</summary></devnotes>
      </event>
    </members>
  </class>
  <class name="TSwitch" file="FMX.StdCtrls.pas" line="1959">
    
    <members>
      <property name="Action" visibility="published" read="GetAction" write="SetAction" type="TBasicAction" hoisted="true" file="FMX.StdCtrls.pas" line="1961"/>
      <property name="Align" visibility="published" read="FAlign" write="SetAlign" type="TAlignLayout" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="1962"/>
      <property name="Anchors" visibility="published" read="FAnchors" write="SetAnchors" stored="IsAnchorsStored" type="TAnchors" hoisted="true" file="FMX.StdCtrls.pas" line="1963"/>
      <property name="CanFocus" visibility="published" read="FCanFocus" write="FCanFocus" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="1964"/>
      <property name="CanParentFocus" visibility="published" read="FCanParentFocus" write="FCanParentFocus" type="Boolean" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="1965"/>
      <property name="ClipChildren" visibility="published" read="FClipChildren" write="SetClipChildren" type="Boolean" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="1966"/>
      <property name="ClipParent" visibility="published" read="FClipParent" write="FClipParent" type="Boolean" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="1967"/>
      <property name="ControlType" visibility="published" read="GetControlType" write="SetControlType" type="TControlType" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="1968"/>
      <property name="Cursor" visibility="published" read="GetCursor" write="SetCursor" type="TCursor" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="1969"/>
      <property name="DragMode" visibility="published" read="GetDragMode" write="SetDragMode" type="TDragMode" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="1970"/>
      <property name="EnableDragHighlight" visibility="published" read="FEnableDragHighlight" write="FEnableDragHighlight" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="1971"/>
      <property name="Enabled" visibility="published" read="FEnabled" write="SetEnabled" stored="EnabledStored" type="Boolean" hoisted="true" file="FMX.StdCtrls.pas" line="1972"/>
      <property name="Locked" visibility="published" read="FLocked" write="SetLocked" type="Boolean" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="1973"/>
      <property name="Height" visibility="published" read="GetHeight" write="SetHeight" stored="False" type="Single" hoisted="true" file="FMX.StdCtrls.pas" line="1974"/>
      <property name="Hint" visibility="published" read="FHint" write="SetHint" stored="HintStored" type="string" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="1975"/>
      <property name="HitTest" visibility="published" read="FHitTest" write="SetHitTest" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="1976"/>
      <property name="IsChecked" visibility="published" read="GetIsChecked" write="SetIsChecked" stored="IsCheckedStored" type="Boolean" hoisted="true" file="FMX.StdCtrls.pas" line="1977"/>
      <property name="Padding" visibility="published" read="GetPadding" write="SetPadding" type="TBounds" hoisted="true" file="FMX.StdCtrls.pas" line="1978"/>
      <property name="Opacity" visibility="published" read="FOpacity" write="SetOpacity" stored="IsOpacityStored" type="Single" hoisted="true" file="FMX.StdCtrls.pas" line="1979"/>
      <property name="Margins" visibility="published" read="GetMargins" write="SetMargins" type="TBounds" hoisted="true" file="FMX.StdCtrls.pas" line="1980"/>
      <property name="PopupMenu" visibility="published" read="FPopupMenu" write="SetPopupMenu" stored="IsPopupMenuStored" type="TCustomPopupMenu" hoisted="true" file="FMX.StdCtrls.pas" line="1981"/>
      <property name="Position" visibility="published" read="FPosition" write="SetPosition" stored="IsPositionStored" type="TPosition" hoisted="true" file="FMX.StdCtrls.pas" line="1982"/>
      <property name="RotationAngle" visibility="published" read="GetRotationAngle" write="SetRotationAngle" type="Single" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="1983"/>
      <property name="RotationCenter" visibility="published" read="GetRotationCenter" write="SetRotationCenter" type="TPosition" hoisted="true" file="FMX.StdCtrls.pas" line="1984"/>
      <property name="Scale" visibility="published" read="GetScale" write="SetScale" type="TPosition" hoisted="true" file="FMX.StdCtrls.pas" line="1985"/>
      <property name="Size" visibility="published" read="FSize" write="SetSize" stored="IsSizeStored" type="TControlSize" hoisted="true" file="FMX.StdCtrls.pas" line="1986"/>
      <property name="StyleLookup" visibility="published" read="FStyleLookup" write="SetStyleLookup" type="string" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="1987"/>
      <property name="TabOrder" visibility="published" read="GetTabOrder" write="SetTabOrder" type="TTabOrder" default="-1" hoisted="true" file="FMX.StdCtrls.pas" line="1988"/>
      <property name="TabStop" visibility="published" read="GetTabStop" write="SetTabStop" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="1989"/>
      <property name="TouchTargetExpansion" visibility="published" read="FTouchTargetExpansion" write="SetTouchTargetExpansion" type="TBounds" hoisted="true" file="FMX.StdCtrls.pas" line="1990"/>
      <property name="Visible" visibility="published" read="FVisible" write="SetVisible" stored="VisibleStored" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="1991"/>
      <property name="Width" visibility="published" read="GetWidth" write="SetWidth" stored="False" type="Single" hoisted="true" file="FMX.StdCtrls.pas" line="1992"/>
      <property name="ParentShowHint" visibility="published" read="FParentShowHint" write="SetParentShowHint" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="1993"/>
      <property name="ShowHint" visibility="published" read="FShowHint" write="SetShowHint" stored="IsShowHintStored" type="Boolean" hoisted="true" file="FMX.StdCtrls.pas" line="1994"/>
      <event name="OnApplyStyleLookup" visibility="published" read="FOnApplyStyleLookup" write="FOnApplyStyleLookup" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1995"/>
      <event name="OnDragEnter" visibility="published" read="FOnDragEnter" write="FOnDragEnter" type="TDragEnterEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1996"/>
      <event name="OnDragLeave" visibility="published" read="FOnDragLeave" write="FOnDragLeave" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1997"/>
      <event name="OnDragOver" visibility="published" read="FOnDragOver" write="FOnDragOver" type="TDragOverEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1998"/>
      <event name="OnDragDrop" visibility="published" read="FOnDragDrop" write="FOnDragDrop" type="TDragDropEvent" hoisted="true" file="FMX.StdCtrls.pas" line="1999"/>
      <event name="OnDragEnd" visibility="published" read="FOnDragEnd" write="FOnDragEnd" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2000"/>
      <event name="OnKeyDown" visibility="published" read="FOnKeyDown" write="FOnKeyDown" type="TKeyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2001"/>
      <event name="OnKeyUp" visibility="published" read="FOnKeyUp" write="FOnKeyUp" type="TKeyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2002"/>
      <event name="OnCanFocus" visibility="published" read="FOnCanFocus" write="FOnCanFocus" type="TCanFocusEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2003"/>
      <event name="OnClick" visibility="published" read="FOnClick" write="SetOnClick" stored="OnClickStored" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2004"/>
      <event name="OnDblClick" visibility="published" read="FOnDblClick" write="FOnDblClick" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2005"/>
      <event name="OnEnter" visibility="published" read="FOnEnter" write="FOnEnter" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2006"/>
      <event name="OnExit" visibility="published" read="FOnExit" write="FOnExit" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2007"/>
      <event name="OnMouseDown" visibility="published" read="FOnMouseDown" write="FOnMouseDown" type="TMouseEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2008"/>
      <event name="OnMouseMove" visibility="published" read="FOnMouseMove" write="FOnMouseMove" type="TMouseMoveEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2009"/>
      <event name="OnMouseUp" visibility="published" read="FOnMouseUp" write="FOnMouseUp" type="TMouseEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2010"/>
      <event name="OnMouseWheel" visibility="published" read="FOnMouseWheel" write="FOnMouseWheel" type="TMouseWheelEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2011"/>
      <event name="OnMouseEnter" visibility="published" read="FOnMouseEnter" write="FOnMouseEnter" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2012"/>
      <event name="OnMouseLeave" visibility="published" read="FOnMouseLeave" write="FOnMouseLeave" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2013"/>
      <event name="OnPainting" visibility="published" read="FOnPainting" write="FOnPainting" type="TOnPaintEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2014"/>
      <event name="OnPaint" visibility="published" read="FOnPaint" write="FOnPaint" type="TOnPaintEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2015"/>
      <event name="OnResize" visibility="published" read="FOnResize" write="FOnResize" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2016"/>
      <event name="OnResized" visibility="published" read="FOnResized" write="FOnResized" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2017"/>
      <event name="OnSwitch" visibility="published" read="GetOnSwitch" write="SetOnSwitch" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2018"/>
    </members>
  <devnotes><summary>
Represents a two-way on-off switch for use in applications.
Use a TSwitch whenever you need to provide the user with a two-way on-off switch.

</summary></devnotes></class>
  <class name="TScrollBar" file="FMX.StdCtrls.pas" line="2023">
    
    <members>
      <field name="FValueRange" type="TValueRange" visibility="private" size="4" offset="944" file="FMX.StdCtrls.pas" line="2025"/>
      <field name="FTrackChanging" type="Boolean" visibility="private" size="1" offset="948" file="FMX.StdCtrls.pas" line="2026"/>
      <field name="FOnChange" type="TNotifyEvent" visibility="private" size="8" offset="952" file="FMX.StdCtrls.pas" line="2027"/>
      <field name="FOrientation" type="TOrientation" visibility="private" size="1" offset="960" file="FMX.StdCtrls.pas" line="2028"/>
      <field name="FTrack" type="TCustomTrack" visibility="private" size="4" offset="964" file="FMX.StdCtrls.pas" line="2029"/>
      <field name="FMinButton" type="TCustomButton" visibility="private" size="4" offset="968" file="FMX.StdCtrls.pas" line="2030"/>
      <field name="FMaxButton" type="TCustomButton" visibility="private" size="4" offset="972" file="FMX.StdCtrls.pas" line="2031"/>
      <field name="FSmallChange" type="Single" visibility="private" size="4" offset="976" file="FMX.StdCtrls.pas" line="2032"/>
      <field name="FDefaultValueRange" type="TBaseValueRange" visibility="private" size="4" offset="980" file="FMX.StdCtrls.pas" line="2033"/>
      <procedure name="SetMax" visibility="private" file="FMX.StdCtrls.pas" line="2034">
        <parameters>
          <parameter name="Value" type="Single" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetMin" visibility="private" file="FMX.StdCtrls.pas" line="2035">
        <parameters>
          <parameter name="Value" type="Single" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetValue" visibility="private" file="FMX.StdCtrls.pas" line="2036">
        <parameters>
          <parameter name="Value" type="Single" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetViewportSize" visibility="private" file="FMX.StdCtrls.pas" line="2037">
        <parameters>
          <parameter name="Value" type="Single" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="GetMax" visibility="private" file="FMX.StdCtrls.pas" line="2038">
        <parameters>
          <retval type="Single"/>
        </parameters>
      </function>
      <function name="GetMin" visibility="private" file="FMX.StdCtrls.pas" line="2039">
        <parameters>
          <retval type="Single"/>
        </parameters>
      </function>
      <function name="GetValue" visibility="private" file="FMX.StdCtrls.pas" line="2040">
        <parameters>
          <retval type="Single"/>
        </parameters>
      </function>
      <function name="GetViewportSize" visibility="private" file="FMX.StdCtrls.pas" line="2041">
        <parameters>
          <retval type="Single"/>
        </parameters>
      </function>
      <function name="GetValueRange" visibility="private" file="FMX.StdCtrls.pas" line="2042">
        <parameters>
          <retval type="TValueRange">
            <devnotes>
               <summary>Extends the TCustomValueRange class declaring Value, Min, Max,
               and some other properties to be published.</summary>
            </devnotes>
          </retval>
        </parameters>
      </function>
      <procedure name="SetValueRange" visibility="private" file="FMX.StdCtrls.pas" line="2043">
        <parameters>
          <parameter name="Value" type="TValueRange" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetOrientation" visibility="private" file="FMX.StdCtrls.pas" line="2044">
        <parameters>
          <parameter name="Value" type="TOrientation" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="DefStored" visibility="private" file="FMX.StdCtrls.pas" line="2045">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <procedure name="TrackChangedProc" visibility="private" file="FMX.StdCtrls.pas" line="2046">
        <parameters>
          <parameter name="Sender" type="TObject"/>
        </parameters>
      </procedure>
      <procedure name="FreeTrack" visibility="private" file="FMX.StdCtrls.pas" line="2047">
      </procedure>
      <function name="GetSmallChange" visibility="private" file="FMX.StdCtrls.pas" line="2048">
        <parameters>
          <retval type="Single"/>
        </parameters>
      </function>
      <procedure name="SetSmallChange" visibility="private" file="FMX.StdCtrls.pas" line="2049">
        <parameters>
          <parameter name="Value" type="Single" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="SmallChangeStored" visibility="private" file="FMX.StdCtrls.pas" line="2050">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <function name="GetIncrement" visibility="private" file="FMX.StdCtrls.pas" line="2051">
        <parameters>
          <retval type="Double"/>
        </parameters>
      </function>
      <procedure name="DoSmallChange" visibility="private" file="FMX.StdCtrls.pas" line="2052">
        <parameters>
          <parameter name="N" type="Integer"/>
        </parameters>
      </procedure>
      <function name="MaxStored" visibility="private" file="FMX.StdCtrls.pas" line="2053">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <function name="MinStored" visibility="private" file="FMX.StdCtrls.pas" line="2054">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <function name="ValueStored" visibility="private" file="FMX.StdCtrls.pas" line="2055">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <function name="ViewportSizeStored" visibility="private" file="FMX.StdCtrls.pas" line="2056">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <procedure name="DoMinButtonClick" visibility="protected" file="FMX.StdCtrls.pas" line="2058">
        <parameters>
          <parameter name="Sender" type="TObject"/>
        </parameters>
      <devnotes><summary>
Executes internally each time the min button is pressed.
</summary></devnotes></procedure>
      <procedure name="DoMaxButtonClick" visibility="protected" file="FMX.StdCtrls.pas" line="2059">
        <parameters>
          <parameter name="Sender" type="TObject"/>
        </parameters>
      <devnotes><summary>
Executes internally each time the max button is pressed.
</summary></devnotes></procedure>
      <procedure name="ApplyStyle" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="2060">
      <devnotes><summary>
Customizes styles in complex objects.
FMX.StdCtrls.TScrollBar.ApplyStyle inherits from FMX.Controls.TStyledControl.ApplyStyle. All content below this line refers to FMX.Controls.TStyledControl.ApplyStyle.
Customizes styles in complex objects.
TStyledControl descendants override it to apply styles in concordance with their primitive components.      
Do not call ApplyStyle explicitly in an application. It is called by the ApplyStyleLookup method when object styles are updated.
For an example of an ApplyStyle implementation, see &quot;TCalloutPanel:Style Contracts&quot; in FireMonkey Component Design.
</summary></devnotes></procedure>
      <procedure name="FreeStyle" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="2061">
      <devnotes><summary>
Frees the style of TStyledControl.
FMX.StdCtrls.TScrollBar.FreeStyle inherits from FMX.Controls.TStyledControl.FreeStyle. All content below this line refers to FMX.Controls.TStyledControl.FreeStyle.
Frees the style of TStyledControl.
Override it to free additional component-specific style resources.
</summary></devnotes></procedure>
      <function name="CanObserve" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="2062">
        <parameters>
          <parameter name="ID" type="Integer" paramflags="const"/>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
For internal use only.
Do not use this member. It is for internal use only.


</summary></devnotes></function>
      <function name="GetData" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="2063">
        <parameters>
          <retval type="TValue">
            <attributes>
              <attribute name="HPPGENAttribute"/>
            </attributes>
          </retval>
        </parameters>
      <devnotes><summary>
Protected getter implementation for the Data property.
FMX.StdCtrls.TScrollBar.GetData inherits from FMX.Types.TFmxObject.GetData. All content below this line refers to FMX.Types.TFmxObject.GetData.
Protected getter implementation for the Data property.
</summary></devnotes></function>
      <procedure name="SetData" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="2064">
        <parameters>
          <parameter name="Value" type="TValue" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Protected setter implementation for the Data property.
FMX.StdCtrls.TScrollBar.SetData inherits from FMX.Types.TFmxObject.SetData. All content below this line refers to FMX.Types.TFmxObject.SetData.
Protected setter implementation for the Data property.
</summary></devnotes></procedure>
      <procedure name="KeyDown" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="2065">
        <parameters>
          <parameter name="Key" type="Word" paramflags="var"/>
          <parameter name="KeyChar" type="Char" paramflags="var"/>
          <parameter name="Shift" type="TShiftState"/>
        </parameters>
      <devnotes><summary>
Provides a response when a key is pressed down while the control has the keyboard focus. 
FMX.StdCtrls.TScrollBar.KeyDown inherits from FMX.Controls.TControl.KeyDown. All content below this line refers to FMX.Controls.TControl.KeyDown.
Provides a response when a key is pressed down while the control has the keyboard focus. 
If the pressed key is the Applications key (Key = vkApps), then KeyDown shows the context menu of the control. Otherwise, KeyDown calls the OnKeyDown event handler if one is assigned. 
TCommonCustomForm and descendant of TControl classes--like TCustomGrid--call KeyDown from their methods handling key pressing. They decode the message parameters into the key code, character code, and shift state. They pass them into the called KeyDown method in the Key, KeyChar, and Shift parameters, respectively:  



Parameters

Descriptions



Key



Is the scan code of the pressed keyboard key or $0.
If a pressed key combination can be a shortcut, then Key &lt;&gt; 0 is a virtual key and KeyChar = #0. 
Physical scan codes of the same key can differ under different platforms (Windows or iOS).
Platform-specific units (for example FMX.Platform.Mac.pas) should translate native scan codes to corresponding Windows codes defined in the UITypes unit.  For example, 

vkReturn = $0D;  {  13 } corresponds to the RETURN keyboard key.
vkF2     = $71;  { 113 } corresponds to the F2 keyboard key.



KeyChar



Is the pressed character (digit) or #0.
If a pressed key combination can be treated as a printable character or digit, then Key = 0 and KeyChar contains a pressed symbol according to the current keyboard's input language, keyboard mode (CAPS LOCK and NUM LOCK keys), keyboard Shift state, and IME state. Editors can use this symbol to add into a text being edited. 




Shift



Indicates which shift keys--SHIFT, CTRL, ALT, and CMD (only for Mac)--were down when the specified key was pressed with the control in focus.


If the control has successfully processed the pressed key combination and no additional processing is required, then KeyDown assigns Key = 0 and KeyChar = #0.  
Override the protected KeyDown method to provide other responses when a key is down while the control has keyboard input focus.
See TCommonCustomForm.KeyDown for more information about parameters.
</summary></devnotes></procedure>
      <function name="GetActionLinkClass" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="2066">
        <parameters>
          <retval type="TActionLinkClass"/>
        </parameters>
      <devnotes><summary>


Returns the associated action link class.
FMX.StdCtrls.TScrollBar.GetActionLinkClass inherits from FMX.Types.TFmxObject.GetActionLinkClass. All content below this line refers to FMX.Types.TFmxObject.GetActionLinkClass.
Returns the associated action link class.
Returns the class reference for the TActionLink class or for one of its descendants. 
In TFmxObject, GetActionLinkClass always returns nil.
In descendant classes, GetActionLinkClass should return the appropriate class type for the action link used with the class object. When a control object of the descendant from the TFmxObject class tries to assign a value to the Action property, the setter method for Action calls GetActionLinkClass. If GetActionLinkClass returns a non-nil value, then the action object is assigned to Action. If the control object does not support actions, then GetActionLinkClass should return nil. In this case, attempting to set a value to the Action property raises the following exception:  

StrEActionNoSuported = 'Class %s does not support the action'    
</summary></devnotes></function>
      <procedure name="DoActionClientChanged" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="2067">
      <devnotes><summary>


Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="ActionChange" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="2068">
        <parameters>
          <parameter name="Sender" type="TBasicAction"/>
          <parameter name="CheckDefaults" type="Boolean"/>
        </parameters>
      <devnotes><summary>
Specifies the behavior of a TScrollBar control when Action changes. 
ActionChange uses the Action property of the Sender object to set Action for the Track control of TScrollBar. 
Do not call ActionChange explicitly in an application. It is for internal use.
</summary></devnotes></procedure>
      <property name="Track" visibility="protected" read="FTrack" type="TCustomTrack" file="FMX.StdCtrls.pas" line="2069"><devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></property>
      <property name="MinButton" visibility="protected" read="FMinButton" type="TCustomButton" file="FMX.StdCtrls.pas" line="2070"><devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></property>
      <property name="MaxButton" visibility="protected" read="FMaxButton" type="TCustomButton" file="FMX.StdCtrls.pas" line="2071"><devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></property>
      <procedure name="DoChanged" visibility="protected" procflags="virtual" file="FMX.StdCtrls.pas" line="2072">
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="DefineProperties" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="2073">
        <parameters>
          <parameter name="Filer" type="TFiler"/>
        </parameters>
      <devnotes><summary>




Designates methods for storing an object's unpublished data on a stream such as a form file.
FMX.StdCtrls.TScrollBar.DefineProperties inherits from System.Classes.TComponent.DefineProperties. All content below this line refers to System.Classes.TComponent.DefineProperties.
Designates methods for storing an object's unpublished data on a stream such as a form file.
TComponent overrides the DefineProperties method defined in TPersistent to define &quot;fake&quot; Top and Left properties. These are defined so that components that are not controls can be manipulated at design time. However, the Top and Left properties are hidden, that is, they are not published, because only controls appear at run time.
DefineProperties is virtual; descendent classes can override it. When overriding DefineProperties, be aware that the Ancestor property of Filer might be set, and that this property can determine whether or not it is appropriate to write properties.
DefineProperties is called automatically as part of the component streaming system; do not call it directly.
</summary></devnotes></procedure>
      <function name="GetDefaultSize" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="2074">
        <parameters>
          <retval type="TSizeF"/>
        </parameters>
      <devnotes><summary>
Getter of DefaultSize.
FMX.StdCtrls.TScrollBar.GetDefaultSize inherits from FMX.Controls.TControl.GetDefaultSize. All content below this line refers to FMX.Controls.TControl.GetDefaultSize.
Getter of DefaultSize.


</summary></devnotes></function>
      <procedure name="Loaded" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="2075">
      <devnotes><summary>
Initializes the component after the form file has been read into memory.
FMX.StdCtrls.TScrollBar.Loaded inherits from FMX.Controls.TControl.Loaded. All content below this line refers to FMX.Controls.TControl.Loaded.
Initializes the component after the form file has been read into memory. 
Loaded inherits TComponent.Loaded, realigns the children, if any, and updates the tab list.
For details, see TComponent.Loaded.
</summary></devnotes></procedure>
      <property name="DefaultValueRange" visibility="protected" read="FDefaultValueRange" type="TBaseValueRange" file="FMX.StdCtrls.pas" line="2076"><devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></property>
      <constructor name="Create" visibility="public" file="FMX.StdCtrls.pas" line="2078">
        <parameters>
          <parameter name="AOwner" type="TComponent"/>
        </parameters>
      <devnotes><summary>
Allocates memory and constructs a safely initialized instance of a component.
Allocates memory and constructs a safely initialized instance of a component.
FMX.StdCtrls.TScrollBar.Create inherits from System.Classes.TComponent.Create. All content below this line refers to System.Classes.TComponent.Create.
Allocates memory and constructs a safely initialized instance of a component.
All objects have a Create method that constructs the object. TComponent redefines Create so that, for components, Create also:

Establishes the relationship of a component and its Owner, as indicated by the AOwner parameter.
Sets the ComponentStyle property to csInheritable, meaning that the component can be inherited by a descendent form type.
It is not necessary to explicitly create components added in the Form Designer. These components are created automatically when the application is run, and they are destroyed when the application is closed.
For components created programmatically, that is, not created in the Form Designer, call Create and pass in an owner component as the AOwner parameter. The owner disposes of the component when it is destroyed. If the component is not owned, then use Free when it needs to be destroyed.

Tip:  When passing in Self as the Owner parameter, consider what Self references. If a component creates another component in one of its methods, then Self refers to the first component and not the component being created, which is then owned by the first component.
Note:  The TComponent constructor is virtual in part to allow polymorphic instantiation of class references. This is critical to the streaming system and to the Form Designer. Do not forget to use the override directive when declaring a new component's Create constructor.</summary></devnotes></constructor>
      <destructor name="Destroy" visibility="public" file="FMX.StdCtrls.pas" line="2079">
        <parameters>
        </parameters>
      <devnotes><summary>
Disposes of the component and its owned components.
Disposes of the component and its owned components.
FMX.StdCtrls.TScrollBar.Destroy inherits from System.Classes.TComponent.Destroy. All content below this line refers to System.Classes.TComponent.Destroy.
Disposes of the component and its owned components.
Do not call Destroy directly. Call Free instead. Free verifies that the component is not nil, and only then calls Destroy.
Never explicitly free a component in one of its own event handlers, nor free a component from the event handler of a component that it owns or contains.
To destroy a form, call its Release method. Release waits for all the form's event handlers and the event handlers of the form's components to finish executing before destroying the form.

Note: A form owns all the controls and nonvisual components that are placed on it in design mode. When it is freed, all of these components are automatically freed as well. By default, all forms are owned by the global Application object. When an application terminates, it frees the global Application object, which frees all forms. For objects that are not components, and for components created with a nil owner, be sure to call Free after finishing with the object; otherwise the memory allocated for the object will be lost until the application terminates.</summary></devnotes></destructor>
      <procedure name="AfterConstruction" visibility="public" procflags="override" file="FMX.StdCtrls.pas" line="2080">
      <devnotes><summary>
Responds after the last constructor has executed.
FMX.StdCtrls.TScrollBar.AfterConstruction inherits from System.TObject.AfterConstruction. All content below this line refers to System.TObject.AfterConstruction.
Responds after the last constructor has executed.
AfterConstruction is called automatically after the object's last constructor has executed. Do not call it explicitly in your applications. 
The AfterConstruction method implemented in TObject does nothing. Override this method when creating a class that performs an action after the object is created. For example, TCustomForm overrides AfterConstruction to generate an OnCreate event. 
</summary></devnotes></procedure>
      <property name="ValueRange" visibility="public" read="GetValueRange" write="SetValueRange" type="TValueRange" file="FMX.StdCtrls.pas" line="2081"><devnotes><summary>
Provides access to the Value value, to its Min and Max boundaries, and to the ViewportSize property.
</summary></devnotes></property>
      <property name="Action" visibility="published" read="GetAction" write="SetAction" type="TBasicAction" hoisted="true" file="FMX.StdCtrls.pas" line="2083"/>
      <property name="Align" visibility="published" read="FAlign" write="SetAlign" type="TAlignLayout" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="2084"/>
      <property name="Anchors" visibility="published" read="FAnchors" write="SetAnchors" stored="IsAnchorsStored" type="TAnchors" hoisted="true" file="FMX.StdCtrls.pas" line="2085"/>
      <property name="CanFocus" visibility="published" read="FCanFocus" write="FCanFocus" type="Boolean" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="2086"/>
      <property name="CanParentFocus" visibility="published" read="FCanParentFocus" write="FCanParentFocus" type="Boolean" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="2087"/>
      <property name="ClipChildren" visibility="published" read="FClipChildren" write="SetClipChildren" type="Boolean" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="2088"/>
      <property name="ClipParent" visibility="published" read="FClipParent" write="FClipParent" type="Boolean" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="2089"/>
      <property name="Cursor" visibility="published" read="GetCursor" write="SetCursor" type="TCursor" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="2090"/>
      <property name="DragMode" visibility="published" read="GetDragMode" write="SetDragMode" type="TDragMode" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="2091"/>
      <property name="EnableDragHighlight" visibility="published" read="FEnableDragHighlight" write="FEnableDragHighlight" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="2092"/>
      <property name="Enabled" visibility="published" read="FEnabled" write="SetEnabled" stored="EnabledStored" type="Boolean" hoisted="true" file="FMX.StdCtrls.pas" line="2093"/>
      <property name="Locked" visibility="published" read="FLocked" write="SetLocked" type="Boolean" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="2094"/>
      <property name="Height" visibility="published" read="GetHeight" write="SetHeight" stored="False" type="Single" hoisted="true" file="FMX.StdCtrls.pas" line="2095"/>
      <property name="HelpContext" visibility="published" read="FHelpContext" write="SetHelpContext" stored="IsHelpContextStored" type="THelpContext" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="2096"/>
      <property name="HelpKeyword" visibility="published" read="FHelpKeyword" write="SetHelpKeyword" stored="IsHelpContextStored" type="string" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="2097"/>
      <property name="HelpType" visibility="published" read="FHelpType" write="FHelpType" type="THelpType" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="2098"/>
      <property name="Hint" visibility="published" read="FHint" write="SetHint" stored="HintStored" type="string" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="2099"/>
      <property name="HitTest" visibility="published" read="FHitTest" write="SetHitTest" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="2100"/>
      <property name="Padding" visibility="published" read="GetPadding" write="SetPadding" type="TBounds" hoisted="true" file="FMX.StdCtrls.pas" line="2101"/>
      <property name="Max" visibility="published" read="GetMax" write="SetMax" stored="MaxStored" type="Single" file="FMX.StdCtrls.pas" line="2102"><devnotes><summary>
Specifies the maximum value of this scroll bar for the maximum position of the slider.
Use the Max property to set a maximum value up to which the slider of this scroll bar can go. For instance, if Max is set to 100 (a default value), then attempting to move the slider to the maximum will result in a Value of 100.
</summary></devnotes></property>
      <property name="Min" visibility="published" read="GetMin" write="SetMin" stored="MinStored" type="Single" file="FMX.StdCtrls.pas" line="2103"><devnotes><summary>
Specifies the minimum value of this scroll bar for the minimum position of the slider.
Use the Min property to set a minimum value down to which the slider of this scroll bar can go. For instance, if Min is set to 0 (a default value), then attempting to move the slider to the minimum will result in a Value of 0.
</summary></devnotes></property>
      <property name="Value" visibility="published" read="GetValue" write="SetValue" stored="ValueStored" type="Single" file="FMX.StdCtrls.pas" line="2104"><devnotes><summary>
Specifies the current value of this scroll bar.
Set or get Value to specify or obtain the current value of this scroll bar. You can set Value programmatically or visually, at run time, with any value within the interval delimited by Min and Max.
</summary></devnotes></property>
      <property name="ViewportSize" visibility="published" read="GetViewportSize" write="SetViewportSize" stored="ViewportSizeStored" type="Single" file="FMX.StdCtrls.pas" line="2105"><devnotes><summary>
Specifies the size, in pixels, of the slider of this scroll bar.
Use the ViewportSize property to specify the size of the viewport of this scroll bar, that is, the area, in pixels, of the slider of this scroll. As an example, the picture below shows two scroll bars, one with ViewportSize set to 0 and the other with ViewportSize set to 50.


Tip: Changing the ViewportSize property does not affect the limits (Min or Max) of the Value of this scroll bar.</summary></devnotes></property>
      <property name="SmallChange" visibility="published" read="GetSmallChange" write="SetSmallChange" stored="SmallChangeStored" type="Single" file="FMX.StdCtrls.pas" line="2106"><devnotes><summary>
Controls the number of positions this scroll bar's slider moves on each pressing of the min or max button.
Use the SmallChange property to control the number of positions the slider of this scroll bar forwards or backwards in respect to pressing the max or min buttons.
For instance, setting SmallChange to 10 causes each push of the max or min button make the slider move with exactly 10 positions forwards or backwards.

Tip: If the current position of the slider (reflected by Value) is a number lower than SmallChange, then pressing the min button will bring Value to 0.</summary></devnotes></property>
      <property name="Orientation" visibility="published" read="FOrientation" write="SetOrientation" type="TOrientation" file="FMX.StdCtrls.pas" line="2107"><devnotes><summary>
Specifies the orientation of this scroll bar (left to right or bottom to top).
Use the Orientation property to specify how this scroll bar will be displayed (left to right or bottom to top). Orientation can have one of the following values:



Value

Meaning



Vertical



The scroll bar is rendered with the bottom-to-top orientation.




Horizontal



The scroll bar is rendered with the left-to-right orientation.

</summary></devnotes></property>
      <property name="Opacity" visibility="published" read="FOpacity" write="SetOpacity" stored="IsOpacityStored" type="Single" hoisted="true" file="FMX.StdCtrls.pas" line="2108"/>
      <property name="Margins" visibility="published" read="GetMargins" write="SetMargins" type="TBounds" hoisted="true" file="FMX.StdCtrls.pas" line="2109"/>
      <property name="PopupMenu" visibility="published" read="FPopupMenu" write="SetPopupMenu" stored="IsPopupMenuStored" type="TCustomPopupMenu" hoisted="true" file="FMX.StdCtrls.pas" line="2110"/>
      <property name="Position" visibility="published" read="FPosition" write="SetPosition" stored="IsPositionStored" type="TPosition" hoisted="true" file="FMX.StdCtrls.pas" line="2111"/>
      <property name="RotationAngle" visibility="published" read="GetRotationAngle" write="SetRotationAngle" type="Single" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="2112"/>
      <property name="RotationCenter" visibility="published" read="GetRotationCenter" write="SetRotationCenter" type="TPosition" hoisted="true" file="FMX.StdCtrls.pas" line="2113"/>
      <property name="Scale" visibility="published" read="GetScale" write="SetScale" type="TPosition" hoisted="true" file="FMX.StdCtrls.pas" line="2114"/>
      <property name="Size" visibility="published" read="FSize" write="SetSize" stored="IsSizeStored" type="TControlSize" hoisted="true" file="FMX.StdCtrls.pas" line="2115"/>
      <property name="StyleLookup" visibility="published" read="FStyleLookup" write="SetStyleLookup" type="string" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="2116"/>
      <property name="TabOrder" visibility="published" read="GetTabOrder" write="SetTabOrder" type="TTabOrder" default="-1" hoisted="true" file="FMX.StdCtrls.pas" line="2117"/>
      <property name="TabStop" visibility="published" read="GetTabStop" write="SetTabStop" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="2118"/>
      <property name="TouchTargetExpansion" visibility="published" read="FTouchTargetExpansion" write="SetTouchTargetExpansion" type="TBounds" hoisted="true" file="FMX.StdCtrls.pas" line="2119"/>
      <property name="Visible" visibility="published" read="FVisible" write="SetVisible" stored="VisibleStored" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="2120"/>
      <property name="Width" visibility="published" read="GetWidth" write="SetWidth" stored="False" type="Single" hoisted="true" file="FMX.StdCtrls.pas" line="2121"/>
      <property name="ParentShowHint" visibility="published" read="FParentShowHint" write="SetParentShowHint" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="2122"/>
      <property name="ShowHint" visibility="published" read="FShowHint" write="SetShowHint" stored="IsShowHintStored" type="Boolean" hoisted="true" file="FMX.StdCtrls.pas" line="2123"/>
      <event name="OnApplyStyleLookup" visibility="published" read="FOnApplyStyleLookup" write="FOnApplyStyleLookup" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2125"/>
      <event name="OnChange" visibility="published" read="FOnChange" write="FOnChange" type="TNotifyEvent" file="FMX.StdCtrls.pas" line="2126"><devnotes><summary>
Occurs immediately after the position of the slider on this scroll bar changes.
Write an OnChange event handler to provide additional functionality when changing the position of the slider on this scroll bar component.
</summary></devnotes></event>
      <event name="OnDragEnter" visibility="published" read="FOnDragEnter" write="FOnDragEnter" type="TDragEnterEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2128"/>
      <event name="OnDragLeave" visibility="published" read="FOnDragLeave" write="FOnDragLeave" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2129"/>
      <event name="OnDragOver" visibility="published" read="FOnDragOver" write="FOnDragOver" type="TDragOverEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2130"/>
      <event name="OnDragDrop" visibility="published" read="FOnDragDrop" write="FOnDragDrop" type="TDragDropEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2131"/>
      <event name="OnDragEnd" visibility="published" read="FOnDragEnd" write="FOnDragEnd" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2132"/>
      <event name="OnKeyDown" visibility="published" read="FOnKeyDown" write="FOnKeyDown" type="TKeyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2134"/>
      <event name="OnKeyUp" visibility="published" read="FOnKeyUp" write="FOnKeyUp" type="TKeyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2135"/>
      <event name="OnCanFocus" visibility="published" read="FOnCanFocus" write="FOnCanFocus" type="TCanFocusEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2137"/>
      <event name="OnClick" visibility="published" read="FOnClick" write="SetOnClick" stored="OnClickStored" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2138"/>
      <event name="OnDblClick" visibility="published" read="FOnDblClick" write="FOnDblClick" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2139"/>
      <event name="OnEnter" visibility="published" read="FOnEnter" write="FOnEnter" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2141"/>
      <event name="OnExit" visibility="published" read="FOnExit" write="FOnExit" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2142"/>
      <event name="OnMouseDown" visibility="published" read="FOnMouseDown" write="FOnMouseDown" type="TMouseEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2143"/>
      <event name="OnMouseMove" visibility="published" read="FOnMouseMove" write="FOnMouseMove" type="TMouseMoveEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2144"/>
      <event name="OnMouseUp" visibility="published" read="FOnMouseUp" write="FOnMouseUp" type="TMouseEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2145"/>
      <event name="OnMouseWheel" visibility="published" read="FOnMouseWheel" write="FOnMouseWheel" type="TMouseWheelEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2146"/>
      <event name="OnMouseEnter" visibility="published" read="FOnMouseEnter" write="FOnMouseEnter" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2147"/>
      <event name="OnMouseLeave" visibility="published" read="FOnMouseLeave" write="FOnMouseLeave" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2148"/>
      <event name="OnPainting" visibility="published" read="FOnPainting" write="FOnPainting" type="TOnPaintEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2150"/>
      <event name="OnPaint" visibility="published" read="FOnPaint" write="FOnPaint" type="TOnPaintEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2151"/>
      <event name="OnResize" visibility="published" read="FOnResize" write="FOnResize" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2152"/>
      <event name="OnResized" visibility="published" read="FOnResized" write="FOnResized" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2153"/>
    </members>
  <devnotes><summary>
Represents a standard scroll bar that is used to scroll the contents of a window, form, or a control.
TScrollBar adds a free-standing scroll bar to a form. Many controls have properties that add scroll bars that are an integral part of the control. However, TScrollBar allows controls that do not have integrated scroll bars or groupings of controls to be scrolled when the user manipulates the TScrollBar object.

</summary></devnotes></class>
  <class name="TSmallScrollBar" file="FMX.StdCtrls.pas" line="2158">
    
    <members>
      <procedure name="ApplyStyle" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="2160">
      <devnotes><summary>


Customizes styles in complex objects.
FMX.StdCtrls.TSmallScrollBar.ApplyStyle inherits from FMX.Controls.TStyledControl.ApplyStyle. All content below this line refers to FMX.Controls.TStyledControl.ApplyStyle.
Customizes styles in complex objects.
TStyledControl descendants override it to apply styles in concordance with their primitive components.      
Do not call ApplyStyle explicitly in an application. It is called by the ApplyStyleLookup method when object styles are updated.
For an example of an ApplyStyle implementation, see &quot;TCalloutPanel:Style Contracts&quot; in FireMonkey Component Design.
</summary></devnotes></procedure>
      <function name="GetDefaultSize" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="2161">
        <parameters>
          <retval type="TSizeF"/>
        </parameters>
      <devnotes><summary>


Getter of DefaultSize.
FMX.StdCtrls.TSmallScrollBar.GetDefaultSize inherits from FMX.Controls.TControl.GetDefaultSize. All content below this line refers to FMX.Controls.TControl.GetDefaultSize.
Getter of DefaultSize.


</summary></devnotes></function>
      <constructor name="Create" visibility="public" file="FMX.StdCtrls.pas" line="2163">
        <parameters>
          <parameter name="AOwner" type="TComponent"/>
        </parameters>
      <devnotes><summary>


Allocates memory and constructs a safely initialized instance of a component.
Allocates memory and constructs a safely initialized instance of a component.
FMX.StdCtrls.TSmallScrollBar.Create inherits from System.Classes.TComponent.Create. All content below this line refers to System.Classes.TComponent.Create.
Allocates memory and constructs a safely initialized instance of a component.
All objects have a Create method that constructs the object. TComponent redefines Create so that, for components, Create also:

Establishes the relationship of a component and its Owner, as indicated by the AOwner parameter.
Sets the ComponentStyle property to csInheritable, meaning that the component can be inherited by a descendent form type.
It is not necessary to explicitly create components added in the Form Designer. These components are created automatically when the application is run, and they are destroyed when the application is closed.
For components created programmatically, that is, not created in the Form Designer, call Create and pass in an owner component as the AOwner parameter. The owner disposes of the component when it is destroyed. If the component is not owned, then use Free when it needs to be destroyed.

Tip:  When passing in Self as the Owner parameter, consider what Self references. If a component creates another component in one of its methods, then Self refers to the first component and not the component being created, which is then owned by the first component.
Note:  The TComponent constructor is virtual in part to allow polymorphic instantiation of class references. This is critical to the streaming system and to the Form Designer. Do not forget to use the override directive when declaring a new component's Create constructor.</summary></devnotes></constructor>
    </members>
  <devnotes><summary>
Represents a variation of a standard scroll bar.
A TSmallScrollBar component is a trimmed-down standard TScrollBar without the min and max buttons. Otherwise the behavior is the same.

</summary></devnotes></class>
  <enum name="TAniIndicatorStyle" file="FMX.StdCtrls.pas" line="2168">
    <element value="0" name="Linear" file="FMX.StdCtrls.pas" line="2168"/>
    <element value="1" name="Circular" file="FMX.StdCtrls.pas" line="2168"/>
  </enum>
  <class name="TAniIndicator" file="FMX.StdCtrls.pas" line="2170">
    
    <members>
      <class name="TRotationControl" visibility="private" alias="FMX.StdCtrls.TRotationControl" file="FMX.StdCtrls.pas" line="2172">
        
        <members>
          <property name="RotationAngle" visibility="public" read="GetRotationAngle" write="SetRotationAngle" type="Single" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="2174"/>
        </members>
      </class>
      <field name="FLayout" type="TControl" visibility="private" size="4" offset="944" file="FMX.StdCtrls.pas" line="2177"/>
      <field name="FAni" type="TAnimation" visibility="private" size="4" offset="948" file="FMX.StdCtrls.pas" line="2178"/>
      <field name="FStyle" type="TAniIndicatorStyle" visibility="private" size="1" offset="952" file="FMX.StdCtrls.pas" line="2179"/>
      <field name="FFill" type="TBrush" visibility="private" size="4" offset="956" file="FMX.StdCtrls.pas" line="2180"/>
      <procedure name="SetStyle" visibility="private" file="FMX.StdCtrls.pas" line="2181">
        <parameters>
          <parameter name="Value" type="TAniIndicatorStyle" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="ApplyStyle" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="2183">
      <devnotes><summary>
Customizes styles in complex objects.
FMX.StdCtrls.TAniIndicator.ApplyStyle inherits from FMX.Controls.TStyledControl.ApplyStyle. All content below this line refers to FMX.Controls.TStyledControl.ApplyStyle.
Customizes styles in complex objects.
TStyledControl descendants override it to apply styles in concordance with their primitive components.      
Do not call ApplyStyle explicitly in an application. It is called by the ApplyStyleLookup method when object styles are updated.
For an example of an ApplyStyle implementation, see &quot;TCalloutPanel:Style Contracts&quot; in FireMonkey Component Design.
</summary></devnotes></procedure>
      <procedure name="FreeStyle" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="2184">
      <devnotes><summary>
Frees the style of TStyledControl.
FMX.StdCtrls.TAniIndicator.FreeStyle inherits from FMX.Controls.TStyledControl.FreeStyle. All content below this line refers to FMX.Controls.TStyledControl.FreeStyle.
Frees the style of TStyledControl.
Override it to free additional component-specific style resources.
</summary></devnotes></procedure>
      <procedure name="SetEnabled" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="2185">
        <parameters>
          <parameter name="Value" type="Boolean" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Setter of Enabled.
FMX.StdCtrls.TAniIndicator.SetEnabled inherits from FMX.Controls.TControl.SetEnabled. All content below this line refers to FMX.Controls.TControl.SetEnabled.
Setter of Enabled.


</summary></devnotes></procedure>
      <procedure name="DefineProperties" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="2186">
        <parameters>
          <parameter name="Filer" type="TFiler"/>
        </parameters>
      <devnotes><summary>




Designates methods for storing an object's unpublished data on a stream such as a form file.
FMX.StdCtrls.TAniIndicator.DefineProperties inherits from System.Classes.TComponent.DefineProperties. All content below this line refers to System.Classes.TComponent.DefineProperties.
Designates methods for storing an object's unpublished data on a stream such as a form file.
TComponent overrides the DefineProperties method defined in TPersistent to define &quot;fake&quot; Top and Left properties. These are defined so that components that are not controls can be manipulated at design time. However, the Top and Left properties are hidden, that is, they are not published, because only controls appear at run time.
DefineProperties is virtual; descendent classes can override it. When overriding DefineProperties, be aware that the Ancestor property of Filer might be set, and that this property can determine whether or not it is appropriate to write properties.
DefineProperties is called automatically as part of the component streaming system; do not call it directly.
</summary></devnotes></procedure>
      <procedure name="Paint" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="2187">
      <devnotes><summary>
Renders the control's surface. 
FMX.StdCtrls.TAniIndicator.Paint inherits from FMX.Controls.TControl.Paint. All content below this line refers to FMX.Controls.TControl.Paint.
Renders the control's surface. 
The Paint method is called by DoPaint when a control is being painted by the PaintTo method. Before DoPaint, Painting is called. AfterPaint is called immediately after. 
FireMonkey internally calls Paint to paint the control when the window is being painted. You must not call Paint explicitly.
The base class TControl implements an empty Paint. The descendants of TControl override Paint to provide specific rendering of the respective controls.
For example, Paint methods in classes of the FMX.Objects unit draw and fill shapes using the properties defined in these classes. See the descriptions of these classes to find the properties of the respective shapes. 
</summary></devnotes></procedure>
      <function name="EnabledStored" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="2188">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>


Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></function>
      <constructor name="Create" visibility="public" file="FMX.StdCtrls.pas" line="2190">
        <parameters>
          <parameter name="AOwner" type="TComponent"/>
        </parameters>
      <devnotes><summary>
Allocates memory and constructs a safely initialized instance of a component.
Allocates memory and constructs a safely initialized instance of a component.
FMX.StdCtrls.TAniIndicator.Create inherits from System.Classes.TComponent.Create. All content below this line refers to System.Classes.TComponent.Create.
Allocates memory and constructs a safely initialized instance of a component.
All objects have a Create method that constructs the object. TComponent redefines Create so that, for components, Create also:

Establishes the relationship of a component and its Owner, as indicated by the AOwner parameter.
Sets the ComponentStyle property to csInheritable, meaning that the component can be inherited by a descendent form type.
It is not necessary to explicitly create components added in the Form Designer. These components are created automatically when the application is run, and they are destroyed when the application is closed.
For components created programmatically, that is, not created in the Form Designer, call Create and pass in an owner component as the AOwner parameter. The owner disposes of the component when it is destroyed. If the component is not owned, then use Free when it needs to be destroyed.

Tip:  When passing in Self as the Owner parameter, consider what Self references. If a component creates another component in one of its methods, then Self refers to the first component and not the component being created, which is then owned by the first component.
Note:  The TComponent constructor is virtual in part to allow polymorphic instantiation of class references. This is critical to the streaming system and to the Form Designer. Do not forget to use the override directive when declaring a new component's Create constructor.</summary></devnotes></constructor>
      <destructor name="Destroy" visibility="public" file="FMX.StdCtrls.pas" line="2191">
        <parameters>
        </parameters>
      <devnotes><summary>
Disposes of the component and its owned components.
Disposes of the component and its owned components.
FMX.StdCtrls.TAniIndicator.Destroy inherits from System.Classes.TComponent.Destroy. All content below this line refers to System.Classes.TComponent.Destroy.
Disposes of the component and its owned components.
Do not call Destroy directly. Call Free instead. Free verifies that the component is not nil, and only then calls Destroy.
Never explicitly free a component in one of its own event handlers, nor free a component from the event handler of a component that it owns or contains.
To destroy a form, call its Release method. Release waits for all the form's event handlers and the event handlers of the form's components to finish executing before destroying the form.

Note: A form owns all the controls and nonvisual components that are placed on it in design mode. When it is freed, all of these components are automatically freed as well. By default, all forms are owned by the global Application object. When an application terminates, it frees the global Application object, which frees all forms. For objects that are not components, and for components created with a nil owner, be sure to call Free after finishing with the object; otherwise the memory allocated for the object will be lost until the application terminates.</summary></devnotes></destructor>
      <property name="Action" visibility="published" read="GetAction" write="SetAction" type="TBasicAction" hoisted="true" file="FMX.StdCtrls.pas" line="2193"/>
      <property name="Align" visibility="published" read="FAlign" write="SetAlign" type="TAlignLayout" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="2194"/>
      <property name="Anchors" visibility="published" read="FAnchors" write="SetAnchors" stored="IsAnchorsStored" type="TAnchors" hoisted="true" file="FMX.StdCtrls.pas" line="2195"/>
      <property name="Cursor" visibility="published" read="GetCursor" write="SetCursor" type="TCursor" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="2196"/>
      <property name="DragMode" visibility="published" read="GetDragMode" write="SetDragMode" type="TDragMode" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="2197"/>
      <property name="EnableDragHighlight" visibility="published" read="FEnableDragHighlight" write="FEnableDragHighlight" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="2198"/>
      <property name="Enabled" visibility="published" read="FEnabled" write="SetEnabled" stored="EnabledStored" type="Boolean" hoisted="true" file="FMX.StdCtrls.pas" line="2199"/>
      <property name="Locked" visibility="published" read="FLocked" write="SetLocked" type="Boolean" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="2200"/>
      <property name="Height" visibility="published" read="GetHeight" write="SetHeight" stored="False" type="Single" hoisted="true" file="FMX.StdCtrls.pas" line="2201"/>
      <property name="HelpContext" visibility="published" read="FHelpContext" write="SetHelpContext" stored="IsHelpContextStored" type="THelpContext" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="2202"/>
      <property name="HelpKeyword" visibility="published" read="FHelpKeyword" write="SetHelpKeyword" stored="IsHelpContextStored" type="string" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="2203"/>
      <property name="HelpType" visibility="published" read="FHelpType" write="FHelpType" type="THelpType" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="2204"/>
      <property name="StyleLookup" visibility="published" read="FStyleLookup" write="SetStyleLookup" type="string" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="2205"/>
      <property name="Hint" visibility="published" read="FHint" write="SetHint" stored="HintStored" type="string" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="2206"/>
      <property name="HitTest" visibility="published" read="FHitTest" write="SetHitTest" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="2207"/>
      <property name="Padding" visibility="published" read="GetPadding" write="SetPadding" type="TBounds" hoisted="true" file="FMX.StdCtrls.pas" line="2208"/>
      <property name="Opacity" visibility="published" read="FOpacity" write="SetOpacity" stored="IsOpacityStored" type="Single" hoisted="true" file="FMX.StdCtrls.pas" line="2209"/>
      <property name="Margins" visibility="published" read="GetMargins" write="SetMargins" type="TBounds" hoisted="true" file="FMX.StdCtrls.pas" line="2210"/>
      <property name="PopupMenu" visibility="published" read="FPopupMenu" write="SetPopupMenu" stored="IsPopupMenuStored" type="TCustomPopupMenu" hoisted="true" file="FMX.StdCtrls.pas" line="2211"/>
      <property name="Position" visibility="published" read="FPosition" write="SetPosition" stored="IsPositionStored" type="TPosition" hoisted="true" file="FMX.StdCtrls.pas" line="2212"/>
      <property name="RotationAngle" visibility="published" read="GetRotationAngle" write="SetRotationAngle" type="Single" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="2213"/>
      <property name="RotationCenter" visibility="published" read="GetRotationCenter" write="SetRotationCenter" type="TPosition" hoisted="true" file="FMX.StdCtrls.pas" line="2214"/>
      <property name="Scale" visibility="published" read="GetScale" write="SetScale" type="TPosition" hoisted="true" file="FMX.StdCtrls.pas" line="2215"/>
      <property name="Size" visibility="published" read="FSize" write="SetSize" stored="IsSizeStored" type="TControlSize" hoisted="true" file="FMX.StdCtrls.pas" line="2216"/>
      <property name="Style" visibility="published" read="FStyle" write="SetStyle" type="TAniIndicatorStyle" default="0" file="FMX.StdCtrls.pas" line="2217"><devnotes><summary>
Specifies the way this animated indicator looks (either linear or circular).
Use the Style property to specify how this animated indicator looks. You can set its look as a linear indicator (Linear) or a circular indicator (Circular). The following picture illustrates the two rendering modes.

Enable or disable the rotating effect by setting the Enabled property to either True or False.
</summary></devnotes></property>
      <property name="TouchTargetExpansion" visibility="published" read="FTouchTargetExpansion" write="SetTouchTargetExpansion" type="TBounds" hoisted="true" file="FMX.StdCtrls.pas" line="2218"/>
      <property name="Visible" visibility="published" read="FVisible" write="SetVisible" stored="VisibleStored" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="2219"/>
      <property name="Width" visibility="published" read="GetWidth" write="SetWidth" stored="False" type="Single" hoisted="true" file="FMX.StdCtrls.pas" line="2220"/>
      <property name="ParentShowHint" visibility="published" read="FParentShowHint" write="SetParentShowHint" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="2221"/>
      <property name="ShowHint" visibility="published" read="FShowHint" write="SetShowHint" stored="IsShowHintStored" type="Boolean" hoisted="true" file="FMX.StdCtrls.pas" line="2222"/>
      <event name="OnApplyStyleLookup" visibility="published" read="FOnApplyStyleLookup" write="FOnApplyStyleLookup" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2224"/>
      <event name="OnDragEnter" visibility="published" read="FOnDragEnter" write="FOnDragEnter" type="TDragEnterEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2226"/>
      <event name="OnDragLeave" visibility="published" read="FOnDragLeave" write="FOnDragLeave" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2227"/>
      <event name="OnDragOver" visibility="published" read="FOnDragOver" write="FOnDragOver" type="TDragOverEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2228"/>
      <event name="OnDragDrop" visibility="published" read="FOnDragDrop" write="FOnDragDrop" type="TDragDropEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2229"/>
      <event name="OnDragEnd" visibility="published" read="FOnDragEnd" write="FOnDragEnd" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2230"/>
      <event name="OnKeyDown" visibility="published" read="FOnKeyDown" write="FOnKeyDown" type="TKeyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2232"/>
      <event name="OnKeyUp" visibility="published" read="FOnKeyUp" write="FOnKeyUp" type="TKeyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2233"/>
      <event name="OnCanFocus" visibility="published" read="FOnCanFocus" write="FOnCanFocus" type="TCanFocusEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2235"/>
      <event name="OnClick" visibility="published" read="FOnClick" write="SetOnClick" stored="OnClickStored" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2236"/>
      <event name="OnDblClick" visibility="published" read="FOnDblClick" write="FOnDblClick" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2237"/>
      <event name="OnEnter" visibility="published" read="FOnEnter" write="FOnEnter" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2239"/>
      <event name="OnExit" visibility="published" read="FOnExit" write="FOnExit" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2240"/>
      <event name="OnMouseDown" visibility="published" read="FOnMouseDown" write="FOnMouseDown" type="TMouseEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2241"/>
      <event name="OnMouseMove" visibility="published" read="FOnMouseMove" write="FOnMouseMove" type="TMouseMoveEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2242"/>
      <event name="OnMouseUp" visibility="published" read="FOnMouseUp" write="FOnMouseUp" type="TMouseEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2243"/>
      <event name="OnMouseWheel" visibility="published" read="FOnMouseWheel" write="FOnMouseWheel" type="TMouseWheelEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2244"/>
      <event name="OnMouseEnter" visibility="published" read="FOnMouseEnter" write="FOnMouseEnter" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2245"/>
      <event name="OnMouseLeave" visibility="published" read="FOnMouseLeave" write="FOnMouseLeave" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2246"/>
      <event name="OnPainting" visibility="published" read="FOnPainting" write="FOnPainting" type="TOnPaintEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2248"/>
      <event name="OnPaint" visibility="published" read="FOnPaint" write="FOnPaint" type="TOnPaintEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2249"/>
      <event name="OnResize" visibility="published" read="FOnResize" write="FOnResize" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2250"/>
      <event name="OnResized" visibility="published" read="FOnResized" write="FOnResized" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2251"/>
    </members>
  <devnotes><summary>
Represents an animated spinning indicator used for illustrating an indefinite waiting time for application processes.
Use a TAniIndicator in applications where you need to inform the user that a task that takes an indefinite amount of time is in progress. Enable or disable the spinning effect by controlling the state of the Enabled property (True or False). 
An animated spinning indicator can be rendered as lines or as circles:

You can also style TAniIndicator to be a Metropolis UI  indeterminate ring progress bar (Windows 8 style):

For more information about the Metropolis UI indeterminate ring progress indicator, see Creating an Animated Indeterminate Progress Ring and Developing Metropolis UI Applications.

Note:
When a task with a definite amount of time or operations is in progress, we recommend that you use a TProgressBar to illustrate the progress.</summary></devnotes></class>
  <class name="TArcDial" file="FMX.StdCtrls.pas" line="2256">
    
    <interfaces>
      <implements name="IValueRange"/>
    </interfaces>
    <members>
      <field name="FValueRange" type="TValueRange" visibility="private" size="4" offset="992" file="FMX.StdCtrls.pas" line="2258"/>
      <field name="FValueChanged" type="Boolean" visibility="private" size="1" offset="996" file="FMX.StdCtrls.pas" line="2259"/>
      <field name="FPressing" type="Boolean" visibility="private" size="1" offset="997" file="FMX.StdCtrls.pas" line="2260"/>
      <field name="FOnChange" type="TNotifyEvent" visibility="private" size="8" offset="1000" file="FMX.StdCtrls.pas" line="2261"/>
      <field name="FSaveValue" type="Single" visibility="private" size="4" offset="1008" file="FMX.StdCtrls.pas" line="2262"/>
      <field name="FTracking" type="Boolean" visibility="private" size="1" offset="1012" file="FMX.StdCtrls.pas" line="2263"/>
      <field name="FShowValue" type="Boolean" visibility="private" size="1" offset="1013" file="FMX.StdCtrls.pas" line="2264"/>
      <field name="FOldValue" type="Single" visibility="private" size="4" offset="1016" file="FMX.StdCtrls.pas" line="2265"/>
      <field name="FDefaultValueRange" type="TBaseValueRange" visibility="private" size="4" offset="1020" file="FMX.StdCtrls.pas" line="2266"/>
      <procedure name="SetValue" visibility="private" file="FMX.StdCtrls.pas" line="2267">
        <parameters>
          <parameter name="Value" type="Single" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetShowValue" visibility="private" file="FMX.StdCtrls.pas" line="2268">
        <parameters>
          <parameter name="Value" type="Boolean" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="DefStored" visibility="private" file="FMX.StdCtrls.pas" line="2269">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <function name="GetValueRange" visibility="private" file="FMX.StdCtrls.pas" line="2270">
        <parameters>
          <retval type="TCustomValueRange">
            <devnotes>
               <summary>Extends the TBaseValueRange class providing methods and
               properties used to control the correctness of the Value handling within
               its Min to Max range.</summary>
            </devnotes>
          </retval>
        </parameters>
      </function>
      <procedure name="SetValueRange" visibility="private" file="FMX.StdCtrls.pas" line="2271">
        <parameters>
          <parameter name="AValue" type="TCustomValueRange" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetValueRange_" visibility="private" file="FMX.StdCtrls.pas" line="2272">
        <parameters>
          <parameter name="Value" type="TValueRange" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="GetValue" visibility="private" file="FMX.StdCtrls.pas" line="2273">
        <parameters>
          <retval type="Single"/>
        </parameters>
      </function>
      <function name="GetFrequency" visibility="private" file="FMX.StdCtrls.pas" line="2274">
        <parameters>
          <retval type="Single"/>
        </parameters>
      </function>
      <procedure name="SetFrequency" visibility="private" file="FMX.StdCtrls.pas" line="2275">
        <parameters>
          <parameter name="Value" type="Single" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="FrequencyStored" visibility="private" file="FMX.StdCtrls.pas" line="2276">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <function name="ValueStored" visibility="private" file="FMX.StdCtrls.pas" line="2277">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <function name="Tick" visibility="protected" file="FMX.StdCtrls.pas" line="2279">
        <parameters>
          <retval type="TControl"/>
        </parameters>
      <devnotes><summary>
Used internally to determine the rotation angle.
</summary></devnotes></function>
      <function name="Text" visibility="protected" file="FMX.StdCtrls.pas" line="2280">
        <parameters>
          <retval type="TText"/>
        </parameters>
      <devnotes><summary>
Used internally to render the text that displays the value of this arc dial component.
</summary></devnotes></function>
      <procedure name="ApplyStyle" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="2281">
      <devnotes><summary>
Customizes styles in complex objects.
FMX.StdCtrls.TArcDial.ApplyStyle inherits from FMX.Controls.TStyledControl.ApplyStyle. All content below this line refers to FMX.Controls.TStyledControl.ApplyStyle.
Customizes styles in complex objects.
TStyledControl descendants override it to apply styles in concordance with their primitive components.      
Do not call ApplyStyle explicitly in an application. It is called by the ApplyStyleLookup method when object styles are updated.
For an example of an ApplyStyle implementation, see &quot;TCalloutPanel:Style Contracts&quot; in FireMonkey Component Design.
</summary></devnotes></procedure>
      <function name="CanObserve" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="2282">
        <parameters>
          <parameter name="ID" type="Integer" paramflags="const"/>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>


Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></function>
      <function name="GetData" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="2283">
        <parameters>
          <retval type="TValue">
            <attributes>
              <attribute name="HPPGENAttribute"/>
            </attributes>
          </retval>
        </parameters>
      <devnotes><summary>
Protected getter implementation for the Data property.
FMX.StdCtrls.TArcDial.GetData inherits from FMX.Types.TFmxObject.GetData. All content below this line refers to FMX.Types.TFmxObject.GetData.
Protected getter implementation for the Data property.
</summary></devnotes></function>
      <procedure name="SetData" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="2284">
        <parameters>
          <parameter name="Value" type="TValue" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Protected setter implementation for the Data property.
FMX.StdCtrls.TArcDial.SetData inherits from FMX.Types.TFmxObject.SetData. All content below this line refers to FMX.Types.TFmxObject.SetData.
Protected setter implementation for the Data property.
</summary></devnotes></procedure>
      <procedure name="Loaded" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="2285">
      <devnotes><summary>
Initializes the control after the form file has been read into memory and loads its presentation.
FMX.StdCtrls.TArcDial.Loaded inherits from FMX.Controls.Presentation.TPresentedControl.Loaded. All content below this line refers to FMX.Controls.Presentation.TPresentedControl.Loaded.
Initializes the control after the form file has been read into memory and loads its presentation.
For details, see TControl.Loaded.

 See Also
FMX.Controls.Presentation.TPresentedControl.LoadPresentation
FMX.Controls.TControl.Loaded

</summary></devnotes></procedure>
      <function name="GetActionLinkClass" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="2286">
        <parameters>
          <retval type="TActionLinkClass"/>
        </parameters>
      <devnotes><summary>


Returns the associated action link class.
FMX.StdCtrls.TArcDial.GetActionLinkClass inherits from FMX.Types.TFmxObject.GetActionLinkClass. All content below this line refers to FMX.Types.TFmxObject.GetActionLinkClass.
Returns the associated action link class.
Returns the class reference for the TActionLink class or for one of its descendants. 
In TFmxObject, GetActionLinkClass always returns nil.
In descendant classes, GetActionLinkClass should return the appropriate class type for the action link used with the class object. When a control object of the descendant from the TFmxObject class tries to assign a value to the Action property, the setter method for Action calls GetActionLinkClass. If GetActionLinkClass returns a non-nil value, then the action object is assigned to Action. If the control object does not support actions, then GetActionLinkClass should return nil. In this case, attempting to set a value to the Action property raises the following exception:  

StrEActionNoSuported = 'Class %s does not support the action'    
</summary></devnotes></function>
      <procedure name="ActionChange" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="2287">
        <parameters>
          <parameter name="Sender" type="TBasicAction"/>
          <parameter name="CheckDefaults" type="Boolean"/>
        </parameters>
      <devnotes><summary>
Specifies the behavior of a TArcDial control when Action changes. 
Depending on the CheckDefaults value,  ActionChange uses the TValueRangeAction.ValueRange property of the Sender action to set the new value to the  
ValueRange property of TArcDial. Then ActionChange calls the inherited TControl.ActionChange method.  
Do not call ActionChange explicitly in an application. It is for internal use.
</summary></devnotes></procedure>
      <procedure name="BeforeChangeProc" visibility="protected" file="FMX.StdCtrls.pas" line="2288">
        <parameters>
          <parameter name="Sender" type="TObject"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="ValueRangeChangeProc" visibility="protected" file="FMX.StdCtrls.pas" line="2289">
        <parameters>
          <parameter name="Sender" type="TObject"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="AfterChangedProc" visibility="protected" procflags="virtual" file="FMX.StdCtrls.pas" line="2290">
        <parameters>
          <parameter name="Sender" type="TObject"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <function name="GetDefaultSize" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="2291">
        <parameters>
          <retval type="TSizeF"/>
        </parameters>
      <devnotes><summary>
Getter of DefaultSize.
FMX.StdCtrls.TArcDial.GetDefaultSize inherits from FMX.Controls.TControl.GetDefaultSize. All content below this line refers to FMX.Controls.TControl.GetDefaultSize.
Getter of DefaultSize.


</summary></devnotes></function>
      <property name="DefaultValueRange" visibility="protected" read="FDefaultValueRange" type="TBaseValueRange" file="FMX.StdCtrls.pas" line="2292"><devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></property>
      <constructor name="Create" visibility="public" file="FMX.StdCtrls.pas" line="2294">
        <parameters>
          <parameter name="AOwner" type="TComponent"/>
        </parameters>
      <devnotes><summary>
Creates a new instance of TPresentedControl.
FMX.StdCtrls.TArcDial.Create inherits from FMX.Controls.Presentation.TPresentedControl.Create. All content below this line refers to FMX.Controls.Presentation.TPresentedControl.Create.
Creates a new instance of TPresentedControl.
AOwner takes ownership of the control and becomes responsible of destroying the control once the control is no longer necessary.
The control constructor creates a data model for the control. DefineModelClass determines the default class of data model for each subclass of TPresentedControl.
Create also sets the value of the CanUseDefaultPresentation property to True.

 See Also
System.Classes.TComponent.Create
FMX.Controls.Presentation.TPresentedControl.Model
FMX.Controls.Presentation.TPresentedControl.DefineModelClass
FMX.Controls.Presentation.TPresentedControl.Destroy
FMX.Controls.Presentation.TPresentedControl.CanUseDefaultPresentation

</summary></devnotes></constructor>
      <destructor name="Destroy" visibility="public" file="FMX.StdCtrls.pas" line="2295">
        <parameters>
        </parameters>
      <devnotes><summary>
Destroys this instance of TPresentedControl.
FMX.StdCtrls.TArcDial.Destroy inherits from FMX.Controls.Presentation.TPresentedControl.Destroy. All content below this line refers to FMX.Controls.Presentation.TPresentedControl.Destroy.
Destroys this instance of TPresentedControl.

 See Also
FMX.Controls.Presentation.TPresentedControl.Create

</summary></devnotes></destructor>
      <procedure name="AfterConstruction" visibility="public" procflags="override" file="FMX.StdCtrls.pas" line="2296">
      <devnotes><summary>
Responds after the last constructor has executed and loads the control presentation.
FMX.StdCtrls.TArcDial.AfterConstruction inherits from FMX.Controls.Presentation.TPresentedControl.AfterConstruction. All content below this line refers to FMX.Controls.Presentation.TPresentedControl.AfterConstruction.
Responds after the last constructor has executed and loads the control presentation.
AfterConstruction is called automatically after the object's last constructor has executed. Do not call it explicitly in your applications.
</summary></devnotes></procedure>
      <property name="ValueRange" visibility="public" read="FValueRange" write="SetValueRange_" type="TValueRange" file="FMX.StdCtrls.pas" line="2297"><devnotes><summary>
Provides access to the Value and  Frequency properties.
</summary></devnotes></property>
      <procedure name="MouseDown" visibility="public" procflags="override" file="FMX.StdCtrls.pas" line="2298">
        <parameters>
          <parameter name="Button" type="TMouseButton"/>
          <parameter name="Shift" type="TShiftState"/>
          <parameter name="X" type="Single"/>
          <parameter name="Y" type="Single"/>
        </parameters>
      <devnotes><summary>
OnMouseDown event dispatcher. 
FMX.StdCtrls.TArcDial.MouseDown inherits from FMX.Controls.TControl.MouseDown. All content below this line refers to FMX.Controls.TControl.MouseDown.
OnMouseDown event dispatcher. 
A control calls MouseDown in response to any of mouse-down messages, decoding the message parameters into the shift-key state and position, which it passes in the Shift, X, and Y parameters, respectively:

Button determines which mouse button is pressed: left, right, or middle.
Shift indicates which shift keys--SHIFT, CTRL, ALT, and CMD (only for Mac)--were down when the user pressed the mouse button.
X and Y are the pixel coordinates of the mouse pointer within the client area of the control. If Button is mbLeft, MouseDown sets PressedPosition as a TPointF(X,Y).
Override the protected MouseDown method to provide other responses when a mouse button is down while the cursor is over the control.

</summary></devnotes></procedure>
      <procedure name="MouseMove" visibility="public" procflags="override" file="FMX.StdCtrls.pas" line="2299">
        <parameters>
          <parameter name="Shift" type="TShiftState"/>
          <parameter name="X" type="Single"/>
          <parameter name="Y" type="Single"/>
        </parameters>
      <devnotes><summary>
OnMouseMove event dispatcher. 
FMX.StdCtrls.TArcDial.MouseMove inherits from FMX.Controls.TControl.MouseMove. All content below this line refers to FMX.Controls.TControl.MouseMove.
OnMouseMove event dispatcher. 
As the mouse cursor moves across a control, this method is called repeatedly. Each time it is called with the new coordinates that reflect the continuous path of the mouse cursor across the screen real estate covered by the control's visual representation:

Shift indicates which shift keys--SHIFT, CTRL, ALT, and CMD (only for Mac)--were down when the mouse cursor is over the control.
X and Y are the pixel coordinates of the mouse pointer within the client area of the control.
Override the protected MouseMove method to provide other responses when the mouse cursor moves over the control.
</summary></devnotes></procedure>
      <procedure name="MouseUp" visibility="public" procflags="override" file="FMX.StdCtrls.pas" line="2300">
        <parameters>
          <parameter name="Button" type="TMouseButton"/>
          <parameter name="Shift" type="TShiftState"/>
          <parameter name="X" type="Single"/>
          <parameter name="Y" type="Single"/>
        </parameters>
      <devnotes><summary>
OnMouseUp event dispatcher. 
FMX.StdCtrls.TArcDial.MouseUp inherits from FMX.Controls.TControl.MouseUp. All content below this line refers to FMX.Controls.TControl.MouseUp.
OnMouseUp event dispatcher. 
A control calls MouseUp in response to any of mouse-up messages, decoding the message parameters into the shift-key state and position, which it passes in the Shift, X and Y parameters, respectively: 

Button determines which mouse button was previously pressed: left, right, or middle.
Shift indicates which shift keys--SHIFT, CTRL, ALT, and CMD (only for Mac)--were down when the pressed mouse button is released.
X and Y are the pixel coordinates of the mouse pointer within the client area of the control.
Override the protected MouseUp method to provide other responses when the mouse button previously pressed is released while the cursor is over the control.
</summary></devnotes></procedure>
      <property name="Action" visibility="published" read="GetAction" write="SetAction" type="TBasicAction" hoisted="true" file="FMX.StdCtrls.pas" line="2303"/>
      <property name="Align" visibility="published" read="FAlign" write="SetAlign" type="TAlignLayout" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="2304"/>
      <property name="Anchors" visibility="published" read="FAnchors" write="SetAnchors" stored="IsAnchorsStored" type="TAnchors" hoisted="true" file="FMX.StdCtrls.pas" line="2305"/>
      <property name="ClipChildren" visibility="published" read="FClipChildren" write="SetClipChildren" type="Boolean" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="2306"/>
      <property name="ClipParent" visibility="published" read="FClipParent" write="FClipParent" type="Boolean" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="2307"/>
      <property name="ControlType" visibility="published" read="GetControlType" write="SetControlType" type="TControlType" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="2308"/>
      <property name="Cursor" visibility="published" read="GetCursor" write="SetCursor" type="TCursor" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="2309"/>
      <property name="DragMode" visibility="published" read="GetDragMode" write="SetDragMode" type="TDragMode" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="2310"/>
      <property name="EnableDragHighlight" visibility="published" read="FEnableDragHighlight" write="FEnableDragHighlight" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="2311"/>
      <property name="Enabled" visibility="published" read="FEnabled" write="SetEnabled" stored="EnabledStored" type="Boolean" hoisted="true" file="FMX.StdCtrls.pas" line="2312"/>
      <property name="Locked" visibility="published" read="FLocked" write="SetLocked" type="Boolean" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="2313"/>
      <property name="Height" visibility="published" read="GetHeight" write="SetHeight" stored="False" type="Single" hoisted="true" file="FMX.StdCtrls.pas" line="2314"/>
      <property name="HelpContext" visibility="published" read="FHelpContext" write="SetHelpContext" stored="IsHelpContextStored" type="THelpContext" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="2315"/>
      <property name="HelpKeyword" visibility="published" read="FHelpKeyword" write="SetHelpKeyword" stored="IsHelpContextStored" type="string" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="2316"/>
      <property name="HelpType" visibility="published" read="FHelpType" write="FHelpType" type="THelpType" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="2317"/>
      <property name="Hint" visibility="published" read="FHint" write="SetHint" stored="HintStored" type="string" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="2318"/>
      <property name="HitTest" visibility="published" read="FHitTest" write="SetHitTest" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="2319"/>
      <property name="Padding" visibility="published" read="GetPadding" write="SetPadding" type="TBounds" hoisted="true" file="FMX.StdCtrls.pas" line="2320"/>
      <property name="Opacity" visibility="published" read="FOpacity" write="SetOpacity" stored="IsOpacityStored" type="Single" hoisted="true" file="FMX.StdCtrls.pas" line="2321"/>
      <property name="Margins" visibility="published" read="GetMargins" write="SetMargins" type="TBounds" hoisted="true" file="FMX.StdCtrls.pas" line="2322"/>
      <property name="PopupMenu" visibility="published" read="FPopupMenu" write="SetPopupMenu" stored="IsPopupMenuStored" type="TCustomPopupMenu" hoisted="true" file="FMX.StdCtrls.pas" line="2323"/>
      <property name="Position" visibility="published" read="FPosition" write="SetPosition" stored="IsPositionStored" type="TPosition" hoisted="true" file="FMX.StdCtrls.pas" line="2324"/>
      <property name="RotationAngle" visibility="published" read="GetRotationAngle" write="SetRotationAngle" type="Single" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="2325"/>
      <property name="RotationCenter" visibility="published" read="GetRotationCenter" write="SetRotationCenter" type="TPosition" hoisted="true" file="FMX.StdCtrls.pas" line="2326"/>
      <property name="Scale" visibility="published" read="GetScale" write="SetScale" type="TPosition" hoisted="true" file="FMX.StdCtrls.pas" line="2327"/>
      <property name="ShowValue" visibility="published" read="FShowValue" write="SetShowValue" type="Boolean" default="0" file="FMX.StdCtrls.pas" line="2328"><devnotes><summary>
Specifies whether this arc dial component displays a text with the current value.
Use the ShowValue property to enable or disable the display of a text in the middle of this arc dial component that contains the current value (in degrees) of this arc dial component.
</summary></devnotes></property>
      <property name="Size" visibility="published" read="FSize" write="SetSize" stored="IsSizeStored" type="TControlSize" hoisted="true" file="FMX.StdCtrls.pas" line="2329"/>
      <property name="StyleLookup" visibility="published" read="FStyleLookup" write="SetStyleLookup" type="string" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="2330"/>
      <property name="TabOrder" visibility="published" read="GetTabOrder" write="SetTabOrder" type="TTabOrder" default="-1" hoisted="true" file="FMX.StdCtrls.pas" line="2331"/>
      <property name="TabStop" visibility="published" read="GetTabStop" write="SetTabStop" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="2332"/>
      <property name="TouchTargetExpansion" visibility="published" read="FTouchTargetExpansion" write="SetTouchTargetExpansion" type="TBounds" hoisted="true" file="FMX.StdCtrls.pas" line="2333"/>
      <property name="Tracking" visibility="published" read="FTracking" write="FTracking" type="Boolean" default="1" file="FMX.StdCtrls.pas" line="2334"><devnotes><summary>
Specifies whether thumb tracking is active or not.
</summary></devnotes></property>
      <property name="Value" visibility="published" read="GetValue" write="SetValue" stored="ValueStored" type="Single" file="FMX.StdCtrls.pas" line="2335"><devnotes><summary>
Specifies the value (in degrees) of this arc dial component.
Read or write the Value property to get or set the value (in degrees) of this arc dial component. Use the ShowValue property to enable or disable the display of this value inside the surface of this arc dial component.
</summary></devnotes></property>
      <property name="Frequency" visibility="published" read="GetFrequency" write="SetFrequency" stored="FrequencyStored" type="Single" file="FMX.StdCtrls.pas" line="2336"><devnotes><summary>
Specifies the number of positions this arc dial advances with each move.
Use the Frequency property to specify how many steps at once this arc dial advances (rotates) with each move. For instance, if you set Frequency to 10, then rotating the arc dial to either the left or the right produces an advancement of only 10 divisions at a time (0 degrees, 10 degrees, 20 degrees, and so on).
</summary></devnotes></property>
      <property name="Visible" visibility="published" read="FVisible" write="SetVisible" stored="VisibleStored" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="2337"/>
      <property name="Width" visibility="published" read="GetWidth" write="SetWidth" stored="False" type="Single" hoisted="true" file="FMX.StdCtrls.pas" line="2338"/>
      <property name="ParentShowHint" visibility="published" read="FParentShowHint" write="SetParentShowHint" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="2339"/>
      <property name="ShowHint" visibility="published" read="FShowHint" write="SetShowHint" stored="IsShowHintStored" type="Boolean" hoisted="true" file="FMX.StdCtrls.pas" line="2340"/>
      <event name="OnApplyStyleLookup" visibility="published" read="FOnApplyStyleLookup" write="FOnApplyStyleLookup" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2343"/>
      <event name="OnChange" visibility="published" read="FOnChange" write="FOnChange" type="TNotifyEvent" file="FMX.StdCtrls.pas" line="2344"><devnotes><summary>
Occurs immediately after the position of this arc dial control changes.
Write an OnChange event handler to provide additional functionality when changing the position of this arc dial component.
</summary></devnotes></event>
      <event name="OnDragEnter" visibility="published" read="FOnDragEnter" write="FOnDragEnter" type="TDragEnterEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2346"/>
      <event name="OnDragLeave" visibility="published" read="FOnDragLeave" write="FOnDragLeave" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2347"/>
      <event name="OnDragOver" visibility="published" read="FOnDragOver" write="FOnDragOver" type="TDragOverEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2348"/>
      <event name="OnDragDrop" visibility="published" read="FOnDragDrop" write="FOnDragDrop" type="TDragDropEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2349"/>
      <event name="OnDragEnd" visibility="published" read="FOnDragEnd" write="FOnDragEnd" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2350"/>
      <event name="OnKeyDown" visibility="published" read="FOnKeyDown" write="FOnKeyDown" type="TKeyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2352"/>
      <event name="OnKeyUp" visibility="published" read="FOnKeyUp" write="FOnKeyUp" type="TKeyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2353"/>
      <event name="OnCanFocus" visibility="published" read="FOnCanFocus" write="FOnCanFocus" type="TCanFocusEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2355"/>
      <event name="OnClick" visibility="published" read="FOnClick" write="SetOnClick" stored="OnClickStored" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2356"/>
      <event name="OnDblClick" visibility="published" read="FOnDblClick" write="FOnDblClick" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2357"/>
      <event name="OnEnter" visibility="published" read="FOnEnter" write="FOnEnter" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2359"/>
      <event name="OnExit" visibility="published" read="FOnExit" write="FOnExit" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2360"/>
      <event name="OnMouseDown" visibility="published" read="FOnMouseDown" write="FOnMouseDown" type="TMouseEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2361"/>
      <event name="OnMouseMove" visibility="published" read="FOnMouseMove" write="FOnMouseMove" type="TMouseMoveEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2362"/>
      <event name="OnMouseUp" visibility="published" read="FOnMouseUp" write="FOnMouseUp" type="TMouseEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2363"/>
      <event name="OnMouseWheel" visibility="published" read="FOnMouseWheel" write="FOnMouseWheel" type="TMouseWheelEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2364"/>
      <event name="OnMouseEnter" visibility="published" read="FOnMouseEnter" write="FOnMouseEnter" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2365"/>
      <event name="OnMouseLeave" visibility="published" read="FOnMouseLeave" write="FOnMouseLeave" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2366"/>
      <event name="OnPainting" visibility="published" read="FOnPainting" write="FOnPainting" type="TOnPaintEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2368"/>
      <event name="OnPaint" visibility="published" read="FOnPaint" write="FOnPaint" type="TOnPaintEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2369"/>
      <event name="OnResize" visibility="published" read="FOnResize" write="FOnResize" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2370"/>
      <event name="OnResized" visibility="published" read="FOnResized" write="FOnResized" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2371"/>
    </members>
  <devnotes><summary>
Represents a general-purpose knob-style rotating button.
Use a TArcDial button in applications wherever you need to provide the user with a rotating button that resembles a knob. This arc dial control variates its Value in degrees, so if you want to use it as a linear control for varying the progress of a progress bar, for instance, you need to programmatically make a conversion from degrees to linear movement.

Control whether this arc dial component displays the value or not using the FMX.StdCtrls.TArcDial.ShowValue property.
</summary></devnotes></class>
  <class name="TExpanderButton" file="FMX.StdCtrls.pas" line="2376">
    
    <members>
      <constructor name="Create" visibility="public" file="FMX.StdCtrls.pas" line="2378">
        <parameters>
          <parameter name="AOwner" type="TComponent"/>
        </parameters>
      <devnotes><summary>




Creates a new instance of TPresentedControl.
FMX.StdCtrls.TExpanderButton.Create inherits from FMX.Controls.Presentation.TPresentedControl.Create. All content below this line refers to FMX.Controls.Presentation.TPresentedControl.Create.
Creates a new instance of TPresentedControl.
AOwner takes ownership of the control and becomes responsible of destroying the control once the control is no longer necessary.
The control constructor creates a data model for the control. DefineModelClass determines the default class of data model for each subclass of TPresentedControl.
Create also sets the value of the CanUseDefaultPresentation property to True.

 See Also
System.Classes.TComponent.Create
FMX.Controls.Presentation.TPresentedControl.Model
FMX.Controls.Presentation.TPresentedControl.DefineModelClass
FMX.Controls.Presentation.TPresentedControl.Destroy
FMX.Controls.Presentation.TPresentedControl.CanUseDefaultPresentation

</summary></devnotes></constructor>
      <property name="Action" visibility="published" read="GetAction" write="SetAction" type="TBasicAction" hoisted="true" file="FMX.StdCtrls.pas" line="2380"/>
      <property name="Align" visibility="published" read="FAlign" write="SetAlign" type="TAlignLayout" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="2381"/>
      <property name="Anchors" visibility="published" read="FAnchors" write="SetAnchors" stored="IsAnchorsStored" type="TAnchors" hoisted="true" file="FMX.StdCtrls.pas" line="2382"/>
      <property name="AutoTranslate" visibility="published" read="FAutoTranslate" write="FAutoTranslate" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="2383"/>
      <property name="CanFocus" visibility="published" read="FCanFocus" write="FCanFocus" type="Boolean" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="2384"/>
      <property name="CanParentFocus" visibility="published" read="FCanParentFocus" write="FCanParentFocus" type="Boolean" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="2385"/>
      <property name="ClipChildren" visibility="published" read="FClipChildren" write="SetClipChildren" type="Boolean" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="2386"/>
      <property name="ClipParent" visibility="published" read="FClipParent" write="FClipParent" type="Boolean" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="2387"/>
      <property name="Cursor" visibility="published" read="GetCursor" write="SetCursor" type="TCursor" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="2388"/>
      <property name="DisableFocusEffect" visibility="published" read="FDisableFocusEffect" write="FDisableFocusEffect" type="Boolean" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="2389"/>
      <property name="DragMode" visibility="published" read="GetDragMode" write="SetDragMode" type="TDragMode" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="2390"/>
      <property name="EnableDragHighlight" visibility="published" read="FEnableDragHighlight" write="FEnableDragHighlight" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="2391"/>
      <property name="Enabled" visibility="published" read="FEnabled" write="SetEnabled" stored="EnabledStored" type="Boolean" hoisted="true" file="FMX.StdCtrls.pas" line="2392"/>
      <property name="Font" visibility="published" read="GetFont" write="SetFont" type="TFont" hoisted="true" file="FMX.StdCtrls.pas" line="2393"/>
      <property name="StyledSettings" visibility="published" read="GetStyledSettings" write="SetStyledSettings" stored="StyledSettingsStored" type="TStyledSettings" hoisted="true" file="FMX.StdCtrls.pas" line="2394"/>
      <property name="Height" visibility="published" read="GetHeight" write="SetHeight" stored="False" type="Single" hoisted="true" file="FMX.StdCtrls.pas" line="2395"/>
      <property name="HelpContext" visibility="published" read="FHelpContext" write="SetHelpContext" stored="IsHelpContextStored" type="THelpContext" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="2396"/>
      <property name="HelpKeyword" visibility="published" read="FHelpKeyword" write="SetHelpKeyword" stored="IsHelpContextStored" type="string" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="2397"/>
      <property name="HelpType" visibility="published" read="FHelpType" write="FHelpType" type="THelpType" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="2398"/>
      <property name="Hint" visibility="published" read="FHint" write="SetHint" stored="HintStored" type="string" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="2399"/>
      <property name="HitTest" visibility="published" read="FHitTest" write="SetHitTest" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="2400"/>
      <property name="StaysPressed" visibility="published" read="FStaysPressed" write="SetStaysPressed" stored="IsPressedStored" type="Boolean" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="2402"/>
      <property name="IsPressed" visibility="published" read="FIsPressed" write="SetIsPressed" type="Boolean" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="2403"/>
      <property name="Locked" visibility="published" read="FLocked" write="SetLocked" type="Boolean" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="2405"/>
      <property name="Padding" visibility="published" read="GetPadding" write="SetPadding" type="TBounds" hoisted="true" file="FMX.StdCtrls.pas" line="2406"/>
      <property name="ModalResult" visibility="published" read="FModalResult" write="FModalResult" type="TModalResult" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="2407"/>
      <property name="Opacity" visibility="published" read="FOpacity" write="SetOpacity" stored="IsOpacityStored" type="Single" hoisted="true" file="FMX.StdCtrls.pas" line="2408"/>
      <property name="Margins" visibility="published" read="GetMargins" write="SetMargins" type="TBounds" hoisted="true" file="FMX.StdCtrls.pas" line="2409"/>
      <property name="PopupMenu" visibility="published" read="FPopupMenu" write="SetPopupMenu" stored="IsPopupMenuStored" type="TCustomPopupMenu" hoisted="true" file="FMX.StdCtrls.pas" line="2410"/>
      <property name="Position" visibility="published" read="FPosition" write="SetPosition" stored="IsPositionStored" type="TPosition" hoisted="true" file="FMX.StdCtrls.pas" line="2411"/>
      <property name="RepeatClick" visibility="published" read="FRepeat" write="FRepeat" type="Boolean" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="2412"/>
      <property name="RotationAngle" visibility="published" read="GetRotationAngle" write="SetRotationAngle" type="Single" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="2413"/>
      <property name="RotationCenter" visibility="published" read="GetRotationCenter" write="SetRotationCenter" type="TPosition" hoisted="true" file="FMX.StdCtrls.pas" line="2414"/>
      <property name="Scale" visibility="published" read="GetScale" write="SetScale" type="TPosition" hoisted="true" file="FMX.StdCtrls.pas" line="2415"/>
      <property name="Size" visibility="published" read="FSize" write="SetSize" stored="IsSizeStored" type="TControlSize" hoisted="true" file="FMX.StdCtrls.pas" line="2416"/>
      <property name="StyleLookup" visibility="published" read="FStyleLookup" write="SetStyleLookup" type="string" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="2417"/>
      <property name="TabOrder" visibility="published" read="GetTabOrder" write="SetTabOrder" type="TTabOrder" default="-1" hoisted="true" file="FMX.StdCtrls.pas" line="2418"/>
      <property name="TabStop" visibility="published" read="GetTabStop" write="SetTabStop" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="2419"/>
      <property name="Text" visibility="published" read="GetText" write="SetText" stored="TextStored" type="string" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="2420"/>
      <property name="TextAlign" visibility="published" read="GetTextAlign" write="SetTextAlign" type="TTextAlign" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="2421"/>
      <property name="TouchTargetExpansion" visibility="published" read="FTouchTargetExpansion" write="SetTouchTargetExpansion" type="TBounds" hoisted="true" file="FMX.StdCtrls.pas" line="2422"/>
      <property name="Visible" visibility="published" read="FVisible" write="SetVisible" stored="VisibleStored" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="2423"/>
      <property name="Width" visibility="published" read="GetWidth" write="SetWidth" stored="False" type="Single" hoisted="true" file="FMX.StdCtrls.pas" line="2424"/>
      <property name="WordWrap" visibility="published" read="GetWordWrap" write="SetWordWrap" type="Boolean" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="2425"/>
      <property name="ParentShowHint" visibility="published" read="FParentShowHint" write="SetParentShowHint" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="2426"/>
      <property name="ShowHint" visibility="published" read="FShowHint" write="SetShowHint" stored="IsShowHintStored" type="Boolean" hoisted="true" file="FMX.StdCtrls.pas" line="2427"/>
      <event name="OnApplyStyleLookup" visibility="published" read="FOnApplyStyleLookup" write="FOnApplyStyleLookup" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2430"/>
      <event name="OnDragEnter" visibility="published" read="FOnDragEnter" write="FOnDragEnter" type="TDragEnterEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2432"/>
      <event name="OnDragLeave" visibility="published" read="FOnDragLeave" write="FOnDragLeave" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2433"/>
      <event name="OnDragOver" visibility="published" read="FOnDragOver" write="FOnDragOver" type="TDragOverEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2434"/>
      <event name="OnDragDrop" visibility="published" read="FOnDragDrop" write="FOnDragDrop" type="TDragDropEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2435"/>
      <event name="OnDragEnd" visibility="published" read="FOnDragEnd" write="FOnDragEnd" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2436"/>
      <event name="OnKeyDown" visibility="published" read="FOnKeyDown" write="FOnKeyDown" type="TKeyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2438"/>
      <event name="OnKeyUp" visibility="published" read="FOnKeyUp" write="FOnKeyUp" type="TKeyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2439"/>
      <event name="OnCanFocus" visibility="published" read="FOnCanFocus" write="FOnCanFocus" type="TCanFocusEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2441"/>
      <event name="OnClick" visibility="published" read="FOnClick" write="SetOnClick" stored="OnClickStored" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2442"/>
      <event name="OnDblClick" visibility="published" read="FOnDblClick" write="FOnDblClick" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2443"/>
      <event name="OnEnter" visibility="published" read="FOnEnter" write="FOnEnter" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2445"/>
      <event name="OnExit" visibility="published" read="FOnExit" write="FOnExit" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2446"/>
      <event name="OnMouseDown" visibility="published" read="FOnMouseDown" write="FOnMouseDown" type="TMouseEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2447"/>
      <event name="OnMouseMove" visibility="published" read="FOnMouseMove" write="FOnMouseMove" type="TMouseMoveEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2448"/>
      <event name="OnMouseUp" visibility="published" read="FOnMouseUp" write="FOnMouseUp" type="TMouseEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2449"/>
      <event name="OnMouseWheel" visibility="published" read="FOnMouseWheel" write="FOnMouseWheel" type="TMouseWheelEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2450"/>
      <event name="OnMouseEnter" visibility="published" read="FOnMouseEnter" write="FOnMouseEnter" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2451"/>
      <event name="OnMouseLeave" visibility="published" read="FOnMouseLeave" write="FOnMouseLeave" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2452"/>
      <event name="OnPainting" visibility="published" read="FOnPainting" write="FOnPainting" type="TOnPaintEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2454"/>
      <event name="OnPaint" visibility="published" read="FOnPaint" write="FOnPaint" type="TOnPaintEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2455"/>
      <event name="OnResize" visibility="published" read="FOnResize" write="FOnResize" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2456"/>
      <event name="OnResized" visibility="published" read="FOnResized" write="FOnResized" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2457"/>
    </members>
  <devnotes><summary>
Represents a collapse/expand button used exclusively by the TExpander component.
</summary></devnotes></class>
  <class name="TExpander" file="FMX.StdCtrls.pas" line="2460">
    
    <members>
      <const name="cDefaultHeaderHeight" visibility="public" type="Integer" file="FMX.StdCtrls.pas" line="2463">
        <devnotes>
           <summary>Default header height</summary>
        </devnotes>
        <value>
          $19
        </value>
      </const>
      <field name="FShowCheck" type="Boolean" visibility="private" size="1" offset="992" file="FMX.StdCtrls.pas" line="2465"/>
      <field name="FIsChecked" type="Boolean" visibility="private" size="1" offset="993" file="FMX.StdCtrls.pas" line="2466"/>
      <field name="FOnCheckChange" type="TNotifyEvent" visibility="private" size="8" offset="1000" file="FMX.StdCtrls.pas" line="2467"/>
      <field name="FContentHeight" type="Integer" visibility="private" size="4" offset="1008" file="FMX.StdCtrls.pas" line="2468"/>
      <field name="FHeader" type="TControl" visibility="private" size="4" offset="1012" file="FMX.StdCtrls.pas" line="2469"/>
      <field name="FHeaderHeight" type="Integer" visibility="private" size="4" offset="1016" file="FMX.StdCtrls.pas" line="2470"/>
      <field name="FStyleHeaderHeight" type="Integer" visibility="private" size="4" offset="1020" file="FMX.StdCtrls.pas" line="2471"/>
      <field name="FOnExpandedChanging" type="TNotifyEvent" visibility="private" size="8" offset="1024" file="FMX.StdCtrls.pas" line="2472"/>
      <field name="FOnExpandedChanged" type="TNotifyEvent" visibility="private" size="8" offset="1032" file="FMX.StdCtrls.pas" line="2473"/>
      <field name="FChangingState" type="Boolean" visibility="private" size="1" offset="1040" file="FMX.StdCtrls.pas" line="2474"/>
      <procedure name="HandleButtonClick" visibility="private" file="FMX.StdCtrls.pas" line="2475">
        <parameters>
          <parameter name="Sender" type="TObject"/>
        </parameters>
      </procedure>
      <procedure name="HandleCheckChange" visibility="private" file="FMX.StdCtrls.pas" line="2476">
        <parameters>
          <parameter name="Sender" type="TObject"/>
        </parameters>
      </procedure>
      <procedure name="SetIsChecked" visibility="private" file="FMX.StdCtrls.pas" line="2477">
        <parameters>
          <parameter name="Value" type="Boolean" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetIsExpanded" visibility="private" file="FMX.StdCtrls.pas" line="2478">
        <parameters>
          <parameter name="Value" type="Boolean" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetShowCheck" visibility="private" file="FMX.StdCtrls.pas" line="2479">
        <parameters>
          <parameter name="Value" type="Boolean" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="UpdateControlSize" visibility="private" file="FMX.StdCtrls.pas" line="2480">
        <parameters>
          <parameter name="ChangingState" type="Boolean" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="ExpandedChanging" visibility="private" file="FMX.StdCtrls.pas" line="2481">
      </procedure>
      <procedure name="ExpandedChanged" visibility="private" file="FMX.StdCtrls.pas" line="2482">
      </procedure>
      <field name="FIsExpanded" type="Boolean" visibility="protected" size="1" offset="1041" file="FMX.StdCtrls.pas" line="2484"/>
      <field name="FContent" type="TContent" visibility="protected" size="4" offset="1044" file="FMX.StdCtrls.pas" line="2485"/>
      <field name="FButton" type="TCustomButton" visibility="protected" size="4" offset="1048" file="FMX.StdCtrls.pas" line="2486"/>
      <field name="FCheck" type="TCheckBox" visibility="protected" size="4" offset="1052" file="FMX.StdCtrls.pas" line="2487"/>
      <procedure name="ApplyStyle" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="2488">
      <devnotes><summary>


Customizes styles in complex objects.
FMX.StdCtrls.TExpander.ApplyStyle inherits from FMX.Controls.TStyledControl.ApplyStyle. All content below this line refers to FMX.Controls.TStyledControl.ApplyStyle.
Customizes styles in complex objects.
TStyledControl descendants override it to apply styles in concordance with their primitive components.      
Do not call ApplyStyle explicitly in an application. It is called by the ApplyStyleLookup method when object styles are updated.
For an example of an ApplyStyle implementation, see &quot;TCalloutPanel:Style Contracts&quot; in FireMonkey Component Design.
</summary></devnotes></procedure>
      <procedure name="FreeStyle" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="2489">
      <devnotes><summary>
Frees the style of TStyledControl.
FMX.StdCtrls.TExpander.FreeStyle inherits from FMX.Controls.TTextControl.FreeStyle. All content below this line refers to FMX.Controls.TTextControl.FreeStyle.
Frees the style of TStyledControl.
FreeStyle frees some TTextControl-specific style resources like TextObject and TextSettings, then calls the inherited TStyledControl.FreeStyle.
</summary></devnotes></procedure>
      <procedure name="DoRealign" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="2490">
      <devnotes><summary>
Performs the alignment of a FireMonkey control.
FMX.StdCtrls.TExpander.DoRealign inherits from FMX.Controls.TControl.DoRealign. All content below this line refers to FMX.Controls.TControl.DoRealign.
Performs the alignment of a FireMonkey control.

 See Also
FMX.Types.AlignObjects

</summary></devnotes></procedure>
      <procedure name="DoStyleChanged" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="2491">
      <devnotes><summary>
Calls the inherited TStyledControl.DoStyleChanged, then tries to translate the Text.
FMX.StdCtrls.TExpander.DoStyleChanged inherits from FMX.Controls.TTextControl.DoStyleChanged. All content below this line refers to FMX.Controls.TTextControl.DoStyleChanged.
Calls the inherited TStyledControl.DoStyleChanged, then tries to translate the Text.
DoStyleChanged calls the inherited TStyledControl.DoStyleChanged to set that the control needs to update the style, then calls Repaint to redraw the control, and then tries to translate the control's Text calling Translate. 
</summary></devnotes></procedure>
      <procedure name="DefineProperties" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="2492">
        <parameters>
          <parameter name="Filer" type="TFiler"/>
        </parameters>
      <devnotes><summary>






Designates methods for storing an object's unpublished data on a stream such as a form file.
FMX.StdCtrls.TExpander.DefineProperties inherits from System.Classes.TComponent.DefineProperties. All content below this line refers to System.Classes.TComponent.DefineProperties.
Designates methods for storing an object's unpublished data on a stream such as a form file.
TComponent overrides the DefineProperties method defined in TPersistent to define &quot;fake&quot; Top and Left properties. These are defined so that components that are not controls can be manipulated at design time. However, the Top and Left properties are hidden, that is, they are not published, because only controls appear at run time.
DefineProperties is virtual; descendent classes can override it. When overriding DefineProperties, be aware that the Ancestor property of Filer might be set, and that this property can determine whether or not it is appropriate to write properties.
DefineProperties is called automatically as part of the component streaming system; do not call it directly.
</summary></devnotes></procedure>
      <procedure name="ReadContentSize" visibility="protected" file="FMX.StdCtrls.pas" line="2493">
        <parameters>
          <parameter name="Reader" type="TReader"/>
        </parameters>
      <devnotes><summary>
Protected method that sets the vertical size (height) of the content display area of this expander, based on what is read from the given Reader.
</summary></devnotes></procedure>
      <procedure name="WriteContentSize" visibility="protected" file="FMX.StdCtrls.pas" line="2494">
        <parameters>
          <parameter name="Writer" type="TWriter"/>
        </parameters>
      <devnotes><summary>
Protected method that writes the vertical size (height) of the content display area of this expander to the given Writer.
</summary></devnotes></procedure>
      <procedure name="DoAddObject" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="2495">
        <parameters>
          <parameter name="AObject" type="TFmxObject" paramflags="const"/>
        </parameters>
      <devnotes><summary>


Adds the AObject object to the Children list of children attached to this parent object (self).
FMX.StdCtrls.TExpander.DoAddObject inherits from FMX.Types.TFmxObject.DoAddObject. All content below this line refers to FMX.Types.TFmxObject.DoAddObject.
Adds the AObject object to the Children list of children attached to this parent object (self).
DoAddObject adds the object provided in the AObject parameter to the list of children stored in the Children property of this object (self). DoAddObject changes the parent of AObject to this object (self) and sets the root of AObject to the Root object of this object (self).
Descendant classes, like TCommonCustomForm and TControl, additionally handle tab stop lists keeping ordered lists of objects to which the user can tab. If such descendant class supports the ITabStopController interface and AObject is an object of a class supporting the IControl interface, then DoAddObject of this descendant adds AObject to the TabList tab stop lists of the (self) object. 
DoAddObject is internally called from AddObject.
</summary></devnotes></procedure>
      <procedure name="UpdateContentSize" visibility="protected" file="FMX.StdCtrls.pas" line="2496">
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="DoResized" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="2497">
      <devnotes><summary>


Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <function name="DoSetSize" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="2498">
        <parameters>
          <parameter name="ASize" type="TControlSize" paramflags="const"/>
          <parameter name="NewPlatformDefault" type="Boolean" paramflags="const"/>
          <parameter name="ANewWidth" type="Single"/>
          <parameter name="ANewHeight" type="Single"/>
          <parameter name="ALastWidth" type="Single" paramflags="var"/>
          <parameter name="ALastHeight" type="Single" paramflags="var"/>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>




Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></function>
      <function name="GetDefaultSize" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="2500">
        <parameters>
          <retval type="TSizeF"/>
        </parameters>
      <devnotes><summary>
Getter of DefaultSize.
FMX.StdCtrls.TExpander.GetDefaultSize inherits from FMX.Controls.TControl.GetDefaultSize. All content below this line refers to FMX.Controls.TControl.GetDefaultSize.
Getter of DefaultSize.


</summary></devnotes></function>
      <procedure name="DoExpandedChanging" visibility="protected" procflags="virtual" file="FMX.StdCtrls.pas" line="2502">
        <devnotes><summary>
DoExpandedChanging is called when the expanded state is changing.
</summary></devnotes>
      </procedure>
      <procedure name="DoExpandedChanged" visibility="protected" procflags="virtual" file="FMX.StdCtrls.pas" line="2504">
        <devnotes><summary>
DoExpandedChanged is called when the expanded state just has changed. 
</summary></devnotes>
      </procedure>
      <procedure name="DoCheckedChanged" visibility="protected" procflags="virtual" file="FMX.StdCtrls.pas" line="2506">
        <devnotes><summary>
DoCheckedChanged is called when the checked state just has changed. 
</summary></devnotes>
      </procedure>
      <function name="GetTextSettingsClass" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="2507">
        <parameters>
          <retval type="TTextSettingsInfo.TCustomTextSettingsClass"/>
        </parameters>
      <devnotes><summary>
Returns the class type that instance represents the used text settings.
FMX.StdCtrls.TExpander.GetTextSettingsClass inherits from FMX.Controls.TTextControl.GetTextSettingsClass. All content below this line refers to FMX.Controls.TTextControl.GetTextSettingsClass.
Returns the class type that instance represents the used text settings.
GetTextSettingsClass returns the TTextSettingsInfo.TCustomTextSettingsClass (or its descendant)  class reference. An instance of such class provides the DefaultTextSettings,   TextSettings, StyledSettings, ResultingTextSettings, and other properties handling the text representation settings of a control. 
You can override the method in descendant classes to modify the default behavior.
Typical implementations of GetTextSettingsClass returns the class declaring properties like the Font, FontColor, HorzAlign, and WordWrap. Some of these properties can be declared as published to be editable in the Object Inspector.

 See Also
FMX.Controls.TTextSettingsInfo
FMX.Controls.TTextSettingsInfo.TCustomTextSettingsClass
FMX.Controls.TTextSettingsInfo.DefaultTextSettings
FMX.Controls.TTextSettingsInfo.TextSettings
FMX.Controls.TTextSettingsInfo.StyledSettings
FMX.Controls.TTextSettingsInfo.ResultingTextSettings

</summary></devnotes></function>
      <procedure name="SetHeaderHeight" visibility="protected" file="FMX.StdCtrls.pas" line="2508">
        <parameters>
          <parameter name="Value" type="Integer" paramflags="const"/>
        </parameters>
      <devnotes><summary>
It allows to set the header height.


</summary></devnotes></procedure>
      <function name="GetHeaderHeight" visibility="protected" file="FMX.StdCtrls.pas" line="2509">
        <parameters>
          <retval type="Integer"/>
        </parameters>
      <devnotes><summary>
Returns the calculated header height.
Default value is -1. 
When the value is -1, if the style defines a header element style, the element height will be taken for default. If style element is not defined, it takes the FMX.StdCtrls.TExpander.cDefaultHeaderHeight value.


</summary></devnotes></function>
      <function name="EffectiveHeaderHeight" visibility="protected" file="FMX.StdCtrls.pas" line="2511">
        <devnotes><summary>
Evaluates the header height that will be used based on style availability and property value.


</summary></devnotes>
        <parameters>
          <retval type="Integer"/>
        </parameters>
      </function>
      <function name="DefaultHeaderHeight" visibility="protected" file="FMX.StdCtrls.pas" line="2513">
        <devnotes><summary>
Evaluates the default header height based on style availability.


</summary></devnotes>
        <parameters>
          <retval type="Integer"/>
        </parameters>
      </function>
      <constructor name="Create" visibility="public" file="FMX.StdCtrls.pas" line="2515">
        <parameters>
          <parameter name="AOwner" type="TComponent"/>
        </parameters>
      <devnotes><summary>


Allocates memory and constructs a safely initialized instance of a component.
Allocates memory and constructs a safely initialized instance of a component.
FMX.StdCtrls.TExpander.Create inherits from System.Classes.TComponent.Create. All content below this line refers to System.Classes.TComponent.Create.
Allocates memory and constructs a safely initialized instance of a component.
All objects have a Create method that constructs the object. TComponent redefines Create so that, for components, Create also:

Establishes the relationship of a component and its Owner, as indicated by the AOwner parameter.
Sets the ComponentStyle property to csInheritable, meaning that the component can be inherited by a descendent form type.
It is not necessary to explicitly create components added in the Form Designer. These components are created automatically when the application is run, and they are destroyed when the application is closed.
For components created programmatically, that is, not created in the Form Designer, call Create and pass in an owner component as the AOwner parameter. The owner disposes of the component when it is destroyed. If the component is not owned, then use Free when it needs to be destroyed.

Tip:  When passing in Self as the Owner parameter, consider what Self references. If a component creates another component in one of its methods, then Self refers to the first component and not the component being created, which is then owned by the first component.
Note:  The TComponent constructor is virtual in part to allow polymorphic instantiation of class references. This is critical to the streaming system and to the Form Designer. Do not forget to use the override directive when declaring a new component's Create constructor.</summary></devnotes></constructor>
      <function name="GetTabList" visibility="public" procflags="override" file="FMX.StdCtrls.pas" line="2516">
        <parameters>
          <retval type="ITabList"/>
        </parameters>
      <devnotes><summary>


Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></function>
      <property name="Action" visibility="published" read="GetAction" write="SetAction" type="TBasicAction" hoisted="true" file="FMX.StdCtrls.pas" line="2518"/>
      <property name="Align" visibility="published" read="FAlign" write="SetAlign" type="TAlignLayout" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="2519"/>
      <property name="Anchors" visibility="published" read="FAnchors" write="SetAnchors" stored="IsAnchorsStored" type="TAnchors" hoisted="true" file="FMX.StdCtrls.pas" line="2520"/>
      <property name="AutoTranslate" visibility="published" read="FAutoTranslate" write="FAutoTranslate" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="2521"/>
      <property name="ClipChildren" visibility="published" read="FClipChildren" write="SetClipChildren" type="Boolean" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="2522"/>
      <property name="ClipParent" visibility="published" read="FClipParent" write="FClipParent" type="Boolean" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="2523"/>
      <property name="Cursor" visibility="published" read="GetCursor" write="SetCursor" type="TCursor" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="2524"/>
      <property name="DragMode" visibility="published" read="GetDragMode" write="SetDragMode" type="TDragMode" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="2525"/>
      <property name="EnableDragHighlight" visibility="published" read="FEnableDragHighlight" write="FEnableDragHighlight" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="2526"/>
      <property name="Enabled" visibility="published" read="FEnabled" write="SetEnabled" stored="EnabledStored" type="Boolean" hoisted="true" file="FMX.StdCtrls.pas" line="2527"/>
      <property name="StyledSettings" visibility="published" read="GetStyledSettings" write="SetStyledSettings" stored="StyledSettingsStored" type="TStyledSettings" hoisted="true" file="FMX.StdCtrls.pas" line="2528"/>
      <property name="TextSettings" visibility="published" read="GetTextSettings" write="SetTextSettings" type="TTextSettings" hoisted="true" file="FMX.StdCtrls.pas" line="2529"/>
      <property name="Locked" visibility="published" read="FLocked" write="SetLocked" type="Boolean" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="2530"/>
      <property name="Height" visibility="published" read="GetHeight" write="SetHeight" stored="False" type="Single" hoisted="true" file="FMX.StdCtrls.pas" line="2531"/>
      <property name="HelpContext" visibility="published" read="FHelpContext" write="SetHelpContext" stored="IsHelpContextStored" type="THelpContext" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="2532"/>
      <property name="HelpKeyword" visibility="published" read="FHelpKeyword" write="SetHelpKeyword" stored="IsHelpContextStored" type="string" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="2533"/>
      <property name="HelpType" visibility="published" read="FHelpType" write="FHelpType" type="THelpType" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="2534"/>
      <property name="Hint" visibility="published" read="FHint" write="SetHint" stored="HintStored" type="string" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="2535"/>
      <property name="HitTest" visibility="published" read="FHitTest" write="SetHitTest" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="2536"/>
      <property name="HeaderHeight" visibility="published" read="GetHeaderHeight" write="SetHeaderHeight" type="Integer" default="-1" file="FMX.StdCtrls.pas" line="2541">
        <devnotes><summary>
Allows to customize header height. Default value is -1.
When the value is -1, if the style defines a header element style, the element height will be taken for default. If style element is not defined, it takes the FMX.StdCtrls.TExpander.cDefaultHeaderHeight value.


</summary></devnotes>
      </property>
      <property name="IsChecked" visibility="published" read="FIsChecked" write="SetIsChecked" type="Boolean" default="1" file="FMX.StdCtrls.pas" line="2546">
        <devnotes><summary>
Specifies whether the expander's check box is selected or not.
Set the IsChecked property to True to select the expander's check box. Set IsChecked to False in order to clear the expander's check box.
The default value for the IsChecked property is True.
</summary></devnotes>
      </property>
      <property name="IsExpanded" visibility="published" read="FIsExpanded" write="SetIsExpanded" type="Boolean" default="1" file="FMX.StdCtrls.pas" line="2554">
        <devnotes><summary>
Specifies whether the expander control is expanded or not.
Set the IsExpanded property to True to expand the contents of the expander in order to show all the items it contains. Set IsExpanded to False in order to collapse the expander.
The default value for the IsExpanded property is True.
You can programatically expand and collapse the expander as shown in the following code snippet:

var
  Expander1: TExpander1;

begin
  { expand the expander control }
  Expander1.IsExpanded := True;

  { collapse the expander control }
  Expander1.IsExpanded := False;
end;
</summary></devnotes>
      </property>
      <property name="Padding" visibility="published" read="GetPadding" write="SetPadding" type="TBounds" hoisted="true" file="FMX.StdCtrls.pas" line="2555"/>
      <property name="Opacity" visibility="published" read="FOpacity" write="SetOpacity" stored="IsOpacityStored" type="Single" hoisted="true" file="FMX.StdCtrls.pas" line="2556"/>
      <property name="Margins" visibility="published" read="GetMargins" write="SetMargins" type="TBounds" hoisted="true" file="FMX.StdCtrls.pas" line="2557"/>
      <property name="PopupMenu" visibility="published" read="FPopupMenu" write="SetPopupMenu" stored="IsPopupMenuStored" type="TCustomPopupMenu" hoisted="true" file="FMX.StdCtrls.pas" line="2558"/>
      <property name="Position" visibility="published" read="FPosition" write="SetPosition" stored="IsPositionStored" type="TPosition" hoisted="true" file="FMX.StdCtrls.pas" line="2559"/>
      <property name="RotationAngle" visibility="published" read="GetRotationAngle" write="SetRotationAngle" type="Single" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="2560"/>
      <property name="RotationCenter" visibility="published" read="GetRotationCenter" write="SetRotationCenter" type="TPosition" hoisted="true" file="FMX.StdCtrls.pas" line="2561"/>
      <property name="Scale" visibility="published" read="GetScale" write="SetScale" type="TPosition" hoisted="true" file="FMX.StdCtrls.pas" line="2562"/>
      <property name="ShowCheck" visibility="published" read="FShowCheck" write="SetShowCheck" type="Boolean" file="FMX.StdCtrls.pas" line="2564">
        <devnotes><summary>
Specifies whether the expander control shows a check box in the upper-right corner.
Set the ShowCheck property to True to show a check box in the upper-right corner of the expander object. Set ShowCheck to False to hide the check box.

</summary></devnotes>
      </property>
      <property name="Size" visibility="published" read="FSize" write="SetSize" stored="IsSizeStored" type="TControlSize" hoisted="true" file="FMX.StdCtrls.pas" line="2565"/>
      <property name="StyleLookup" visibility="published" read="FStyleLookup" write="SetStyleLookup" type="string" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="2566"/>
      <property name="Text" visibility="published" read="GetText" write="SetText" stored="TextStored" type="string" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="2567"/>
      <property name="TouchTargetExpansion" visibility="published" read="FTouchTargetExpansion" write="SetTouchTargetExpansion" type="TBounds" hoisted="true" file="FMX.StdCtrls.pas" line="2568"/>
      <property name="Visible" visibility="published" read="FVisible" write="SetVisible" stored="VisibleStored" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="2569"/>
      <property name="Width" visibility="published" read="GetWidth" write="SetWidth" stored="False" type="Single" hoisted="true" file="FMX.StdCtrls.pas" line="2570"/>
      <property name="TabOrder" visibility="published" read="GetTabOrder" write="SetTabOrder" type="TTabOrder" default="-1" hoisted="true" file="FMX.StdCtrls.pas" line="2571"/>
      <property name="TabStop" visibility="published" read="GetTabStop" write="SetTabStop" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="2572"/>
      <property name="ParentShowHint" visibility="published" read="FParentShowHint" write="SetParentShowHint" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="2573"/>
      <property name="ShowHint" visibility="published" read="FShowHint" write="SetShowHint" stored="IsShowHintStored" type="Boolean" hoisted="true" file="FMX.StdCtrls.pas" line="2574"/>
      <event name="OnApplyStyleLookup" visibility="published" read="FOnApplyStyleLookup" write="FOnApplyStyleLookup" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2577"/>
      <event name="OnCheckChange" visibility="published" read="FOnCheckChange" write="FOnCheckChange" type="TNotifyEvent" file="FMX.StdCtrls.pas" line="2579">
        <devnotes><summary>
Occurs every time this expander's check box changes its state.
Write an OnCheckChange event to specify what happens every time the check box attached to this expander changes its state from True to False and vice versa.
</summary></devnotes>
      </event>
      <event name="OnDragEnter" visibility="published" read="FOnDragEnter" write="FOnDragEnter" type="TDragEnterEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2581"/>
      <event name="OnDragLeave" visibility="published" read="FOnDragLeave" write="FOnDragLeave" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2582"/>
      <event name="OnDragOver" visibility="published" read="FOnDragOver" write="FOnDragOver" type="TDragOverEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2583"/>
      <event name="OnDragDrop" visibility="published" read="FOnDragDrop" write="FOnDragDrop" type="TDragDropEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2584"/>
      <event name="OnDragEnd" visibility="published" read="FOnDragEnd" write="FOnDragEnd" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2585"/>
      <event name="OnKeyDown" visibility="published" read="FOnKeyDown" write="FOnKeyDown" type="TKeyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2587"/>
      <event name="OnKeyUp" visibility="published" read="FOnKeyUp" write="FOnKeyUp" type="TKeyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2588"/>
      <event name="OnCanFocus" visibility="published" read="FOnCanFocus" write="FOnCanFocus" type="TCanFocusEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2590"/>
      <event name="OnClick" visibility="published" read="FOnClick" write="SetOnClick" stored="OnClickStored" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2591"/>
      <event name="OnDblClick" visibility="published" read="FOnDblClick" write="FOnDblClick" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2592"/>
      <event name="OnEnter" visibility="published" read="FOnEnter" write="FOnEnter" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2594"/>
      <event name="OnExit" visibility="published" read="FOnExit" write="FOnExit" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2595"/>
      <event name="OnMouseDown" visibility="published" read="FOnMouseDown" write="FOnMouseDown" type="TMouseEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2596"/>
      <event name="OnMouseMove" visibility="published" read="FOnMouseMove" write="FOnMouseMove" type="TMouseMoveEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2597"/>
      <event name="OnMouseUp" visibility="published" read="FOnMouseUp" write="FOnMouseUp" type="TMouseEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2598"/>
      <event name="OnMouseWheel" visibility="published" read="FOnMouseWheel" write="FOnMouseWheel" type="TMouseWheelEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2599"/>
      <event name="OnMouseEnter" visibility="published" read="FOnMouseEnter" write="FOnMouseEnter" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2600"/>
      <event name="OnMouseLeave" visibility="published" read="FOnMouseLeave" write="FOnMouseLeave" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2601"/>
      <event name="OnPainting" visibility="published" read="FOnPainting" write="FOnPainting" type="TOnPaintEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2603"/>
      <event name="OnPaint" visibility="published" read="FOnPaint" write="FOnPaint" type="TOnPaintEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2604"/>
      <event name="OnResize" visibility="published" read="FOnResize" write="FOnResize" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2605"/>
      <event name="OnResized" visibility="published" read="FOnResized" write="FOnResized" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2606"/>
      <event name="OnExpandedChanging" visibility="published" read="FOnExpandedChanging" write="FOnExpandedChanging" type="TNotifyEvent" file="FMX.StdCtrls.pas" line="2608">
        <devnotes><summary>
OnExpandedChanging is called when the checkbox state is about to change.
You can cancel OnExpandedChanging with EAbort.
</summary></devnotes>
      </event>
      <event name="OnExpandedChanged" visibility="published" read="FOnExpandedChanged" write="FOnExpandedChanged" type="TNotifyEvent" file="FMX.StdCtrls.pas" line="2610">
        <devnotes><summary>
Occurs when IsExpanded value has changed.
</summary></devnotes>
      </event>
    </members>
  <devnotes><summary>
Represents a graphical control used to hold multiple graphical controls with the possibility to expand or contract its display area.
Use TExpander components when you need to provide the user with a way of placing graphical components on a surface that can be expanded or collapsed in order to show or hide its contents.

Collapse or expand this expander control by clicking its collapse/expand button.
</summary></devnotes></class>
  <type name="TImageLoadedEvent" file="FMX.StdCtrls.pas" line="2613" procflags="closure">
  </type>
  <class name="TImageControl" file="FMX.StdCtrls.pas" line="2615">
    
    <members>
      <field name="FImage" type="TImage" visibility="private" size="4" offset="944" file="FMX.StdCtrls.pas" line="2617"/>
      <field name="FOnChange" type="TNotifyEvent" visibility="private" size="8" offset="952" file="FMX.StdCtrls.pas" line="2618"/>
      <field name="FBitmap" type="TBitmap" visibility="private" size="4" offset="960" file="FMX.StdCtrls.pas" line="2619"/>
      <field name="FEnableOpenDialog" type="Boolean" visibility="private" size="1" offset="964" file="FMX.StdCtrls.pas" line="2620"/>
      <field name="FOnLoaded" type="TImageLoadedEvent" visibility="private" size="8" offset="968" file="FMX.StdCtrls.pas" line="2621"/>
      <procedure name="SetBitmap" visibility="private" file="FMX.StdCtrls.pas" line="2622">
        <parameters>
          <parameter name="Value" type="TBitmap" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="UpdateImage" visibility="private" file="FMX.StdCtrls.pas" line="2623">
      </procedure>
      <function name="GetData" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="2625">
        <parameters>
          <retval type="TValue">
            <attributes>
              <attribute name="HPPGENAttribute"/>
            </attributes>
          </retval>
        </parameters>
      <devnotes><summary>
Protected getter implementation for the Data property.
FMX.StdCtrls.TImageControl.GetData inherits from FMX.Types.TFmxObject.GetData. All content below this line refers to FMX.Types.TFmxObject.GetData.
Protected getter implementation for the Data property.
</summary></devnotes></function>
      <procedure name="SetData" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="2626">
        <parameters>
          <parameter name="Value" type="TValue" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Protected setter implementation for the Data property.
FMX.StdCtrls.TImageControl.SetData inherits from FMX.Types.TFmxObject.SetData. All content below this line refers to FMX.Types.TFmxObject.SetData.
Protected setter implementation for the Data property.
</summary></devnotes></procedure>
      <function name="CanObserve" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="2627">
        <parameters>
          <parameter name="ID" type="Integer" paramflags="const"/>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
For internal use only.
Do not use this member. It is for internal use only.


</summary></devnotes></function>
      <procedure name="ApplyStyle" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="2628">
      <devnotes><summary>
Customizes styles in complex objects.
FMX.StdCtrls.TImageControl.ApplyStyle inherits from FMX.Controls.TStyledControl.ApplyStyle. All content below this line refers to FMX.Controls.TStyledControl.ApplyStyle.
Customizes styles in complex objects.
TStyledControl descendants override it to apply styles in concordance with their primitive components.      
Do not call ApplyStyle explicitly in an application. It is called by the ApplyStyleLookup method when object styles are updated.
For an example of an ApplyStyle implementation, see &quot;TCalloutPanel:Style Contracts&quot; in FireMonkey Component Design.
</summary></devnotes></procedure>
      <procedure name="FreeStyle" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="2629">
      <devnotes><summary>
Frees the style of TStyledControl.
FMX.StdCtrls.TImageControl.FreeStyle inherits from FMX.Controls.TStyledControl.FreeStyle. All content below this line refers to FMX.Controls.TStyledControl.FreeStyle.
Frees the style of TStyledControl.
Override it to free additional component-specific style resources.
</summary></devnotes></procedure>
      <procedure name="Click" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="2630">
      <devnotes><summary>
Responds to user clicks, key pressing, and input on touch devices (gestures).
FMX.StdCtrls.TImageControl.Click inherits from FMX.Controls.TControl.Click. All content below this line refers to FMX.Controls.TControl.Click.
Responds to user clicks, key pressing, and input on touch devices (gestures).
Click is an event handler for the OnClick event. It is automatically called when the left mouse button is pressed and released with the pointer over the control. Click also can be called in DialogKey and other methods handling an input from keyboards and touch devices.
Call Click in applications to simulate an OnClick mouse event.  
If EnableExecuteAction is True and the OnClick event handler is not assigned (or is equal to Action.OnExecute), then Click executes the assigned Action, otherwise executes the OnClick event handler.
</summary></devnotes></procedure>
      <procedure name="DragOver" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="2631">
        <parameters>
          <parameter name="Data" type="TDragObject" paramflags="const"/>
          <parameter name="Point" type="TPointF" paramflags="const"/>
          <parameter name="Operation" type="TDragOperation" paramflags="var"/>
        </parameters>
      <devnotes><summary>
OnDragOver event dispatcher. 
FMX.StdCtrls.TImageControl.DragOver inherits from FMX.Controls.TControl.DragOver. All content below this line refers to FMX.Controls.TControl.DragOver.
OnDragOver event dispatcher. 
Data specifies the dragged object.
Point specifies the current point of the  mouse cursor within the client area of the control.
Operation is the operation parameter (None, Move, Copy, Link) that specifies the action to perform when an item is dragged over the object.  

None is the default. No action takes place, it does not display any name.
Move - the word Move is displayed once an item is dragged over the object.
Copy - the word Copy is displayed once an item is dragged over the object.
Link - the word Link is displayed once an item is dragged over the object.
A control calls DragOver when a dragged object is over the control area.
Override the protected DragOver method to provide other responses when a dragged object is over the control area.
</summary></devnotes></procedure>
      <procedure name="DragDrop" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="2632">
        <parameters>
          <parameter name="Data" type="TDragObject" paramflags="const"/>
          <parameter name="Point" type="TPointF" paramflags="const"/>
        </parameters>
      <devnotes><summary>
OnDragDrop event dispatcher. 
FMX.StdCtrls.TImageControl.DragDrop inherits from FMX.Controls.TControl.DragDrop. All content below this line refers to FMX.Controls.TControl.DragDrop.
OnDragDrop event dispatcher. 
Data specifies the dragged object.
Point specifies the current point of the mouse cursor, within the client area of the control.
A control calls DragDrop when a dragged object is dropped on the control area.
Override the protected DragDrop method to provide other responses when a dragged object is dropped on the control area.
</summary></devnotes></procedure>
      <procedure name="DoBitmapChanged" visibility="protected" procflags="virtual" file="FMX.StdCtrls.pas" line="2633">
        <parameters>
          <parameter name="Sender" type="TObject"/>
        </parameters>
      <devnotes><summary>
Executes internally each time the OnChange event fires.
</summary></devnotes></procedure>
      <procedure name="DoLoadFromFile" visibility="protected" procflags="virtual" file="FMX.StdCtrls.pas" line="2634">
        <parameters>
          <parameter name="FileName" type="string" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <function name="GetDefaultSize" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="2635">
        <parameters>
          <retval type="TSizeF"/>
        </parameters>
      <devnotes><summary>
Getter of DefaultSize.
FMX.StdCtrls.TImageControl.GetDefaultSize inherits from FMX.Controls.TControl.GetDefaultSize. All content below this line refers to FMX.Controls.TControl.GetDefaultSize.
Getter of DefaultSize.


</summary></devnotes></function>
      <property name="Image" visibility="protected" read="FImage" type="TImage" file="FMX.StdCtrls.pas" line="2636"><devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></property>
      <constructor name="Create" visibility="public" file="FMX.StdCtrls.pas" line="2638">
        <parameters>
          <parameter name="AOwner" type="TComponent"/>
        </parameters>
      <devnotes><summary>
Allocates memory and constructs a safely initialized instance of a component.
Allocates memory and constructs a safely initialized instance of a component.
FMX.StdCtrls.TImageControl.Create inherits from System.Classes.TComponent.Create. All content below this line refers to System.Classes.TComponent.Create.
Allocates memory and constructs a safely initialized instance of a component.
All objects have a Create method that constructs the object. TComponent redefines Create so that, for components, Create also:

Establishes the relationship of a component and its Owner, as indicated by the AOwner parameter.
Sets the ComponentStyle property to csInheritable, meaning that the component can be inherited by a descendent form type.
It is not necessary to explicitly create components added in the Form Designer. These components are created automatically when the application is run, and they are destroyed when the application is closed.
For components created programmatically, that is, not created in the Form Designer, call Create and pass in an owner component as the AOwner parameter. The owner disposes of the component when it is destroyed. If the component is not owned, then use Free when it needs to be destroyed.

Tip:  When passing in Self as the Owner parameter, consider what Self references. If a component creates another component in one of its methods, then Self refers to the first component and not the component being created, which is then owned by the first component.
Note:  The TComponent constructor is virtual in part to allow polymorphic instantiation of class references. This is critical to the streaming system and to the Form Designer. Do not forget to use the override directive when declaring a new component's Create constructor.</summary></devnotes></constructor>
      <destructor name="Destroy" visibility="public" file="FMX.StdCtrls.pas" line="2639">
        <parameters>
        </parameters>
      <devnotes><summary>
Disposes of the component and its owned components.
Disposes of the component and its owned components.
FMX.StdCtrls.TImageControl.Destroy inherits from System.Classes.TComponent.Destroy. All content below this line refers to System.Classes.TComponent.Destroy.
Disposes of the component and its owned components.
Do not call Destroy directly. Call Free instead. Free verifies that the component is not nil, and only then calls Destroy.
Never explicitly free a component in one of its own event handlers, nor free a component from the event handler of a component that it owns or contains.
To destroy a form, call its Release method. Release waits for all the form's event handlers and the event handlers of the form's components to finish executing before destroying the form.

Note: A form owns all the controls and nonvisual components that are placed on it in design mode. When it is freed, all of these components are automatically freed as well. By default, all forms are owned by the global Application object. When an application terminates, it frees the global Application object, which frees all forms. For objects that are not components, and for components created with a nil owner, be sure to call Free after finishing with the object; otherwise the memory allocated for the object will be lost until the application terminates.</summary></devnotes></destructor>
      <procedure name="LoadFromFile" visibility="public" file="FMX.StdCtrls.pas" line="2640">
        <parameters>
          <parameter name="FileName" type="string" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <function name="ShowOpenDialog" visibility="public" file="FMX.StdCtrls.pas" line="2641">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></function>
      <property name="Action" visibility="published" read="GetAction" write="SetAction" type="TBasicAction" hoisted="true" file="FMX.StdCtrls.pas" line="2643"/>
      <property name="Align" visibility="published" read="FAlign" write="SetAlign" type="TAlignLayout" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="2644"/>
      <property name="Anchors" visibility="published" read="FAnchors" write="SetAnchors" stored="IsAnchorsStored" type="TAnchors" hoisted="true" file="FMX.StdCtrls.pas" line="2645"/>
      <property name="Bitmap" visibility="published" read="FBitmap" write="SetBitmap" type="TBitmap" file="FMX.StdCtrls.pas" line="2646"><devnotes><summary>
Specifies a TBitmap picture to be displayed onto the surface of this image control component.
Use Bitmap to specify the image for the TImageControl component. Bitmap is a reference to a FMX.Graphics.TBitmap object.
Setting Bitmap at design time brings up the Bitmap Editor, which can be used to specify the file that contains the image you want to display.
</summary></devnotes></property>
      <property name="CanFocus" visibility="published" read="FCanFocus" write="FCanFocus" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="2647"/>
      <property name="CanParentFocus" visibility="published" read="FCanParentFocus" write="FCanParentFocus" type="Boolean" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="2648"/>
      <property name="ClipChildren" visibility="published" read="FClipChildren" write="SetClipChildren" type="Boolean" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="2649"/>
      <property name="ClipParent" visibility="published" read="FClipParent" write="FClipParent" type="Boolean" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="2650"/>
      <property name="Cursor" visibility="published" read="GetCursor" write="SetCursor" type="TCursor" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="2651"/>
      <property name="DisableFocusEffect" visibility="published" read="FDisableFocusEffect" write="FDisableFocusEffect" type="Boolean" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="2652"/>
      <property name="DragMode" visibility="published" read="GetDragMode" write="SetDragMode" type="TDragMode" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="2653"/>
      <property name="EnableDragHighlight" visibility="published" read="FEnableDragHighlight" write="FEnableDragHighlight" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="2654"/>
      <property name="EnableOpenDialog" visibility="published" read="FEnableOpenDialog" write="FEnableOpenDialog" type="Boolean" default="1" file="FMX.StdCtrls.pas" line="2655"><devnotes><summary>
For future use only.
</summary></devnotes></property>
      <property name="Enabled" visibility="published" read="FEnabled" write="SetEnabled" stored="EnabledStored" type="Boolean" hoisted="true" file="FMX.StdCtrls.pas" line="2656"/>
      <property name="Locked" visibility="published" read="FLocked" write="SetLocked" type="Boolean" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="2657"/>
      <property name="Height" visibility="published" read="GetHeight" write="SetHeight" stored="False" type="Single" hoisted="true" file="FMX.StdCtrls.pas" line="2658"/>
      <property name="HelpContext" visibility="published" read="FHelpContext" write="SetHelpContext" stored="IsHelpContextStored" type="THelpContext" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="2659"/>
      <property name="HelpKeyword" visibility="published" read="FHelpKeyword" write="SetHelpKeyword" stored="IsHelpContextStored" type="string" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="2660"/>
      <property name="HelpType" visibility="published" read="FHelpType" write="FHelpType" type="THelpType" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="2661"/>
      <property name="Hint" visibility="published" read="FHint" write="SetHint" stored="HintStored" type="string" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="2662"/>
      <property name="HitTest" visibility="published" read="FHitTest" write="SetHitTest" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="2663"/>
      <property name="Padding" visibility="published" read="GetPadding" write="SetPadding" type="TBounds" hoisted="true" file="FMX.StdCtrls.pas" line="2664"/>
      <property name="Opacity" visibility="published" read="FOpacity" write="SetOpacity" stored="IsOpacityStored" type="Single" hoisted="true" file="FMX.StdCtrls.pas" line="2665"/>
      <property name="Margins" visibility="published" read="GetMargins" write="SetMargins" type="TBounds" hoisted="true" file="FMX.StdCtrls.pas" line="2666"/>
      <property name="PopupMenu" visibility="published" read="FPopupMenu" write="SetPopupMenu" stored="IsPopupMenuStored" type="TCustomPopupMenu" hoisted="true" file="FMX.StdCtrls.pas" line="2667"/>
      <property name="Position" visibility="published" read="FPosition" write="SetPosition" stored="IsPositionStored" type="TPosition" hoisted="true" file="FMX.StdCtrls.pas" line="2668"/>
      <property name="RotationAngle" visibility="published" read="GetRotationAngle" write="SetRotationAngle" type="Single" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="2669"/>
      <property name="RotationCenter" visibility="published" read="GetRotationCenter" write="SetRotationCenter" type="TPosition" hoisted="true" file="FMX.StdCtrls.pas" line="2670"/>
      <property name="Scale" visibility="published" read="GetScale" write="SetScale" type="TPosition" hoisted="true" file="FMX.StdCtrls.pas" line="2671"/>
      <property name="Size" visibility="published" read="FSize" write="SetSize" stored="IsSizeStored" type="TControlSize" hoisted="true" file="FMX.StdCtrls.pas" line="2672"/>
      <property name="StyleLookup" visibility="published" read="FStyleLookup" write="SetStyleLookup" type="string" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="2673"/>
      <property name="TabOrder" visibility="published" read="GetTabOrder" write="SetTabOrder" type="TTabOrder" default="-1" hoisted="true" file="FMX.StdCtrls.pas" line="2674"/>
      <property name="TabStop" visibility="published" read="GetTabStop" write="SetTabStop" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="2675"/>
      <property name="TouchTargetExpansion" visibility="published" read="FTouchTargetExpansion" write="SetTouchTargetExpansion" type="TBounds" hoisted="true" file="FMX.StdCtrls.pas" line="2676"/>
      <property name="Visible" visibility="published" read="FVisible" write="SetVisible" stored="VisibleStored" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="2677"/>
      <property name="Width" visibility="published" read="GetWidth" write="SetWidth" stored="False" type="Single" hoisted="true" file="FMX.StdCtrls.pas" line="2678"/>
      <property name="ParentShowHint" visibility="published" read="FParentShowHint" write="SetParentShowHint" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="2679"/>
      <property name="ShowHint" visibility="published" read="FShowHint" write="SetShowHint" stored="IsShowHintStored" type="Boolean" hoisted="true" file="FMX.StdCtrls.pas" line="2680"/>
      <event name="OnApplyStyleLookup" visibility="published" read="FOnApplyStyleLookup" write="FOnApplyStyleLookup" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2683"/>
      <event name="OnChange" visibility="published" read="FOnChange" write="FOnChange" type="TNotifyEvent" file="FMX.StdCtrls.pas" line="2684"><devnotes><summary>
Occurs immediately after the bitmap picture of this image control changes.
Write an OnChange event handler to provide additional functionality when changing the bitmap picture of this image control component.
</summary></devnotes></event>
      <event name="OnLoaded" visibility="published" read="FOnLoaded" write="FOnLoaded" type="TImageLoadedEvent" file="FMX.StdCtrls.pas" line="2685"><devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></event>
      <event name="OnDragEnter" visibility="published" read="FOnDragEnter" write="FOnDragEnter" type="TDragEnterEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2687"/>
      <event name="OnDragLeave" visibility="published" read="FOnDragLeave" write="FOnDragLeave" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2688"/>
      <event name="OnDragOver" visibility="published" read="FOnDragOver" write="FOnDragOver" type="TDragOverEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2689"/>
      <event name="OnDragDrop" visibility="published" read="FOnDragDrop" write="FOnDragDrop" type="TDragDropEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2690"/>
      <event name="OnDragEnd" visibility="published" read="FOnDragEnd" write="FOnDragEnd" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2691"/>
      <event name="OnKeyDown" visibility="published" read="FOnKeyDown" write="FOnKeyDown" type="TKeyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2693"/>
      <event name="OnKeyUp" visibility="published" read="FOnKeyUp" write="FOnKeyUp" type="TKeyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2694"/>
      <event name="OnCanFocus" visibility="published" read="FOnCanFocus" write="FOnCanFocus" type="TCanFocusEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2696"/>
      <event name="OnClick" visibility="published" read="FOnClick" write="SetOnClick" stored="OnClickStored" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2697"/>
      <event name="OnDblClick" visibility="published" read="FOnDblClick" write="FOnDblClick" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2698"/>
      <event name="OnEnter" visibility="published" read="FOnEnter" write="FOnEnter" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2700"/>
      <event name="OnExit" visibility="published" read="FOnExit" write="FOnExit" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2701"/>
      <event name="OnMouseDown" visibility="published" read="FOnMouseDown" write="FOnMouseDown" type="TMouseEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2702"/>
      <event name="OnMouseMove" visibility="published" read="FOnMouseMove" write="FOnMouseMove" type="TMouseMoveEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2703"/>
      <event name="OnMouseUp" visibility="published" read="FOnMouseUp" write="FOnMouseUp" type="TMouseEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2704"/>
      <event name="OnMouseWheel" visibility="published" read="FOnMouseWheel" write="FOnMouseWheel" type="TMouseWheelEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2705"/>
      <event name="OnMouseEnter" visibility="published" read="FOnMouseEnter" write="FOnMouseEnter" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2706"/>
      <event name="OnMouseLeave" visibility="published" read="FOnMouseLeave" write="FOnMouseLeave" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2707"/>
      <event name="OnPainting" visibility="published" read="FOnPainting" write="FOnPainting" type="TOnPaintEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2709"/>
      <event name="OnPaint" visibility="published" read="FOnPaint" write="FOnPaint" type="TOnPaintEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2710"/>
      <event name="OnResize" visibility="published" read="FOnResize" write="FOnResize" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2711"/>
      <event name="OnResized" visibility="published" read="FOnResized" write="FOnResized" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2712"/>
    </members>
  <devnotes><summary>
Represents a graphical control used to display images on a FireMonkey form.
Use a TImageControl whenever you need to put an image on a FireMonkey form. You can use the Bitmap property to specify the image that will be displayed.
</summary></devnotes></class>
  <class name="TPathLabel" file="FMX.StdCtrls.pas" line="2717">
    
    <members>
      <field name="FPath" type="TCustomPath" visibility="private" size="4" offset="944" file="FMX.StdCtrls.pas" line="2719"/>
      <function name="GetWrapMode" visibility="private" file="FMX.StdCtrls.pas" line="2720">
        <parameters>
          <retval type="TPathWrapMode"/>
        </parameters>
      </function>
      <procedure name="SetWrapMode" visibility="private" file="FMX.StdCtrls.pas" line="2721">
        <parameters>
          <parameter name="Value" type="TPathWrapMode" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="GetPathData" visibility="private" file="FMX.StdCtrls.pas" line="2722">
        <parameters>
          <retval type="TPathData"/>
        </parameters>
      </function>
      <procedure name="SetPathData" visibility="private" file="FMX.StdCtrls.pas" line="2723">
        <parameters>
          <parameter name="Value" type="TPathData" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="ApplyStyle" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="2725">
      <devnotes><summary>
Customizes styles in complex objects.
FMX.StdCtrls.TPathLabel.ApplyStyle inherits from FMX.Controls.TStyledControl.ApplyStyle. All content below this line refers to FMX.Controls.TStyledControl.ApplyStyle.
Customizes styles in complex objects.
TStyledControl descendants override it to apply styles in concordance with their primitive components.      
Do not call ApplyStyle explicitly in an application. It is called by the ApplyStyleLookup method when object styles are updated.
For an example of an ApplyStyle implementation, see &quot;TCalloutPanel:Style Contracts&quot; in FireMonkey Component Design.
</summary></devnotes></procedure>
      <procedure name="FreeStyle" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="2726">
      <devnotes><summary>
Frees the style of TStyledControl.
FMX.StdCtrls.TPathLabel.FreeStyle inherits from FMX.Controls.TStyledControl.FreeStyle. All content below this line refers to FMX.Controls.TStyledControl.FreeStyle.
Frees the style of TStyledControl.
Override it to free additional component-specific style resources.
</summary></devnotes></procedure>
      <procedure name="DefineProperties" visibility="protected" procflags="override" file="FMX.StdCtrls.pas" line="2727">
        <parameters>
          <parameter name="Filer" type="TFiler"/>
        </parameters>
      <devnotes><summary>




Designates methods for storing an object's unpublished data on a stream such as a form file.
FMX.StdCtrls.TPathLabel.DefineProperties inherits from System.Classes.TComponent.DefineProperties. All content below this line refers to System.Classes.TComponent.DefineProperties.
Designates methods for storing an object's unpublished data on a stream such as a form file.
TComponent overrides the DefineProperties method defined in TPersistent to define &quot;fake&quot; Top and Left properties. These are defined so that components that are not controls can be manipulated at design time. However, the Top and Left properties are hidden, that is, they are not published, because only controls appear at run time.
DefineProperties is virtual; descendent classes can override it. When overriding DefineProperties, be aware that the Ancestor property of Filer might be set, and that this property can determine whether or not it is appropriate to write properties.
DefineProperties is called automatically as part of the component streaming system; do not call it directly.
</summary></devnotes></procedure>
      <constructor name="Create" visibility="public" file="FMX.StdCtrls.pas" line="2729">
        <parameters>
          <parameter name="AOwner" type="TComponent"/>
        </parameters>
      <devnotes><summary>
Allocates memory and constructs a safely initialized instance of a component.
Allocates memory and constructs a safely initialized instance of a component.
FMX.StdCtrls.TPathLabel.Create inherits from System.Classes.TComponent.Create. All content below this line refers to System.Classes.TComponent.Create.
Allocates memory and constructs a safely initialized instance of a component.
All objects have a Create method that constructs the object. TComponent redefines Create so that, for components, Create also:

Establishes the relationship of a component and its Owner, as indicated by the AOwner parameter.
Sets the ComponentStyle property to csInheritable, meaning that the component can be inherited by a descendent form type.
It is not necessary to explicitly create components added in the Form Designer. These components are created automatically when the application is run, and they are destroyed when the application is closed.
For components created programmatically, that is, not created in the Form Designer, call Create and pass in an owner component as the AOwner parameter. The owner disposes of the component when it is destroyed. If the component is not owned, then use Free when it needs to be destroyed.

Tip:  When passing in Self as the Owner parameter, consider what Self references. If a component creates another component in one of its methods, then Self refers to the first component and not the component being created, which is then owned by the first component.
Note:  The TComponent constructor is virtual in part to allow polymorphic instantiation of class references. This is critical to the streaming system and to the Form Designer. Do not forget to use the override directive when declaring a new component's Create constructor.</summary></devnotes></constructor>
      <destructor name="Destroy" visibility="public" file="FMX.StdCtrls.pas" line="2730">
        <parameters>
        </parameters>
      <devnotes><summary>
Disposes of the component and its owned components.
Disposes of the component and its owned components.
FMX.StdCtrls.TPathLabel.Destroy inherits from System.Classes.TComponent.Destroy. All content below this line refers to System.Classes.TComponent.Destroy.
Disposes of the component and its owned components.
Do not call Destroy directly. Call Free instead. Free verifies that the component is not nil, and only then calls Destroy.
Never explicitly free a component in one of its own event handlers, nor free a component from the event handler of a component that it owns or contains.
To destroy a form, call its Release method. Release waits for all the form's event handlers and the event handlers of the form's components to finish executing before destroying the form.

Note: A form owns all the controls and nonvisual components that are placed on it in design mode. When it is freed, all of these components are automatically freed as well. By default, all forms are owned by the global Application object. When an application terminates, it frees the global Application object, which frees all forms. For objects that are not components, and for components created with a nil owner, be sure to call Free after finishing with the object; otherwise the memory allocated for the object will be lost until the application terminates.</summary></devnotes></destructor>
      <property name="Action" visibility="published" read="GetAction" write="SetAction" type="TBasicAction" hoisted="true" file="FMX.StdCtrls.pas" line="2732"/>
      <property name="Align" visibility="published" read="FAlign" write="SetAlign" type="TAlignLayout" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="2733"/>
      <property name="Anchors" visibility="published" read="FAnchors" write="SetAnchors" stored="IsAnchorsStored" type="TAnchors" hoisted="true" file="FMX.StdCtrls.pas" line="2734"/>
      <property name="ClipChildren" visibility="published" read="FClipChildren" write="SetClipChildren" type="Boolean" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="2735"/>
      <property name="ClipParent" visibility="published" read="FClipParent" write="FClipParent" type="Boolean" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="2736"/>
      <property name="Cursor" visibility="published" read="GetCursor" write="SetCursor" type="TCursor" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="2737"/>
      <property name="Data" visibility="published" read="GetPathData" write="SetPathData" type="TPathData" file="FMX.StdCtrls.pas" line="2738"><devnotes><summary>
Stores a Tvalue, which is a data structure that can store different kinds of data types.
FMX.StdCtrls.TPathLabel.Data inherits from FMX.Types.TFmxObject.Data. All content below this line refers to FMX.Types.TFmxObject.Data.
Stores a Tvalue, which is a data structure that can store different kinds of data types.
Data has no predefined meaning. Although Data is used for LiveBinding, any succesor override this behavior. Then, the behaviour of Data is based on the type of its value.

Note: Do not use this member. It is for internal use only.

</summary></devnotes></property>
      <property name="DragMode" visibility="published" read="GetDragMode" write="SetDragMode" type="TDragMode" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="2739"/>
      <property name="EnableDragHighlight" visibility="published" read="FEnableDragHighlight" write="FEnableDragHighlight" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="2740"/>
      <property name="Enabled" visibility="published" read="FEnabled" write="SetEnabled" stored="EnabledStored" type="Boolean" hoisted="true" file="FMX.StdCtrls.pas" line="2741"/>
      <property name="Locked" visibility="published" read="FLocked" write="SetLocked" type="Boolean" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="2742"/>
      <property name="Height" visibility="published" read="GetHeight" write="SetHeight" stored="False" type="Single" hoisted="true" file="FMX.StdCtrls.pas" line="2743"/>
      <property name="HelpContext" visibility="published" read="FHelpContext" write="SetHelpContext" stored="IsHelpContextStored" type="THelpContext" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="2744"/>
      <property name="HelpKeyword" visibility="published" read="FHelpKeyword" write="SetHelpKeyword" stored="IsHelpContextStored" type="string" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="2745"/>
      <property name="Hint" visibility="published" read="FHint" write="SetHint" stored="HintStored" type="string" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="2746"/>
      <property name="HitTest" visibility="published" read="FHitTest" write="SetHitTest" type="Boolean" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="2747"/>
      <property name="Padding" visibility="published" read="GetPadding" write="SetPadding" type="TBounds" hoisted="true" file="FMX.StdCtrls.pas" line="2748"/>
      <property name="Opacity" visibility="published" read="FOpacity" write="SetOpacity" stored="IsOpacityStored" type="Single" hoisted="true" file="FMX.StdCtrls.pas" line="2749"/>
      <property name="Margins" visibility="published" read="GetMargins" write="SetMargins" type="TBounds" hoisted="true" file="FMX.StdCtrls.pas" line="2750"/>
      <property name="PopupMenu" visibility="published" read="FPopupMenu" write="SetPopupMenu" stored="IsPopupMenuStored" type="TCustomPopupMenu" hoisted="true" file="FMX.StdCtrls.pas" line="2751"/>
      <property name="Position" visibility="published" read="FPosition" write="SetPosition" stored="IsPositionStored" type="TPosition" hoisted="true" file="FMX.StdCtrls.pas" line="2752"/>
      <property name="RotationAngle" visibility="published" read="GetRotationAngle" write="SetRotationAngle" type="Single" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="2753"/>
      <property name="RotationCenter" visibility="published" read="GetRotationCenter" write="SetRotationCenter" type="TPosition" hoisted="true" file="FMX.StdCtrls.pas" line="2754"/>
      <property name="Scale" visibility="published" read="GetScale" write="SetScale" type="TPosition" hoisted="true" file="FMX.StdCtrls.pas" line="2755"/>
      <property name="Size" visibility="published" read="FSize" write="SetSize" stored="IsSizeStored" type="TControlSize" hoisted="true" file="FMX.StdCtrls.pas" line="2756"/>
      <property name="StyleLookup" visibility="published" read="FStyleLookup" write="SetStyleLookup" type="string" default="0" hoisted="true" file="FMX.StdCtrls.pas" line="2757"/>
      <property name="TouchTargetExpansion" visibility="published" read="FTouchTargetExpansion" write="SetTouchTargetExpansion" type="TBounds" hoisted="true" file="FMX.StdCtrls.pas" line="2758"/>
      <property name="Visible" visibility="published" read="FVisible" write="SetVisible" stored="VisibleStored" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="2759"/>
      <property name="Width" visibility="published" read="GetWidth" write="SetWidth" stored="False" type="Single" hoisted="true" file="FMX.StdCtrls.pas" line="2760"/>
      <property name="WrapMode" visibility="published" read="GetWrapMode" write="SetWrapMode" type="TPathWrapMode" default="2" file="FMX.StdCtrls.pas" line="2761"><devnotes><summary>
Specifies the way the contents of this path label will be drawn.
WrapMode can take one of the following values:



Value

Meaning



Fit



The graphical path contents fit the entire area of this path label.




Original



The graphical path contents show at their original size in this path label.




Stretch



The graphical path contents stretch to fit the entire area of this path label.




Tile



The graphical path contents tile one or multiple times to fill the entire area of this path label.

</summary></devnotes></property>
      <property name="ParentShowHint" visibility="published" read="FParentShowHint" write="SetParentShowHint" type="Boolean" default="1" hoisted="true" file="FMX.StdCtrls.pas" line="2763"/>
      <property name="ShowHint" visibility="published" read="FShowHint" write="SetShowHint" stored="IsShowHintStored" type="Boolean" hoisted="true" file="FMX.StdCtrls.pas" line="2764"/>
      <event name="OnApplyStyleLookup" visibility="published" read="FOnApplyStyleLookup" write="FOnApplyStyleLookup" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2767"/>
      <event name="OnDragEnter" visibility="published" read="FOnDragEnter" write="FOnDragEnter" type="TDragEnterEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2769"/>
      <event name="OnDragLeave" visibility="published" read="FOnDragLeave" write="FOnDragLeave" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2770"/>
      <event name="OnDragOver" visibility="published" read="FOnDragOver" write="FOnDragOver" type="TDragOverEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2771"/>
      <event name="OnDragDrop" visibility="published" read="FOnDragDrop" write="FOnDragDrop" type="TDragDropEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2772"/>
      <event name="OnDragEnd" visibility="published" read="FOnDragEnd" write="FOnDragEnd" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2773"/>
      <event name="OnKeyDown" visibility="published" read="FOnKeyDown" write="FOnKeyDown" type="TKeyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2775"/>
      <event name="OnKeyUp" visibility="published" read="FOnKeyUp" write="FOnKeyUp" type="TKeyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2776"/>
      <event name="OnCanFocus" visibility="published" read="FOnCanFocus" write="FOnCanFocus" type="TCanFocusEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2778"/>
      <event name="OnClick" visibility="published" read="FOnClick" write="SetOnClick" stored="OnClickStored" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2779"/>
      <event name="OnDblClick" visibility="published" read="FOnDblClick" write="FOnDblClick" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2780"/>
      <event name="OnEnter" visibility="published" read="FOnEnter" write="FOnEnter" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2782"/>
      <event name="OnExit" visibility="published" read="FOnExit" write="FOnExit" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2783"/>
      <event name="OnMouseDown" visibility="published" read="FOnMouseDown" write="FOnMouseDown" type="TMouseEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2784"/>
      <event name="OnMouseMove" visibility="published" read="FOnMouseMove" write="FOnMouseMove" type="TMouseMoveEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2785"/>
      <event name="OnMouseUp" visibility="published" read="FOnMouseUp" write="FOnMouseUp" type="TMouseEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2786"/>
      <event name="OnMouseWheel" visibility="published" read="FOnMouseWheel" write="FOnMouseWheel" type="TMouseWheelEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2787"/>
      <event name="OnMouseEnter" visibility="published" read="FOnMouseEnter" write="FOnMouseEnter" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2788"/>
      <event name="OnMouseLeave" visibility="published" read="FOnMouseLeave" write="FOnMouseLeave" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2789"/>
      <event name="OnPainting" visibility="published" read="FOnPainting" write="FOnPainting" type="TOnPaintEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2791"/>
      <event name="OnPaint" visibility="published" read="FOnPaint" write="FOnPaint" type="TOnPaintEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2792"/>
      <event name="OnResize" visibility="published" read="FOnResize" write="FOnResize" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2793"/>
      <event name="OnResized" visibility="published" read="FOnResized" write="FOnResized" type="TNotifyEvent" hoisted="true" file="FMX.StdCtrls.pas" line="2794"/>
    </members>
  <devnotes><summary>
Represents a graphical control used to display information contained in TPathData within FireMonkey forms.
Use TPathLabel components in FireMonkey forms to add TPathData display capabilities.
For instance, the following image displays three rectangles by using a TPathData object.

var
  PathData: TPathData;

begin
  PathData:= TPathData.Create;
  PathData.AddRectangle(RectF(20, 20, 80, 80), 0, 0, AllCorners);
  PathData.AddRectangle(RectF(10, 10, 90, 90), 0, 0, AllCorners);
  PathData.AddRectangle(RectF(0, 0, 100, 100), 0, 0, AllCorners);
  PathLabel1.Data := PathData;

  { ... other instructions ... }


To add an object to a form that displays text, use a TLabel.
</summary></devnotes></class>
</namespace>