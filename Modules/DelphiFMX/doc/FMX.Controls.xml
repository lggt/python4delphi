<?xml version="1.0" ?><namespace name="FMX.Controls" platform="Win32">
  <interface name="IStyleBookOwner" GUID="{BA1AE6C6-FCF7-43E2-92AA-2869FF203309}" ancestor="IInterface" file="FMX.Controls.pas" line="31">
    <function name="GetStyleBook" visibility="public" procflags="abstract virtual" file="FMX.Controls.pas" line="33">
      <parameters>
        <retval type="TStyleBook"/>
      </parameters>
    </function>
    <procedure name="SetStyleBook" visibility="public" procflags="abstract virtual" file="FMX.Controls.pas" line="34">
      <parameters>
        <parameter name="Value" type="TStyleBook" paramflags="const"/>
      </parameters>
    </procedure>
    <property name="StyleBook" visibility="public" read="GetStyleBook" write="SetStyleBook" type="TStyleBook" file="FMX.Controls.pas" line="35"/>
  </interface>
  <interface name="IScene" GUID="{16DB110E-DA7D-4E75-BC2D-999FA12E45F5}" ancestor="IStyleBookOwner" file="FMX.Controls.pas" line="38">
    <procedure name="AddUpdateRect" visibility="public" procflags="abstract virtual" file="FMX.Controls.pas" line="40">
      <parameters>
        <parameter name="R" type="TRectF" paramflags="const"/>
      </parameters>
    </procedure>
    <function name="GetUpdateRectsCount" visibility="public" procflags="abstract virtual" file="FMX.Controls.pas" line="41">
      <parameters>
        <retval type="Integer"/>
      </parameters>
    </function>
    <function name="GetUpdateRect" visibility="public" procflags="abstract virtual" file="FMX.Controls.pas" line="42">
      <parameters>
        <parameter name="Index" type="Integer" paramflags="const"/>
        <retval type="TRectF"/>
      </parameters>
    </function>
    <function name="GetObject" visibility="public" procflags="abstract virtual" file="FMX.Controls.pas" line="43">
      <parameters>
        <retval type="TFmxObject"/>
      </parameters>
    </function>
    <function name="GetCanvas" visibility="public" procflags="abstract virtual" file="FMX.Controls.pas" line="44">
      <parameters>
        <retval type="TCanvas"/>
      </parameters>
    </function>
    <function name="GetSceneScale" visibility="public" procflags="abstract virtual" file="FMX.Controls.pas" line="45">
      <parameters>
        <retval type="Single"/>
      </parameters>
    </function>
    <function name="LocalToScreen" visibility="public" procflags="abstract virtual" file="FMX.Controls.pas" line="47">
      <devnotes>
         <summary>Converts a point from the scene coordinate system to the screen coordinate system.</summary>
      </devnotes>
      <parameters>
        <parameter name="AScenePoint" type="TPointF" paramflags="const"/>
        <retval type="TPointF"/>
      </parameters>
    </function>
    <function name="ScreenToLocal" visibility="public" procflags="abstract virtual" file="FMX.Controls.pas" line="49">
      <devnotes>
         <summary>Converts a point from the screen coordinate system to the scene coordinate system.</summary>
      </devnotes>
      <parameters>
        <parameter name="AScreenPoint" type="TPointF" paramflags="const"/>
        <retval type="TPointF"/>
      </parameters>
    </function>
    <procedure name="ChangeScrollingState" visibility="public" procflags="abstract virtual" file="FMX.Controls.pas" line="50">
      <parameters>
        <parameter name="AControl" type="TControl" paramflags="const"/>
        <parameter name="AActive" type="Boolean" paramflags="const"/>
      </parameters>
    </procedure>
    <procedure name="DisableUpdating" visibility="public" procflags="abstract virtual" file="FMX.Controls.pas" line="52">
      <devnotes>
         <summary>Disable Scene's updating</summary>
      </devnotes>
    </procedure>
    <procedure name="EnableUpdating" visibility="public" procflags="abstract virtual" file="FMX.Controls.pas" line="54">
      <devnotes>
         <summary>Enable Scene's updating</summary>
      </devnotes>
    </procedure>
    <property name="Canvas" visibility="public" read="GetCanvas" type="TCanvas" file="FMX.Controls.pas" line="55"/>
  </interface>
  <class name="EInvalidSceneUpdatingPairCall" file="FMX.Controls.pas" line="60">
    
    <ancestor name="Exception" namespace="System.SysUtils">
      <methodref name="Create@" visibility="class private" procflags="class constructor noself">
      </methodref>
      <methodref name="Destroy@" visibility="class private" procflags="class destructor noself">
      </methodref>
      <methodref name="SetInnerException" visibility="protected">
      </methodref>
      <methodref name="SetStackInfo" visibility="protected">
      </methodref>
      <methodref name="GetStackTrace" visibility="protected">
      </methodref>
      <methodref name="RaisingException" visibility="protected" procflags="virtual">
      </methodref>
      <methodref name="Create" visibility="public" procflags="constructor">
      </methodref>
      <methodref name="CreateFmt" visibility="public" procflags="constructor">
      </methodref>
      <methodref name="CreateRes" visibility="public" procflags="constructor overload">
      </methodref>
      <methodref name="CreateRes" visibility="public" procflags="constructor overload">
      </methodref>
      <methodref name="CreateResFmt" visibility="public" procflags="constructor overload">
      </methodref>
      <methodref name="CreateResFmt" visibility="public" procflags="constructor overload">
      </methodref>
      <methodref name="CreateHelp" visibility="public" procflags="constructor">
      </methodref>
      <methodref name="CreateFmtHelp" visibility="public" procflags="constructor">
      </methodref>
      <methodref name="CreateResHelp" visibility="public" procflags="constructor overload">
      </methodref>
      <methodref name="CreateResHelp" visibility="public" procflags="constructor overload">
      </methodref>
      <methodref name="CreateResFmtHelp" visibility="public" procflags="constructor overload">
      </methodref>
      <methodref name="CreateResFmtHelp" visibility="public" procflags="constructor overload">
      </methodref>
      <methodref name="Destroy" visibility="public" procflags="destructor override">
      </methodref>
      <methodref name="GetBaseException" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="ToString" visibility="public" procflags="override">
      </methodref>
      <propertyref name="BaseException" visibility="public">
      </propertyref>
      <propertyref name="HelpContext" visibility="public">
      </propertyref>
      <propertyref name="InnerException" visibility="public">
      </propertyref>
      <propertyref name="Message" visibility="public">
      </propertyref>
      <propertyref name="StackTrace" visibility="public">
      </propertyref>
      <propertyref name="StackInfo" visibility="public">
      </propertyref>
      <methodref name="RaiseOuterException" visibility="public" procflags="static">
      </methodref>
      <methodref name="ThrowOuterException" visibility="public" procflags="static">
      </methodref>
      <ancestor name="TObject" namespace="System">
        <methodref name="Create" visibility="public" procflags="constructor">
        </methodref>
        <methodref name="Free" visibility="public">
        </methodref>
        <methodref name="DisposeOf" visibility="public" procflags="inline">
        </methodref>
        <methodref name="InitInstance" visibility="public" procflags="class">
        </methodref>
        <methodref name="CleanupInstance" visibility="public">
        </methodref>
        <methodref name="ClassType" visibility="public" procflags="inline">
        </methodref>
        <methodref name="ClassName" visibility="public" procflags="class">
        </methodref>
        <methodref name="ClassNameIs" visibility="public" procflags="class">
        </methodref>
        <methodref name="ClassParent" visibility="public" procflags="class inline">
        </methodref>
        <methodref name="ClassInfo" visibility="public" procflags="class inline">
        </methodref>
        <methodref name="InstanceSize" visibility="public" procflags="class inline">
        </methodref>
        <methodref name="InheritsFrom" visibility="public" procflags="class">
        </methodref>
        <methodref name="MethodAddress" visibility="public" procflags="class overload">
        </methodref>
        <methodref name="MethodAddress" visibility="public" procflags="class overload">
        </methodref>
        <methodref name="MethodName" visibility="public" procflags="class">
        </methodref>
        <methodref name="QualifiedClassName" visibility="public" procflags="class">
        </methodref>
        <methodref name="FieldAddress" visibility="public" procflags="overload">
        </methodref>
        <methodref name="FieldAddress" visibility="public" procflags="overload">
        </methodref>
        <methodref name="GetInterface" visibility="public">
        </methodref>
        <methodref name="GetInterfaceEntry" visibility="public" procflags="class">
        </methodref>
        <methodref name="GetInterfaceTable" visibility="public" procflags="class inline">
        </methodref>
        <methodref name="UnitName" visibility="public" procflags="class">
        </methodref>
        <methodref name="UnitScope" visibility="public" procflags="class">
        </methodref>
        <methodref name="Equals" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="GetHashCode" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="ToString" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="SafeCallException" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="AfterConstruction" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="BeforeDestruction" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="Dispatch" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="DefaultHandler" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="NewInstance" visibility="public" procflags="class virtual">
        </methodref>
        <methodref name="FreeInstance" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="Destroy" visibility="public" procflags="destructor virtual">
        </methodref>
        <methodref name="GetDisposed" visibility="protected" procflags="inline">
        </methodref>
        <methodref name="CheckDisposed" visibility="protected" procflags="inline">
        </methodref>
        <propertyref name="Disposed" visibility="protected">
        </propertyref>
      </ancestor>
    </ancestor>
  </class>
  <interface name="IDesignerControl" GUID="{C57A701D-E4B5-4711-BFA4-716E2164A929}" ancestor="IInterface" file="FMX.Controls.pas" line="63">
  </interface>
  <interface name="IHintReceiver" GUID="{533671CF-86C5-489E-B32A-724AF8464DCE}" ancestor="IInterface" file="FMX.Controls.pas" line="69">
    <devnotes>
       <summary>Controls that can respond to hint-related events must implement
       this interface.</summary>
    </devnotes>
    <procedure name="TriggerOnHint" visibility="public" procflags="abstract virtual" file="FMX.Controls.pas" line="72">
      <devnotes>
         <summary>This method is called when a hint is triggered.</summary>
      </devnotes>
    </procedure>
  </interface>
  <interface name="IHintRegistry" GUID="{8F3B3C46-450B-4A8C-800F-FD47538244C3}" ancestor="IInterface" file="FMX.Controls.pas" line="77">
    <devnotes>
       <summary>A class needs to implement this interface in order to be able to
       register IHintReceiver instances.</summary>
    </devnotes>
    <procedure name="TriggerHints" visibility="public" procflags="abstract virtual" file="FMX.Controls.pas" line="80">
      <devnotes>
         <summary>Triggers the TriggerOnHint method of all the objects that are registered in this registry.</summary>
      </devnotes>
    </procedure>
    <procedure name="RegisterHintReceiver" visibility="public" procflags="abstract virtual" file="FMX.Controls.pas" line="82">
      <devnotes>
         <summary>Registers a new receiver.</summary>
      </devnotes>
      <parameters>
        <parameter name="AReceiver" type="IHintReceiver" paramflags="const"/>
      </parameters>
    </procedure>
    <procedure name="UnregisterHintReceiver" visibility="public" procflags="abstract virtual" file="FMX.Controls.pas" line="84">
      <devnotes>
         <summary>Unregisters a receiver.</summary>
      </devnotes>
      <parameters>
        <parameter name="AReceiver" type="IHintReceiver" paramflags="const"/>
      </parameters>
    </procedure>
  </interface>
  <class name="THint" file="FMX.Controls.pas" line="88">
    
    <ancestor name="TObject" namespace="System">
      <methodref name="Create" visibility="public" procflags="constructor">
      </methodref>
      <methodref name="Free" visibility="public">
      </methodref>
      <methodref name="DisposeOf" visibility="public" procflags="inline">
      </methodref>
      <methodref name="InitInstance" visibility="public" procflags="class">
      </methodref>
      <methodref name="CleanupInstance" visibility="public">
      </methodref>
      <methodref name="ClassType" visibility="public" procflags="inline">
      </methodref>
      <methodref name="ClassName" visibility="public" procflags="class">
      </methodref>
      <methodref name="ClassNameIs" visibility="public" procflags="class">
      </methodref>
      <methodref name="ClassParent" visibility="public" procflags="class inline">
      </methodref>
      <methodref name="ClassInfo" visibility="public" procflags="class inline">
      </methodref>
      <methodref name="InstanceSize" visibility="public" procflags="class inline">
      </methodref>
      <methodref name="InheritsFrom" visibility="public" procflags="class">
      </methodref>
      <methodref name="MethodAddress" visibility="public" procflags="class overload">
      </methodref>
      <methodref name="MethodAddress" visibility="public" procflags="class overload">
      </methodref>
      <methodref name="MethodName" visibility="public" procflags="class">
      </methodref>
      <methodref name="QualifiedClassName" visibility="public" procflags="class">
      </methodref>
      <methodref name="FieldAddress" visibility="public" procflags="overload">
      </methodref>
      <methodref name="FieldAddress" visibility="public" procflags="overload">
      </methodref>
      <methodref name="GetInterface" visibility="public">
      </methodref>
      <methodref name="GetInterfaceEntry" visibility="public" procflags="class">
      </methodref>
      <methodref name="GetInterfaceTable" visibility="public" procflags="class inline">
      </methodref>
      <methodref name="UnitName" visibility="public" procflags="class">
      </methodref>
      <methodref name="UnitScope" visibility="public" procflags="class">
      </methodref>
      <methodref name="Equals" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="GetHashCode" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="ToString" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="SafeCallException" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="AfterConstruction" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="BeforeDestruction" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="Dispatch" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="DefaultHandler" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="NewInstance" visibility="public" procflags="class virtual">
      </methodref>
      <methodref name="FreeInstance" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="Destroy" visibility="public" procflags="destructor virtual">
      </methodref>
      <methodref name="GetDisposed" visibility="protected" procflags="inline">
      </methodref>
      <methodref name="CheckDisposed" visibility="protected" procflags="inline">
      </methodref>
      <propertyref name="Disposed" visibility="protected">
      </propertyref>
    </ancestor>
    <members>
      <classref name="THintClass" alias="FMX.Controls.THintClass" ref="THint" file="FMX.Controls.pas" line="90"/>
      <field name="FClassRegistry" type="TArray&lt;FMX.Controls.THint.THintClass&gt;" visibility="private" varflags="class" file="FMX.Controls.pas" line="92"/>
      <field name="FHint" type="string" visibility="protected" size="4" offset="4" file="FMX.Controls.pas" line="95">
        <devnotes>
           <summary>Field to store the hint.</summary>
        </devnotes>
      </field>
      <field name="FEnabled" type="Boolean" visibility="protected" size="1" offset="8" file="FMX.Controls.pas" line="97">
        <devnotes>
           <summary>Field to store the status (enabled or not) of the hint.</summary>
        </devnotes>
      </field>
      <procedure name="SetEnabled" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="99">
        <devnotes>
           <summary>Method that updates the state of enabled.</summary>
        </devnotes>
        <parameters>
          <parameter name="Value" type="Boolean" paramflags="const"/>
        </parameters>
      </procedure>
      <constructor name="Create" visibility="public" file="FMX.Controls.pas" line="103">
        <devnotes>
           <summary>Constructor. A constructor needs the native handle of the view that holds the hint. To give an example,
           in MS Windows is the HWND of the native window.</summary>
        </devnotes>
        <parameters>
          <parameter name="AHandle" type="TWindowHandle" paramflags="const"/>
        </parameters>
      </constructor>
      <procedure name="SetHint" visibility="public" procflags="virtual" file="FMX.Controls.pas" line="105">
        <devnotes>
           <summary>Sets the full hint string.</summary>
        </devnotes>
        <parameters>
          <parameter name="AString" type="string" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="GetHint" visibility="public" file="FMX.Controls.pas" line="107">
        <devnotes>
           <summary>Gets the full hint string.</summary>
        </devnotes>
        <parameters>
          <retval type="string"/>
        </parameters>
      </function>
      <function name="GetShortText" visibility="public" file="FMX.Controls.pas" line="110">
        <devnotes>
           <summary>The hint can follows the following pattern:  'A short Text| A Long text'. It means, the hint can hold
           two texts separated by the '|' character. This method returns the short text of the hint.</summary>
        </devnotes>
        <parameters>
          <retval type="string"/>
        </parameters>
      </function>
      <function name="GetLongText" visibility="public" file="FMX.Controls.pas" line="112">
        <devnotes>
           <summary>Returns the long text of the hint.</summary>
        </devnotes>
        <parameters>
          <retval type="string"/>
        </parameters>
      </function>
      <procedure name="SetPosition" visibility="public" procflags="abstract virtual" file="FMX.Controls.pas" line="114">
        <devnotes>
           <summary>If the specific implementation supports it, this metods places the hint in the given position.</summary>
        </devnotes>
        <parameters>
          <parameter name="X" type="Single" paramflags="const"/>
          <parameter name="Y" type="Single" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="RegisterClass" visibility="public" procflags="class" file="FMX.Controls.pas" line="117">
        <devnotes>
           <summary>Register a class to create hint instances. When a new THint instance is needed, the registered classes are invoked
           to create the needed instance.</summary>
        </devnotes>
        <parameters>
          <parameter name="AClass" type="THint.THintClass" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="CreateNewInstance" visibility="public" procflags="class" file="FMX.Controls.pas" line="120">
        <devnotes>
           <summary>Returns an instance created by the first available registered class. This method can return nil if there are no classes 
           registered or none of the registered classes can create a THint instance.</summary>
        </devnotes>
        <parameters>
          <parameter name="AHandle" type="TWindowHandle" paramflags="const"/>
          <retval type="THint">
            <devnotes>
               <summary>The base class for an object that can manage a hint.</summary>
            </devnotes>
          </retval>
        </parameters>
      </function>
      <function name="ContainsRegistredHintClasses" visibility="public" procflags="class" file="FMX.Controls.pas" line="122">
        <devnotes>
           <summary>Returns True if there are some THint class registered.</summary>
        </devnotes>
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <property name="Enabled" visibility="public" read="FEnabled" write="SetEnabled" type="Boolean" file="FMX.Controls.pas" line="125">
        <devnotes>
           <summary>If this property is true, the hint can be displayed, if it is False, the hint won't be displayed.</summary>
        </devnotes>
      </property>
      <procedure name="Create@" visibility="class private" procflags="class constructor noself" generated="true">
      </procedure>
      <procedure name="Destroy@" visibility="class private" procflags="class destructor noself" generated="true">
      </procedure>
    </members>
  </class>
  <class name="TCustomControlAction" file="FMX.Controls.pas" line="129">
    
    <members>
      <field name="FPopupMenu" type="TCustomPopupMenu" visibility="private" size="4" offset="184" file="FMX.Controls.pas" line="131">
        <attributes>
          <attribute name="TObject"/>
        </attributes>
      </field>
      <procedure name="SetPopupMenu" visibility="private" file="FMX.Controls.pas" line="132">
        <parameters>
          <parameter name="Value" type="TCustomPopupMenu" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="Notification" visibility="protected" procflags="override" file="FMX.Controls.pas" line="134">
        <parameters>
          <parameter name="AComponent" type="TComponent"/>
          <parameter name="Operation" type="TOperation"/>
        </parameters>
      <devnotes><summary>
Responds when components are created or destroyed.
FMX.Controls.TCustomControlAction.Notification inherits from System.Classes.TBasicAction.Notification. All content below this line refers to System.Classes.TBasicAction.Notification.
Responds when components are created or destroyed.
Do not call the Notification method in an application. Notification is called automatically when the component specified by AComponent is about to be inserted or removed, as specified by Operation. 
TBasicAction overrides the System.Classes.TComponent.Notification method. Notification checks whether the component specified by AComponent is the same as the component stored in the ActionComponent property and whether it is about to be freed. If so, Notification sets the ActionComponent property to nil (Delphi) or NULL (C++).
</summary></devnotes></procedure>
      <constructor name="Create" visibility="public" file="FMX.Controls.pas" line="136">
        <parameters>
          <parameter name="AOwner" type="TComponent"/>
        </parameters>
      <devnotes><summary>
Instantiates and initializes a FireMonkey TCustomAction object.
FMX.Controls.TCustomControlAction.Create inherits from FMX.ActnList.TCustomAction.Create. All content below this line refers to FMX.ActnList.TCustomAction.Create.
Instantiates and initializes a FireMonkey TCustomAction object.
Applications do not need to call the constructor directly. Actions are created automatically when you add them to an action list component using New Action in the Action List editor at design time.
If you want to create an action at run time, assign a TActionList component to its ActionList property after calling Create.
AOwner is the component that is responsible for freeing the action. It becomes the value of the Owner property.
Create calls an inherited System.Actions.TContainedAction.Create constructor and then initializes the Supported property with True .
</summary></devnotes></constructor>
      <property name="PopupMenu" visibility="public" read="FPopupMenu" write="SetPopupMenu" type="TCustomPopupMenu" file="FMX.Controls.pas" line="137"><devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></property>
    </members>
  <devnotes><summary>
TCustomControlAction is the base class for the actions that can be associated with some of the controls.
You can add a control action to a control by setting the Action property of the control, if it is supported. In the Object Inspector choose New Standard Action &gt; No Category &gt; TControl Action for the Action property.
</summary></devnotes></class>
  <class name="TControlAction" file="FMX.Controls.pas" line="142">
    
    <members>
      <property name="AutoCheck" visibility="published" read="FAutoCheck" write="SetAutoCheck" type="Boolean" default="0" hoisted="true" file="FMX.Controls.pas" line="144"/>
      <property name="Text" visibility="published" read="GetText" write="SetText" type="string" default="0" hoisted="true" file="FMX.Controls.pas" line="145"/>
      <property name="Checked" visibility="published" read="FChecked" write="SetChecked" type="Boolean" default="0" hoisted="true" file="FMX.Controls.pas" line="146"/>
      <property name="Enabled" visibility="published" read="FEnabled" write="SetEnabled" type="Boolean" default="1" hoisted="true" file="FMX.Controls.pas" line="147"/>
      <property name="GroupIndex" visibility="published" read="FGroupIndex" write="SetGroupIndex" type="Integer" default="0" hoisted="true" file="FMX.Controls.pas" line="148"/>
      <property name="HelpContext" visibility="published" read="FHelpContext" write="SetHelpContext" type="THelpContext" default="0" hoisted="true" file="FMX.Controls.pas" line="149"/>
      <property name="HelpKeyword" visibility="published" read="FHelpKeyword" write="SetHelpKeyword" type="string" default="0" hoisted="true" file="FMX.Controls.pas" line="150"/>
      <property name="HelpType" visibility="published" read="FHelpType" write="SetHelpType" type="THelpType" default="0" hoisted="true" file="FMX.Controls.pas" line="151"/>
      <property name="Hint" visibility="published" read="FHint" write="SetHint" type="string" default="0" hoisted="true" file="FMX.Controls.pas" line="152"/>
      <property name="ImageIndex" visibility="published" read="FImageIndex" write="SetImageIndex" type="TImageIndex" default="-1" hoisted="true" file="FMX.Controls.pas" line="153"/>
      <property name="ShortCut" visibility="published" read="FShortCut" write="SetShortCut" type="TShortCut" default="0" hoisted="true" file="FMX.Controls.pas" line="154"/>
      <property name="SecondaryShortCuts" visibility="published" read="GetSecondaryShortCuts" write="SetSecondaryShortCuts" stored="IsSecondaryShortCutsStored" type="TCustomShortCutList" hoisted="true" file="FMX.Controls.pas" line="155"/>
      <property name="Visible" visibility="published" read="FVisible" write="SetVisible" type="Boolean" default="1" hoisted="true" file="FMX.Controls.pas" line="156"/>
      <property name="UnsupportedArchitectures" visibility="published" read="FUnsupportedArchitectures" write="SetUnsupportedArchitectures" type="TArchitectures" default="0" hoisted="true" file="FMX.Controls.pas" line="157"/>
      <property name="UnsupportedPlatforms" visibility="published" read="FUnsupportedPlatforms" write="SetUnsupportedPlatforms" type="TPlatforms" default="0" hoisted="true" file="FMX.Controls.pas" line="158"/>
      <event name="OnExecute" visibility="published" read="FOnExecute" write="SetOnExecute" type="TNotifyEvent" hoisted="true" file="FMX.Controls.pas" line="159"/>
      <event name="OnHint" visibility="published" read="FOnHint" write="FOnHint" type="THintEvent" hoisted="true" file="FMX.Controls.pas" line="160"/>
      <event name="OnUpdate" visibility="published" read="FOnUpdate" write="FOnUpdate" type="TNotifyEvent" hoisted="true" file="FMX.Controls.pas" line="161"/>
      <property name="PopupMenu" visibility="published" read="FPopupMenu" write="SetPopupMenu" type="TCustomPopupMenu" hoisted="true" file="FMX.Controls.pas" line="162"/>
    </members>
  </class>
  <class name="TControlActionLink" file="FMX.Controls.pas" line="167">
    
    <ancestor name="TActionLink" namespace="FMX.ActnList">
      <methodref name="UpdateImages" visibility="private"/>
      <methodref name="AssignClient" visibility="protected" procflags="override"/>
      <methodref name="SetAction" visibility="protected" procflags="override"/>
      <methodref name="IsCaptionLinked" visibility="protected" procflags="override"/>
      <methodref name="IsCheckedLinked" visibility="protected" procflags="override"/>
      <methodref name="IsEnabledLinked" visibility="protected" procflags="override"/>
      <methodref name="IsGroupIndexLinked" visibility="protected" procflags="override"/>
      <methodref name="IsOnExecuteLinked" visibility="protected" procflags="override"/>
      <methodref name="IsShortCutLinked" visibility="protected" procflags="override"/>
      <methodref name="IsVisibleLinked" visibility="protected" procflags="override"/>
      <methodref name="IsImageIndexLinked" visibility="protected" procflags="override"/>
      <methodref name="SetCaption" visibility="protected" procflags="override"/>
      <methodref name="SetChecked" visibility="protected" procflags="override"/>
      <methodref name="SetGroupIndex" visibility="protected" procflags="override"/>
      <methodref name="SetImageIndex" visibility="protected" procflags="override"/>
      <methodref name="Change" visibility="protected" procflags="override"/>
      <propertyref name="Glyph" visibility="protected">
      </propertyref>
      <methodref name="IsViewActionClient" visibility="public"/>
      <propertyref name="Client" visibility="public"/>
      <propertyref name="Images" visibility="public">
      </propertyref>
      <propertyref name="CaptionLinked" visibility="public"/>
      <propertyref name="HintLinked" visibility="public">
      </propertyref>
      <propertyref name="CheckedLinked" visibility="public"/>
      <propertyref name="EnabledLinked" visibility="public"/>
      <propertyref name="GroupIndexLinked" visibility="public"/>
      <propertyref name="ShortCutLinked" visibility="public"/>
      <propertyref name="VisibleLinked" visibility="public"/>
      <propertyref name="OnExecuteLinked" visibility="public"/>
      <ancestor name="TContainedActionLink" namespace="System.Actions">
        <methodref name="DefaultIsLinked" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="IsCaptionLinked" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="IsCheckedLinked" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="IsEnabledLinked" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="IsGroupIndexLinked" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="IsHelpContextLinked" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="IsHelpLinked" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="IsHintLinked" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="IsImageIndexLinked" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="IsShortCutLinked" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="IsVisibleLinked" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="IsStatusActionLinked" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="SetAutoCheck" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="SetCaption" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="SetChecked" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="SetEnabled" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="SetGroupIndex" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="SetHelpContext" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="SetHelpKeyword" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="SetHelpType" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="SetHint" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="SetImageIndex" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="SetShortCut" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="SetVisible" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="SetStatusAction" visibility="protected" procflags="virtual">
        </methodref>
        <ancestor name="TBasicActionLink" namespace="System.Classes">
          <methodref name="AssignClient" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="Change" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="IsOnExecuteLinked" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="SetAction" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="SetOnExecute" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="Create" visibility="public" procflags="constructor virtual">
          </methodref>
          <methodref name="Destroy" visibility="public" procflags="destructor override">
          </methodref>
          <methodref name="Execute" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="Update" visibility="public" procflags="virtual">
          </methodref>
          <propertyref name="Action" visibility="public">
          </propertyref>
          <eventref name="OnChange" visibility="public">
          </eventref>
          <ancestor name="TObject" namespace="System">
            <methodref name="Create" visibility="public" procflags="constructor">
            </methodref>
            <methodref name="Free" visibility="public">
            </methodref>
            <methodref name="DisposeOf" visibility="public" procflags="inline">
            </methodref>
            <methodref name="InitInstance" visibility="public" procflags="class">
            </methodref>
            <methodref name="CleanupInstance" visibility="public">
            </methodref>
            <methodref name="ClassType" visibility="public" procflags="inline">
            </methodref>
            <methodref name="ClassName" visibility="public" procflags="class">
            </methodref>
            <methodref name="ClassNameIs" visibility="public" procflags="class">
            </methodref>
            <methodref name="ClassParent" visibility="public" procflags="class inline">
            </methodref>
            <methodref name="ClassInfo" visibility="public" procflags="class inline">
            </methodref>
            <methodref name="InstanceSize" visibility="public" procflags="class inline">
            </methodref>
            <methodref name="InheritsFrom" visibility="public" procflags="class">
            </methodref>
            <methodref name="MethodAddress" visibility="public" procflags="class overload">
            </methodref>
            <methodref name="MethodAddress" visibility="public" procflags="class overload">
            </methodref>
            <methodref name="MethodName" visibility="public" procflags="class">
            </methodref>
            <methodref name="QualifiedClassName" visibility="public" procflags="class">
            </methodref>
            <methodref name="FieldAddress" visibility="public" procflags="overload">
            </methodref>
            <methodref name="FieldAddress" visibility="public" procflags="overload">
            </methodref>
            <methodref name="GetInterface" visibility="public">
            </methodref>
            <methodref name="GetInterfaceEntry" visibility="public" procflags="class">
            </methodref>
            <methodref name="GetInterfaceTable" visibility="public" procflags="class inline">
            </methodref>
            <methodref name="UnitName" visibility="public" procflags="class">
            </methodref>
            <methodref name="UnitScope" visibility="public" procflags="class">
            </methodref>
            <methodref name="Equals" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="GetHashCode" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="ToString" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="SafeCallException" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="AfterConstruction" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="BeforeDestruction" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="Dispatch" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="DefaultHandler" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="NewInstance" visibility="public" procflags="class virtual">
            </methodref>
            <methodref name="FreeInstance" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="Destroy" visibility="public" procflags="destructor virtual">
            </methodref>
            <methodref name="GetDisposed" visibility="protected" procflags="inline">
            </methodref>
            <methodref name="CheckDisposed" visibility="protected" procflags="inline">
            </methodref>
            <propertyref name="Disposed" visibility="protected">
            </propertyref>
          </ancestor>
        </ancestor>
      </ancestor>
    </ancestor>
    <members>
      <function name="GetClient" visibility="private" file="FMX.Controls.pas" line="169">
        <parameters>
          <retval type="TControl"/>
        </parameters>
      </function>
      <procedure name="AssignClient" visibility="protected" procflags="override" file="FMX.Controls.pas" line="171">
        <parameters>
          <parameter name="AClient" type="TObject"/>
        </parameters>
      </procedure>
      <function name="IsEnabledLinked" visibility="protected" procflags="override" file="FMX.Controls.pas" line="172">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <function name="IsHelpLinked" visibility="protected" procflags="override" file="FMX.Controls.pas" line="173">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <function name="IsHintLinked" visibility="protected" procflags="override" file="FMX.Controls.pas" line="174">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <function name="IsVisibleLinked" visibility="protected" procflags="override" file="FMX.Controls.pas" line="175">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <function name="IsOnExecuteLinked" visibility="protected" procflags="override" file="FMX.Controls.pas" line="176">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <function name="IsPopupMenuLinked" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="177">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <function name="DoShowHint" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="179">
        <devnotes>
           <summary>This method is invoked to allow a link to customize a Hint that is going to be displayed.</summary>
        </devnotes>
        <parameters>
          <parameter name="HintStr" type="string" paramflags="var"/>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <procedure name="SetHint" visibility="protected" procflags="override" file="FMX.Controls.pas" line="181">
        <devnotes>
           <summary>This method sets the string of the hint.</summary>
        </devnotes>
        <parameters>
          <parameter name="Value" type="string" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetEnabled" visibility="protected" procflags="override" file="FMX.Controls.pas" line="182">
        <parameters>
          <parameter name="Value" type="Boolean"/>
        </parameters>
      </procedure>
      <procedure name="SetHelpContext" visibility="protected" procflags="override" file="FMX.Controls.pas" line="183">
        <parameters>
          <parameter name="Value" type="THelpContext"/>
        </parameters>
      </procedure>
      <procedure name="SetHelpKeyword" visibility="protected" procflags="override" file="FMX.Controls.pas" line="184">
        <parameters>
          <parameter name="Value" type="string" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetHelpType" visibility="protected" procflags="override" file="FMX.Controls.pas" line="185">
        <parameters>
          <parameter name="Value" type="THelpType"/>
        </parameters>
      </procedure>
      <procedure name="SetVisible" visibility="protected" procflags="override" file="FMX.Controls.pas" line="186">
        <parameters>
          <parameter name="Value" type="Boolean"/>
        </parameters>
      </procedure>
      <procedure name="SetOnExecute" visibility="protected" procflags="override" file="FMX.Controls.pas" line="187">
        <parameters>
          <parameter name="Value" type="TNotifyEvent"/>
        </parameters>
      </procedure>
      <procedure name="SetPopupMenu" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="188">
        <parameters>
          <parameter name="Value" type="TCustomPopupMenu" paramflags="const"/>
        </parameters>
      </procedure>
      <property name="Client" visibility="public" read="GetClient" type="TControl" file="FMX.Controls.pas" line="190"/>
    </members>
  </class>
  <class name="TCaret" file="FMX.Controls.pas" line="193">
    
    <members>
      <const name="FMXFlasher" visibility="private" type="string">
        <value>
          FMXFlasher
        </value>
      </const>
      <function name="FlasherName" visibility="public" procflags="class override" file="FMX.Controls.pas" line="197">
        <parameters>
          <retval type="string"/>
        </parameters>
      </function>
      <property name="Color" visibility="published" read="FColor" write="SetColor" type="TAlphaColor" default="0" hoisted="true" file="FMX.Controls.pas" line="199"/>
      <property name="Interval" visibility="published" read="FInterval" write="SetInterval" type="TFlasherInterval" default="0" hoisted="true" file="FMX.Controls.pas" line="200"/>
      <property name="Width" visibility="published" read="GetWidth" write="SetWidth" type="Word" default="0" hoisted="true" file="FMX.Controls.pas" line="201"/>
    </members>
  </class>
  <enum name="TEnumControlsResult" alias="FMX.Types.TEnumProcResult" file="FMX.Controls.pas" line="206">
    <element value="0" name="Continue" file="FMX.Types.pas" line="9842"/>
    <element value="1" name="Discard" file="FMX.Types.pas" line="9842"/>
    <element value="2" name="Stop" file="FMX.Types.pas" line="9842"/>
  </enum>
  <anonMethod name="TEnumControlsRef" file="FMX.Controls.pas" line="208">
    <procedure name="Invoke" visibility="public" procflags="abstract virtual" file="FMX.Controls.pas" line="208">
      <parameters>
        <parameter name="AControl" type="TControl" paramflags="const"/>
        <parameter name="Done" type="Boolean" paramflags="var"/>
      </parameters>
    </procedure>
  </anonMethod>
  <type name="TOnPaintEvent" file="FMX.Controls.pas" line="212" procflags="closure">
  </type>
  <type name="TCustomSceneAddRectEvent" file="FMX.Controls.pas" line="214" procflags="closure">
  </type>
  <enum name="TPaintStage" file="FMX.Controls.pas" line="216">
    <element value="0" name="All" file="FMX.Controls.pas" line="216"/>
    <element value="1" name="Background" file="FMX.Controls.pas" line="216"/>
    <element value="2" name="Text" file="FMX.Controls.pas" line="216"/>
  </enum>
  <enum name="TControlType" file="FMX.Controls.pas" line="218">
    <element value="0" name="Styled" file="FMX.Controls.pas" line="218"/>
    <element value="1" name="Platform" file="FMX.Controls.pas" line="218"/>
  </enum>
  <helper name="TControlTypeHelper" for="TControlType" file="FMX.Controls.pas" line="221">
    <devnotes>
       <summary>Helper for TControlType.</summary>
    </devnotes>
    <members>
      <function name="ToString" visibility="public" procflags="helper" file="FMX.Controls.pas" line="224">
        <devnotes>
           <summary>Returns string presentation of value of this type</summary>
        </devnotes>
        <parameters>
          <retval type="string"/>
        </parameters>
      </function>
    </members>
  </helper>
  <interface name="IControlTypeSupportable" GUID="{0B538F5C-98AC-4F86-AAF1-9979B2F40B90}" ancestor="IInterface" file="FMX.Controls.pas" line="232">
    <devnotes>
       <summary>
         The marker for TControl component, which supports native control implementation. Use this interface to mark
         the component that can use the native OS implementation. The FMX platform implementation may use it for
         the better manipulation of focus management.
       </summary>
    </devnotes>
    <procedure name="SetControlType" visibility="public" procflags="abstract virtual" file="FMX.Controls.pas" line="234">
      <parameters>
        <parameter name="AControlType" type="TControlType" paramflags="const"/>
      </parameters>
    </procedure>
    <function name="GetControlType" visibility="public" procflags="abstract virtual" file="FMX.Controls.pas" line="235">
      <parameters>
        <retval type="TControlType"/>
      </parameters>
    </function>
    <property name="ControlType" visibility="public" read="GetControlType" write="SetControlType" type="TControlType" file="FMX.Controls.pas" line="236"/>
  </interface>
  <class name="TControl" file="FMX.Controls.pas" line="239">
    
    <interfaces>
      <implements name="ITriggerEffect"/>
      <implements name="ITriggerAnimation"/>
      <implements name="ITabStopController"/>
      <implements name="IGestureControl"/>
      <implements name="IEffectContainer"/>
      <implements name="IAlignableObject"/>
      <implements name="IRotatedControl"/>
      <implements name="IAlignRoot"/>
      <implements name="IContainerObject"/>
      <implements name="IControl"/>
    </interfaces>
    <members>
      <enum name="TDelayedEvent" visibility="private" alias="FMX.Controls.TDelayedEvent" file="FMX.Controls.pas" line="242">
        <element value="0" name="Resize" file="FMX.Controls.pas" line="242"/>
        <element value="1" name="Resized" file="FMX.Controls.pas" line="242"/>
      </enum>
      <const name="InitialControlsCapacity" visibility="private" type="Integer" file="FMX.Controls.pas" line="244">
        <value>
          $A
        </value>
      </const>
      <const name="DefaultTouchTargetExpansion" visibility="public" type="Integer" file="FMX.Controls.pas" line="246">
        <value>
          $6
        </value>
      </const>
      <const name="DefaultDisabledOpacity" visibility="public" type="Comp" file="FMX.Controls.pas" line="247">
        <value>
          0.6
        </value>
      </const>
      <const name="DesignBorderColor" visibility="public" type="Integer" file="FMX.Controls.pas" line="248">
        <value>
          $A0909090
        </value>
      </const>
      <field name="FPaintStage" type="TPaintStage" visibility="private" varflags="class" file="FMX.Controls.pas" line="250"/>
      <field name="FOnMouseUp" type="TMouseEvent" visibility="class private" size="8" offset="128" file="FMX.Controls.pas" line="252"/>
      <field name="FOnMouseDown" type="TMouseEvent" visibility="class private" size="8" offset="136" file="FMX.Controls.pas" line="253"/>
      <field name="FOnMouseMove" type="TMouseMoveEvent" visibility="class private" size="8" offset="144" file="FMX.Controls.pas" line="254"/>
      <field name="FOnMouseWheel" type="TMouseWheelEvent" visibility="class private" size="8" offset="152" file="FMX.Controls.pas" line="255"/>
      <field name="FOnClick" type="TNotifyEvent" visibility="class private" size="8" offset="160" file="FMX.Controls.pas" line="256"/>
      <field name="FOnDblClick" type="TNotifyEvent" visibility="class private" size="8" offset="168" file="FMX.Controls.pas" line="257"/>
      <field name="FHitTest" type="Boolean" visibility="class private" size="1" offset="176" file="FMX.Controls.pas" line="258"/>
      <field name="FClipChildren" type="Boolean" visibility="class private" size="1" offset="177" file="FMX.Controls.pas" line="259"/>
      <field name="FAutoCapture" type="Boolean" visibility="class private" size="1" offset="178" file="FMX.Controls.pas" line="260"/>
      <field name="FPadding" type="TBounds" visibility="class private" size="4" offset="180" file="FMX.Controls.pas" line="261"/>
      <field name="FMargins" type="TBounds" visibility="class private" size="4" offset="184" file="FMX.Controls.pas" line="262"/>
      <field name="FTempCanvas" type="TCanvas" visibility="class private" size="4" offset="188" file="FMX.Controls.pas" line="263"/>
      <field name="FRotationAngle" type="Single" visibility="class private" size="4" offset="192" file="FMX.Controls.pas" line="264"/>
      <field name="FPosition" type="TPosition" visibility="class private" size="4" offset="196" file="FMX.Controls.pas" line="265"/>
      <field name="FScale" type="TPosition" visibility="class private" size="4" offset="200" file="FMX.Controls.pas" line="266"/>
      <field name="FSkew" type="TPosition" visibility="class private" size="4" offset="204" file="FMX.Controls.pas" line="267"/>
      <field name="FRotationCenter" type="TPosition" visibility="class private" size="4" offset="208" file="FMX.Controls.pas" line="268"/>
      <field name="FCanFocus" type="Boolean" visibility="class private" size="1" offset="212" file="FMX.Controls.pas" line="269"/>
      <field name="FOnCanFocus" type="TCanFocusEvent" visibility="class private" size="8" offset="216" file="FMX.Controls.pas" line="270"/>
      <field name="FOnEnter" type="TNotifyEvent" visibility="class private" size="8" offset="224" file="FMX.Controls.pas" line="271"/>
      <field name="FOnExit" type="TNotifyEvent" visibility="class private" size="8" offset="232" file="FMX.Controls.pas" line="272"/>
      <field name="FClipParent" type="Boolean" visibility="class private" size="1" offset="240" file="FMX.Controls.pas" line="273"/>
      <field name="FOnMouseLeave" type="TNotifyEvent" visibility="class private" size="8" offset="248" file="FMX.Controls.pas" line="274"/>
      <field name="FOnMouseEnter" type="TNotifyEvent" visibility="class private" size="8" offset="256" file="FMX.Controls.pas" line="275"/>
      <field name="FOnPaint" type="TOnPaintEvent" visibility="class private" size="8" offset="264" file="FMX.Controls.pas" line="276"/>
      <field name="FOnPainting" type="TOnPaintEvent" visibility="class private" size="8" offset="272" file="FMX.Controls.pas" line="277"/>
      <field name="FCursor" type="TCursor" visibility="class private" size="2" offset="280" file="FMX.Controls.pas" line="278"/>
      <field name="FInheritedCursor" type="TCursor" visibility="class private" size="2" offset="282" file="FMX.Controls.pas" line="279"/>
      <field name="FDragMode" type="TDragMode" visibility="class private" size="1" offset="284" file="FMX.Controls.pas" line="280"/>
      <field name="FEnableDragHighlight" type="Boolean" visibility="class private" size="1" offset="285" file="FMX.Controls.pas" line="281"/>
      <field name="FOnDragEnter" type="TDragEnterEvent" visibility="class private" size="8" offset="288" file="FMX.Controls.pas" line="282"/>
      <field name="FOnDragDrop" type="TDragDropEvent" visibility="class private" size="8" offset="296" file="FMX.Controls.pas" line="283"/>
      <field name="FOnDragLeave" type="TNotifyEvent" visibility="class private" size="8" offset="304" file="FMX.Controls.pas" line="284"/>
      <field name="FOnDragOver" type="TDragOverEvent" visibility="class private" size="8" offset="312" file="FMX.Controls.pas" line="285"/>
      <field name="FOnDragEnd" type="TNotifyEvent" visibility="class private" size="8" offset="320" file="FMX.Controls.pas" line="286"/>
      <field name="FIsDragOver" type="Boolean" visibility="class private" size="1" offset="328" file="FMX.Controls.pas" line="287"/>
      <field name="FOnKeyDown" type="TKeyEvent" visibility="class private" size="8" offset="336" file="FMX.Controls.pas" line="288"/>
      <field name="FOnKeyUp" type="TKeyEvent" visibility="class private" size="8" offset="344" file="FMX.Controls.pas" line="289"/>
      <field name="FOnTap" type="TTapEvent" visibility="class private" size="8" offset="352" file="FMX.Controls.pas" line="290"/>
      <field name="FHint" type="string" visibility="class private" size="4" offset="360" file="FMX.Controls.pas" line="291"/>
      <field name="FActionHint" type="string" visibility="class private" size="4" offset="364" file="FMX.Controls.pas" line="292"/>
      <field name="FShowHint" type="Boolean" visibility="class private" size="1" offset="368" file="FMX.Controls.pas" line="293"/>
      <field name="FPopupMenu" type="TCustomPopupMenu" visibility="class private" size="4" offset="372" file="FMX.Controls.pas" line="294"/>
      <field name="FRecalcEnabled" type="Boolean" visibility="class private" size="1" offset="376" file="FMX.Controls.pas" line="295"/>
      <field name="FEnabled" type="Boolean" visibility="class private" size="1" offset="377" file="FMX.Controls.pas" line="295"/>
      <field name="FAbsoluteEnabled" type="Boolean" visibility="class private" size="1" offset="378" file="FMX.Controls.pas" line="295"/>
      <field name="FTabList" type="TTabList" visibility="class private" size="4" offset="380" file="FMX.Controls.pas" line="296"/>
      <field name="FOnResize" type="TNotifyEvent" visibility="class private" size="8" offset="384" file="FMX.Controls.pas" line="297"/>
      <field name="FOnResized" type="TNotifyEvent" visibility="class private" size="8" offset="392" file="FMX.Controls.pas" line="298"/>
      <field name="FDisableEffect" type="Boolean" visibility="class private" size="1" offset="400" file="FMX.Controls.pas" line="299"/>
      <field name="FAcceptsControls" type="Boolean" visibility="class private" size="1" offset="401" file="FMX.Controls.pas" line="300"/>
      <field name="FControls" type="TControlList" visibility="class private" size="4" offset="404" file="FMX.Controls.pas" line="301"/>
      <field name="FEnableExecuteAction" type="Boolean" visibility="class private" size="1" offset="408" file="FMX.Controls.pas" line="302"/>
      <field name="FCanParentFocus" type="Boolean" visibility="class private" size="1" offset="409" file="FMX.Controls.pas" line="303"/>
      <field name="FMinClipHeight" type="Single" visibility="class private" size="4" offset="412" file="FMX.Controls.pas" line="304"/>
      <field name="FMinClipWidth" type="Single" visibility="class private" size="4" offset="416" file="FMX.Controls.pas" line="305"/>
      <field name="FSmallSizeControl" type="Boolean" visibility="class private" size="1" offset="420" file="FMX.Controls.pas" line="306"/>
      <field name="FTouchTargetExpansion" type="TBounds" visibility="class private" size="4" offset="424" file="FMX.Controls.pas" line="307"/>
      <field name="FOnDeactivate" type="TNotifyEvent" visibility="class private" size="8" offset="432" file="FMX.Controls.pas" line="308"/>
      <field name="FOnActivate" type="TNotifyEvent" visibility="class private" size="8" offset="440" file="FMX.Controls.pas" line="309"/>
      <field name="FSimpleTransform" type="Boolean" visibility="class private" size="1" offset="448" file="FMX.Controls.pas" line="310"/>
      <field name="FFixedSize" type="TSize" visibility="class private" size="8" offset="452" file="FMX.Controls.pas" line="311"/>
      <field name="FEffects" type="TList&lt;FMX.Effects.TEffect&gt;" visibility="class private" size="4" offset="460" file="FMX.Controls.pas" line="312"/>
      <field name="FDisabledOpacity" type="Single" visibility="class private" size="4" offset="464" file="FMX.Controls.pas" line="313"/>
      <field name="FParentControl" type="TControl" visibility="class private" size="4" offset="468" file="FMX.Controls.pas" line="314">
        <attributes>
          <attribute name="TObject"/>
        </attributes>
      </field>
      <field name="FParentContent" type="IContent" visibility="class private" size="4" offset="472" file="FMX.Controls.pas" line="315"/>
      <field name="FUpdateRect" type="TRectF" visibility="class private" size="16" offset="476" file="FMX.Controls.pas" line="316"/>
      <field name="FTabStop" type="Boolean" visibility="class private" size="1" offset="492" file="FMX.Controls.pas" line="317"/>
      <field name="FDisableDisappear" type="Integer" visibility="class private" size="4" offset="496" file="FMX.Controls.pas" line="318"/>
      <field name="FAnchorMove" type="Boolean" visibility="class private" size="1" offset="500" file="FMX.Controls.pas" line="319"/>
      <field name="FApplyingEffect" type="Boolean" visibility="class private" size="1" offset="501" file="FMX.Controls.pas" line="320"/>
      <field name="FExitingOrEntering" type="Boolean" visibility="class private" size="1" offset="502" file="FMX.Controls.pas" line="321"/>
      <field name="FDelayedEvents" visibility="class private" size="1" offset="503" file="FMX.Controls.pas" line="322">
        <set name="FDelayedEvents" visibility="class private" type="TControl.TDelayedEvent" file="FMX.Controls.pas" line="322">
          <element name="Resize"/>
          <element name="Resized"/>
        </set>
      </field>
      <field name="FTabOrder" type="TTabOrder" visibility="class private" size="2" offset="504" file="FMX.Controls.pas" line="323"/>
      <procedure name="AddToEffectsList" visibility="class private" file="FMX.Controls.pas" line="324">
        <parameters>
          <parameter name="AEffect" type="TEffect" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="RemoveFromEffectsList" visibility="class private" file="FMX.Controls.pas" line="325">
        <parameters>
          <parameter name="AEffect" type="TEffect" paramflags="const"/>
        </parameters>
      </procedure>
      <field name="FEmptyControlList" type="TControlList" visibility="class private" varflags="class" file="FMX.Controls.pas" line="326"/>
      <function name="GetInvertAbsoluteMatrix" visibility="class private" file="FMX.Controls.pas" line="327">
        <parameters>
          <retval type="TMatrix"/>
        </parameters>
      </function>
      <procedure name="SetPosition" visibility="class private" file="FMX.Controls.pas" line="328">
        <parameters>
          <parameter name="Value" type="TPosition" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetHitTest" visibility="class private" file="FMX.Controls.pas" line="329">
        <parameters>
          <parameter name="Value" type="Boolean" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetClipChildren" visibility="class private" file="FMX.Controls.pas" line="330">
        <parameters>
          <parameter name="Value" type="Boolean" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="GetCanvas" visibility="class private" procflags="inline" file="FMX.Controls.pas" line="331">
        <parameters>
          <retval type="TCanvas"/>
        </parameters>
      </function>
      <procedure name="SetLocked" visibility="class private" file="FMX.Controls.pas" line="332">
        <parameters>
          <parameter name="Value" type="Boolean" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetTempCanvas" visibility="class private" file="FMX.Controls.pas" line="333">
        <parameters>
          <parameter name="Value" type="TCanvas" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetOpacity" visibility="class private" file="FMX.Controls.pas" line="334">
        <parameters>
          <parameter name="Value" type="Single" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="IsOpacityStored" visibility="class private" file="FMX.Controls.pas" line="335">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <procedure name="SetCursor" visibility="class private" file="FMX.Controls.pas" line="336">
        <parameters>
          <parameter name="Value" type="TCursor" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="RefreshInheritedCursor" visibility="class private" file="FMX.Controls.pas" line="337">
      </procedure>
      <procedure name="RefreshInheritedCursorForChildren" visibility="class private" file="FMX.Controls.pas" line="338">
      </procedure>
      <function name="GetAbsoluteWidth" visibility="class private" file="FMX.Controls.pas" line="339">
        <parameters>
          <retval type="Single"/>
        </parameters>
      </function>
      <function name="GetAbsoluteHeight" visibility="class private" file="FMX.Controls.pas" line="340">
        <parameters>
          <retval type="Single"/>
        </parameters>
      </function>
      <function name="IsAnchorsStored" visibility="class private" file="FMX.Controls.pas" line="341">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <function name="GetEnabled" visibility="class private" file="FMX.Controls.pas" line="342">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <function name="GetCursor" visibility="class private" file="FMX.Controls.pas" line="343">
        <parameters>
          <retval type="TCursor"/>
        </parameters>
      </function>
      <function name="GetInheritedCursor" visibility="class private" file="FMX.Controls.pas" line="344">
        <parameters>
          <retval type="TCursor"/>
        </parameters>
      </function>
      <function name="GetAbsoluteHasEffect" visibility="class private" file="FMX.Controls.pas" line="345">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <function name="GetAbsoluteHasDisablePaintEffect" visibility="class private" file="FMX.Controls.pas" line="346">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <function name="GetAbsoluteHasAfterPaintEffect" visibility="class private" file="FMX.Controls.pas" line="347">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <procedure name="PaddingChangedHandler" visibility="class private" procflags="overload" file="FMX.Controls.pas" line="348">
        <parameters>
          <parameter name="Sender" type="TObject"/>
        </parameters>
      </procedure>
      <procedure name="MarginsChanged" visibility="class private" file="FMX.Controls.pas" line="349">
        <parameters>
          <parameter name="Sender" type="TObject"/>
        </parameters>
      </procedure>
      <procedure name="MatrixChanged" visibility="class private" file="FMX.Controls.pas" line="350">
        <parameters>
          <parameter name="Sender" type="TObject"/>
        </parameters>
      </procedure>
      <procedure name="SizeChanged" visibility="class private" file="FMX.Controls.pas" line="351">
        <parameters>
          <parameter name="Sender" type="TObject"/>
        </parameters>
      </procedure>
      <function name="GetControlsCount" visibility="class private" file="FMX.Controls.pas" line="352">
        <parameters>
          <retval type="Integer"/>
        </parameters>
      </function>
      <function name="OnClickStored" visibility="class private" file="FMX.Controls.pas" line="353">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <function name="IsPopupMenuStored" visibility="class private" file="FMX.Controls.pas" line="354">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <procedure name="RequestAlign" visibility="class private" file="FMX.Controls.pas" line="355">
      </procedure>
      <procedure name="SetMinClipHeight" visibility="class private" file="FMX.Controls.pas" line="356">
        <parameters>
          <parameter name="Value" type="Single" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetMinClipWidth" visibility="class private" file="FMX.Controls.pas" line="357">
        <parameters>
          <parameter name="Value" type="Single" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="UpdateSmallSizeControl" visibility="class private" file="FMX.Controls.pas" line="358">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <procedure name="Create@" visibility="class private" procflags="class constructor noself" file="FMX.Controls.pas" line="359">
      </procedure>
      <procedure name="Destroy@" visibility="class private" procflags="class destructor noself" file="FMX.Controls.pas" line="360">
      </procedure>
      <procedure name="SetOnClick" visibility="class private" file="FMX.Controls.pas" line="361">
        <parameters>
          <parameter name="Value" type="TNotifyEvent" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="GetIsFocused" visibility="class private" file="FMX.Controls.pas" line="362">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <procedure name="SetPadding" visibility="class private" file="FMX.Controls.pas" line="363">
        <parameters>
          <parameter name="Value" type="TBounds" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetMargins" visibility="class private" file="FMX.Controls.pas" line="364">
        <parameters>
          <parameter name="Value" type="TBounds" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetTouchTargetExpansion" visibility="class private" file="FMX.Controls.pas" line="365">
        <parameters>
          <parameter name="Value" type="TBounds" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="InternalSizeChanged" visibility="class private" file="FMX.Controls.pas" line="366">
      </procedure>
      <procedure name="ReadFixedWidth" visibility="class private" file="FMX.Controls.pas" line="367">
        <parameters>
          <parameter name="Reader" type="TReader"/>
        </parameters>
      </procedure>
      <procedure name="WriteFixedWidth" visibility="class private" file="FMX.Controls.pas" line="368">
        <parameters>
          <parameter name="Writer" type="TWriter"/>
        </parameters>
      </procedure>
      <procedure name="ReadFixedHeight" visibility="class private" file="FMX.Controls.pas" line="369">
        <parameters>
          <parameter name="Reader" type="TReader"/>
        </parameters>
      </procedure>
      <procedure name="WriteFixedHeight" visibility="class private" file="FMX.Controls.pas" line="370">
        <parameters>
          <parameter name="Writer" type="TWriter"/>
        </parameters>
      </procedure>
      <procedure name="ReadDesignVisible" visibility="class private" file="FMX.Controls.pas" line="371">
        <parameters>
          <parameter name="Reader" type="TReader"/>
        </parameters>
      </procedure>
      <procedure name="ReadHint" visibility="class private" file="FMX.Controls.pas" line="372">
        <parameters>
          <parameter name="Reader" type="TReader"/>
        </parameters>
      </procedure>
      <procedure name="ReadShowHint" visibility="class private" file="FMX.Controls.pas" line="373">
        <parameters>
          <parameter name="Reader" type="TReader"/>
        </parameters>
      </procedure>
      <function name="DisabledOpacityStored" visibility="class private" file="FMX.Controls.pas" line="374">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <procedure name="SetDisabledOpacity" visibility="class private" file="FMX.Controls.pas" line="375">
        <parameters>
          <parameter name="Value" type="Single" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="GetAxisAlignedRect" visibility="class private" file="FMX.Controls.pas" line="376">
        <parameters>
          <retval type="TRectF"/>
        </parameters>
      </function>
      <function name="GetRotationAngle" visibility="class private" file="FMX.Controls.pas" line="378">
        <parameters>
          <retval type="Single"/>
        </parameters>
      </function>
      <function name="GetRotationCenter" visibility="class private" file="FMX.Controls.pas" line="379">
        <parameters>
          <retval type="TPosition"/>
        </parameters>
      </function>
      <function name="GetScale" visibility="class private" file="FMX.Controls.pas" line="380">
        <parameters>
          <retval type="TPosition"/>
        </parameters>
      </function>
      <procedure name="SetRotationAngle" visibility="class private" file="FMX.Controls.pas" line="381">
        <parameters>
          <parameter name="Value" type="Single" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetRotationCenter" visibility="class private" file="FMX.Controls.pas" line="382">
        <parameters>
          <parameter name="Value" type="TPosition" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetScale" visibility="class private" file="FMX.Controls.pas" line="383">
        <parameters>
          <parameter name="Value" type="TPosition" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="GetTabOrder" visibility="class private" file="FMX.Controls.pas" line="384">
        <parameters>
          <retval type="TTabOrder"/>
        </parameters>
      </function>
      <procedure name="SetTabOrder" visibility="class private" file="FMX.Controls.pas" line="385">
        <parameters>
          <parameter name="Value" type="TTabOrder" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="GetTabStop" visibility="class private" file="FMX.Controls.pas" line="386">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <procedure name="SetTabStop" visibility="class private" file="FMX.Controls.pas" line="387">
        <parameters>
          <parameter name="TabStop" type="Boolean" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetDisableDisappear" visibility="class private" file="FMX.Controls.pas" line="388">
        <parameters>
          <parameter name="Value" type="Boolean" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="GetDisableDisappear" visibility="class private" file="FMX.Controls.pas" line="389">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <procedure name="UpdateParentProperties" visibility="class private" file="FMX.Controls.pas" line="390">
      </procedure>
      <field name="FInflated" type="Boolean" visibility="private" size="1" offset="506" file="FMX.Controls.pas" line="392"/>
      <field name="FOnApplyStyleLookup" type="TNotifyEvent" visibility="private" size="8" offset="512" file="FMX.Controls.pas" line="393"/>
      <field name="FAlign" type="TAlignLayout" visibility="private" size="4" offset="520" file="FMX.Controls.pas" line="394"/>
      <field name="FAnchors" type="TAnchors" visibility="private" size="1" offset="524" file="FMX.Controls.pas" line="395"/>
      <field name="FUpdateEffects" type="Boolean" visibility="private" size="1" offset="525" file="FMX.Controls.pas" line="396"/>
      <field name="FDisableFocusEffect" type="Boolean" visibility="private" size="1" offset="526" file="FMX.Controls.pas" line="397"/>
      <field name="FTouchManager" type="TTouchManager" visibility="private" size="4" offset="528" file="FMX.Controls.pas" line="398"/>
      <field name="FOnGesture" type="TGestureEvent" visibility="private" size="8" offset="536" file="FMX.Controls.pas" line="399"/>
      <field name="FVisible" type="Boolean" visibility="private" size="1" offset="544" file="FMX.Controls.pas" line="400"/>
      <field name="FPressed" type="Boolean" visibility="private" size="1" offset="545" file="FMX.Controls.pas" line="401"/>
      <field name="FPressedPosition" type="TPointF" visibility="private" size="8" offset="548" file="FMX.Controls.pas" line="402"/>
      <field name="FDoubleClick" type="Boolean" visibility="private" size="1" offset="556" file="FMX.Controls.pas" line="403"/>
      <field name="FParentShowHint" type="Boolean" visibility="private" size="1" offset="557" file="FMX.Controls.pas" line="404"/>
      <field name="FCustomSceneAddRect" type="TCustomSceneAddRectEvent" visibility="private" size="8" offset="560" file="FMX.Controls.pas" line="405"/>
      <procedure name="CreateTouchManagerIfRequired" visibility="private" file="FMX.Controls.pas" line="406">
      </procedure>
      <function name="GetTouchManager" visibility="private" file="FMX.Controls.pas" line="407">
        <parameters>
          <retval type="TTouchManager"/>
        </parameters>
      </function>
      <procedure name="SetTouchManager" visibility="private" file="FMX.Controls.pas" line="408">
        <parameters>
          <parameter name="Value" type="TTouchManager" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="IsShowHintStored" visibility="private" file="FMX.Controls.pas" line="409">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <procedure name="SetParentShowHint" visibility="private" file="FMX.Controls.pas" line="410">
        <parameters>
          <parameter name="Value" type="Boolean" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetShowHint" visibility="private" file="FMX.Controls.pas" line="411">
        <parameters>
          <parameter name="Value" type="Boolean" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="GetAbsoluteClipRect" visibility="private" file="FMX.Controls.pas" line="412">
        <parameters>
          <retval type="TRectF"/>
        </parameters>
      </function>
      <function name="HintStored" visibility="private" file="FMX.Controls.pas" line="413">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <procedure name="RepaintJointArea" visibility="class protected" file="FMX.Controls.pas" line="415">
        <parameters>
          <parameter name="DestControl" type="TObject" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <field name="FScene" type="IScene" visibility="protected" size="4" offset="568" file="FMX.Controls.pas" line="417"/>
      <field name="FLastHeight" type="Single" visibility="protected" size="4" offset="572" file="FMX.Controls.pas" line="418"/>
      <field name="FLastWidth" type="Single" visibility="protected" size="4" offset="576" file="FMX.Controls.pas" line="419"/>
      <field name="FSize" type="TControlSize" visibility="protected" size="4" offset="580" file="FMX.Controls.pas" line="420"/>
      <field name="FLocalMatrix" type="TMatrix" visibility="protected" size="36" offset="584" file="FMX.Controls.pas" line="421"/>
      <field name="FAbsoluteMatrix" type="TMatrix" visibility="protected" size="36" offset="620" file="FMX.Controls.pas" line="422"/>
      <field name="FInvAbsoluteMatrix" type="TMatrix" visibility="protected" size="36" offset="656" file="FMX.Controls.pas" line="423"/>
      <field name="FEffectBitmap" type="TBitmap" visibility="protected" size="4" offset="692" file="FMX.Controls.pas" line="424"/>
      <field name="FLocked" type="Boolean" visibility="protected" size="1" offset="696" file="FMX.Controls.pas" line="425"/>
      <field name="FOpacity" type="Single" visibility="protected" size="4" offset="700" file="FMX.Controls.pas" line="426"/>
      <field name="FAbsoluteOpacity" type="Single" visibility="protected" size="4" offset="704" file="FMX.Controls.pas" line="426"/>
      <field name="FInPaintTo" type="Boolean" visibility="protected" size="1" offset="708" file="FMX.Controls.pas" line="427"/>
      <field name="FInPaintToAbsMatrix" type="TMatrix" visibility="protected" size="36" offset="712" file="FMX.Controls.pas" line="428"/>
      <field name="FInPaintToInvMatrix" type="TMatrix" visibility="protected" size="36" offset="748" file="FMX.Controls.pas" line="428"/>
      <field name="FAbsoluteHasEffect" type="Boolean" visibility="protected" size="1" offset="784" file="FMX.Controls.pas" line="429"/>
      <field name="FAbsoluteHasDisablePaintEffect" type="Boolean" visibility="protected" size="1" offset="785" file="FMX.Controls.pas" line="430"/>
      <field name="FAbsoluteHasAfterPaintEffect" type="Boolean" visibility="protected" size="1" offset="786" file="FMX.Controls.pas" line="431"/>
      <field name="FUpdating" type="Integer" visibility="protected" size="4" offset="788" file="FMX.Controls.pas" line="432"/>
      <field name="FNeedAlign" type="Boolean" visibility="protected" size="1" offset="792" file="FMX.Controls.pas" line="433"/>
      <field name="FDisablePaint" type="Boolean" visibility="protected" size="1" offset="793" file="FMX.Controls.pas" line="434"/>
      <field name="FDisableAlign" type="Boolean" visibility="protected" size="1" offset="794" file="FMX.Controls.pas" line="435"/>
      <field name="FRecalcOpacity" type="Boolean" visibility="protected" size="1" offset="795" file="FMX.Controls.pas" line="436"/>
      <field name="FRecalcUpdateRect" type="Boolean" visibility="protected" size="1" offset="796" file="FMX.Controls.pas" line="437"/>
      <field name="FRecalcAbsolute" type="Boolean" visibility="protected" size="1" offset="797" file="FMX.Controls.pas" line="438"/>
      <field name="FRecalcHasEffect" type="Boolean" visibility="protected" size="1" offset="798" file="FMX.Controls.pas" line="439"/>
      <field name="FHasClipParent" type="TControl" visibility="protected" size="4" offset="800" file="FMX.Controls.pas" line="440"/>
      <field name="FRecalcHasClipParent" type="Boolean" visibility="protected" size="1" offset="804" file="FMX.Controls.pas" line="441"/>
      <field name="FDesignInteractive" type="Boolean" visibility="protected" size="1" offset="805" file="FMX.Controls.pas" line="442"/>
      <field name="FDesignSelectionMarks" type="Boolean" visibility="protected" size="1" offset="806" file="FMX.Controls.pas" line="443"/>
      <field name="FIsMouseOver" type="Boolean" visibility="protected" size="1" offset="807" file="FMX.Controls.pas" line="444"/>
      <field name="FIsFocused" type="Boolean" visibility="protected" size="1" offset="808" file="FMX.Controls.pas" line="445"/>
      <field name="FAnchorRules" type="TPointF" visibility="protected" size="8" offset="812" file="FMX.Controls.pas" line="447"/>
      <field name="FAnchorOrigin" type="TPointF" visibility="protected" size="8" offset="820" file="FMX.Controls.pas" line="448"/>
      <field name="FOriginalParentSize" type="TPointF" visibility="protected" size="8" offset="828" file="FMX.Controls.pas" line="449"/>
      <field name="FLeft" type="Single" visibility="protected" size="4" offset="836" file="FMX.Controls.pas" line="450"/>
      <field name="FTop" type="Single" visibility="protected" size="4" offset="840" file="FMX.Controls.pas" line="451"/>
      <field name="FExplicitLeft" type="Single" visibility="protected" size="4" offset="844" file="FMX.Controls.pas" line="452"/>
      <field name="FExplicitTop" type="Single" visibility="protected" size="4" offset="848" file="FMX.Controls.pas" line="453"/>
      <field name="FExplicitWidth" type="Single" visibility="protected" size="4" offset="852" file="FMX.Controls.pas" line="454"/>
      <field name="FExplicitHeight" type="Single" visibility="protected" size="4" offset="856" file="FMX.Controls.pas" line="455"/>
      <procedure name="DoAbsoluteChanged" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="456">
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <function name="CheckHitTest" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="457">
        <parameters>
          <parameter name="AHitTest" type="Boolean" paramflags="const"/>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></function>
      <procedure name="SetInPaintTo" visibility="protected" file="FMX.Controls.pas" line="458">
        <parameters>
          <parameter name="Value" type="Boolean"/>
        </parameters>
      <devnotes><summary>
Sets the InPaintTo property.
Value specifies the value to set the InPaintTo to. 
SetInPaintTo is used internally by PaintTo to have the InPaintTo flag set while the control is being painted. Value is likewise applied to all of the control's children.
</summary></devnotes></procedure>
      <procedure name="EndUpdateNoChanges" visibility="protected" file="FMX.Controls.pas" line="459">
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="SetHint" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="461">
        <devnotes><summary>
Setter for the Hint property.
</summary></devnotes>
        <parameters>
          <parameter name="AHint" type="string" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetEnabled" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="463">
        <parameters>
          <parameter name="Value" type="Boolean" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Setter of Enabled.


</summary></devnotes></procedure>
      <procedure name="Loaded" visibility="protected" procflags="override" file="FMX.Controls.pas" line="464">
      <devnotes><summary>
Initializes the component after the form file has been read into memory. 
Loaded inherits TComponent.Loaded, realigns the children, if any, and updates the tab list.
For details, see TComponent.Loaded.
</summary></devnotes></procedure>
      <procedure name="Updated" visibility="protected" procflags="override" file="FMX.Controls.pas" line="465">
      <devnotes><summary>
Clears the csUpdating state in the component's ComponentState property when the component finishes updating.
FMX.Controls.TControl.Updated inherits from System.Classes.TComponent.Updated. All content below this line refers to System.Classes.TComponent.Updated.
Clears the csUpdating state in the component's ComponentState property when the component finishes updating.
Do not call Updated directly. It is used internally to clear the csUpdating flag of the ComponentState property. A call to Updated always follows a call to Updating, which sets the flag.
</summary></devnotes></procedure>
      <procedure name="DefineProperties" visibility="protected" procflags="override" file="FMX.Controls.pas" line="466">
        <parameters>
          <parameter name="Filer" type="TFiler"/>
        </parameters>
      <devnotes><summary>


Designates methods for storing an object's unpublished data on a stream such as a form file.
FMX.Controls.TControl.DefineProperties inherits from System.Classes.TComponent.DefineProperties. All content below this line refers to System.Classes.TComponent.DefineProperties.
Designates methods for storing an object's unpublished data on a stream such as a form file.
TComponent overrides the DefineProperties method defined in TPersistent to define &quot;fake&quot; Top and Left properties. These are defined so that components that are not controls can be manipulated at design time. However, the Top and Left properties are hidden, that is, they are not published, because only controls appear at run time.
DefineProperties is virtual; descendent classes can override it. When overriding DefineProperties, be aware that the Ancestor property of Filer might be set, and that this property can determine whether or not it is appropriate to write properties.
DefineProperties is called automatically as part of the component streaming system; do not call it directly.
</summary></devnotes></procedure>
      <procedure name="Notification" visibility="protected" procflags="override" file="FMX.Controls.pas" line="467">
        <parameters>
          <parameter name="AComponent" type="TComponent"/>
          <parameter name="Operation" type="TOperation"/>
        </parameters>
      <devnotes><summary>


Forwards notification messages to all owned components.
FMX.Controls.TControl.Notification inherits from System.Classes.TComponent.Notification. All content below this line refers to System.Classes.TComponent.Notification.
Forwards notification messages to all owned components.
Do not call the Notification method in an application. Notification is called automatically when the component specified by AComponent is about to be inserted or removed, as specified by Operation. By default, components pass along the notification to their owned components, if any.
A component can, if needed, act on the notification that a component is being inserted or removed. For example, if a component has object fields or properties that contain references to other components, it can check the notifications of component removals and invalidate those references as needed.

Note: Notification is not called for components that are freed implicitly (because their Owner is freed).</summary></devnotes></procedure>
      <procedure name="ParentChanged" visibility="protected" procflags="override" file="FMX.Controls.pas" line="468">
      <devnotes><summary>
Executed right after the value of the Parent property changes.
The control does not execute ParentChanged if you assign Parent the same value that it already has.
</summary></devnotes></procedure>
      <procedure name="ChangeOrder" visibility="protected" procflags="override" file="FMX.Controls.pas" line="469">
      <devnotes><summary>
Notification method called after the creation order is changed.
FMX.Controls.TControl.ChangeOrder inherits from FMX.Types.TFmxObject.ChangeOrder. All content below this line refers to FMX.Types.TFmxObject.ChangeOrder.
Notification method called after the creation order is changed. ChangeOrder is a virtual method to be implemented in subclasses to allow for changing the creation order of this FMX object.
</summary></devnotes></procedure>
      <procedure name="ChangeChildren" visibility="protected" procflags="override" file="FMX.Controls.pas" line="470">
      <devnotes><summary>


Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="SetVisible" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="471">
        <parameters>
          <parameter name="Value" type="Boolean" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Setter function for the Visible property. Value specifies the new value of the Visible property.
</summary></devnotes></procedure>
      <function name="DoSetWidth" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="472" symflags="deprecated">
        <parameters>
          <parameter name="Value" type="Single" paramflags="var"/>
          <parameter name="NewValue" type="Single"/>
          <parameter name="LastValue" type="Single" paramflags="var"/>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>

Warning: DoSetWidth is deprecated. Please use DoSetSize. 



Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></function>
      <function name="DoSetHeight" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="473" symflags="deprecated">
        <parameters>
          <parameter name="Value" type="Single" paramflags="var"/>
          <parameter name="NewValue" type="Single"/>
          <parameter name="LastValue" type="Single" paramflags="var"/>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>

Warning: DoSetHeight is deprecated. Please use DoSetSize. 



Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></function>
      <function name="DoSetSize" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="474">
        <parameters>
          <parameter name="ASize" type="TControlSize" paramflags="const"/>
          <parameter name="NewPlatformDefault" type="Boolean" paramflags="const"/>
          <parameter name="ANewWidth" type="Single"/>
          <parameter name="ANewHeight" type="Single"/>
          <parameter name="ALastWidth" type="Single" paramflags="var"/>
          <parameter name="ALastHeight" type="Single" paramflags="var"/>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></function>
      <procedure name="HandleSizeChanged" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="476">
      <devnotes><summary>
Executed right after the value of the Size property changes.
The control does not execute HandleSizeChanged if you assign Size the same value that it already has.
</summary></devnotes></procedure>
      <procedure name="DoMatrixChanged" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="478">
        <parameters>
          <parameter name="Sender" type="TObject"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="SetHeight" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="479">
        <parameters>
          <parameter name="Value" type="Single" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Setter function for the Height property. Value specifies the new value of the Height property.
</summary></devnotes></procedure>
      <procedure name="SetWidth" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="480">
        <parameters>
          <parameter name="Value" type="Single" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Setter function for the Width property. Value specifies the new value of the Width property.
</summary></devnotes></procedure>
      <procedure name="SetSize" visibility="protected" procflags="overload virtual" file="FMX.Controls.pas" line="481">
        <parameters>
          <parameter name="AValue" type="TControlSize" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="SetSize" visibility="protected" procflags="overload virtual" file="FMX.Controls.pas" line="482">
        <parameters>
          <parameter name="AWidth" type="Single" paramflags="const"/>
          <parameter name="AHeight" type="Single" paramflags="const"/>
          <parameter name="APlatformDefault" type="Boolean" paramflags="const">
            <value>
              False
            </value>
          </parameter>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <function name="GetAbsoluteRect" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="483">
        <parameters>
          <retval type="TRectF"/>
        </parameters>
      <devnotes><summary>
Getter function for the AbsoluteRect property.
</summary></devnotes></function>
      <function name="GetChildrenMatrix" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="484">
        <parameters>
          <parameter name="Matrix" type="TMatrix" paramflags="var"/>
          <parameter name="Simple" type="Boolean" paramflags="var"/>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Returns the children transformation matrix.
The AbsoluteMatrix is calculated as:

  AbsoluteMatrix = (LocalMatrix * Parent.GetChildrenMatrix) * Parent.AbsoluteMatrix

TScaledLayout overrides GetChildrenMatrix to prescale layout contents.
</summary></devnotes></function>
      <function name="GetAbsoluteScale" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="485">
        <parameters>
          <retval type="TPointF"/>
        </parameters>
      <devnotes><summary>
Getter function for the AbsoluteScale property.
</summary></devnotes></function>
      <function name="GetParentedRect" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="486" symflags="deprecated">
        <parameters>
          <retval type="TRectF"/>
        </parameters>
      <devnotes><summary>

Warning: GetParentedRect is deprecated. Please use GetBoundsRect. 


Getter function for the ParentedRect property.
</summary></devnotes></function>
      <function name="GetClipRect" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="487">
        <parameters>
          <retval type="TRectF"/>
        </parameters>
      <devnotes><summary>
Getter function for the ClipRect property.
</summary></devnotes></function>
      <function name="GetEffectsRect" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="488">
        <parameters>
          <retval type="TRectF"/>
        </parameters>
      <devnotes><summary>
Returns the rectangle occupied by the effects applied over the control.  It is used when the control is updated.
</summary></devnotes></function>
      <function name="GetAbsoluteEnabled" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="489">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Getter function for the AbsoluteEnabled property.
</summary></devnotes></function>
      <function name="GetChildrenRect" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="490">
        <parameters>
          <retval type="TRectF"/>
        </parameters>
      <devnotes><summary>
Getter function for the ChildrenRect property.
</summary></devnotes></function>
      <function name="GetLocalRect" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="491">
        <parameters>
          <retval type="TRectF"/>
        </parameters>
      <devnotes><summary>
Getter function for the LocalRect property.
</summary></devnotes></function>
      <function name="GetBoundsRect" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="492">
        <parameters>
          <retval type="TRectF"/>
        </parameters>
      <devnotes><summary>
Getter function for the BoundsRect property.
</summary></devnotes></function>
      <procedure name="SetBoundsRect" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="493">
        <parameters>
          <parameter name="Value" type="TRectF" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Setter function for the BoundsRect property. Value specifies the new value of the BoundsRect property.
</summary></devnotes></procedure>
      <function name="IsHeightStored" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="494" symflags="deprecated">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>

Warning: IsHeightStored is deprecated. Please use IsSizeStored. 



Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></function>
      <function name="IsWidthStored" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="495" symflags="deprecated">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>

Warning: IsWidthStored is deprecated. Please use IsSizeStored. 



Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></function>
      <function name="IsPositionStored" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="496">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></function>
      <function name="IsSizeStored" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="497">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></function>
      <procedure name="SetPopupMenu" visibility="protected" file="FMX.Controls.pas" line="498">
        <parameters>
          <parameter name="Value" type="TCustomPopupMenu" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Setter function for the PopupMenu property. Value specifies the new value of the PopupMenu property.
</summary></devnotes></procedure>
      <function name="GetAbsoluteMatrix" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="500">
        <parameters>
          <retval type="TMatrix"/>
        </parameters>
      <devnotes><summary>
Getter function for the AbsoluteMatrix property.
</summary></devnotes></function>
      <function name="GetHasClipParent" visibility="protected" file="FMX.Controls.pas" line="501">
        <parameters>
          <retval type="TControl"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></function>
      <function name="GetUpdateRect" visibility="protected" file="FMX.Controls.pas" line="502">
        <parameters>
          <retval type="TRectF"/>
        </parameters>
      <devnotes><summary>
Getter function for the UpdateRect property.
</summary></devnotes></function>
      <function name="DoGetUpdateRect" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="503">
        <parameters>
          <retval type="TRectF"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></function>
      <function name="GetAbsoluteOpacity" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="505">
        <parameters>
          <retval type="Single"/>
        </parameters>
      <devnotes><summary>
Getter function for the AbsoluteOpacity property.
</summary></devnotes></function>
      <procedure name="BeginAutoDrag" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="507">
      <devnotes><summary>
Begins the drag operation automatically.
BeginAutoDrag is called automatically when a user drags a control whose DragMode is dmAutomatic. Do not call BeginAutoDrag in application code. 
Write an event handler for OnDragOver to specify what happens when a dragged object is over the area of the current control.
</summary></devnotes></procedure>
      <procedure name="Capture" visibility="protected" file="FMX.Controls.pas" line="508">
      <devnotes><summary>
Saves the control that currently captures all the mouse messages.
Capture sets the current root's Captured property if root is not empty.
ReleaseCapture prevents the current control from receiving all the mouse messages.   
</summary></devnotes></procedure>
      <procedure name="ReleaseCapture" visibility="protected" file="FMX.Controls.pas" line="509">
      <devnotes><summary>
Prevents the control from currently capturing all the mouse messages.
Capture empties the root's Captured property. 
</summary></devnotes></procedure>
      <property name="EnableExecuteAction" visibility="protected" read="FEnableExecuteAction" write="FEnableExecuteAction" type="Boolean" file="FMX.Controls.pas" line="510"><devnotes><summary>
Defines whether the control can use Action.OnExecute for mouse clicks, key pressing, and input on touch devices (gestures).
If  EnableExecuteAction is True and the OnClick event handler is not assigned (or is equal to Action.OnExecute), then Click executes the assigned Action, otherwise the OnClick event handler is executed.
Click is an event handler for the OnClick event. It is automatically called when the left mouse button is pressed and released with the pointer over the control.
EnableExecuteAction is True in TTextControl, TImageControl, TSwitch, and their descendants, while False in others.    
</summary></devnotes></property>
      <procedure name="Click" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="511">
      <devnotes><summary>
Responds to user clicks, key pressing, and input on touch devices (gestures).
Click is an event handler for the OnClick event. It is automatically called when the left mouse button is pressed and released with the pointer over the control. Click also can be called in DialogKey and other methods handling an input from keyboards and touch devices.
Call Click in applications to simulate an OnClick mouse event.  
If EnableExecuteAction is True and the OnClick event handler is not assigned (or is equal to Action.OnExecute), then Click executes the assigned Action, otherwise executes the OnClick event handler.
</summary></devnotes></procedure>
      <procedure name="DblClick" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="512">
      <devnotes><summary>
Responds to user double-clicks.
DblClick is an event handler for the OnDblClick event. It is automatically called when the left mouse button is pressed and released twice, consecutively, with the pointer over the control.
Call DblClick in applications to simulate a mouse OnDblClick event.  
</summary></devnotes></procedure>
      <procedure name="MouseDown" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="513">
        <parameters>
          <parameter name="Button" type="TMouseButton"/>
          <parameter name="Shift" type="TShiftState"/>
          <parameter name="X" type="Single"/>
          <parameter name="Y" type="Single"/>
        </parameters>
      <devnotes><summary>
OnMouseDown event dispatcher. 
A control calls MouseDown in response to any of mouse-down messages, decoding the message parameters into the shift-key state and position, which it passes in the Shift, X, and Y parameters, respectively:

Button determines which mouse button is pressed: left, right, or middle.
Shift indicates which shift keys--SHIFT, CTRL, ALT, and CMD (only for Mac)--were down when the user pressed the mouse button.
X and Y are the pixel coordinates of the mouse pointer within the client area of the control. If Button is mbLeft, MouseDown sets PressedPosition as a TPointF(X,Y).
Override the protected MouseDown method to provide other responses when a mouse button is down while the cursor is over the control.

</summary></devnotes></procedure>
      <procedure name="MouseMove" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="514">
        <parameters>
          <parameter name="Shift" type="TShiftState"/>
          <parameter name="X" type="Single"/>
          <parameter name="Y" type="Single"/>
        </parameters>
      <devnotes><summary>
OnMouseMove event dispatcher. 
As the mouse cursor moves across a control, this method is called repeatedly. Each time it is called with the new coordinates that reflect the continuous path of the mouse cursor across the screen real estate covered by the control's visual representation:

Shift indicates which shift keys--SHIFT, CTRL, ALT, and CMD (only for Mac)--were down when the mouse cursor is over the control.
X and Y are the pixel coordinates of the mouse pointer within the client area of the control.
Override the protected MouseMove method to provide other responses when the mouse cursor moves over the control.
</summary></devnotes></procedure>
      <procedure name="MouseUp" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="515">
        <parameters>
          <parameter name="Button" type="TMouseButton"/>
          <parameter name="Shift" type="TShiftState"/>
          <parameter name="X" type="Single"/>
          <parameter name="Y" type="Single"/>
        </parameters>
      <devnotes><summary>
OnMouseUp event dispatcher. 
A control calls MouseUp in response to any of mouse-up messages, decoding the message parameters into the shift-key state and position, which it passes in the Shift, X and Y parameters, respectively: 

Button determines which mouse button was previously pressed: left, right, or middle.
Shift indicates which shift keys--SHIFT, CTRL, ALT, and CMD (only for Mac)--were down when the pressed mouse button is released.
X and Y are the pixel coordinates of the mouse pointer within the client area of the control.
Override the protected MouseUp method to provide other responses when the mouse button previously pressed is released while the cursor is over the control.
</summary></devnotes></procedure>
      <procedure name="MouseWheel" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="516">
        <parameters>
          <parameter name="Shift" type="TShiftState"/>
          <parameter name="WheelDelta" type="Integer"/>
          <parameter name="Handled" type="Boolean" paramflags="var"/>
        </parameters>
      <devnotes><summary>
OnMouseWheel event dispatcher. 
A control calls MouseWheel in response to any of mouse wheel messages, decoding the message parameters into the shift-key state, wheel rotation, and handle, which it passes in the Shift, WheelDelta, and Handled parameters, respectively:

Shift indicates which shift keys--SHIFT, CTRL, ALT, and CMD (only for Mac)--were down when the pressed mouse button is released.
WheelDelta indicates the distance the wheel was rotated. WheelDelta is positive if the mouse was rotated upward, negative if the mouse was rotated downward.
Handled indicates whether the scroll bar was already moved, depending on the WheelDelta value. If one of the scrolls bars (vertical or horizontal) was already handled or it does not exist, MouseWheel tries to apply the rolling on the other scroll bar, if it exists.
Override the protected MouseWheel method to provide other responses when the mouse wheel is rotated while the cursor is over the control.
</summary></devnotes></procedure>
      <procedure name="MouseClick" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="517">
        <parameters>
          <parameter name="Button" type="TMouseButton"/>
          <parameter name="Shift" type="TShiftState"/>
          <parameter name="X" type="Single"/>
          <parameter name="Y" type="Single"/>
        </parameters>
      <devnotes><summary>
Calls Click and starts the animation by calling StartTriggerAnimation.
MouseClick receives the following parameters: 

Button determines which mouse button was previously pressed: left, right, or middle.
Shift indicates which shift keys -- SHIFT, CTRL, ALT, and CMD (only for Mac) -- were down when the pressed mouse button is released.
X and Y are the pixel coordinates of the mouse pointer within the client area of the control.</summary></devnotes></procedure>
      <procedure name="KeyDown" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="518">
        <parameters>
          <parameter name="Key" type="Word" paramflags="var"/>
          <parameter name="KeyChar" type="Char" paramflags="var"/>
          <parameter name="Shift" type="TShiftState"/>
        </parameters>
      <devnotes><summary>
Provides a response when a key is pressed down while the control has the keyboard focus. 
If the pressed key is the Applications key (Key = vkApps), then KeyDown shows the context menu of the control. Otherwise, KeyDown calls the OnKeyDown event handler if one is assigned. 
TCommonCustomForm and descendant of TControl classes--like TCustomGrid--call KeyDown from their methods handling key pressing. They decode the message parameters into the key code, character code, and shift state. They pass them into the called KeyDown method in the Key, KeyChar, and Shift parameters, respectively:  



Parameters

Descriptions



Key



Is the scan code of the pressed keyboard key or $0.
If a pressed key combination can be a shortcut, then Key &lt;&gt; 0 is a virtual key and KeyChar = #0. 
Physical scan codes of the same key can differ under different platforms (Windows or iOS).
Platform-specific units (for example FMX.Platform.Mac.pas) should translate native scan codes to corresponding Windows codes defined in the UITypes unit.  For example, 

vkReturn = $0D;  {  13 } corresponds to the RETURN keyboard key.
vkF2     = $71;  { 113 } corresponds to the F2 keyboard key.



KeyChar



Is the pressed character (digit) or #0.
If a pressed key combination can be treated as a printable character or digit, then Key = 0 and KeyChar contains a pressed symbol according to the current keyboard's input language, keyboard mode (CAPS LOCK and NUM LOCK keys), keyboard Shift state, and IME state. Editors can use this symbol to add into a text being edited. 




Shift



Indicates which shift keys--SHIFT, CTRL, ALT, and CMD (only for Mac)--were down when the specified key was pressed with the control in focus.


If the control has successfully processed the pressed key combination and no additional processing is required, then KeyDown assigns Key = 0 and KeyChar = #0.  
Override the protected KeyDown method to provide other responses when a key is down while the control has keyboard input focus.
See TCommonCustomForm.KeyDown for more information about parameters.
</summary></devnotes></procedure>
      <procedure name="KeyUp" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="519">
        <parameters>
          <parameter name="Key" type="Word" paramflags="var"/>
          <parameter name="KeyChar" type="Char" paramflags="var"/>
          <parameter name="Shift" type="TShiftState"/>
        </parameters>
      <devnotes><summary>
OnKeyUp event dispatcher. 
KeyUp provides a response when a key is released while the control has keyboard focus. KeyUp calls the OnKeyUp event handler if one is assigned.
A control calls KeyUp in response to any key-up messages, decoding the message parameters into the key code, character code, and shift state. The control passes them in the Key, KeyChar, and Shift parameters, respectively:

Key is the scan code of the released keyboard key.
KeyChar is the character code of the released key.
Shift indicates which shift keys--SHIFT, CTRL, ALT, and CMD (only for Mac)--were down when you release the previously pressed key with the control in focus.
Override the protected KeyUp method to provide other responses when a key is released while the control has keyboard input focus.
</summary></devnotes></procedure>
      <procedure name="DialogKey" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="520">
        <parameters>
          <parameter name="Key" type="Word" paramflags="var"/>
          <parameter name="Shift" type="TShiftState"/>
        </parameters>
      <devnotes><summary>
Processes a dialog key. 
DialogKey is called during the message preprocessing to handle dialog characters. 
Do not call DialogKey in an application. It is for internal use only.
DialogKey processes the dialog key messages for each of the control's children.


</summary></devnotes></procedure>
      <procedure name="AfterDialogKey" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="521">
        <parameters>
          <parameter name="Key" type="Word" paramflags="var"/>
          <parameter name="Shift" type="TShiftState"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <function name="ShowContextMenu" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="522">
        <parameters>
          <parameter name="ScreenPosition" type="TPointF" paramflags="const"/>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Displays the PopupMenu context menu of this control on the specified ScreenPosition screen point.
ShowContextMenu returns True if PopupMenu was successfully displayed.  Otherwise, ShowContextMenu returns False. 
To set or get a context (pop-up) menu for the current control, use the PopupMenu property.
Descendants can override this method. For example, descendants can show a default context menu if PopupMenu = nil.
</summary></devnotes></function>
      <procedure name="DragEnter" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="523">
        <parameters>
          <parameter name="Data" type="TDragObject" paramflags="const"/>
          <parameter name="Point" type="TPointF" paramflags="const"/>
        </parameters>
      <devnotes><summary>
OnDragEnter event dispatcher. 
Data specifies the dragged object.
Point specifies the current point of the mouse cursor within the client area of the control.
A control calls DragEnter when a dragged object enters the control area.
Override the protected DragEnter method to provide other responses when a dragged object enters the control area.
</summary></devnotes></procedure>
      <procedure name="DragOver" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="524">
        <parameters>
          <parameter name="Data" type="TDragObject" paramflags="const"/>
          <parameter name="Point" type="TPointF" paramflags="const"/>
          <parameter name="Operation" type="TDragOperation" paramflags="var"/>
        </parameters>
      <devnotes><summary>
OnDragOver event dispatcher. 
Data specifies the dragged object.
Point specifies the current point of the  mouse cursor within the client area of the control.
Operation is the operation parameter (None, Move, Copy, Link) that specifies the action to perform when an item is dragged over the object.  

None is the default. No action takes place, it does not display any name.
Move - the word Move is displayed once an item is dragged over the object.
Copy - the word Copy is displayed once an item is dragged over the object.
Link - the word Link is displayed once an item is dragged over the object.
A control calls DragOver when a dragged object is over the control area.
Override the protected DragOver method to provide other responses when a dragged object is over the control area.
</summary></devnotes></procedure>
      <procedure name="DragDrop" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="525">
        <parameters>
          <parameter name="Data" type="TDragObject" paramflags="const"/>
          <parameter name="Point" type="TPointF" paramflags="const"/>
        </parameters>
      <devnotes><summary>
OnDragDrop event dispatcher. 
Data specifies the dragged object.
Point specifies the current point of the mouse cursor, within the client area of the control.
A control calls DragDrop when a dragged object is dropped on the control area.
Override the protected DragDrop method to provide other responses when a dragged object is dropped on the control area.
</summary></devnotes></procedure>
      <procedure name="DragLeave" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="526">
      <devnotes><summary>
OnDragLeave event dispatcher. 
A control calls DragLeave when a dragged object leaves the control area.
Override the protected DragLeave method to provide other responses when a dragged object leaves the control area.
</summary></devnotes></procedure>
      <procedure name="DragEnd" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="527">
      <devnotes><summary>
OnDragEnd event dispatcher. 
A control calls DragEnd when a dragging session ends.
Override the protected DragEnd method to provide other responses when the dragging session ends.
</summary></devnotes></procedure>
      <function name="GetDefaultTouchTargetExpansion" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="528">
        <parameters>
          <retval type="TRectF"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></function>
      <function name="GetCanFocus" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="529">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></function>
      <function name="GetCanParentFocus" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="530">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></function>
      <function name="EnterChildren" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="531">
        <parameters>
          <parameter name="AObject" type="IControl"/>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Checks whether the input is taken by the control or by its parent.
EnterChildren returns True if the input is taken directly by the control's parent, and False otherwise. 
Usually, EnterChildren returns False. If the control is an item such as TListBoxItem, a TTreeViewItem, or TMenuItem, EnterChildren returns True.
</summary></devnotes></function>
      <function name="ExitChildren" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="532">
        <parameters>
          <parameter name="AObject" type="IControl"/>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></function>
      <function name="GetParentedVisible" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="533">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Returns the value of the ParentedVisible property.
GetParentedVisible is a protected method in the TControl class and is used to obtain the current value of the ParentedVisible property. 
</summary></devnotes></function>
      <procedure name="NeedUpdateEffects" visibility="protected" file="FMX.Controls.pas" line="535">
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="BeforeEffectEnabledChanged" visibility="protected" file="FMX.Controls.pas" line="536">
        <parameters>
          <parameter name="Enabled" type="Boolean" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Executed right before the value of the Enabled property of an effect changes, and provides the value of the property before it changes.
The control does not execute BeforeEffectEnabledChanged if you assign Enabled the same value that it already has.
</summary></devnotes></procedure>
      <procedure name="EffectEnabledChanged" visibility="protected" file="FMX.Controls.pas" line="537">
        <parameters>
          <parameter name="Enabled" type="Boolean" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Executed right after the value of the Enabled property of an effect changes, and provides the new value of the property.
The control does not execute EffectEnabledChanged if you assign Enabled the same value that it already has.
Effects execute EffectEnabledChanged instead of FMX.Controls.TControl.EnabledChanged.
</summary></devnotes></procedure>
      <procedure name="Realign" visibility="protected" file="FMX.Controls.pas" line="539">
      <devnotes><summary>
Performs the realignment of the control's children within itself.  
The children are realigned taking into account their alignment properties, margins, and padding.
It is called internally every time the control's visual properties are changed. Realign is also called by EndUpdate, if there are no opened update sessions (FUpdating is 0).
</summary></devnotes></procedure>
      <procedure name="ChildrenAlignChanged" visibility="protected" file="FMX.Controls.pas" line="540">
      <devnotes><summary>
Executed when the alignment of the children of the control changes.
The alignment of the children of the control may change for any of the following reasons:

The alignment of a child control changes.
The anchoring of a control changes.
The control looses one of its child controls.</summary></devnotes></procedure>
      <function name="GetAlign" visibility="protected" file="FMX.Controls.pas" line="542">
        <parameters>
          <retval type="TAlignLayout"/>
        </parameters>
      <devnotes><summary>
Getter function for the Align property.
</summary></devnotes></function>
      <procedure name="SetAlign" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="543">
        <parameters>
          <parameter name="Value" type="TAlignLayout" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Setter function for the Align property. Value specifies the new value of the Align property.
</summary></devnotes></procedure>
      <function name="GetAnchors" visibility="protected" file="FMX.Controls.pas" line="544">
        <parameters>
          <retval type="TAnchors"/>
        </parameters>
      <devnotes><summary>
Getter function for the Anchors property.
</summary></devnotes></function>
      <procedure name="SetAnchors" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="545">
        <parameters>
          <parameter name="Value" type="TAnchors" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Setter function for the Anchors property.
Value specifies the new value of the Anchors property.
</summary></devnotes></procedure>
      <function name="GetMargins" visibility="protected" file="FMX.Controls.pas" line="546">
        <parameters>
          <retval type="TBounds"/>
        </parameters>
      <devnotes><summary>
Getter function for the Margins property.
</summary></devnotes></function>
      <function name="GetPadding" visibility="protected" file="FMX.Controls.pas" line="547">
        <parameters>
          <retval type="TBounds"/>
        </parameters>
      <devnotes><summary>
Getter function for the Padding property.
</summary></devnotes></function>
      <function name="GetWidth" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="548">
        <parameters>
          <retval type="Single"/>
        </parameters>
      <devnotes><summary>
Getter function for the Width property.
</summary></devnotes></function>
      <function name="GetHeight" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="549">
        <parameters>
          <retval type="Single"/>
        </parameters>
      <devnotes><summary>
Getter function for the Height property.
</summary></devnotes></function>
      <function name="GetLeft" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="550">
        <parameters>
          <retval type="Single"/>
        </parameters>
      <devnotes><summary>
Getter function for the Left property.
</summary></devnotes></function>
      <function name="GetTop" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="551">
        <parameters>
          <retval type="Single"/>
        </parameters>
      <devnotes><summary>
Getter function for the Top property.
</summary></devnotes></function>
      <function name="GetAllowAlign" visibility="protected" file="FMX.Controls.pas" line="552">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Getter function for the AllowAlign property.
</summary></devnotes></function>
      <function name="GetAnchorRules" visibility="protected" file="FMX.Controls.pas" line="553">
        <parameters>
          <retval type="TPointF"/>
        </parameters>
      <devnotes><summary>
Getter function for the AnchorRules property.
</summary></devnotes></function>
      <function name="GetAnchorOrigin" visibility="protected" file="FMX.Controls.pas" line="554">
        <parameters>
          <retval type="TPointF"/>
        </parameters>
      <devnotes><summary>
Getter function for the AnchorOrigin property.
</summary></devnotes></function>
      <function name="GetOriginalParentSize" visibility="protected" file="FMX.Controls.pas" line="555">
        <parameters>
          <retval type="TPointF"/>
        </parameters>
      <devnotes><summary>
Getter function for the OriginalParentSize property.
</summary></devnotes></function>
      <function name="GetAnchorMove" visibility="protected" file="FMX.Controls.pas" line="556">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Getter function for the AnchorMove property.
</summary></devnotes></function>
      <procedure name="SetAnchorMove" visibility="protected" file="FMX.Controls.pas" line="557">
        <parameters>
          <parameter name="Value" type="Boolean"/>
        </parameters>
      <devnotes><summary>
Setter function for the AnchorMove property.
Value specifies the new value of the AnchorMove property.
</summary></devnotes></procedure>
      <function name="GetAdjustSizeValue" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="558">
        <parameters>
          <retval type="TSizeF"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></function>
      <function name="GetAdjustType" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="559">
        <parameters>
          <retval type="TAdjustType"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></function>
      <function name="GetContainerWidth" visibility="protected" file="FMX.Controls.pas" line="561">
        <parameters>
          <retval type="Single"/>
        </parameters>
      <devnotes><summary>
Getter function for the ContainerWidth property.
The container width is equal to the control width.
</summary></devnotes></function>
      <function name="GetContainerHeight" visibility="protected" file="FMX.Controls.pas" line="562">
        <parameters>
          <retval type="Single"/>
        </parameters>
      <devnotes><summary>
Getter function for the ContainerHeight property.
The container height is equal to the control height.
</summary></devnotes></function>
      <function name="GetObject" visibility="protected" file="FMX.Controls.pas" line="565">
        <parameters>
          <retval type="TFmxObject"/>
        </parameters>
      <devnotes><summary>
Returns the current control as a TFmxObject.
</summary></devnotes></function>
      <function name="GetParent" visibility="protected" file="FMX.Controls.pas" line="566">
        <parameters>
          <retval type="TFmxObject"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></function>
      <function name="GetVisible" visibility="protected" file="FMX.Controls.pas" line="567">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Getter function for the Visible property.
</summary></devnotes></function>
      <function name="GetDesignInteractive" visibility="protected" file="FMX.Controls.pas" line="568">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Getter function for the DesignInteractive property.
</summary></devnotes></function>
      <function name="GetPopupMenu" visibility="protected" file="FMX.Controls.pas" line="569">
        <parameters>
          <retval type="TCustomPopupMenu"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></function>
      <procedure name="DoEnter" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="570">
      <devnotes><summary>
OnEnter event dispatcher.
DoEnter is called automatically when the control receives the input focus.
DoEnter repaints the control, starts the animation by calling StartTriggerAnimation, and applies effects by calling ApplyTriggerEffect. The applied animations and effects highlight the focused control.
Override the protected DoEnter method to provide other responses when the current control receives focus.
</summary></devnotes></procedure>
      <procedure name="DoExit" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="571">
      <devnotes><summary>
OnExit event dispatcher.
DoExit is called automatically when the input focus moves from the current object.
DoExit repaints the control, starts the animation by calling StartTriggerAnimation, and applies effects by calling ApplyTriggerEffect. When a control receives focus, it is highlighted. The animations and effects applied by DoExit background the control.
Override the protected DoExit method to provide other responses when the focus moves from the current control.
</summary></devnotes></procedure>
      <procedure name="DoActivate" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="572">
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="DoDeactivate" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="573">
      <devnotes><summary>
Dispatcher of the OnDeactivate event.
</summary></devnotes></procedure>
      <procedure name="DoMouseEnter" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="574">
      <devnotes><summary>
OnMouseEnter event dispatcher.
DoMouseEnter is called automatically when the mouse pointer enters the control's area.
DoMouseEnter starts the animation by calling StartTriggerAnimation and applies effects by calling ApplyTriggerEffect to highlight the control. 
Override the protected DoMouseEnter method to provide other responses when the mouse pointer enters the control's area.
</summary></devnotes></procedure>
      <procedure name="DoMouseLeave" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="575">
      <devnotes><summary>
OnMouseLeave event dispatcher.
DoMouseLeave is called automatically when the mouse pointer leaves the control's area.
DoMouseLeave starts the animation by calling StartTriggerAnimation and applies effects by calling ApplyTriggerEffect to background the control. 
Override the protected DoMouseLeave method to provide other responses when the mouse pointer leaves the control's area.
</summary></devnotes></procedure>
      <function name="CheckForAllowFocus" visibility="protected" file="FMX.Controls.pas" line="576">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Verifies whether the current control can receive focus. 
A control can receive focus if the ParentedVisible, CanFocus, and AbsoluteEnabled properties are True.
CheckForAllowFocus returns True if the control can receive focus, and False otherwise. 
</summary></devnotes></function>
      <function name="GetDragMode" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="577">
        <parameters>
          <retval type="TDragMode"/>
        </parameters>
      <devnotes><summary>
Getter function for the DragMode property.
</summary></devnotes></function>
      <procedure name="SetDragMode" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="578">
        <parameters>
          <parameter name="ADragMode" type="TDragMode" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Setter function for the DragMode property. ADragMode specifies the new value of the DragMode property.
</summary></devnotes></procedure>
      <function name="GetLocked" visibility="protected" file="FMX.Controls.pas" line="579">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Getter function for the Locked property.
</summary></devnotes></function>
      <function name="GetHitTest" visibility="protected" file="FMX.Controls.pas" line="580">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Getter function for the HitTest property.
</summary></devnotes></function>
      <function name="GetAcceptsControls" visibility="protected" file="FMX.Controls.pas" line="581">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Getter function for the AcceptsControls property.
</summary></devnotes></function>
      <procedure name="SetAcceptsControls" visibility="protected" file="FMX.Controls.pas" line="582">
        <parameters>
          <parameter name="Value" type="Boolean" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Setter function for the AcceptsControls property.
</summary></devnotes></procedure>
      <function name="FindTarget" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="583">
        <parameters>
          <parameter name="P" type="TPointF"/>
          <parameter name="Data" type="TDragObject" paramflags="const"/>
          <retval type="IControl"/>
        </parameters>
      <devnotes><summary>
Returns the target control.
P is the current position of the dragged object.
Data is the dragged object. 
FindTarget checks whether P belongs to the current control or any of its children (using a recursive method) and, if so, returns the control that contains P.
If the target control or any of its children is in designing mode or is not visible, FindTarget returns nil.
</summary></devnotes></function>
      <function name="ObjectAtPoint" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="584">
        <parameters>
          <parameter name="AScreenPoint" type="TPointF"/>
          <retval type="IControl"/>
        </parameters>
      <devnotes><summary>
Returns the control in which a specified point can be found.
P is the specified point in the object.
ObjectAtPoint returns the control in which the P point is found. 
To start searching within the current control, the control must be visible and enabled. If P is within a child of the control and the child is also a control, the search continues inside the child. 
If P is inside the control (not within a child) and the control can be hit, then ObjectAtPoint returns the control. 
ObjectAtPoint is used internally.
</summary></devnotes></function>
      <function name="HasHint" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="586">
        <devnotes><summary>
Returns True if the control has an available hint to display.
</summary></devnotes>
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <function name="GetHintString" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="588">
        <devnotes><summary>
Returns the text of the hint.
</summary></devnotes>
        <parameters>
          <retval type="string"/>
        </parameters>
      </function>
      <function name="GetHintObject" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="590">
        <devnotes><summary>
Returns the custom hint object that manages the hint display.
Usually, this is an instance of THint.
</summary></devnotes>
        <parameters>
          <retval type="TObject"/>
        </parameters>
      </function>
      <function name="CanShowHint" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="593">
        <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes>
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <procedure name="BroadcastGesture" visibility="protected" file="FMX.Controls.pas" line="595">
        <parameters>
          <parameter name="EventInfo" type="TGestureEventInfo"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="CMGesture" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="596">
        <parameters>
          <parameter name="EventInfo" type="TGestureEventInfo" paramflags="var"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <function name="TouchManager" visibility="protected" file="FMX.Controls.pas" line="597">
        <parameters>
          <retval type="TTouchManager"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></function>
      <function name="GetFirstControlWithGesture" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="598">
        <parameters>
          <parameter name="AGesture" type="TInteractiveGesture"/>
          <retval type="TComponent"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></function>
      <function name="GetFirstControlWithGestureEngine" visibility="protected" file="FMX.Controls.pas" line="599">
        <parameters>
          <retval type="TComponent"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></function>
      <function name="GetListOfInteractiveGestures" visibility="protected" file="FMX.Controls.pas" line="600">
        <parameters>
          <retval type="TInteractiveGestures"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></function>
      <procedure name="Tap" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="601">
        <parameters>
          <parameter name="Point" type="TPointF" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Called when the Tap gesture on the style presentation is recognized. 
</summary></devnotes></procedure>
      <function name="GetFirstVisibleObjectIndex" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="603">
        <parameters>
          <retval type="Integer"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></function>
      <function name="GetLastVisibleObjectIndex" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="604">
        <parameters>
          <retval type="Integer"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></function>
      <function name="GetDefaultSize" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="605">
        <parameters>
          <retval type="TSizeF"/>
        </parameters>
      <devnotes><summary>
Getter of DefaultSize.


</summary></devnotes></function>
      <function name="FillTextFlags" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="607">
        <parameters>
          <retval type="TFillTextFlags"/>
        </parameters>
      <devnotes><summary>
Returns the filling direction of the control's text.
FillTextFlags is used by controls that provide the text area to get the filling direction of the text, depending on the reading direction of the control of the current Root, if it exists.
</summary></devnotes></function>
      <procedure name="ApplyEffect" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="609">
      <devnotes><summary>
Applies effects to the control, if specified.
This method is called internally during the process of component rendering. 
Do not call this method. To apply an effect to a control, add an effect component as a child to the control.
</summary></devnotes></procedure>
      <procedure name="PaintInternal" visibility="protected" file="FMX.Controls.pas" line="610">
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <function name="SupportsPaintStage" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="611">
        <parameters>
          <parameter name="Stage" type="TPaintStage" paramflags="const"/>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></function>
      <function name="CanRepaint" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="613">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></function>
      <procedure name="RepaintRect" visibility="protected" file="FMX.Controls.pas" line="614">
        <parameters>
          <parameter name="Rect" type="TRectF" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="PaintChildren" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="615">
      <devnotes><summary>
Renders the child controls.
The PaintChildren method is called automatically in the process of painting of the current control. It renders child controls, if any, on the surface specified by the Canvas property. 
The effects that are applied to the control are also applied to its children.
TControl descendants can override PaintChildren to provide specific rendering of the respective controls.
</summary></devnotes></procedure>
      <procedure name="Painting" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="616">
      <devnotes><summary>
OnPainting event dispatcher. 
Painting defines the drawing area of the control by intersecting Canvas with ClipRect if ClipChildren is True and dispatches the OnPainting event.
It is always called internally before DoPaint. 
The Painting method can be overridden by derived controls to establish control-specific rendering conditions. 
</summary></devnotes></procedure>
      <procedure name="Paint" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="617">
      <devnotes><summary>
Renders the control's surface. 
The Paint method is called by DoPaint when a control is being painted by the PaintTo method. Before DoPaint, Painting is called. AfterPaint is called immediately after. 
FireMonkey internally calls Paint to paint the control when the window is being painted. You must not call Paint explicitly.
The base class TControl implements an empty Paint. The descendants of TControl override Paint to provide specific rendering of the respective controls.
For example, Paint methods in classes of the FMX.Objects unit draw and fill shapes using the properties defined in these classes. See the descriptions of these classes to find the properties of the respective shapes. 
</summary></devnotes></procedure>
      <procedure name="DoPaint" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="618">
      <devnotes><summary>
Processes the painting of the control. 
This method is called internally from PaintTo and PaintChildren. DoPaint defines the drawing area by clipping the Canvas to the areas occupied by the control and its children, paints the children and then the control itself. The call to DoPaint is always preceded by a call to Painting and succeeded by a call to AfterPaint.
</summary></devnotes></procedure>
      <procedure name="AfterPaint" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="619">
      <devnotes><summary>
Restores Canvas properties after the painting process. 
As implemented in TControl, AfterPaint does nothing.
TShape descendants of TControl override AfterPaint to restore Dash and  Thickness to default values.   
</summary></devnotes></procedure>
      <procedure name="DrawDesignBorder" visibility="protected" file="FMX.Controls.pas" line="620">
        <parameters>
          <parameter name="VertColor" type="TAlphaColor" paramflags="const">
            <value>
              $A0909090
            </value>
          </parameter>
          <parameter name="HorzColor" type="TAlphaColor" paramflags="const">
            <value>
              $A0909090
            </value>
          </parameter>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="DoRealign" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="623">
      <devnotes><summary>
Performs the alignment of a FireMonkey control.
</summary></devnotes></procedure>
      <procedure name="DoBeginUpdate" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="624">
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="DoEndUpdate" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="625">
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="Move" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="627">
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="Resize" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="628">
      <devnotes><summary>
OnResize event dispatcher. 
A control calls Resize when the dimensions of the control change.
Derived classes can override the protected Resize method to implement specific responses to control resizing.
</summary></devnotes></procedure>
      <procedure name="DoResized" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="629">
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="Disappear" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="630">
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="Show" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="631">
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="Hide" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="632">
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="AncestorVisibleChanged" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="633">
        <parameters>
          <parameter name="Visible" type="Boolean" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Notifies its child controls that the visibility of an ancestor of your control has changed to Visible.
</summary></devnotes></procedure>
      <procedure name="AncestorParentChanged" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="635">
        <devnotes><summary>
Notifies its child controls that the parent of an ancestor of your control has changed.
</summary></devnotes>
      </procedure>
      <procedure name="ClipChildrenChanged" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="636">
      <devnotes><summary>
Executed right after the value of the ClipChildren property changes.
The control does not execute ClipChildrenChanged if you assign ClipChildren the same value that it already has.
</summary></devnotes></procedure>
      <procedure name="HitTestChanged" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="637">
      <devnotes><summary>
Executed right after the value of the HitTest property changes.
The control does not execute HitTestChanged if you assign HitTest the same value that it already has.
</summary></devnotes></procedure>
      <procedure name="PaddingChanged" visibility="protected" procflags="overload virtual" file="FMX.Controls.pas" line="639">
        <devnotes><summary>
Executed right after the value of the Padding property changes.
The control does not execute PaddingChanged if you assign Padding the same value that it already has.
</summary></devnotes>
      </procedure>
      <property name="MinClipWidth" visibility="protected" read="FMinClipWidth" write="SetMinClipWidth" type="Single" default="0" file="FMX.Controls.pas" line="640"><devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></property>
      <property name="MinClipHeight" visibility="protected" read="FMinClipHeight" write="SetMinClipHeight" type="Single" default="0" file="FMX.Controls.pas" line="641"><devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></property>
      <property name="SmallSizeControl" visibility="protected" read="FSmallSizeControl" type="Boolean" file="FMX.Controls.pas" line="642"><devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></property>
      <procedure name="DoAddObject" visibility="protected" procflags="override" file="FMX.Controls.pas" line="644">
        <parameters>
          <parameter name="AObject" type="TFmxObject" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Adds the AObject object to the Children list of children attached to this parent object (self).
FMX.Controls.TControl.DoAddObject inherits from FMX.Types.TFmxObject.DoAddObject. All content below this line refers to FMX.Types.TFmxObject.DoAddObject.
Adds the AObject object to the Children list of children attached to this parent object (self).
DoAddObject adds the object provided in the AObject parameter to the list of children stored in the Children property of this object (self). DoAddObject changes the parent of AObject to this object (self) and sets the root of AObject to the Root object of this object (self).
Descendant classes, like TCommonCustomForm and TControl, additionally handle tab stop lists keeping ordered lists of objects to which the user can tab. If such descendant class supports the ITabStopController interface and AObject is an object of a class supporting the IControl interface, then DoAddObject of this descendant adds AObject to the TabList tab stop lists of the (self) object. 
DoAddObject is internally called from AddObject.
</summary></devnotes></procedure>
      <procedure name="DoInsertObject" visibility="protected" procflags="override" file="FMX.Controls.pas" line="645">
        <parameters>
          <parameter name="Index" type="Integer"/>
          <parameter name="AObject" type="TFmxObject" paramflags="const"/>
        </parameters>
      <devnotes><summary>


Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="DoRemoveObject" visibility="protected" procflags="override" file="FMX.Controls.pas" line="646">
        <parameters>
          <parameter name="AObject" type="TFmxObject" paramflags="const"/>
        </parameters>
      <devnotes><summary>


Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="DoDeleteChildren" visibility="protected" procflags="override" file="FMX.Controls.pas" line="647">
      <devnotes><summary>


Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <property name="PaintStage" visibility="protected" read="FPaintStage" write="FPaintStage" type="TPaintStage" file="FMX.Controls.pas" line="649"><devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></property>
      <property name="TempCanvas" visibility="protected" read="FTempCanvas" write="SetTempCanvas" type="TCanvas" file="FMX.Controls.pas" line="650"><devnotes><summary>
Temporary copy of the canvas on which the control is drawn.
It is used internally in the process of painting. Do not use it in applications.
</summary></devnotes></property>
      <procedure name="SetLeft" visibility="protected" file="FMX.Controls.pas" line="652">
        <parameters>
          <parameter name="Value" type="Single" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Setter function for the Left property. Value specifies the new value of the Left property.
</summary></devnotes></procedure>
      <procedure name="SetTop" visibility="protected" file="FMX.Controls.pas" line="653">
        <parameters>
          <parameter name="Value" type="Single" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Setter function for the Top property. Value specifies the new value of the Top property.
</summary></devnotes></procedure>
      <procedure name="UpdateExplicitBounds" visibility="protected" file="FMX.Controls.pas" line="654">
      <devnotes><summary>
Updates the explicit bounds' properties of the control.
UpdateExplicitBounds is called by SetBounds after updating the control's anchors rules, to update the ExplicitLeft, ExplicitTop, ExplicitWidth, and ExplicitHeight properties.  
It is for internal use only.
</summary></devnotes></procedure>
      <procedure name="UpdateAnchorRules" visibility="protected" file="FMX.Controls.pas" line="655">
        <parameters>
          <parameter name="Anchoring" type="Boolean" paramflags="const">
            <value>
              False
            </value>
          </parameter>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <property name="Left" visibility="protected" read="FLeft" write="SetLeft" type="Single" default="0" file="FMX.Controls.pas" line="656"><devnotes><summary>
Specifies the horizontal coordinate of the left edge of a component, relative to its parent. 
The Left property is used to determine where the left side of the control begins or to reposition the left side of the control.
If the control is contained in another control, the Left and Top properties are relative to the parent control. If the control is contained directly by the form, the property values are relative to the form. For forms, the value of the Left property is relative to the screen, in pixels. 
Use Position in applications to allow read and write access.
</summary></devnotes></property>
      <property name="Top" visibility="protected" read="FTop" write="SetTop" type="Single" default="0" file="FMX.Controls.pas" line="657"><devnotes><summary>
Specifies the vertical coordinate of the upper-left corner of a control, relative to its parent, in pixels. 
The Top property is used to locate the top of the control or to reposition the control to a different Y coordinate.
If the control is contained in another control, the Left and Top properties are relative to the parent control. If the control is contained directly by the form, the property values are relative to the form. For forms, the value of the Top property is relative to the screen, in pixels. 
Use Position in applications to allow read and write access.
</summary></devnotes></property>
      <property name="ExplicitLeft" visibility="protected" read="FExplicitLeft" type="Single" default="0" file="FMX.Controls.pas" line="658"><devnotes><summary>
Specifies the explicit horizontal pixel coordinate of the left edge of a component, relative to its parent.
ExplicitLeft is a read-only property used internally by Delphi. Use Left in applications to allow read and write access. 
</summary></devnotes></property>
      <property name="ExplicitTop" visibility="protected" read="FExplicitTop" type="Single" default="0" file="FMX.Controls.pas" line="659"><devnotes><summary>
Specifies the explicit vertical pixel coordinate of the top edge of a component, relative to its parent.
ExplicitTop is a read-only property used internally by Delphi. Use Top in applications to allow read and write access. 
</summary></devnotes></property>
      <property name="ExplicitWidth" visibility="protected" read="FExplicitWidth" type="Single" default="0" file="FMX.Controls.pas" line="660"><devnotes><summary>
Specifies the explicit horizontal size of the control (in pixels). 
ExplicitWidth is a read-only property used internally by Delphi. Use Width in applications to allow read and write access. 
</summary></devnotes></property>
      <property name="ExplicitHeight" visibility="protected" read="FExplicitHeight" type="Single" default="0" file="FMX.Controls.pas" line="661"><devnotes><summary>
Specifies the explicit vertical size of the control (in pixels).
ExplicitHeight is a read-only property used internally by Delphi. Use Height in applications to allow read and write access. 
</summary></devnotes></property>
      <function name="GetActionLinkClass" visibility="protected" procflags="override" file="FMX.Controls.pas" line="662">
        <parameters>
          <retval type="TActionLinkClass"/>
        </parameters>
      <devnotes><summary>
Returns the associated action link class.
FMX.Controls.TControl.GetActionLinkClass inherits from FMX.Types.TFmxObject.GetActionLinkClass. All content below this line refers to FMX.Types.TFmxObject.GetActionLinkClass.
Returns the associated action link class.
Returns the class reference for the TActionLink class or for one of its descendants. 
In TFmxObject, GetActionLinkClass always returns nil.
In descendant classes, GetActionLinkClass should return the appropriate class type for the action link used with the class object. When a control object of the descendant from the TFmxObject class tries to assign a value to the Action property, the setter method for Action calls GetActionLinkClass. If GetActionLinkClass returns a non-nil value, then the action object is assigned to Action. If the control object does not support actions, then GetActionLinkClass should return nil. In this case, attempting to set a value to the Action property raises the following exception:  

StrEActionNoSuported = 'Class %s does not support the action'    
</summary></devnotes></function>
      <procedure name="ActionChange" visibility="protected" procflags="override" file="FMX.Controls.pas" line="663">
        <parameters>
          <parameter name="Sender" type="TBasicAction"/>
          <parameter name="CheckDefaults" type="Boolean"/>
        </parameters>
      <devnotes><summary>
Specifies the behavior of a TControl control when Action changes. 
Depending on the CheckDefaults value,  ActionChange uses properties of the Sender action to set new values to the  
Enabled, Hint, Visible, OnClick, and PopupMenu parameters of TControl. Then ActionChange calls the inherited TFmxObject.ActionChange method.  
Do not call ActionChange explicitly in an application. It is for internal use.
</summary></devnotes></procedure>
      <function name="EnabledStored" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="664">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></function>
      <function name="VisibleStored" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="665">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Returns True when the Visible property needs to be stored in the fmx-file.
</summary></devnotes></function>
      <procedure name="EnabledChanged" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="668">
        <devnotes><summary>
Executed right after the value of the Enabled property changes.
The control does not execute EnabledChanged if you assign Enabled the same value that it already has.
EnabledChanged is never executed for effects, which execute EffectEnabledChanged instead.
</summary></devnotes>
      </procedure>
      <procedure name="VisibleChanged" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="671">
        <devnotes><summary>
Executed right after the value of the Visible property changes.
The control does not execute VisibleChanged if you assign Visible the same value that it already has.
</summary></devnotes>
      </procedure>
      <function name="IsControlRectEmpty" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="673">
        <devnotes><summary>
Returns True if the control rect is empty.
</summary></devnotes>
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <function name="GetControls" visibility="protected" file="FMX.Controls.pas" line="674">
        <parameters>
          <retval type="TControlList"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></function>
      <procedure name="DoGesture" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="675">
        <parameters>
          <parameter name="EventInfo" type="TGestureEventInfo" paramflags="const"/>
          <parameter name="Handled" type="Boolean" paramflags="var"/>
        </parameters>
      <devnotes><summary>
Processes the unhandled gesturing events.
DoGesture is run automatically for all gesturing events that were not handled by the user. DoGesture is run only if OnGesture is not set or if it did not handle the gesture event. 
Override DoGesture in descending classes to support default behavior for gesture events that were not handled by the user. In TControl, the DoGesture method simply returns and does no special processing. 
</summary></devnotes></procedure>
      <function name="GetTabStopController" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="676">
        <parameters>
          <retval type="ITabStopController"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></function>
      <function name="GetTabListClass" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="677">
        <parameters>
          <retval type="TTabListClass"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></function>
      <property name="DoubleClick" visibility="protected" read="FDoubleClick" type="Boolean" file="FMX.Controls.pas" line="678"><devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></property>
      <property name="RotationAngle" visibility="protected" read="GetRotationAngle" write="SetRotationAngle" type="Single" default="0" file="FMX.Controls.pas" line="680"><devnotes><summary>
Specifies the amount (in degrees) by which the control is rotated from the x-axis. 
Positive angles correspond to clockwise rotation. For counterclockwise rotation, use negative values.
To set the rotation center, use RotationCenter.
</summary></devnotes></property>
      <property name="RotationCenter" visibility="protected" read="GetRotationCenter" write="SetRotationCenter" type="TPosition" file="FMX.Controls.pas" line="681"><devnotes><summary>
Specifies the position of the pivot point of the control.
The coordinates of the rotation center take values in the range from 0 through 1. The point with the coordinates (0,0) corresponds to the upper-left corner of the control, the point with the coordinates (1,1) corresponds to the lower-right corner of the control. The default center of rotation is (0.5, 0.5).
Values outside of [0,0] and [1,1] can be clipped in some descendant classes.
To set the rotation angle, use RotationAngle.
</summary></devnotes></property>
      <property name="Scale" visibility="protected" read="GetScale" write="SetScale" type="TPosition" file="FMX.Controls.pas" line="682"><devnotes><summary>
Specifies the scale of the control.
Set the Scale coordinates to specify the scale on each axis.
The initial scale rate is 1 on each axis.

Note:  Controls that have the Align or Anchors properties set can use a scale that is different from the default (1,1), so that controls align together even when they have a custom scale. </summary></devnotes></property>
      <property name="DisabledOpacity" visibility="protected" read="FDisabledOpacity" write="SetDisabledOpacity" stored="DisabledOpacityStored" type="Single" file="FMX.Controls.pas" line="683"><devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></property>
      <property name="ParentContent" visibility="protected" read="FParentContent" type="IContent" file="FMX.Controls.pas" line="684"><devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></property>
      <property name="ParentShowHint" visibility="protected" read="FParentShowHint" write="SetParentShowHint" type="Boolean" default="1" file="FMX.Controls.pas" line="686">
        <devnotes><summary>
If True, the value of the ShowHint property of this control inherits the value of the ShowHint property of the parent control.
See Using Hints to Show Contextual Help in a FireMonkey Application - Enabling Hints for a Control for more information.
</summary></devnotes>
      </property>
      <constructor name="Create" visibility="public" file="FMX.Controls.pas" line="688">
        <parameters>
          <parameter name="AOwner" type="TComponent"/>
        </parameters>
      <devnotes><summary>
Allocates memory and constructs a safely initialized instance of a component.
Allocates memory and constructs a safely initialized instance of a component.
FMX.Controls.TControl.Create inherits from System.Classes.TComponent.Create. All content below this line refers to System.Classes.TComponent.Create.
Allocates memory and constructs a safely initialized instance of a component.
All objects have a Create method that constructs the object. TComponent redefines Create so that, for components, Create also:

Establishes the relationship of a component and its Owner, as indicated by the AOwner parameter.
Sets the ComponentStyle property to csInheritable, meaning that the component can be inherited by a descendent form type.
It is not necessary to explicitly create components added in the Form Designer. These components are created automatically when the application is run, and they are destroyed when the application is closed.
For components created programmatically, that is, not created in the Form Designer, call Create and pass in an owner component as the AOwner parameter. The owner disposes of the component when it is destroyed. If the component is not owned, then use Free when it needs to be destroyed.

Tip:  When passing in Self as the Owner parameter, consider what Self references. If a component creates another component in one of its methods, then Self refers to the first component and not the component being created, which is then owned by the first component.
Note:  The TComponent constructor is virtual in part to allow polymorphic instantiation of class references. This is critical to the streaming system and to the Form Designer. Do not forget to use the override directive when declaring a new component's Create constructor.</summary></devnotes></constructor>
      <destructor name="Destroy" visibility="public" file="FMX.Controls.pas" line="689">
        <parameters>
        </parameters>
      <devnotes><summary>
Disposes of the component and its owned components.
Disposes of the component and its owned components.
FMX.Controls.TControl.Destroy inherits from System.Classes.TComponent.Destroy. All content below this line refers to System.Classes.TComponent.Destroy.
Disposes of the component and its owned components.
Do not call Destroy directly. Call Free instead. Free verifies that the component is not nil, and only then calls Destroy.
Never explicitly free a component in one of its own event handlers, nor free a component from the event handler of a component that it owns or contains.
To destroy a form, call its Release method. Release waits for all the form's event handlers and the event handlers of the form's components to finish executing before destroying the form.

Note: A form owns all the controls and nonvisual components that are placed on it in design mode. When it is freed, all of these components are automatically freed as well. By default, all forms are owned by the global Application object. When an application terminates, it frees the global Application object, which frees all forms. For objects that are not components, and for components created with a nil owner, be sure to call Free after finishing with the object; otherwise the memory allocated for the object will be lost until the application terminates.</summary></devnotes></destructor>
      <procedure name="SetNewScene" visibility="public" procflags="virtual" file="FMX.Controls.pas" line="690">
        <parameters>
          <parameter name="AScene" type="IScene"/>
        </parameters>
      <devnotes><summary>
Sets a new Scene for the current control.
AScene specifies the new scene. If AScene is empty, SetNewScene does nothing.
SetNewScene sets the same scene for the control's children.
</summary></devnotes></procedure>
      <procedure name="SetBounds" visibility="public" procflags="virtual" file="FMX.Controls.pas" line="691">
        <parameters>
          <parameter name="X" type="Single"/>
          <parameter name="Y" type="Single"/>
          <parameter name="AWidth" type="Single"/>
          <parameter name="AHeight" type="Single"/>
        </parameters>
      <devnotes><summary>
Sets the boundaries of the current control.
Use SetBounds to change all of the boundary properties of the control at one time. 
X specifies the X coordinate of the Position of the control.
Y specifies the Y coordinate of the Position of the control.
AWidth specifies the value of the Width of the control.
AHeight specifies the value of the Height of the control.
The same effect can be achieved by setting the Position, Width, and Height properties separately, but SetBounds changes all properties at once, ensuring that the control will not repaint between changes.
After setting the boundary properties, SetBounds specifies to the control to maintain the alignment of the control within its parent and of its children within it. The given parameter does not necessarily reflect in the Position, Width, and Height properties. The properties can be updated when the alignment is applied. 
</summary></devnotes></procedure>
      <function name="AbsoluteToLocal" visibility="public" procflags="overload virtual" file="FMX.Controls.pas" line="694">
        <devnotes><summary>
Translates coordinated of the specified Point from an global perspective to a local coordinates of this control. 
The absolute context for a control is the parent form area, and the local context is the control area.
Point is the point to be transformed.
AbsoluteToLocal returns the transformed point.
To have the inverse effect over a point, use LocalToAbsolute.  
</summary></devnotes>
        <parameters>
          <parameter name="APoint" type="TPointF" paramflags="const"/>
          <retval type="TPointF"/>
        </parameters>
      </function>
      <function name="AbsoluteToLocal" visibility="public" procflags="overload" file="FMX.Controls.pas" line="696">
        <devnotes><summary>
Translates coordinated of the specified Point from an global perspective to a local coordinates of this control. 
The absolute context for a control is the parent form area, and the local context is the control area.
Point is the point to be transformed.
AbsoluteToLocal returns the transformed point.
To have the inverse effect over a point, use LocalToAbsolute.  
</summary></devnotes>
        <parameters>
          <parameter name="ARect" type="TRectF" paramflags="const"/>
          <retval type="TRectF"/>
        </parameters>
      </function>
      <function name="LocalToAbsolute" visibility="public" procflags="overload virtual" file="FMX.Controls.pas" line="698">
        <devnotes><summary>
Transforms and returns a specified point from the local perspective to the absolute perspective. 
Use LocalToAbsolute to get the transposed coordinates of a point from the local context to the absolute context of the current control. The absolute context for a control is the parent form area, and the local context is the control area.
P is the point to be transformed.
LocalToAbsolute returns the transformed point.
To have the inverse effect over a point, use AbsoluteToLocal.  
</summary></devnotes>
        <parameters>
          <parameter name="APoint" type="TPointF" paramflags="const"/>
          <retval type="TPointF"/>
        </parameters>
      </function>
      <function name="LocalToAbsolute" visibility="public" procflags="overload" file="FMX.Controls.pas" line="700">
        <devnotes><summary>
Transforms and returns a specified point from the local perspective to the absolute perspective. 
Use LocalToAbsolute to get the transposed coordinates of a point from the local context to the absolute context of the current control. The absolute context for a control is the parent form area, and the local context is the control area.
P is the point to be transformed.
LocalToAbsolute returns the transformed point.
To have the inverse effect over a point, use AbsoluteToLocal.  
</summary></devnotes>
        <parameters>
          <parameter name="ARect" type="TRectF" paramflags="const"/>
          <retval type="TRectF"/>
        </parameters>
      </function>
      <function name="ScreenToLocal" visibility="public" procflags="virtual" file="FMX.Controls.pas" line="702">
        <devnotes><summary>
Transforms and returns a specified point from the screen perspective to the local perspective. 
P is the point to be transformed.
ScreenToLocal is used internally. 
</summary></devnotes>
        <parameters>
          <parameter name="AScreenPoint" type="TPointF" paramflags="const"/>
          <retval type="TPointF"/>
        </parameters>
      </function>
      <function name="LocalToScreen" visibility="public" procflags="virtual" file="FMX.Controls.pas" line="704">
        <devnotes><summary>
Transforms and returns a specified point from the local perspective to the screen perspective. 
P is the point to be transformed.
LocalToScreen is used internally when applying a certain placement. 
</summary></devnotes>
        <parameters>
          <parameter name="ALocalPoint" type="TPointF" paramflags="const"/>
          <retval type="TPointF"/>
        </parameters>
      </function>
      <function name="ConvertLocalPointFrom" visibility="public" file="FMX.Controls.pas" line="706">
        <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes>
        <parameters>
          <parameter name="AControl" type="TControl" paramflags="const"/>
          <parameter name="AControlLocalPoint" type="TPointF" paramflags="const"/>
          <retval type="TPointF"/>
        </parameters>
      </function>
      <function name="ConvertLocalPointTo" visibility="public" file="FMX.Controls.pas" line="708">
        <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes>
        <parameters>
          <parameter name="AControl" type="TControl" paramflags="const"/>
          <parameter name="ALocalPoint" type="TPointF" paramflags="const"/>
          <retval type="TPointF"/>
        </parameters>
      </function>
      <function name="AbsoluteToLocalVector" visibility="public" procflags="virtual" file="FMX.Controls.pas" line="709">
        <parameters>
          <parameter name="Vector" type="TVector"/>
          <retval type="TVector"/>
        </parameters>
      <devnotes><summary>
Transforms and returns a specified vector from the absolute perspective to the local perspective. 
Use AbsoluteToLocalVector to get the transposed coordinates of a vector from the absolute context to the local context of the current control. The absolute context for a control is the parent form area, and the local context is the control area.
P is the vector to be transformed.
AbsoluteToLocalVector returns the transformed vector.
To have the inverse effect over a point, use LocalToAbsoluteVector.  
</summary></devnotes></function>
      <function name="LocalToAbsoluteVector" visibility="public" procflags="virtual" file="FMX.Controls.pas" line="710">
        <parameters>
          <parameter name="Vector" type="TVector"/>
          <retval type="TVector"/>
        </parameters>
      <devnotes><summary>
Transforms and returns a specified vector from the local perspective to the absolute perspective. 
Use LocalToAbsoluteVector to get the transposed coordinates of a vector from the local context to the absolute context of the current control. The absolute context for a control is the parent form area, and the local context is the control area.
P is the vector to be transformed.
LocalToAbsoluteVector returns the transformed vector.
To have the inverse effect over a vector, use AbsoluteToLocalVector.  
</summary></devnotes></function>
      <function name="PointInObject" visibility="public" procflags="virtual" file="FMX.Controls.pas" line="713">
        <parameters>
          <parameter name="X" type="Single"/>
          <parameter name="Y" type="Single"/>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Checks whether the point, specified by the absolute coordinates, belongs to the control area.
PointInObject returns True if the specified point belongs to the control area, and False otherwise. 
The X and Y are the absolute coordinates (relative to the main form) of the point to be checked (compare with PointInObjectLocal):

X is the X coordinate.
Y is the Y coordinate.
The points of the control boundary specified by BoundsRect belong to the control and PointInObject returns True for them.

Note: PointInObject simply converts absolute coordinates of the point to local coordinates and calls PointInObjectLocal.</summary></devnotes></function>
      <function name="PointInObjectLocal" visibility="public" procflags="virtual" file="FMX.Controls.pas" line="714">
        <parameters>
          <parameter name="X" type="Single"/>
          <parameter name="Y" type="Single"/>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Checks whether the point specified by local coordinates belongs to the control area.
PointInObjectLocal returns True if the specified point belongs to the control area, and False otherwise. 
The X and Y are the local coordinates of the point to be checked (compare with PointInObject):

X is the X coordinate.
Y is the Y coordinate.
The local coordinates of the upper-left corner of the control rectangle are (0,0), and the local coordinates of the lower-right corner are (Width, Height). 
The points of the control boundary specified by BoundsRect belong to the control and PointInObjectLocal returns True for them.
If a control supports the Touch property, the control area can be optionally inflated on the values specified by the TouchTargetExpansion property. TouchTargetExpansion keeps four optional parameters representing the expansion for the four sides of the control in pixels (Bottom, Left, Right, and Top). 
The dclasses can change the 'control area' definition. For example:

The FMX.Objects.TSelection class extends the 'control area' definition relative to BoundsRect. FMX.Objects.TSelection.PointInObjectLocal also returns True if the point belongs to any of small rectangles of the four grip controls used to manage the selection shape. The rectangles of the grip controls are rectangles surrounding the four corners of the TSelection rectangle. The Width and Height of these rectangles are equal to 2 * GripSize. For example, the grip control's rectangle of the upper-right corner UR_Corner of TSelection is defined by the following corners:
(UR_Corner.Top - GripSize, UR_Corner.Right - GripSize)--upper-left corner of the grip.
(UR_Corner.Top + GripSize, UR_Corner.Right + GripSize)--lower-right corner of the grip.
FMX.Objects.TSelectionPoint.PointInObjectLocal returns True if the specified point belongs to the rectangle of the grip control corresponding to the TSelectionPoint object, and False otherwise.</summary></devnotes></function>
      <function name="MakeScreenshot" visibility="public" file="FMX.Controls.pas" line="716">
        <parameters>
          <retval type="TBitmap"/>
        </parameters>
      <devnotes><summary>
Takes and returns a screenshot of the control.
MakeScreenshot creates a new TBitmap, draws on it the image of the current control by calling PaintTo, and returns it. 
</summary></devnotes></function>
      <procedure name="BeginUpdate" visibility="public" procflags="virtual" file="FMX.Controls.pas" line="718">
      <devnotes><summary>
Marks the start of an update session of the control and its children. 
It increases the value of the FUpdating semaphore. A call to BeginUpdate must be complemented by calls to EndUpdate after the update is finished.
FUpdating is an internal semaphore used to mark the process of control updating. Painting of a control is disabled while FUpdating is higher than 0.
</summary></devnotes></procedure>
      <function name="IsUpdating" visibility="public" procflags="virtual" file="FMX.Controls.pas" line="719">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Returns True if this control is in the middle of one or more update sessions. It returns False otherwise.
</summary></devnotes></function>
      <procedure name="EndUpdate" visibility="public" procflags="virtual" file="FMX.Controls.pas" line="720">
      <devnotes><summary>
Marks the end of an update session of the control and its children.
The update session must be started first by calling BeginUpdate.
EndUpdate decreases the FUpdating semaphore. If all update sessions end and FUpdating is 0, EndUpdate invokes Realign to process layout changes.
</summary></devnotes></procedure>
      <procedure name="RecalcAbsoluteNow" visibility="public" file="FMX.Controls.pas" line="722">
      <devnotes><summary>
Recalculates AbsoluteMatrix.
It is used in the painting process. Do not call RecalcAbsoluteNow in an application.
</summary></devnotes></procedure>
      <procedure name="RecalcUpdateRect" visibility="public" procflags="virtual" file="FMX.Controls.pas" line="723">
      <devnotes><summary>
Forces the current control to recalculate its UpdateRect property.  RecalcUpdateRect also forces the control's parent--if necessary--and children to recalculate their UpdateRect property. 
</summary></devnotes></procedure>
      <procedure name="RecalcOpacity" visibility="public" procflags="virtual" file="FMX.Controls.pas" line="724">
      <devnotes><summary>
Forces the current control to recalculate its Opacity property.  RecalcOpacity also forces the control's children to recalculate their Opacity property. 
</summary></devnotes></procedure>
      <procedure name="RecalcAbsolute" visibility="public" procflags="virtual" file="FMX.Controls.pas" line="725">
      <devnotes><summary>
Forces the current control to recalculate the AbsoluteMatrix property.  RecalcAbsolute also forces the control's children to recalculate their AbsoluteMatrix. 
</summary></devnotes></procedure>
      <procedure name="RecalcEnabled" visibility="public" procflags="virtual" file="FMX.Controls.pas" line="726">
      <devnotes><summary>
Forces the current control to recalculate its enabled state.  RecalcEnabled also forces the control's children to recalculate their enabled state. 
</summary></devnotes></procedure>
      <procedure name="RecalcHasEffect" visibility="public" procflags="virtual" file="FMX.Controls.pas" line="727">
      <devnotes><summary>
Forces the current control to recalculate its HasEffect property.  RecalcHasEffect also forces the control's parent to recalculate its HasEffect property. 
</summary></devnotes></procedure>
      <procedure name="RecalcHasClipParent" visibility="public" procflags="virtual" file="FMX.Controls.pas" line="728">
      <devnotes><summary>
Forces the current control to recalculate its HasClipParent property. 
</summary></devnotes></procedure>
      <procedure name="PrepareForPaint" visibility="public" procflags="virtual" file="FMX.Controls.pas" line="729">
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="RecalcSize" visibility="public" procflags="virtual" file="FMX.Controls.pas" line="730">
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="UpdateEffects" visibility="public" file="FMX.Controls.pas" line="732">
      <devnotes><summary>
Updates the effects of the current control and of the control's parent.
UpdateEffects is called every time the current control is changed (repainted, realigned, resized). UpdateEffects is also used when a new child is added to the control by calling AddObject.
</summary></devnotes></procedure>
      <procedure name="ApplyTriggerEffect" visibility="public" procflags="virtual" file="FMX.Controls.pas" line="734">
        <parameters>
          <parameter name="AInstance" type="TFmxObject" paramflags="const"/>
          <parameter name="ATrigger" type="string" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Applies the specified mouse trigger effect to all the children of this FMX object that are of type TEffect.
ApplyTriggerEffect iterates through all the children of this FMX object and, if one of them is of type TEffect, applies the mouse trigger given through the ATrigger parameter (which can be 'IsMouseOver', 'IsMouseOver', 'IsDragOver', and so on).
AInstance specifies the instance of the FMX object to which the trigger effect is applied.
</summary></devnotes></procedure>
      <procedure name="StartTriggerAnimation" visibility="public" procflags="virtual" file="FMX.Controls.pas" line="736">
        <parameters>
          <parameter name="AInstance" type="TFmxObject" paramflags="const"/>
          <parameter name="ATrigger" type="string" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="StartTriggerAnimationWait" visibility="public" procflags="virtual" file="FMX.Controls.pas" line="737">
        <parameters>
          <parameter name="AInstance" type="TFmxObject" paramflags="const"/>
          <parameter name="ATrigger" type="string" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="SetFocus" visibility="public" file="FMX.Controls.pas" line="739">
      <devnotes><summary>
Sets the focus to the current control, if CanFocus is True. When the current control receives focus, the OnCanFocus event is triggered.
</summary></devnotes></procedure>
      <procedure name="ResetFocus" visibility="public" file="FMX.Controls.pas" line="740">
      <devnotes><summary>
Removes the focus from a control or from any children of the control. 
</summary></devnotes></procedure>
      <procedure name="PaintTo" visibility="public" file="FMX.Controls.pas" line="743">
        <devnotes><summary>
Paints the current control to a specified canvas. 
ACanvas specifies the canvas to draw on.
ARect specifies the rectangle area of the ACanvas to draw on.
AParent specifies the Parent of the control. By default, it is empty.
PaintTo is called in the process of applying effects on the control in ApplyEffect, in which the control is first painted on the effect's canvas using PaintTo and then the effect is processed. It is also used in MakeScreenshot in order to produce a screenshot bitmap.
Descendants of TControl override PaintTo to provide specific rendering of the respective controls.   
</summary></devnotes>
        <parameters>
          <parameter name="ACanvas" type="TCanvas" paramflags="const"/>
          <parameter name="ARect" type="TRectF" paramflags="const"/>
          <parameter name="AParent" type="TFmxObject" paramflags="const">
            <value>
              nil
            </value>
          </parameter>
        </parameters>
      </procedure>
      <procedure name="Repaint" visibility="public" file="FMX.Controls.pas" line="744">
      <devnotes><summary>
Forces the control to repaint its image on the screen.
Repaint updates the effects applied to the control, if any, and adds a new update rectangle--which corresponds to the control's UpdateRect--to the control's Scene.
Call Repaint when the control's displayed area needs to be updated.
</summary></devnotes></procedure>
      <procedure name="InvalidateRect" visibility="public" file="FMX.Controls.pas" line="745">
        <parameters>
          <parameter name="ARect" type="TRectF"/>
        </parameters>
      <devnotes><summary>
Adds a rectangle to the update region of the scene.
ARect specifies the rectangle to be invalidated.
InvalidateRect transposes ARect to the local perspective and then adds it to the update region of the Scene.
</summary></devnotes></procedure>
      <procedure name="Lock" visibility="public" file="FMX.Controls.pas" line="746">
      <devnotes><summary>
Locks the current control, so it cannot be changed at design time. Lock also locks the current control's children.
</summary></devnotes></procedure>
      <property name="AbsoluteMatrix" visibility="public" read="GetAbsoluteMatrix" type="TMatrix" file="FMX.Controls.pas" line="747"><devnotes><summary>
Specifies the absolute transformation matrix of the control. 
AbsoluteMatrix is calculated using FLocalMatrix and AbsoluteMatrix of its parent.
The calculation only takes place if FRecalcAbsolute is True and the result is then cached in the FAbsoluteMatrix field.
If the calculation is not taking place during an update session and InPaintTo is not set, it initiates Repaint.
AbsoluteMatrix is used when the control is painted or needs to be repainted.    
</summary></devnotes></property>
      <property name="AbsoluteOpacity" visibility="public" read="GetAbsoluteOpacity" type="Single" default="0" file="FMX.Controls.pas" line="748"><devnotes><summary>
Specifies the absolute opacity of the control. 
If the control has another TControl as parent, AbsoluteOpacity depends on the absolute opacity of its parent. 
To explicitly set the opacity of a control, use the Opacity property.
</summary></devnotes></property>
      <property name="AbsoluteWidth" visibility="public" read="GetAbsoluteWidth" type="Single" default="0" file="FMX.Controls.pas" line="749"><devnotes><summary>
Specifies the absolute width of the control. 
Usually, it has the same values as the Width property. The value can be affected by the transformations applied over the control. 
</summary></devnotes></property>
      <property name="AbsoluteHeight" visibility="public" read="GetAbsoluteHeight" type="Single" default="0" file="FMX.Controls.pas" line="750"><devnotes><summary>
Specifies the absolute height of the control. 
Usually, it has the same value as the Height property. The value can be affected by the transformations applied over the control. 
</summary></devnotes></property>
      <property name="AbsoluteScale" visibility="public" read="GetAbsoluteScale" type="TPointF" file="FMX.Controls.pas" line="751"><devnotes><summary>
Specifies the absolute scale of the control. 
The absolute scale of a control is the scale relative to the scale of its parent.
AbsoluteScale is kept as a TPointF. The X coordinate is the scale for the X axis and Y is the scale for the Y axis.
</summary></devnotes></property>
      <property name="AbsoluteEnabled" visibility="public" read="GetAbsoluteEnabled" type="Boolean" file="FMX.Controls.pas" line="752"><devnotes><summary>
Specifies whether the control is absolutely enabled. 
AbsoluteEnabled is True only if Enabled is True and the parent also reports AbsoluteEnabled as True. Therefore, this logic climbs the parent hierarchy to determine whether the control is truly enabled or not.
If Parent is set and the parent's AbsoluteEnabled property is False, AbsoluteEnabled is set to False, otherwise it has the value of the Enabled property.
</summary></devnotes></property>
      <property name="AbsoluteRect" visibility="public" read="GetAbsoluteRect" type="TRectF" file="FMX.Controls.pas" line="753"><devnotes><summary>
Specifies the absolute rectangle that bounds the control.  It returns the bounding rectangle of the control in absolute coordinates (relative to the main form).
</summary></devnotes></property>
      <property name="AbsoluteClipRect" visibility="public" read="GetAbsoluteClipRect" type="TRectF" file="FMX.Controls.pas" line="755">
        <devnotes><summary>
Specifies the absolute rectangle of the control after all its parent controls clip it.
</summary></devnotes>
      </property>
      <property name="AxisAlignedRect" visibility="public" read="GetAxisAlignedRect" type="TRectF" file="FMX.Controls.pas" line="756"><devnotes><summary>
A TRectF defined by the width and height of the control.
This TRectF is normalized. DoGetUpdateRect uses this property.
</summary></devnotes></property>
      <property name="ApplyingEffect" visibility="public" read="FApplyingEffect" type="Boolean" file="FMX.Controls.pas" line="758">
        <devnotes><summary>
A flag that signals when a control is in the process of applying an effect.
The ApplyEffect method uses this flag to correctly render a control.
</summary></devnotes>
      </property>
      <property name="HasEffect" visibility="public" read="GetAbsoluteHasEffect" type="Boolean" file="FMX.Controls.pas" line="759"><devnotes><summary>
Specifies whether the control has an applied effect.
HasEffect is False if an effect was applied to the control, and True otherwise.
</summary></devnotes></property>
      <property name="HasDisablePaintEffect" visibility="public" read="GetAbsoluteHasDisablePaintEffect" type="Boolean" file="FMX.Controls.pas" line="760"><devnotes><summary>
Specifies whether the control's effect is painted.
HasDisablePaintEffect is True if the control has disabled the painting effect, and False otherwise.
</summary></devnotes></property>
      <property name="HasAfterPaintEffect" visibility="public" read="GetAbsoluteHasAfterPaintEffect" type="Boolean" file="FMX.Controls.pas" line="761"><devnotes><summary>
Specifies whether the control has an effect that is applied after the control is painted.
HasAfterPaintEffect is True if the control has an effect that is applied after the control is painted, and False otherwise.
</summary></devnotes></property>
      <property name="HasClipParent" visibility="public" read="GetHasClipParent" type="TControl" file="FMX.Controls.pas" line="762"><devnotes><summary>
Control that is a direct child of this control and has clipped this control.
</summary></devnotes></property>
      <property name="ChildrenRect" visibility="public" read="GetChildrenRect" type="TRectF" file="FMX.Controls.pas" line="763"><devnotes><summary>
Specifies the bigger rectangle area occupied by parent and children controls. 
ChildrenRect is a rectangle obtained by performing a union operation between the rectangles occupied by the parent control and the children controls. 

Use the ChildrenRect.Width property on the parent, to obtain the width of the rectangle.
Use the ChildrenRect.Height property on the parent, to obtain the height of the rectangle.
Note: They are read-only properties.</summary></devnotes></property>
      <property name="DefaultSize" visibility="public" read="GetDefaultSize" type="TSizeF" file="FMX.Controls.pas" line="764"><devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></property>
      <property name="FixedSize" visibility="public" read="FFixedSize" write="FFixedSize" type="TSize" file="FMX.Controls.pas" line="765"><devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></property>
      <property name="InvertAbsoluteMatrix" visibility="public" read="GetInvertAbsoluteMatrix" type="TMatrix" file="FMX.Controls.pas" line="766"><devnotes><summary>
Specifies the inverse matrix of AbsoluteMatrix. 
</summary></devnotes></property>
      <property name="InPaintTo" visibility="public" read="FInPaintTo" type="Boolean" file="FMX.Controls.pas" line="767"><devnotes><summary>
Specifies whether the control is currently being painted.
InPaintTo is True if the current control is being painted.
</summary></devnotes></property>
      <property name="LocalRect" visibility="public" read="GetLocalRect" type="TRectF" file="FMX.Controls.pas" line="768"><devnotes><summary>
Specifies the local rectangle for painting the control. 
The coordinates of the upper-left corner of the rectangle are (0,0) and the coordinates of the bottom right corner are (Width, Height). 
</summary></devnotes></property>
      <property name="Pressed" visibility="public" read="FPressed" write="FPressed" type="Boolean" file="FMX.Controls.pas" line="769"><devnotes><summary>
Indicates whether the control is currently pressed.
Mouse action event handlers use this property as a flag to determine how to proceed in some cases.
</summary></devnotes></property>
      <property name="PressedPosition" visibility="public" read="FPressedPosition" write="FPressedPosition" type="TPointF" file="FMX.Controls.pas" line="771">
        <devnotes><summary>
A point that indicates where exactly on the control the click occured.
MouseDown sets PressedPosition if Button is mbLeft.
</summary></devnotes>
      </property>
      <property name="UpdateRect" visibility="public" read="GetUpdateRect" type="TRectF" file="FMX.Controls.pas" line="772"><devnotes><summary>
Specifies the rectangle area of the control that needs to be updated. 
UpdateRect is a union between the rectangle areas that need to be painted over the control when:

The control receives focus.
The control gets new effects.
The control's children are updated.
The control's parent is updated.</summary></devnotes></property>
      <property name="BoundsRect" visibility="public" read="GetBoundsRect" write="SetBoundsRect" type="TRectF" file="FMX.Controls.pas" line="773"><devnotes><summary>
Specifies the bounding rectangle of the control. 
The coordinates of the upper-left corner of the bounding rectangle are X and Y coordinates of the control Position. The coordinates of the lower-right corner are X+Width and Y+Height. 
For example:

R:=Control.BoundsRect;

The coordinates of the R rectangle are:

R.Left = Control.Position.X;
R.Top = Control.Position.Y;
R.Right = Control.Position.X + Control.Width;
R.Bottom = Control.Position.Y + Control.Height;

When BoundsRect is set, the Position property is set to be the upper-left corner of the given bound rectangle, and the Width and Height of the control receive the values of the width and height of the given bound rectangle.
For example:

Control.BoundsRect:=R;

The controls have the following properties:

Control.Position.X= R.Left;
Control.Position.Y= R.Top;
Control.Width= R.Width;
Control.Height= R.Height;
</summary></devnotes></property>
      <property name="ParentedRect" visibility="public" read="GetParentedRect" type="TRectF" file="FMX.Controls.pas" line="775"><devnotes><summary>
Specifies the bounding rectangle of the control within its parent. 
</summary></devnotes></property>
      <property name="ParentedVisible" visibility="public" read="GetParentedVisible" type="Boolean" file="FMX.Controls.pas" line="777"><devnotes><summary>
Specifies whether all the control's parents are visible. 
A control can be set to visible if all its parents are also visible.
ParentedVisible returns True if the control's parents are visible, and False otherwise.
</summary></devnotes></property>
      <property name="ClipRect" visibility="public" read="GetClipRect" type="TRectF" file="FMX.Controls.pas" line="778"><devnotes><summary>
Specifies the bound rectangle to be clipped. 
The values of ClipRect are specified by:

Left and Top, equal to 0.
Right, equal to Width.
Bottom, equal to Height.</summary></devnotes></property>
      <property name="Canvas" visibility="public" read="GetCanvas" type="TCanvas" file="FMX.Controls.pas" line="779"><devnotes><summary>
Provides the drawing surface of the control. 
Canvas defines an area within which you can explicitly position child elements by using coordinates that are relative to the drawing area.
For more details, see TCanvas.
</summary></devnotes></property>
      <property name="Controls" visibility="public" read="GetControls" type="TList&lt;FMX.Controls.TControl&gt;" hoisted="true" file="FMX.Controls.pas" line="780"><devnotes><summary>
Stores an array of child controls attached to this parent control.
</summary></devnotes></property>
      <property name="ControlsCount" visibility="public" read="GetControlsCount" type="Integer" file="FMX.Controls.pas" line="781"><devnotes><summary>
Number of controls that are direct children of this control.
</summary></devnotes></property>
      <property name="ParentControl" visibility="public" read="FParentControl" type="TControl" file="FMX.Controls.pas" line="782"><devnotes><summary>
Specifies the parent control of this control.

Tip: You cannot set the parent control of this control as the control itself (Self (Delphi) or this (C++Builder)).</summary></devnotes></property>
      <property name="Scene" visibility="public" read="FScene" type="IScene" file="FMX.Controls.pas" line="783"><devnotes><summary>
Specifies the current scene in which the control is drawn.  
The Scene of the control is also the scene of its children.
</summary></devnotes></property>
      <property name="AutoCapture" visibility="public" read="FAutoCapture" write="FAutoCapture" type="Boolean" default="0" file="FMX.Controls.pas" line="784"><devnotes><summary>
Specifies whether the control captures mouse events.
When a control captures the mouse, all subsequent mouse events go to that control until the user releases the mouse button. 
</summary></devnotes></property>
      <property name="CanFocus" visibility="public" read="FCanFocus" write="FCanFocus" type="Boolean" default="0" file="FMX.Controls.pas" line="785"><devnotes><summary>
Specifies whether the current control can receive focus. 
CanFocus is True if it can receive focus, and False otherwise.
If it is set to False, the control cannot be selected when using the TAB key.
A control can receive focus after it is created.
</summary></devnotes></property>
      <property name="CanParentFocus" visibility="public" read="FCanParentFocus" write="FCanParentFocus" type="Boolean" default="0" file="FMX.Controls.pas" line="786"><devnotes><summary>
Specifies whether the parent of this control should be evaluated to receive focus.
CanParentFocus is True when the parent of this control should be evaluated to receive focus if this control cannot receive focus itself, and False otherwise.
</summary></devnotes></property>
      <property name="DisableFocusEffect" visibility="public" read="FDisableFocusEffect" write="FDisableFocusEffect" type="Boolean" default="0" file="FMX.Controls.pas" line="787"><devnotes><summary>
Specifies whether the control has the focus effect disabled.
Set DisableFocusEffect to True so the control disables the effect applied when it receives focus. Usually, DisableFocusEffect for FireMonkey controls is False.
</summary></devnotes></property>
      <property name="IsInflated" visibility="public" read="FInflated" type="Boolean" file="FMX.Controls.pas" line="788"><devnotes><summary>
Whether the current style of this control has been actually applied to the control.
IsInflated is  True if the current style of the control has been applied to the control. It is False otherwise.
For example, if you change the style of a control at run time, IsInflated is False until the control is updated to show its new style.
</summary></devnotes></property>
      <procedure name="EnumControls" visibility="public" procflags="overload" file="FMX.Controls.pas" line="789">
        <parameters>
          <parameter name="Proc" type="TFunc&lt;FMX.Controls.TControl,FMX.Types.TEnumProcResult&gt;" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Loops through the controls that are children of this control, and runs the specified procedure once per control, with a different control as the first parameter in each call.

Warning: EnumControls is deprecated as a function. You should use it as a procedure instead. This page describes the syntax and use of the EnumControls procedure.
EnumControls loops not only through direct children of this control, but also through their children (grand-children), and so on, using a depth-first search algorithm.
Each time EnumControls visits a control during the search, it executes the Proc procedure. This procedure receives the visited control as argument, and it returns a value of type TEnumControlsResult. The return value defines what EnumControls does next. You may return any of the following values:

Continue lets EnumControls keep searching the controls as usual.
Discard makes the search skip the children of the current control (the control in the first parameter), as well as their children (grand-children) and so on.
Stop interrupts the search loop. If EnumControls were a language-level control loop, Stop would be the Break keyword.
Example
The following is an example call to EnumControls that loops through the children of a panel (Panel1) and fills a list (ListOfVisibleControls) with all the controls that are visible:


In Delphi:

Panel1.EnumControls(function (Control: TControl): TEnumControlsResult
  begin
    if not Control.Visible then
      Result := TEnumControlsResult.Discard
    else
      begin
        ListOfVisibleControls.Add(Control);
        Result := TEnumControlsResult.Continue;
      end;
  end);



In C++:

1. Define a class that implements the TFunc__2 interface:
class TMethodReference : public TCppInterfacedObject&lt;TFunc__2&lt;TControl*,TEnumControlsResult&gt; &gt;
{
public:
    TEnumControlsResult __fastcall Invoke(TControl* Control)
    {
        if (!Control-&gt;Visible)
            return TEnumControlsResult::Discard;
        else {
            TForm2::ListOfVisibleControls-&gt;Add(Control);
            return TEnumControlsResult::Continue;
        }
    }
};

2. Then pass an instance of this class to EnumControls:
Panel1-&gt;EnumControls(new TMethodReference);

</summary></devnotes></procedure>
      <function name="EnumControls" visibility="public" procflags="overload" file="FMX.Controls.pas" line="790" symflags="deprecated">
        <parameters>
          <parameter name="Proc" type="TEnumControlsRef"/>
          <parameter name="VisibleOnly" type="Boolean" paramflags="const">
            <value>
              True
            </value>
          </parameter>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Loops through the controls that are children of this control, and runs the specified procedure once per control, with a different control as the first parameter in each call.

Warning: EnumControls is deprecated as a function. You should use it as a procedure instead. This page describes the syntax and use of the EnumControls procedure.
EnumControls loops not only through direct children of this control, but also through their children (grand-children), and so on, using a depth-first search algorithm.
Each time EnumControls visits a control during the search, it executes the Proc procedure. This procedure receives the visited control as argument, and it returns a value of type TEnumControlsResult. The return value defines what EnumControls does next. You may return any of the following values:

Continue lets EnumControls keep searching the controls as usual.
Discard makes the search skip the children of the current control (the control in the first parameter), as well as their children (grand-children) and so on.
Stop interrupts the search loop. If EnumControls were a language-level control loop, Stop would be the Break keyword.
Example
The following is an example call to EnumControls that loops through the children of a panel (Panel1) and fills a list (ListOfVisibleControls) with all the controls that are visible:


In Delphi:

Panel1.EnumControls(function (Control: TControl): TEnumControlsResult
  begin
    if not Control.Visible then
      Result := TEnumControlsResult.Discard
    else
      begin
        ListOfVisibleControls.Add(Control);
        Result := TEnumControlsResult.Continue;
      end;
  end);



In C++:

1. Define a class that implements the TFunc__2 interface:
class TMethodReference : public TCppInterfacedObject&lt;TFunc__2&lt;TControl*,TEnumControlsResult&gt; &gt;
{
public:
    TEnumControlsResult __fastcall Invoke(TControl* Control)
    {
        if (!Control-&gt;Visible)
            return TEnumControlsResult::Discard;
        else {
            TForm2::ListOfVisibleControls-&gt;Add(Control);
            return TEnumControlsResult::Continue;
        }
    }
};

2. Then pass an instance of this class to EnumControls:
Panel1-&gt;EnumControls(new TMethodReference);

</summary></devnotes></function>
      <function name="GetTabList" visibility="public" procflags="virtual" file="FMX.Controls.pas" line="793">
        <parameters>
          <retval type="ITabList"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></function>
      <function name="ShowInDesigner" visibility="public" procflags="virtual" file="FMX.Controls.pas" line="794">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></function>
      <function name="ShouldTestMouseHits" visibility="public" procflags="virtual" file="FMX.Controls.pas" line="797">
        <devnotes><summary>
Indicates whether a control should be ignored in ObjectAtPoint.
False if the control should be ignored in ObjectAtPoint. ShouldTestMouseHits normally returns the same value as the value of Visible property of the control.
TFrame overrides this method to allow itself to be painted in design time regardless of the value of its Visible property.
</summary></devnotes>
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <property name="IsMouseOver" visibility="public" read="FIsMouseOver" type="Boolean" file="FMX.Controls.pas" line="799"><devnotes><summary>
Specifies whether the mouse cursor is over the control.
IsMouseOver is True when the mouse is passing over the control.
For effect triggers, setting IsMouseOver to True triggers the effect while the mouse passes over the control. 
</summary></devnotes></property>
      <property name="IsDragOver" visibility="public" read="FIsDragOver" type="Boolean" file="FMX.Controls.pas" line="800"><devnotes><summary>
Specifies whether a dragged object is over the area of the current control.
IsDragOver is True when the dragged object is over the current control.
For effect triggers, setting IsDragOver to True triggers the effect when the dragged object is over the current control.
</summary></devnotes></property>
      <property name="IsFocused" visibility="public" read="GetIsFocused" type="Boolean" file="FMX.Controls.pas" line="801"><devnotes><summary>
Specifies whether the control is in focus.
IsFocused is True when the focus is on the control.
For effect triggers, setting IsFocused to True triggers the effect when the user selects the control. 
</summary></devnotes></property>
      <property name="IsVisible" visibility="public" read="FVisible" type="Boolean" file="FMX.Controls.pas" line="802"><devnotes><summary>
Specifies whether the control is visible.
IsVisible is True when the control is visible. Use Visible in applications to allow write access.
For effect triggers, setting IsVisible to True triggers the effect when the control is visible on the form. 
</summary></devnotes></property>
      <property name="Align" visibility="public" read="FAlign" write="SetAlign" type="TAlignLayout" default="0" file="FMX.Controls.pas" line="803"><devnotes><summary>
Specifies the alignment options (top, left, client, and so on) of this control. 
Use Align to automatically set the alignment of the current control. Setting Align to a value different than None can affect the  position, size (height and width), and anchors of the control. By default, Align is set to None.
Descendants of TControl typically set the visibility and value for the Align property. For example, for TToolBar, Align defaults to TAlignLayout.Top.
To see the possible values for Align and their visible effects over the control, see FMX.Types.TAlignLayout.  
Controls that have the Align or Anchors properties set can use a Scale that is different from the default (1,1), so that controls align together even when they have a custom scale. 
</summary></devnotes></property>
      <property name="Anchors" visibility="public" read="FAnchors" write="SetAnchors" stored="IsAnchorsStored" type="TAnchors" file="FMX.Controls.pas" line="804"><devnotes><summary>
Specifies how the control is anchored to its parent. 
Use Anchors to ensure that a control maintains its current position relative to the edges of its parent, even if the parent is resized. When its parent is resized, the control holds its position relative to the edges to which it is anchored. Anchors is enforced only when the parent control is resized.
If a control is anchored to opposite edges at the same time, the control stretches horizontally or vertically to maintain constant the distance between the control edges and parent edges. If a control is anchored to all four edges of its parent, the control stretches in all directions. By default, a control is anchored to the top and left edges of its container (Anchors=[akTop,akLeft]).
The automatic alignment may affect the anchors of a control. When Align is set to None, all the anchors are available. If Align is not None, the anchors affected by the automatic alignment are excluded. Changing the state of the anchors affected by the automatic alignment has no effect over the control.
Controls that have the Align or Anchors properties set can use a Scale that is different from the default (1,1), so that controls align together even when they have a custom scale. 
</summary></devnotes></property>
      <property name="Cursor" visibility="public" read="GetCursor" write="SetCursor" type="TCursor" default="0" file="FMX.Controls.pas" line="805"><devnotes><summary>
Image to use to represent the mouse pointer when it passes into the region covered by the control.
Change the value of Cursor to provide feedback to the user when the mouse pointer enters the control. For a list of cursor constants, see System.UITypes Constants. The image representations of the cursor depend on the theme active on the current platform.
If Cursor is set to the default cursor, this control might display a different cursor when the mouse pointer is over it. The actual cursor that this control displays is the cursor defined in InheritedCursor, a read-only property that is calculated based not only in the value of Cursor in this control, but also the value of Cursor in any ancestor of this control (parent, grand-parent, and so on until the parent form).
</summary></devnotes></property>
      <property name="InheritedCursor" visibility="public" read="GetInheritedCursor" type="TCursor" default="0" file="FMX.Controls.pas" line="806"><devnotes><summary>
Image used to represent the mouse pointer when it passes into the region covered by the control.
The value of the read-only InheritedCursor property is the value of the Cursor property unless Cursor has the default value, in which case InheritedCursor contains the first non-default InheritedCursor value of its ancestors (parent, grand-parent, and so on until the parent form). If every ancestor of this control has InheritedCursor set to the default value, InheritedCursor has the default value in this control as well.
Changing the value of Cursor in this control or in any ancestor of this control may affect the value of InheritedCursor in this control.
</summary></devnotes></property>
      <property name="DragMode" visibility="public" read="GetDragMode" write="SetDragMode" type="TDragMode" default="0" file="FMX.Controls.pas" line="807"><devnotes><summary>
Specifies how the control initiates drag-and-drop operations.
Use DragMode to control when the user can drag the control. Disable the drag-and-drop capability at run time by setting the DragMode property value to dmManual. Enable automatic dragging by setting DragMode to dmAutomatic.
</summary></devnotes></property>
      <property name="EnableDragHighlight" visibility="public" read="FEnableDragHighlight" write="FEnableDragHighlight" type="Boolean" default="1" file="FMX.Controls.pas" line="808"><devnotes><summary>
Specifies whether the control is highlighted when the dragged object is over it. 
</summary></devnotes></property>
      <property name="Enabled" visibility="public" read="FEnabled" write="SetEnabled" stored="EnabledStored" type="Boolean" file="FMX.Controls.pas" line="809"><devnotes><summary>
Specifies whether the control responds to mouse, keyboard, and timer events. 
Use Enabled to change the availability of the control to the user. To disable a control, set Enabled to False. Some disabled controls appear dimmed (for example: buttons, check boxes, labels), while others (container controls) simply lose their functionality without changing their appearance. If Enabled is set to False, the control ignores mouse, keyboard, and timer events.
To re-enable a control, set Enabled to True.
This property applies to all TControl descendants. 
</summary></devnotes></property>
      <property name="Position" visibility="public" read="FPosition" write="SetPosition" stored="IsPositionStored" type="TPosition" file="FMX.Controls.pas" line="810"><devnotes><summary>
Aligns the component to the position points of other components (Bounds points).
Specifies the upper-left corner of the current control, relative to its parent. 
The Position can be affected by the Padding of its parent and the Margins of the control. 
</summary></devnotes></property>
      <property name="Locked" visibility="public" read="FLocked" write="SetLocked" type="Boolean" default="0" file="FMX.Controls.pas" line="811"><devnotes><summary>
Specifies whether the control is locked at design time. 
A locked control prohibits to move the control at design time, all the other properties can be modified at design time.
To lock the control, set Locked to True. 
By default, Locked is False, and the control can be modified at design time. 
</summary></devnotes></property>
      <property name="Width" visibility="public" read="GetWidth" write="SetWidth" stored="False" type="Single" file="FMX.Controls.pas" line="812"><devnotes><summary>
Specifies the horizontal size of the control (in pixels).
Use the Width property to read or change the width of the control. 
</summary></devnotes></property>
      <property name="Height" visibility="public" read="GetHeight" write="SetHeight" stored="False" type="Single" file="FMX.Controls.pas" line="813"><devnotes><summary>
Height specifies the vertical size of the control (in dp).
Use the Height property to read or change the height of the control. 
</summary></devnotes></property>
      <property name="Size" visibility="public" read="FSize" write="SetSize" stored="IsSizeStored" type="TControlSize" file="FMX.Controls.pas" line="814"><devnotes><summary>
Specifies the vertical and horizontal size (Size.Height and Size.Width) of the control (in pixels).
Use the Size property to read or change the size of the control. 
</summary></devnotes></property>
      <property name="Padding" visibility="public" read="GetPadding" write="SetPadding" type="TBounds" file="FMX.Controls.pas" line="815"><devnotes><summary>
Aligns the component to the padding points of other components. 
The Padding of a control specifies how close, in pixels, the control's children can come to each of its edges (top, left, bottom, right). Padding adds space to the inner side of the control.
The control's children are repositioned and resized, if necessary, to maintain the Padding. 
If the Padding control has zero values, RAD Studio uses the default values (Left=4, Top=4, Right=4, Bottom=4). You can also set your own Padding values.
The following image shows how Padding and Margins properties affect alignment, position, and size of controls.


Note: Padding constraints do not work for TScrollBox, TListBox, TTreeView, and TGrid based controls.

</summary></devnotes></property>
      <property name="Margins" visibility="public" read="GetMargins" write="SetMargins" type="TBounds" file="FMX.Controls.pas" line="816"><devnotes><summary>
Aligns the component to the margins points of other components. 
The Margins of a control are the distances (in pixels) from each edge (top, left, bottom, right) to another control within the same Parent or to the edge of its Parent.  The Margins add space to the outer side of the control. It only applies for controls that do not use TAlignLayout None and the components are located to each other.
If a margin is not 0, no other control will come closer to the control than the specified distance. If the distance from a Parent edge to the corresponding control edge is smaller than the specified Margins for that edge, the control is repositioned and resized, if necessary, to maintain the specified distance. 
If the Margins control has zero values, RAD Studio uses the default values (Left=4, Top=4, Right=4, Bottom=4). You can also set your own Margins values. It only applies to the IDE control's guidelines, when you are dragging control. But if you use Align=Client (for example), it will use the specified values in Margins.
The following image shows how Padding and Margins properties affect alignment, position, and size of controls.

</summary></devnotes></property>
      <property name="Opacity" visibility="public" read="FOpacity" write="SetOpacity" stored="IsOpacityStored" type="Single" file="FMX.Controls.pas" line="817"><devnotes><summary>
Specifies the control opacity. 
Set Opacity to customize the transparency of the current control.
Opacity takes values between 0 and 1. If Opacity is 1, the control is completely opaque; if it is 0, the control is completely transparent. The values over 1 are treated as 1, and the ones under 0 are treated as 0.
Opacity applies to the control's children.
</summary></devnotes></property>
      <property name="ClipChildren" visibility="public" read="FClipChildren" write="SetClipChildren" type="Boolean" default="0" file="FMX.Controls.pas" line="818"><devnotes><summary>
Specifies if children of the control should be clipped to the control's on-screen region.
Set ClipChildren to 

True if you want child controls to be clipped to the control's on-screen region.
False if you want child controls to be able to extend beyond the region of the parent control.</summary></devnotes></property>
      <property name="ClipParent" visibility="public" read="FClipParent" write="FClipParent" type="Boolean" default="0" file="FMX.Controls.pas" line="819"><devnotes><summary>
Specifies whether the current control has clipped its parent. 
When ClipParent is True, TControl cuts off the portion of the parent that lies under the control when the control is painted by the Paint and Painting methods. 
Parts of the control that do not contain visible objects cut off holes in the parent's image.
ClipParent is ignored in PaintChildren and other painting methods.
If one parent has more that one child control having ClipParent equals True, then only one of these child controls is painted with ClipParent equals True. Others child controls are painted as if ClipParent equals False.
</summary></devnotes></property>
      <property name="HitTest" visibility="public" read="FHitTest" write="SetHitTest" type="Boolean" default="1" file="FMX.Controls.pas" line="820"><devnotes><summary>
Enables the control to capture mouse events.

If you set HitTest to True, this control captures all mouse events. The example below shows the use of HitTest for an OnClick event.
If you set HitTest to False, the mouse events will pass through this control, so that a control laid out behind this one receives the mouse events instead of this control.
Note:  The HitTest enables all mouse-related events, which also include the display of Hints and Hint-related events.
For most controls, HitTest is True by default. However, this is not true for all the controls. For example, for TLabel and TPathLabel, HitTest is False by default; these two controls do not capture the mouse-related events unless you set HitTest to True.

Example of HitTest
1. On a form, place a TPanel component.
2. Inside the panel, place a TPathLabel component.
3. Implement the OnClick event for both the TPanel and the TPathLabel:

procedure TForm1.Panel1Click(Sender: TObject);
begin
  ShowMessage('OnClick event fired for TPanel');
end;

procedure TForm1.PathLabel1Click(Sender: TObject);
begin
  ShowMessage('OnClick event fired for TPathLabel');
end;

4. Set the TPathLabel HitTest property to False (this is the default setting). Run the application and click the label. The OnClick event is fired for the panel (not the label).
5. Set the TPathLabel HitTest property to True. Run the application and click the label. The OnClick event is fired for the TPathLabel.
</summary></devnotes></property>
      <property name="PopupMenu" visibility="public" read="FPopupMenu" write="SetPopupMenu" stored="IsPopupMenuStored" type="TCustomPopupMenu" file="FMX.Controls.pas" line="821"><devnotes><summary>
Specifies the context (pop-up) menu object. 
Use PopupMenu to set the context menu of the current control. The pop-up window is displayed when ShowContextMenu is called.
</summary></devnotes></property>
      <property name="TabOrder" visibility="public" read="GetTabOrder" write="SetTabOrder" type="TTabOrder" default="-1" file="FMX.Controls.pas" line="822"><devnotes><summary>
Indicates the position of the control in its parent's tab order.
TabOrder is the order in which child controls are visited when the user presses the TAB key. The control with the TabOrder value of 0 is the control that has the focus when the form first appears.
Initially, the tab order is always the order in which the controls were added to the form. The first control added to the form has a TabOrder value of 0, the second is 1, the third is 2, and so on. Change this by changing the TabOrder property.
Each control has a unique tab-order value within its parent. 
Assigning TabOrder a value greater than the number of controls contained in the parent control moves the control to the end of the tab order. The control does not take on the assigned value of TabOrder, but instead is given the number that ensures that the control is the last in the tab order.


</summary></devnotes></property>
      <property name="Visible" visibility="public" read="FVisible" write="SetVisible" stored="VisibleStored" type="Boolean" default="1" file="FMX.Controls.pas" line="823"><devnotes><summary>
Specifies whether the component appears onscreen.
Use the Visible property to control the visibility of the control at run time. If Visible is True, the control appears. If Visible is False, the control is not visible.
</summary></devnotes></property>
      <event name="CustomSceneAddRect" visibility="public" read="FCustomSceneAddRect" write="FCustomSceneAddRect" type="TCustomSceneAddRectEvent" file="FMX.Controls.pas" line="824"><devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></event>
      <event name="OnDragEnter" visibility="public" read="FOnDragEnter" write="FOnDragEnter" type="TDragEnterEvent" file="FMX.Controls.pas" line="825"><devnotes><summary>
Occurs when a dragged object enters the area of the current control.
OnDragEnter also occurs when DragEnter is called.
Write an event handler for OnDragEnter to specify what happens when a dragged object enters the area of the current control.
</summary></devnotes></event>
      <event name="OnDragLeave" visibility="public" read="FOnDragLeave" write="FOnDragLeave" type="TNotifyEvent" file="FMX.Controls.pas" line="826"><devnotes><summary>
Occurs when a dragged object leaves the area of the current control.
OnDragLeave also occurs when DragLeave is called.
Write an event handler for OnDragLeave to specify what happens when a dragged object leaves the area of the current control.
</summary></devnotes></event>
      <event name="OnDragOver" visibility="public" read="FOnDragOver" write="FOnDragOver" type="TDragOverEvent" file="FMX.Controls.pas" line="827"><devnotes><summary>
Occurs when a dragged object is over the area of the current control.
OnDragOver also occurs when DragOver is called.
Write an event handler for OnDragOver to specify what happens when a dragged object is over the area of the current control.
For most controls, HitTest is True by default. However, this is not true for TLabel, TPathLabel and, TMagnifierGlass where HitTest is False by default; these controls do not capture the OnDragOver event unless you set HitTest to True.
This event provides the following arguments to its event handler:

Sender is a pointer to the object that called this function.
Data is the dragged object.
Point is the current point of the mouse pointer within the client area of the control.
Operation is the operation parameter (None, Move, Copy, Link) that specifies the action to perform when an item is dragged over the object.
None is the default. No action takes place, it does not display any name.
Move - the word Move is displayed once an item is dragged over the object.
Copy - the word Copy is displayed once an item is dragged over the object.
Link - the word Link is displayed once an item is dragged over the object.</summary></devnotes></event>
      <event name="OnDragDrop" visibility="public" read="FOnDragDrop" write="FOnDragDrop" type="TDragDropEvent" file="FMX.Controls.pas" line="828"><devnotes><summary>
Occurs when a dragged control is dropped.
OnDragDrop also occurs when DragDrop is called.
Write an event handler for OnDragDrop to specify what happens when a dragged control is dropped.
</summary></devnotes></event>
      <event name="OnDragEnd" visibility="public" read="FOnDragEnd" write="FOnDragEnd" type="TNotifyEvent" file="FMX.Controls.pas" line="829"><devnotes><summary>
Occurs when the dragging of a control ends.
A dragging session can be ended either by dropping the control or by canceling the dropping.
OnDragEnd also occurs when DragEnd is called.
Write an event handler for OnDragEnd to specify what happens when the dragging session ends.
</summary></devnotes></event>
      <event name="OnKeyDown" visibility="public" read="FOnKeyDown" write="FOnKeyDown" type="TKeyEvent" file="FMX.Controls.pas" line="830"><devnotes><summary>
Occurs when a key is pressed while the control has focus.
OnKeyDown is called from KeyDown methods of GUI components, for example, of controls and forms.
Write an event handler for OnKeyDown to specify what happens when a control or a form has the input focus and a key is pressed.
</summary></devnotes></event>
      <event name="OnKeyUp" visibility="public" read="FOnKeyUp" write="FOnKeyUp" type="TKeyEvent" file="FMX.Controls.pas" line="831"><devnotes><summary>
Occurs when a key is released while the control has focus.
OnKeyUp also occurs when KeyUp is called.
Write an event handler for OnKeyUp to specify what happens when the control is in focus and a key is released.
</summary></devnotes></event>
      <event name="OnClick" visibility="public" read="FOnClick" write="SetOnClick" stored="OnClickStored" type="TNotifyEvent" file="FMX.Controls.pas" line="832"><devnotes><summary>
Occurs when the control is clicked.
For controls (such as TLabel and TPathLabel) that have the HitTest property set to False by default, the OnClick and OnDblClick mouse events pass through to the control behind this control. 
Usually, the OnClick event happens when the left mouse button is pressed and released with the pointer over the control or when Click is called. 
For buttons controls, the OnClick event also happens when the control is in focus and the SPACEBAR or ENTER key is pressed. 
For controls with state, like TRadioButton and TCheckBox, OnClick does not change the state (the IsChecked property is not changed). OnClick cannot be associated to a form. 
</summary></devnotes></event>
      <event name="OnDblClick" visibility="public" read="FOnDblClick" write="FOnDblClick" type="TNotifyEvent" file="FMX.Controls.pas" line="833"><devnotes><summary>
Occurs when the left mouse button is double-clicked with the pointer over the control.
OnDblClick also occurs when DblClick is called.
For controls (such as TLabel and TPathLabel) that have the HitTest property set to False by default, the OnClick and OnDblClick mouse events pass through to the control behind this control.
</summary></devnotes></event>
      <event name="OnCanFocus" visibility="public" read="FOnCanFocus" write="FOnCanFocus" type="TCanFocusEvent" file="FMX.Controls.pas" line="834"><devnotes><summary>
Occurs when a control can receive focus. 
SetFocus is an event handler for OnCanFocus. 
Write an event handler for OnCanFocus to customize the behavior when the control receives focus.  
</summary></devnotes></event>
      <event name="OnEnter" visibility="public" read="FOnEnter" write="FOnEnter" type="TNotifyEvent" file="FMX.Controls.pas" line="835"><devnotes><summary>
Occurs when the control receive input focus.
OnEnter also occurs when DoEnter is called.
Write an event handler for OnEnter to specify what happens when the control receive input focus.
</summary></devnotes></event>
      <event name="OnExit" visibility="public" read="FOnExit" write="FOnExit" type="TNotifyEvent" file="FMX.Controls.pas" line="836"><devnotes><summary>
Occurs when the input focus is taken from the control.
OnExit also occurs when DoExit is called.
Write an event handler for OnExit to specify what happens when the input focus is taken from the control.

Note:  For example in TEdit control, you may want to prevent the user from leaving the control until a certain value has been entered into it. This can be done with the code like this:
procedure TForm1.Edit1Exit(Sender: TObject);
begin
  if Edit1.Text &lt;&gt; 'Hello' then
   Edit1.Abort;
end;
 
Notice that the code like Edit1.SetFocus; does not have the expected effect.</summary></devnotes></event>
      <event name="OnMouseDown" visibility="public" read="FOnMouseDown" write="FOnMouseDown" type="TMouseEvent" file="FMX.Controls.pas" line="837"><devnotes><summary>
Occurs when a mouse button is pressed over a control. 
OnMouseDown also occurs when MouseDown is called.
Write an event handler for OnMouseDown to specify what happens when one of the mouse buttons is pressed over the control.
</summary></devnotes></event>
      <event name="OnMouseMove" visibility="public" read="FOnMouseMove" write="FOnMouseMove" type="TMouseMoveEvent" file="FMX.Controls.pas" line="838"><devnotes><summary>
Occurs when the mouse cursor moves while over the control area. 
OnMouseMove also occurs when MouseMove is called.
Write an event handler for OnMouseMove to specify what happens when the mouse cursor is moved while over the control area.
</summary></devnotes></event>
      <event name="OnMouseUp" visibility="public" read="FOnMouseUp" write="FOnMouseUp" type="TMouseEvent" file="FMX.Controls.pas" line="839"><devnotes><summary>
Occurs when the mouse button that was pressed over the control is released. 
OnMouseUp also occurs when MouseUp is called.
Write an event handler for OnMouseUp to specify what happens when the button of the mouse that was pressed over the control is released.
</summary></devnotes></event>
      <event name="OnMouseWheel" visibility="public" read="FOnMouseWheel" write="FOnMouseWheel" type="TMouseWheelEvent" file="FMX.Controls.pas" line="840"><devnotes><summary>
Occurs when the mouse wheel moves while the control has focus. 
OnMouseWheel also occurs when the MouseWheel is called.
Write an event handler for OnMouseWheel to specify what happens when the mouse wheel is moved while the control has focus.
</summary></devnotes></event>
      <event name="OnMouseEnter" visibility="public" read="FOnMouseEnter" write="FOnMouseEnter" type="TNotifyEvent" file="FMX.Controls.pas" line="841"><devnotes><summary>
Occurs when the mouse cursor enters the area of the control. 
OnMouseEnter also occurs when DoMouseEnter is called.
Write an event handler for OnMouseEnter to specify what happens when the mouse cursor is moved inside the control area.
</summary></devnotes></event>
      <event name="OnMouseLeave" visibility="public" read="FOnMouseLeave" write="FOnMouseLeave" type="TNotifyEvent" file="FMX.Controls.pas" line="842"><devnotes><summary>
Occurs when the mouse cursor leaves the control area. 
OnMouseLeave also occurs when DoMouseLeave is called.
Write an event handler for OnMouseLeave to specify what happens when the mouse cursor is moved outside the control area.
</summary></devnotes></event>
      <event name="OnPainting" visibility="public" read="FOnPainting" write="FOnPainting" type="TOnPaintEvent" file="FMX.Controls.pas" line="843"><devnotes><summary>
Occurs when the control is painted. 
OnPainting also occurs when Painting is called.
Write an event handler for OnPainting to change the way the control is painted. 
</summary></devnotes></event>
      <event name="OnPaint" visibility="public" read="FOnPaint" write="FOnPaint" type="TOnPaintEvent" file="FMX.Controls.pas" line="844"><devnotes><summary>
Occurs when the control is redrawn. 
OnPaint also occurs when DoPaint is called.
Write an event handler for OnPaint to change the way the control renders itself.

Tip:  Notice that calling BeginScene in the OnPaint event handlers has no effect, because BeginScene is called before the OnPaint event handler runs. This guarantees that painting always occurs in OnPaint without requiring extra and probably unexpected code to allow drawing to have an effect.</summary></devnotes></event>
      <event name="OnResize" visibility="public" read="FOnResize" write="FOnResize" type="TNotifyEvent" file="FMX.Controls.pas" line="845"><devnotes><summary>
Occurs immediately after the control is resized. 
OnResize also occurs when Resize is called.
Write an event handler for OnResize to make any final adjustments after a control is resized.

Note:  This function is deprecated, instead use the OnResized function.</summary></devnotes></event>
      <event name="OnResized" visibility="public" read="FOnResized" write="FOnResized" type="TNotifyEvent" file="FMX.Controls.pas" line="846"><devnotes><summary>
Occurs immediately after the control is resized.  
This event is invoked when the control is resized, and all the controls children are aligned.

</summary></devnotes></event>
      <event name="OnActivate" visibility="public" read="FOnActivate" write="FOnActivate" type="TNotifyEvent" file="FMX.Controls.pas" line="847"><devnotes><summary>
Occurs when the window where this control gains the focus, and the control of the window that has the focus is either this control itself or a descendant of this control. A descendant may be a child, a grand-child, and so on.
</summary></devnotes></event>
      <event name="OnDeactivate" visibility="public" read="FOnDeactivate" write="FOnDeactivate" type="TNotifyEvent" file="FMX.Controls.pas" line="848"><devnotes><summary>
Occurs when the window where this control is loses the focus while this control or a descendant of this control has the focus. A descendant may be a child, a grand-child, and so on.
</summary></devnotes></event>
      <event name="OnApplyStyleLookup" visibility="public" read="FOnApplyStyleLookup" write="FOnApplyStyleLookup" type="TNotifyEvent" file="FMX.Controls.pas" line="849"><devnotes><summary>
Occurs when a style is applied to the control.
Write an OnApplyStyleLookup event handler to customize the process of applying a style. 
ApplyStyleLookup is an event handler for OnApplyStyleLookup. Override it to customize the process of applying a style.
OnApplyStyleLookup is used for styled controls.
</summary></devnotes></event>
      <property name="TouchTargetExpansion" visibility="public" read="FTouchTargetExpansion" write="SetTouchTargetExpansion" type="TBounds" file="FMX.Controls.pas" line="850"><devnotes><summary>
Set of optional pixel values you can specify to expand the touch target of a FireMonkey styled control.
FMX.Controls.TControl.TouchTargetExpansion is a published property of all FireMonkey styled controls that support Touch. 
Defined as an  FMX.Types.TBounds, TouchTargetExpansion takes four optional parameters representing the expansion of the four sides of the control in pixels (Bottom, Left, Right, Top). Each parameter specifies the size of an additional screen area that is to be treated as part of the touch target of the control. 
The following figure illustrates how TouchTargetExpansion expands the touch target for a FireMonkey control:

</summary></devnotes></property>
      <property name="TabStop" visibility="public" read="GetTabStop" write="SetTabStop" type="Boolean" default="1" file="FMX.Controls.pas" line="851"><devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></property>
      <property name="DisableDisappear" visibility="public" read="GetDisableDisappear" write="SetDisableDisappear" type="Boolean" file="FMX.Controls.pas" line="852"><devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></property>
      <property name="ShowHint" visibility="public" read="FShowHint" write="SetShowHint" stored="IsShowHintStored" type="Boolean" file="FMX.Controls.pas" line="854">
        <devnotes><summary>
Specifies whether the Hint can be shown. 
If ShowHint is set to True, a Hint string is displayed when the user moves the mouse over the control. 
</summary></devnotes>
      </property>
      <property name="Hint" visibility="public" read="FHint" write="SetHint" stored="HintStored" type="string" default="0" file="FMX.Controls.pas" line="856">
        <devnotes><summary>
Specifies the text string that appears when the user moves the mouse over a control. 
See Using Hints to Show Contextual Help in a FireMonkey Application for more information about hints.
</summary></devnotes>
      </property>
      <property name="Touch" visibility="published" read="GetTouchManager" write="SetTouchManager" type="TTouchManager" file="FMX.Controls.pas" line="858"><devnotes><summary>
Specifies the touch manager component associated with the control.
Use the Touch property to access gesturing options associated with a control. Touch specifies a class of type TTouchManager. 
Touch is used to: 

Associate a TGestureManager.
(TGestureManager manages all the standard gestures that can be used by the control.)
Select the standard, interactive, or custom gestures to associate with the control.
(You can also connect each gesture to an action; see Assigning Actions to Gestures.)</summary></devnotes></property>
      <event name="OnGesture" visibility="published" read="FOnGesture" write="FOnGesture" type="TGestureEvent" file="FMX.Controls.pas" line="859"><devnotes><summary>
Occurs when you perform a gesture associated with this control.
Write an event handler for OnGesture to perform custom processing for gesture events. OnGesture is fired on controls that subscribed for specific gestures using the TTouchManager class. If your code did process the gesture event, do not forget to set the Handled parameter to True so that the event is not propagated further.
If no event handler is associated with the control, the default DoGesture method is executed performing its own processing for the event. 
OnGesture is an event handler of type FMX.Types.TGestureEvent.
</summary></devnotes></event>
      <event name="OnTap" visibility="published" read="FOnTap" write="FOnTap" type="TTapEvent" file="FMX.Controls.pas" line="860"><devnotes><summary>
Occurs when a user taps the control using a finger or a similar device (not a mouse).
Write an event handler for OnTap to specify what happens when the user taps the form.
Events occur in the following order:

OnTap
OnSelectCell
OnSelChanged</summary></devnotes></event>
    </members>
  <devnotes><summary>
TControl is the base class for FMX on-screen components. Subclasses are roughly divided into primitive shapes and styleable controls.
TControl extends TFmxObject to present objects that are seen, by adding properties and methods for:

Size and position
Margins and padding
Alignment with others
Visibility, opacity, scale, and rotation
Mouse interaction and hit testing
Keyboard interaction
Focus and tab order
Triggers for animations and effects
Painting

</summary></devnotes></class>
  <interface name="IDrawableObject" GUID="{C86EEAD8-69BF-4FDF-9FEE-A2F65E0EB3F0}" ancestor="IInterface" file="FMX.Controls.pas" line="863">
    <procedure name="DrawToCanvas" visibility="public" procflags="abstract virtual" file="FMX.Controls.pas" line="865">
      <parameters>
        <parameter name="Canvas" type="TCanvas" paramflags="const"/>
        <parameter name="ARect" type="TRectF" paramflags="const"/>
        <parameter name="AOpacity" type="Single" paramflags="const">
          <value>
            1
          </value>
        </parameter>
      </parameters>
    </procedure>
  </interface>
  <interface name="ITintedObject" GUID="{42D829B7-6D86-41CC-86D5-F92C1FCAB060}" ancestor="IInterface" file="FMX.Controls.pas" line="868">
    <function name="GetCanBeTinted" visibility="public" procflags="abstract virtual" file="FMX.Controls.pas" line="870">
      <parameters>
        <retval type="Boolean"/>
      </parameters>
    </function>
    <procedure name="SetTintColor" visibility="public" procflags="abstract virtual" file="FMX.Controls.pas" line="871">
      <parameters>
        <parameter name="ATintColor" type="TAlphaColor" paramflags="const"/>
      </parameters>
    </procedure>
    <property name="CanBeTinted" visibility="public" read="GetCanBeTinted" type="Boolean" file="FMX.Controls.pas" line="872"/>
    <property name="TintColor" visibility="public" write="SetTintColor" type="TAlphaColor" file="FMX.Controls.pas" line="873"/>
  </interface>
  <enum name="TOrientation" file="FMX.Controls.pas" line="876">
    <element value="0" name="Horizontal" file="FMX.Controls.pas" line="876"/>
    <element value="1" name="Vertical" file="FMX.Controls.pas" line="876"/>
  </enum>
  <enum name="TStyleState" file="FMX.Controls.pas" line="886">
    <devnotes>
       <summary> Determines the current state of the style
       <para> Unapplied - The style was successfully freed, or was not applied yet </para>
       <para> Freeing - At the moment the style is being freed
       See <see cref="M:FMX.Controls.TStyledControl.FreeStyle">FreeStyle</see> </para>
       <para> Applying - At the moment the style is being applied
       See <see cref="M:FMX.Controls.TStyledControl.ApplyStyle">ApplyStyle</see> </para>
       <para> Error - an exception was raised during applying or freeing the style </para>
       <para> Applied - The style was successfully applied </para>
       </summary>
    </devnotes>
    <element value="0" name="Unapplied" file="FMX.Controls.pas" line="886"/>
    <element value="1" name="Freeing" file="FMX.Controls.pas" line="886"/>
    <element value="2" name="Applying" file="FMX.Controls.pas" line="886"/>
    <element value="3" name="Error" file="FMX.Controls.pas" line="886"/>
    <element value="4" name="Applied" file="FMX.Controls.pas" line="886"/>
  </enum>
  <class name="TStyledControl" file="FMX.Controls.pas" line="890">
    
    <members>
      <const name="StyleSuffix" visibility="public" type="string" file="FMX.Controls.pas" line="942">
        <value>
          style
        </value>
      </const>
      <field name="FLoadableStyle" type="TFmxObject" visibility="class private" varflags="class" file="FMX.Controls.pas" line="894"/>
      <field name="FStylesData" type="TDictionary&lt;System.string,System.Rtti.TValue&gt;" visibility="class private" size="4" offset="904" file="FMX.Controls.pas" line="896"/>
      <field name="FResourceLink" type="TFmxObject" visibility="class private" size="4" offset="908" file="FMX.Controls.pas" line="897"/>
      <field name="FAdjustType" type="TAdjustType" visibility="class private" size="4" offset="912" file="FMX.Controls.pas" line="898"/>
      <field name="FAdjustSizeValue" type="TSizeF" visibility="class private" size="8" offset="916" file="FMX.Controls.pas" line="899"/>
      <field name="FStyleLookup" type="string" visibility="class private" size="4" offset="924" file="FMX.Controls.pas" line="900"/>
      <field name="FIsNeedStyleLookup" type="Boolean" visibility="class private" size="1" offset="928" file="FMX.Controls.pas" line="901"/>
      <field name="FAutoTranslate" type="Boolean" visibility="class private" size="1" offset="929" file="FMX.Controls.pas" line="902"/>
      <field name="FHelpType" type="THelpType" visibility="class private" size="1" offset="930" file="FMX.Controls.pas" line="903"/>
      <field name="FHelpKeyword" type="string" visibility="class private" size="4" offset="932" file="FMX.Controls.pas" line="904"/>
      <field name="FHelpContext" type="THelpContext" visibility="class private" size="4" offset="936" file="FMX.Controls.pas" line="905"/>
      <field name="FStyleState" type="TStyleState" visibility="class private" size="1" offset="940" file="FMX.Controls.pas" line="906"/>
      <function name="GetStyleData" visibility="class private" file="FMX.Controls.pas" line="907">
        <parameters>
          <parameter name="Index" type="string" paramflags="const"/>
          <retval type="TValue">
            <attributes>
              <attribute name="HPPGENAttribute"/>
            </attributes>
          </retval>
        </parameters>
      </function>
      <procedure name="SetStyleData" visibility="class private" file="FMX.Controls.pas" line="908">
        <parameters>
          <parameter name="Index" type="string" paramflags="const"/>
          <parameter name="Value" type="TValue" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetStyleLookup" visibility="class private" file="FMX.Controls.pas" line="909">
        <parameters>
          <parameter name="Value" type="string" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="ScaleChangedHandler" visibility="class private" file="FMX.Controls.pas" line="910">
        <parameters>
          <parameter name="Sender" type="TObject" paramflags="const"/>
          <parameter name="Msg" type="TMessageBase" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="StyleChangedHandler" visibility="class private" file="FMX.Controls.pas" line="911">
        <parameters>
          <parameter name="Sender" type="TObject" paramflags="const"/>
          <parameter name="Msg" type="TMessageBase" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="InternalFreeStyle" visibility="private" file="FMX.Controls.pas" line="913">
      </procedure>
      <function name="SearchInto" visibility="protected" procflags="override" file="FMX.Controls.pas" line="915">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>


Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></function>
      <function name="GetBackIndex" visibility="protected" procflags="override" file="FMX.Controls.pas" line="916">
        <parameters>
          <retval type="Integer"/>
        </parameters>
      <devnotes><summary>
Gets the index of TStyledControl. It always returns 1. It is for internal use only.


</summary></devnotes></function>
      <function name="IsHelpContextStored" visibility="protected" file="FMX.Controls.pas" line="917">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Specifies whether HelpContext is stored. It is for internal use only.
</summary></devnotes></function>
      <procedure name="SetHelpContext" visibility="protected" file="FMX.Controls.pas" line="918">
        <parameters>
          <parameter name="Value" type="THelpContext" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Setter method for the HelpContext property. It is for internal use only.
</summary></devnotes></procedure>
      <procedure name="SetHelpKeyword" visibility="protected" file="FMX.Controls.pas" line="919">
        <parameters>
          <parameter name="Value" type="string" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Setter method for the HelpKeyword property. It is for internal use only.
</summary></devnotes></procedure>
      <procedure name="Notification" visibility="protected" procflags="override" file="FMX.Controls.pas" line="920">
        <parameters>
          <parameter name="AComponent" type="TComponent"/>
          <parameter name="Operation" type="TOperation"/>
        </parameters>
      <devnotes><summary>




Forwards notification messages to all owned components.
FMX.Controls.TStyledControl.Notification inherits from System.Classes.TComponent.Notification. All content below this line refers to System.Classes.TComponent.Notification.
Forwards notification messages to all owned components.
Do not call the Notification method in an application. Notification is called automatically when the component specified by AComponent is about to be inserted or removed, as specified by Operation. By default, components pass along the notification to their owned components, if any.
A component can, if needed, act on the notification that a component is being inserted or removed. For example, if a component has object fields or properties that contain references to other components, it can check the notifications of component removals and invalidate those references as needed.

Note: Notification is not called for components that are freed implicitly (because their Owner is freed).</summary></devnotes></procedure>
      <function name="DoSetSize" visibility="protected" procflags="override" file="FMX.Controls.pas" line="921">
        <parameters>
          <parameter name="ASize" type="TControlSize" paramflags="const"/>
          <parameter name="NewPlatformDefault" type="Boolean" paramflags="const"/>
          <parameter name="ANewWidth" type="Single"/>
          <parameter name="ANewHeight" type="Single"/>
          <parameter name="ALastWidth" type="Single" paramflags="var"/>
          <parameter name="ALastHeight" type="Single" paramflags="var"/>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>


Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></function>
      <procedure name="DoApplyStyleLookup" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="923">
      <devnotes><summary>
Executed internally each time ApplyStyleLookup is called for this TStyledControl object.
DoApplyStyleLookup activates the OnApplyStyleLookup event handler.
</summary></devnotes></procedure>
      <procedure name="StyleDataChanged" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="925">
        <parameters>
          <parameter name="Index" type="string" paramflags="const"/>
          <parameter name="Value" type="TValue" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <function name="RequestStyleData" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="926">
        <parameters>
          <parameter name="Index" type="string" paramflags="const"/>
          <retval type="TValue">
            <attributes>
              <attribute name="HPPGENAttribute"/>
            </attributes>
          </retval>
        </parameters>
      <devnotes><summary>
Requests the value of the StylesData property of the style object.
</summary></devnotes></function>
      <procedure name="Painting" visibility="protected" procflags="override" file="FMX.Controls.pas" line="928">
      <devnotes><summary>
OnPainting event dispatcher. 
FMX.Controls.TStyledControl.Painting inherits from FMX.Controls.TControl.Painting. All content below this line refers to FMX.Controls.TControl.Painting.
OnPainting event dispatcher. 
Painting defines the drawing area of the control by intersecting Canvas with ClipRect if ClipChildren is True and dispatches the OnPainting event.
It is always called internally before DoPaint. 
The Painting method can be overridden by derived controls to establish control-specific rendering conditions. 
</summary></devnotes></procedure>
      <procedure name="ApplyStyle" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="929">
      <devnotes><summary>
Customizes styles in complex objects.
TStyledControl descendants override it to apply styles in concordance with their primitive components.      
Do not call ApplyStyle explicitly in an application. It is called by the ApplyStyleLookup method when object styles are updated.
For an example of an ApplyStyle implementation, see &quot;TCalloutPanel:Style Contracts&quot; in FireMonkey Component Design.
</summary></devnotes></procedure>
      <procedure name="FreeStyle" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="930">
      <devnotes><summary>
Frees the style of TStyledControl.
Override it to free additional component-specific style resources.
</summary></devnotes></procedure>
      <function name="GetStyleContext" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="932">
        <devnotes><summary>
Returns context for behavior manager.
</summary></devnotes>
        <parameters>
          <retval type="TFmxObject"/>
        </parameters>
      </function>
      <function name="GetDefaultStyleLookupName" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="933">
        <parameters>
          <retval type="string"/>
        </parameters>
      <devnotes><summary>
Protected getter implementation for the DefaultStyleLookupName property.
When you Create a styled FireMonkey component by extending an existing component, override this method, if you want your component to inherit styles from the parent component. See Step 2 - Implement a Property to Specify the Format: Inheriting Styles of the Parent Component for more information and example code.
</summary></devnotes></function>
      <function name="GetParentClassStyleLookupName" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="936">
        <devnotes><summary>
Getter for the ParentClassStyleLookupName property.
</summary></devnotes>
        <parameters>
          <retval type="string"/>
        </parameters>
      </function>
      <procedure name="DoEnter" visibility="protected" procflags="override" file="FMX.Controls.pas" line="937">
      <devnotes><summary>
Responds when receiving input focus.
DoEnter is called automatically when the control receives the input focus.
</summary></devnotes></procedure>
      <procedure name="Disappear" visibility="protected" procflags="override" file="FMX.Controls.pas" line="938">
      <devnotes><summary>


Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="AdjustSize" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="939">
      <devnotes><summary>
Sets the size of the control.
AdjustSize sets the size values that AdjustSizeValue specifies.
</summary></devnotes></procedure>
      <procedure name="AdjustFixedSize" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="940">
        <parameters>
          <parameter name="ReferenceControl" type="TControl" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Sets the fixed size of the control.
AdjustFixedSize sets the fixed size according to ChooseAdjustType.
</summary></devnotes></procedure>
      <function name="ChooseAdjustType" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="942">
        <devnotes><summary>
Returns an adjust type based on the provided FixedSize.
FixedSize is the value of the FixedSize property of the control that is passed to AdjustFixedSize.
</summary></devnotes>
        <parameters>
          <parameter name="FixedSize" type="TSize" paramflags="const"/>
          <retval type="TAdjustType"/>
        </parameters>
      </function>
      <procedure name="DoStyleChanged" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="943">
      <devnotes><summary>
Indicates that the control needs to update the style and calls Repaint.
FMX calls DoStyleChanged after the style was changed.  
</summary></devnotes></procedure>
      <procedure name="StyleLookupChanged" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="944">
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="RecycleResourceLink" visibility="protected" file="FMX.Controls.pas" line="945">
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="KillResourceLink" visibility="protected" file="FMX.Controls.pas" line="946">
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="DoDeleteChildren" visibility="protected" procflags="override" file="FMX.Controls.pas" line="947">
      <devnotes><summary>




Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <function name="GenerateStyleName" visibility="protected" file="FMX.Controls.pas" line="949">
        <devnotes><summary>
Generates a style lookup name based on the provided AClassName.
The generated style name is composed of the class name without the leading T, followed by the string &quot;style&quot;. For example, if you provide TEdit as AClassName, GenerateStyleName returns the string Editstyle. 
</summary></devnotes>
        <parameters>
          <parameter name="AClassName" type="string" paramflags="const"/>
          <retval type="string"/>
        </parameters>
      </function>
      <function name="GetStyleObject" visibility="protected" procflags="overload virtual" file="FMX.Controls.pas" line="950">
        <parameters>
          <retval type="TFmxObject"/>
        </parameters>
      <devnotes><summary>
Gets the style resource object linked to TStyledControl.
GetStyleObject is called when the style is applied. Apply a style by calling the ApplyStyleLookup method.
If no style is defined for the current control, it receives the style of the current scene. If the current scene does not have a resource object, GetStyleObject continues to look through the default styles and Parent's style.
Do not call GetStyleObject in an application.
</summary></devnotes></function>
      <function name="GetStyleObject" visibility="protected" procflags="overload virtual" file="FMX.Controls.pas" line="951">
        <parameters>
          <parameter name="Clone" type="Boolean" paramflags="const"/>
          <retval type="TFmxObject"/>
        </parameters>
      <devnotes><summary>
Gets the style resource object linked to TStyledControl.
GetStyleObject is called when the style is applied. Apply a style by calling the ApplyStyleLookup method.
If no style is defined for the current control, it receives the style of the current scene. If the current scene does not have a resource object, GetStyleObject continues to look through the default styles and Parent's style.
Do not call GetStyleObject in an application.
</summary></devnotes></function>
      <procedure name="SetAdjustSizeValue" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="952">
        <parameters>
          <parameter name="Value" type="TSizeF" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="SetAdjustType" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="953">
        <parameters>
          <parameter name="Value" type="TAdjustType" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <function name="GetResourceLink" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="955">
        <devnotes><summary>
Returns the style resource for this control as TFmxObject.
</summary></devnotes>
        <parameters>
          <retval type="TFmxObject"/>
        </parameters>
      </function>
      <function name="GetResourceControl" visibility="protected" file="FMX.Controls.pas" line="957">
        <devnotes><summary>
Returns the style resource for this control as TControl.
</summary></devnotes>
        <parameters>
          <retval type="TControl"/>
        </parameters>
      </function>
      <property name="IsNeedStyleLookup" visibility="protected" read="FIsNeedStyleLookup" type="Boolean" file="FMX.Controls.pas" line="958"><devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></property>
      <property name="ResourceLink" visibility="protected" read="GetResourceLink" type="TFmxObject" file="FMX.Controls.pas" line="959"><devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></property>
      <property name="ResourceControl" visibility="protected" read="GetResourceControl" type="TControl" file="FMX.Controls.pas" line="960"><devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></property>
      <function name="GetAdjustSizeValue" visibility="protected" procflags="override" file="FMX.Controls.pas" line="962">
        <parameters>
          <retval type="TSizeF"/>
        </parameters>
      <devnotes><summary>


Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></function>
      <function name="GetAdjustType" visibility="protected" procflags="override" file="FMX.Controls.pas" line="963">
        <parameters>
          <retval type="TAdjustType"/>
        </parameters>
      <devnotes><summary>


Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></function>
      <constructor name="Create" visibility="public" file="FMX.Controls.pas" line="965">
        <parameters>
          <parameter name="AOwner" type="TComponent"/>
        </parameters>
      <devnotes><summary>
Allocates memory and constructs a safely initialized instance of a component.
FMX.Controls.TStyledControl.Create inherits from System.Classes.TComponent.Create. All content below this line refers to System.Classes.TComponent.Create.
Allocates memory and constructs a safely initialized instance of a component.
All objects have a Create method that constructs the object. TComponent redefines Create so that, for components, Create also:

Establishes the relationship of a component and its Owner, as indicated by the AOwner parameter.
Sets the ComponentStyle property to csInheritable, meaning that the component can be inherited by a descendent form type.
It is not necessary to explicitly create components added in the Form Designer. These components are created automatically when the application is run, and they are destroyed when the application is closed.
For components created programmatically, that is, not created in the Form Designer, call Create and pass in an owner component as the AOwner parameter. The owner disposes of the component when it is destroyed. If the component is not owned, then use Free when it needs to be destroyed.

Tip:  When passing in Self as the Owner parameter, consider what Self references. If a component creates another component in one of its methods, then Self refers to the first component and not the component being created, which is then owned by the first component.
Note:  The TComponent constructor is virtual in part to allow polymorphic instantiation of class references. This is critical to the streaming system and to the Form Designer. Do not forget to use the override directive when declaring a new component's Create constructor.</summary></devnotes></constructor>
      <procedure name="BeforeDestruction" visibility="public" procflags="override" file="FMX.Controls.pas" line="966">
      <devnotes><summary>
Performs any necessary actions before the first destructor is called.
FMX.Controls.TStyledControl.BeforeDestruction inherits from System.Classes.TComponent.BeforeDestruction. All content below this line refers to System.Classes.TComponent.BeforeDestruction.
Performs any necessary actions before the first destructor is called.
BeforeDestruction is called automatically immediately before the component's first destructor executes. Do not call it explicitly in your applications.
As implemented in TComponent, BeforeDestruction checks whether the Destroying method has been called, and if not, calls it. Descendants that override this method to perform other actions before a component is destroyed should call the inherited method first to ensure that this check takes place.
</summary></devnotes></procedure>
      <destructor name="Destroy" visibility="public" file="FMX.Controls.pas" line="967">
        <parameters>
        </parameters>
      <devnotes><summary>
Disposes of the component and its owned components.
FMX.Controls.TStyledControl.Destroy inherits from System.Classes.TComponent.Destroy. All content below this line refers to System.Classes.TComponent.Destroy.
Disposes of the component and its owned components.
Do not call Destroy directly. Call Free instead. Free verifies that the component is not nil, and only then calls Destroy.
Never explicitly free a component in one of its own event handlers, nor free a component from the event handler of a component that it owns or contains.
To destroy a form, call its Release method. Release waits for all the form's event handlers and the event handlers of the form's components to finish executing before destroying the form.

Note: A form owns all the controls and nonvisual components that are placed on it in design mode. When it is freed, all of these components are automatically freed as well. By default, all forms are owned by the global Application object. When an application terminates, it frees the global Application object, which frees all forms. For objects that are not components, and for components created with a nil owner, be sure to call Free after finishing with the object; otherwise the memory allocated for the object will be lost until the application terminates.</summary></devnotes></destructor>
      <property name="AdjustType" visibility="public" read="GetAdjustType" type="TAdjustType" file="FMX.Controls.pas" line="968"><devnotes><summary>
Determines if and how the width and height of this control should be modified to take the fixed space dictated by the style of this control.
Use one of the values of TAdjustType.
</summary></devnotes></property>
      <property name="AdjustSizeValue" visibility="public" read="GetAdjustSizeValue" type="TSizeF" file="FMX.Controls.pas" line="969"><devnotes><summary>
Updates the width and height of this control according to its current style.
</summary></devnotes></property>
      <property name="StyleState" visibility="public" read="FStyleState" type="TStyleState" file="FMX.Controls.pas" line="975">
        <devnotes><summary>
This property allows you to define the current state of style. It changes when calls virtual methods: FMX.Controls.TStyledControl.FreeStyle, FMX.Controls.TStyledControl.ApplyStyle, and FMX.Controls.TStyledControl.DoApplyStyleLookup.
</summary></devnotes>
      </property>
      <procedure name="RecalcSize" visibility="public" procflags="override" file="FMX.Controls.pas" line="976">
      <devnotes><summary>


Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <function name="FindStyleResource" visibility="public" procflags="overload override" file="FMX.Controls.pas" line="977">
        <parameters>
          <parameter name="AStyleLookup" type="string" paramflags="const"/>
          <parameter name="Clone" type="Boolean" paramflags="const">
            <value>
              False
            </value>
          </parameter>
          <retval type="TFmxObject"/>
        </parameters>
      <devnotes><summary>
Finds the linked resource object for the style specified by name.
The AStyleLookup parameter specifies the name of the style.
If AStyleLookup is empty, FindStyleResource returns nil. If no resource object is linked directly to the control, FindStyleResource looks to the styles of the control's children. If no resource object is found, it returns nil.
Clone determines whether the returned style resource object should be the original style object (False) or a copy of the original (True).
</summary></devnotes></function>
      <function name="FindStyleResource" visibility="public" procflags="overload" file="FMX.Controls.pas" line="980">
        <devnotes><summary>
Finds the linked resource object for the style specified by name.
The AStyleLookup parameter specifies the name of the style.
If AStyleLookup is empty, FindStyleResource returns nil. If no resource object is linked directly to the control, FindStyleResource looks to the styles of the control's children. If no resource object is found, it returns nil.
Clone determines whether the returned style resource object should be the original style object (False) or a copy of the original (True).
</summary></devnotes>
        <parameters>
          <parameter name="AStyleLookup" type="string" paramflags="const"/>
          <parameter name="AResource" type="T" paramflags="var"/>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <function name="FindAndCloneStyleResource" visibility="public" file="FMX.Controls.pas" line="983">
        <devnotes><summary>
Finds the specified resource object and makes a copy.
AStyleLookup specifies the name of the resource object to search for. A clone of the original resource is set on AResource.
FindAndCloneStyleResource returns true if the corresponding resource object is found and it is of type T. Otherwise it returns nil.
</summary></devnotes>
        <parameters>
          <parameter name="AStyleLookup" type="string" paramflags="const"/>
          <parameter name="AResource" type="T" paramflags="var"/>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <procedure name="SetNewScene" visibility="public" procflags="override" file="FMX.Controls.pas" line="984">
        <parameters>
          <parameter name="AScene" type="IScene"/>
        </parameters>
      <devnotes><summary>
Sets a new Scene for the current control.
FMX.Controls.TStyledControl.SetNewScene inherits from FMX.Controls.TControl.SetNewScene. All content below this line refers to FMX.Controls.TControl.SetNewScene.
Sets a new Scene for the current control.
AScene specifies the new scene. If AScene is empty, SetNewScene does nothing.
SetNewScene sets the same scene for the control's children.
</summary></devnotes></procedure>
      <procedure name="ApplyStyleLookup" visibility="public" procflags="virtual" file="FMX.Controls.pas" line="985">
      <devnotes><summary>
Gets and applies the style of a TStyledControl.
ApplyStyleLookup gets the style by calling the GetStyleObject method and applies it through the ApplyStyle method. 
</summary></devnotes></procedure>
      <procedure name="NeedStyleLookup" visibility="public" procflags="virtual" file="FMX.Controls.pas" line="986">
      <devnotes><summary>
Call this procedure to indicate that this control requires to get and apply its style lookup.
This forces the next call to ApplyStyleLookup to get and apply its style lookup.
</summary></devnotes></procedure>
      <procedure name="Inflate" visibility="public" procflags="virtual" file="FMX.Controls.pas" line="987">
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="PrepareForPaint" visibility="public" procflags="override" file="FMX.Controls.pas" line="988">
      <devnotes><summary>


Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="StartTriggerAnimation" visibility="public" procflags="override" file="FMX.Controls.pas" line="989">
        <parameters>
          <parameter name="AInstance" type="TFmxObject" paramflags="const"/>
          <parameter name="ATrigger" type="string" paramflags="const"/>
        </parameters>
      <devnotes><summary>


Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="StartTriggerAnimationWait" visibility="public" procflags="override" file="FMX.Controls.pas" line="990">
        <parameters>
          <parameter name="AInstance" type="TFmxObject" paramflags="const"/>
          <parameter name="ATrigger" type="string" paramflags="const"/>
        </parameters>
      <devnotes><summary>


Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <property name="AutoTranslate" visibility="public" read="FAutoTranslate" write="FAutoTranslate" type="Boolean" file="FMX.Controls.pas" line="991"><devnotes><summary>
Specifies whether the control's text should be translated. 
Set AutoTranslate to True to permit the control text (if it exists) to be translated, when the control is used in an application available in several languages. Set it to False to keep the text unchanged.
</summary></devnotes></property>
      <property name="DefaultStyleLookupName" visibility="public" read="GetDefaultStyleLookupName" type="string" default="0" file="FMX.Controls.pas" line="992"><devnotes><summary>
Returns a string with the name of the default style of this control.
The name of the default style is composed of the class name without the leading T, followed by the string style, for instance panelstyle.
</summary></devnotes></property>
      <property name="ParentClassStyleLookupName" visibility="public" read="GetParentClassStyleLookupName" type="string" default="0" file="FMX.Controls.pas" line="994">
        <devnotes><summary>
The name of the default style of the parent class of this control.
The name of the style is composed of the class name without the leading T, followed by the string &quot;style&quot;. For example, if the class name is TEdit, the style name is Editstyle. 
</summary></devnotes>
      </property>
      <property name="HelpType" visibility="public" read="FHelpType" write="FHelpType" type="THelpType" default="1" file="FMX.Controls.pas" line="995"><devnotes><summary>
Specifies whether the control's context-sensitive Help topic is identified by a context ID or by keyword.
If HelpType is htContext, the HelpContext property value identifies the control's Help topic. 
If HelpType is htKeyword, the HelpKeyword property value identifies the control's Help topic.
</summary></devnotes></property>
      <property name="HelpKeyword" visibility="public" read="FHelpKeyword" write="SetHelpKeyword" stored="IsHelpContextStored" type="string" default="0" file="FMX.Controls.pas" line="996"><devnotes><summary>
Contains the keyword string that identifies the Help topic for the control.
To enable the keyword-based context-sensitive Help for a control, set the HelpType property to htKeyword and set HelpKeyword to a keyword string.
No keyword (zero-length string, the default) means that no Help topic is provided for the control. 
</summary></devnotes></property>
      <property name="HelpContext" visibility="public" read="FHelpContext" write="SetHelpContext" stored="IsHelpContextStored" type="THelpContext" default="0" file="FMX.Controls.pas" line="997"><devnotes><summary>
Contains the numeric context ID that identifies the Help topic for the control.
In case of a .chm Help file, you must symbolically map Context IDs of Help topics to numeric topic ID values in the [MAP] section of your project (.hhp) file.
To enable Context ID-based context-sensitive Help for a control, set HelpType to htContext and set HelpContext to a numeric topic ID. 
A topic ID of 0 (default) means that no Help topic is provided for the control. 
</summary></devnotes></property>
      <property name="StylesData[const Index]" visibility="public" read="GetStyleData" write="SetStyleData" type="TValue" file="FMX.Controls.pas" line="998"/>
      <property name="StyleLookup" visibility="public" read="FStyleLookup" write="SetStyleLookup" type="string" default="0" file="FMX.Controls.pas" line="999"><devnotes><summary>
Specifies the name of the resource object to which the current TStyledControl is linked.
StyleLookup becomes especially useful with the introduction of Metropolis UI styles. Metropolis UI styles contain lots of styles for buttons, panes, lists, and other control elements. Each control has the default style, but you can change this default style to any style accessible for the class of a control. The StyleLookup property can be used to specify such additional style. In the Object Inspector, you can select in the StyleLookup property the name of an additional style for the control -- like searchbuttontext -- from the general style loaded into the TStyleBook or from the default style for the used platform. See StyleLookup Support for Metropolis UI Controls.


Note:  At design time, using the StyleLookup property of a control in any form in the current project group you can access any custom style defined in any TStyleBook component used in the current project group. That is, even if the form does not have a particular TStyleBook component, controls from this form can use custom  styles defined in this TStyleBook component (if this TStyleBook component is used in any form in the current project group). At run time, only styles in the current project and only after an owner of the TStyleBook containing these styles is already created can be accessed.</summary></devnotes></property>
      <property name="LoadableStyle" visibility="public" read="FLoadableStyle" write="FLoadableStyle" type="TFmxObject" file="FMX.Controls.pas" line="1001">
        <devnotes><summary>
 LoadableStyle is used to retrieve the style object.
</summary></devnotes>
      </property>
      <function name="LookupStyleObject" visibility="public" procflags="class" file="FMX.Controls.pas" line="1003">
        <devnotes><summary>
Looks for the style resource object linked to the TStyledControl.
If no style is defined for the current control, LookupStyleObject seeks in the current scene for the active style.
If the current scene does not have a resource object, LookupStyleObject continues the search through the default styles and Parent's style.
</summary></devnotes>
        <parameters>
          <parameter name="Instance" type="TFmxObject" paramflags="const"/>
          <parameter name="Context" type="TFmxObject" paramflags="const"/>
          <parameter name="Scene" type="IScene" paramflags="const"/>
          <parameter name="StyleLookup" type="string" paramflags="const"/>
          <parameter name="DefaultStyleLookup" type="string" paramflags="const"/>
          <parameter name="ParentClassStyleLookup" type="string" paramflags="const"/>
          <parameter name="Clone" type="Boolean" paramflags="const"/>
          <parameter name="UseGlobalPool" type="Boolean" paramflags="const">
            <value>
              True
            </value>
          </parameter>
          <retval type="TFmxObject"/>
        </parameters>
      </function>
    </members>
  <devnotes><summary>
TStyledControl is the base class for customizable and user-interaction controls.
TStyledControl extends TControl to act as the immediate superclass for concrete user-facing widgets.
For descendants of TStyledControl, you can set the style resource and the basis for FireMonkey's dynamic look-and-feel. Subclasses of TStyledControl search their style resource among those assigned to the StyleBook property of the form, using a simple search routine based on class names returned by the GetStyleObject method. The access to the subcomponents defined by the same style permits the parent control to be modified at run time. To apply a style to a control, set the StyleLookup property to the name of the style.
For more details about the style and design of FireMonkey components, see FireMonkey Component Rendering and Customizing with Styles.
Descendants of TStyledControl are controls like TPanel, TLabel, TCheckBox, TImageControl, or TCalendar.
</summary></devnotes></class>
  <class name="TStyleChangedMessage" file="FMX.Controls.pas" line="1008">
    
    <members>
      <field name="FScene" type="IScene" visibility="private" size="4" offset="8" file="FMX.Controls.pas" line="1010"/>
      <constructor name="Create" visibility="public" file="FMX.Controls.pas" line="1012">
        <parameters>
          <parameter name="StyleBook" type="TStyleBook" paramflags="const"/>
          <parameter name="Scene" type="IScene" paramflags="const"/>
        </parameters>
      </constructor>
      <property name="Scene" visibility="public" read="FScene" type="IScene" file="FMX.Controls.pas" line="1014">
        <devnotes>
           <summary>Scene where the style has been changed, nil if the change is global</summary>
        </devnotes>
      </property>
    </members>
  </class>
  <class name="TBeforeStyleChangingMessage" file="FMX.Controls.pas" line="1017">
    
  </class>
  <class name="TStyleContainer" file="FMX.Controls.pas" line="1022">
    
    <interfaces>
      <implements name="IBinaryStyleContainer"/>
    </interfaces>
    <members>
      <field name="FBinaryDict" type="TDictionary&lt;System.string,System.Classes.TMemoryStream&gt;" visibility="private" size="4" offset="904" file="FMX.Controls.pas" line="1024"/>
      <function name="CreateStyleResource" visibility="private" file="FMX.Controls.pas" line="1025">
        <parameters>
          <parameter name="AStyleLookup" type="string" paramflags="const"/>
          <retval type="TFmxObject"/>
        </parameters>
      </function>
      <procedure name="ClearContainer" visibility="private" file="FMX.Controls.pas" line="1027">
      </procedure>
      <procedure name="UnpackAllBinaries" visibility="private" file="FMX.Controls.pas" line="1028">
      </procedure>
      <procedure name="AddBinaryFromStream" visibility="private" file="FMX.Controls.pas" line="1029">
        <parameters>
          <parameter name="Name" type="string" paramflags="const"/>
          <parameter name="SourceStream" type="TStream" paramflags="const"/>
          <parameter name="Size" type="Int64" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="AddObjectFromStream" visibility="private" file="FMX.Controls.pas" line="1030">
        <parameters>
          <parameter name="Name" type="string" paramflags="const"/>
          <parameter name="SourceStream" type="TStream" paramflags="const"/>
          <parameter name="Size" type="Int64" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="LoadStyleResource" visibility="private" file="FMX.Controls.pas" line="1031">
        <parameters>
          <parameter name="AStream" type="TStream" paramflags="const"/>
          <retval type="TFmxObject"/>
        </parameters>
      </function>
      <constructor name="Create" visibility="public" file="FMX.Controls.pas" line="1034">
        <parameters>
          <parameter name="AOwner" type="TComponent"/>
        </parameters>
      </constructor>
      <destructor name="Destroy" visibility="public" file="FMX.Controls.pas" line="1035">
        <parameters>
        </parameters>
      </destructor>
      <function name="FindStyleResource" visibility="public" procflags="overload override" file="FMX.Controls.pas" line="1036">
        <parameters>
          <parameter name="AStyleLookup" type="string" paramflags="const"/>
          <parameter name="Clone" type="Boolean" paramflags="const">
            <value>
              False
            </value>
          </parameter>
          <retval type="TFmxObject"/>
        </parameters>
      </function>
    </members>
  </class>
  <class name="TStyleCollectionItem" file="FMX.Controls.pas" line="1043">
    
    <ancestor name="TCollectionItem" namespace="System.Classes">
      <methodref name="GetIndex" visibility="private">
      </methodref>
      <methodref name="Changed" visibility="protected">
      </methodref>
      <methodref name="GetOwner" visibility="protected" procflags="override">
      </methodref>
      <methodref name="GetDisplayName" visibility="protected" procflags="virtual">
      </methodref>
      <methodref name="SetCollection" visibility="protected" procflags="virtual">
      </methodref>
      <methodref name="SetIndex" visibility="protected" procflags="virtual">
      </methodref>
      <methodref name="SetDisplayName" visibility="protected" procflags="virtual">
      </methodref>
      <methodref name="Create" visibility="public" procflags="constructor virtual">
      </methodref>
      <methodref name="Destroy" visibility="public" procflags="destructor override">
      </methodref>
      <methodref name="Release" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="GetNamePath" visibility="public" procflags="override">
      </methodref>
      <propertyref name="Collection" visibility="public">
      </propertyref>
      <propertyref name="ID" visibility="public">
      </propertyref>
      <propertyref name="Index" visibility="public">
      </propertyref>
      <propertyref name="DisplayName" visibility="public">
      </propertyref>
      <ancestor name="TPersistent" namespace="System.Classes">
        <methodref name="AssignError" visibility="private">
        </methodref>
        <methodref name="AssignTo" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="DefineProperties" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="GetOwner" visibility="protected" procflags="dynamic">
        </methodref>
        <methodref name="Destroy" visibility="public" procflags="destructor override">
        </methodref>
        <methodref name="Assign" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="GetNamePath" visibility="public" procflags="dynamic">
        </methodref>
        <ancestor name="TObject" namespace="System">
          <methodref name="Create" visibility="public" procflags="constructor">
          </methodref>
          <methodref name="Free" visibility="public">
          </methodref>
          <methodref name="DisposeOf" visibility="public" procflags="inline">
          </methodref>
          <methodref name="InitInstance" visibility="public" procflags="class">
          </methodref>
          <methodref name="CleanupInstance" visibility="public">
          </methodref>
          <methodref name="ClassType" visibility="public" procflags="inline">
          </methodref>
          <methodref name="ClassName" visibility="public" procflags="class">
          </methodref>
          <methodref name="ClassNameIs" visibility="public" procflags="class">
          </methodref>
          <methodref name="ClassParent" visibility="public" procflags="class inline">
          </methodref>
          <methodref name="ClassInfo" visibility="public" procflags="class inline">
          </methodref>
          <methodref name="InstanceSize" visibility="public" procflags="class inline">
          </methodref>
          <methodref name="InheritsFrom" visibility="public" procflags="class">
          </methodref>
          <methodref name="MethodAddress" visibility="public" procflags="class overload">
          </methodref>
          <methodref name="MethodAddress" visibility="public" procflags="class overload">
          </methodref>
          <methodref name="MethodName" visibility="public" procflags="class">
          </methodref>
          <methodref name="QualifiedClassName" visibility="public" procflags="class">
          </methodref>
          <methodref name="FieldAddress" visibility="public" procflags="overload">
          </methodref>
          <methodref name="FieldAddress" visibility="public" procflags="overload">
          </methodref>
          <methodref name="GetInterface" visibility="public">
          </methodref>
          <methodref name="GetInterfaceEntry" visibility="public" procflags="class">
          </methodref>
          <methodref name="GetInterfaceTable" visibility="public" procflags="class inline">
          </methodref>
          <methodref name="UnitName" visibility="public" procflags="class">
          </methodref>
          <methodref name="UnitScope" visibility="public" procflags="class">
          </methodref>
          <methodref name="Equals" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="GetHashCode" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="ToString" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="SafeCallException" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="AfterConstruction" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="BeforeDestruction" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="Dispatch" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="DefaultHandler" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="NewInstance" visibility="public" procflags="class virtual">
          </methodref>
          <methodref name="FreeInstance" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="Destroy" visibility="public" procflags="destructor virtual">
          </methodref>
          <methodref name="GetDisposed" visibility="protected" procflags="inline">
          </methodref>
          <methodref name="CheckDisposed" visibility="protected" procflags="inline">
          </methodref>
          <propertyref name="Disposed" visibility="protected">
          </propertyref>
        </ancestor>
      </ancestor>
    </ancestor>
    <members>
      <const name="DefaultItem" visibility="public" type="string" file="FMX.Controls.pas" line="1057">
        <value>
          Default
        </value>
      </const>
      <field name="FStyleBook" type="TStyleBook" visibility="private" size="4" offset="12" file="FMX.Controls.pas" line="1047">
        <attributes>
          <attribute name="TObject"/>
        </attributes>
      </field>
      <field name="FBinary" type="TMemoryStream" visibility="private" size="4" offset="16" file="FMX.Controls.pas" line="1048"/>
      <field name="FStyle" type="TFmxObject" visibility="private" size="4" offset="20" file="FMX.Controls.pas" line="1049"/>
      <field name="FPlatform" type="string" visibility="private" size="4" offset="24" file="FMX.Controls.pas" line="1050"/>
      <field name="FUnsupportedPlatform" type="Boolean" visibility="private" size="1" offset="28" file="FMX.Controls.pas" line="1051"/>
      <field name="FNeedLoadFromBinary" type="Boolean" visibility="private" size="1" offset="29" file="FMX.Controls.pas" line="1052"/>
      <procedure name="SetPlatform" visibility="private" file="FMX.Controls.pas" line="1053">
        <parameters>
          <parameter name="Value" type="string" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetResource" visibility="private" file="FMX.Controls.pas" line="1054">
        <parameters>
          <parameter name="Value" type="string" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="GetResource" visibility="private" file="FMX.Controls.pas" line="1055">
        <parameters>
          <retval type="string"/>
        </parameters>
      </function>
      <function name="GetStyle" visibility="private" file="FMX.Controls.pas" line="1056">
        <parameters>
          <retval type="TFmxObject"/>
        </parameters>
      </function>
      <procedure name="ReadResources" visibility="private" file="FMX.Controls.pas" line="1057">
        <parameters>
          <parameter name="Stream" type="TStream"/>
        </parameters>
      </procedure>
      <procedure name="WriteResources" visibility="private" file="FMX.Controls.pas" line="1058">
        <parameters>
          <parameter name="Stream" type="TStream"/>
        </parameters>
      </procedure>
      <function name="StyleStored" visibility="private" file="FMX.Controls.pas" line="1059">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <function name="GetIsEmpty" visibility="private" file="FMX.Controls.pas" line="1060">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <procedure name="DefineProperties" visibility="protected" procflags="override" file="FMX.Controls.pas" line="1062">
        <parameters>
          <parameter name="Filer" type="TFiler"/>
        </parameters>
      </procedure>
      <function name="GetDisplayName" visibility="protected" procflags="override" file="FMX.Controls.pas" line="1063">
        <parameters>
          <retval type="string"/>
        </parameters>
      </function>
      <constructor name="Create" visibility="public" file="FMX.Controls.pas" line="1065">
        <parameters>
          <parameter name="Collection" type="TCollection"/>
        </parameters>
      </constructor>
      <destructor name="Destroy" visibility="public" file="FMX.Controls.pas" line="1066">
        <parameters>
        </parameters>
      </destructor>
      <procedure name="Assign" visibility="public" procflags="override" file="FMX.Controls.pas" line="1067">
        <parameters>
          <parameter name="Source" type="TPersistent"/>
        </parameters>
      </procedure>
      <procedure name="LoadFromBinary" visibility="public" file="FMX.Controls.pas" line="1069">
        <devnotes>
           <summary>Reload style from binary stream</summary>
        </devnotes>
      </procedure>
      <procedure name="SaveToBinary" visibility="public" file="FMX.Controls.pas" line="1071">
        <devnotes>
           <summary>Save style to binary stream</summary>
        </devnotes>
      </procedure>
      <procedure name="Clear" visibility="public" file="FMX.Controls.pas" line="1073">
        <devnotes>
           <summary>Clear style and binary stream</summary>
        </devnotes>
      </procedure>
      <property name="IsEmpty" visibility="public" read="GetIsEmpty" type="Boolean" file="FMX.Controls.pas" line="1075">
        <devnotes>
           <summary>Return true is style is empty</summary>
        </devnotes>
      </property>
      <procedure name="LoadFromStream" visibility="public" file="FMX.Controls.pas" line="1077">
        <devnotes>
           <summary>Load style from stream</summary>
        </devnotes>
        <parameters>
          <parameter name="Stream" type="TStream" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="LoadFromFile" visibility="public" file="FMX.Controls.pas" line="1079">
        <devnotes>
           <summary>Load style from file</summary>
        </devnotes>
        <parameters>
          <parameter name="FileName" type="string" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SaveToStream" visibility="public" file="FMX.Controls.pas" line="1081">
        <devnotes>
           <summary>Save style to stream</summary>
        </devnotes>
        <parameters>
          <parameter name="Stream" type="TStream" paramflags="const"/>
          <parameter name="Format" type="TStyleFormat" paramflags="const">
            <value>
              Indexed
            </value>
          </parameter>
        </parameters>
      </procedure>
      <property name="StyleBook" visibility="public" read="FStyleBook" type="TStyleBook" file="FMX.Controls.pas" line="1083">
        <devnotes>
           <summary>Link to owner StyleBook</summary>
        </devnotes>
      </property>
      <property name="Style" visibility="public" read="GetStyle" type="TFmxObject" file="FMX.Controls.pas" line="1085">
        <devnotes>
           <summary>Style that stored on this item</summary>
        </devnotes>
      </property>
      <property name="UnsupportedPlatform" visibility="public" read="FUnsupportedPlatform" type="Boolean" file="FMX.Controls.pas" line="1087">
        <devnotes>
           <summary>If style can not be load on current platform tihs property is True and Style is empty</summary>
        </devnotes>
      </property>
      <property name="Platform" visibility="published" read="FPlatform" write="SetPlatform" type="string" default="0" file="FMX.Controls.pas" line="1090">
        <devnotes>
           <summary>Name used to idenity style in collection</summary>
        </devnotes>
      </property>
      <property name="Resource" visibility="published" read="GetResource" write="SetResource" stored="False" type="string" default="0" file="FMX.Controls.pas" line="1092">
        <devnotes>
           <summary>Design-time only property used to show Style Designer</summary>
        </devnotes>
      </property>
    </members>
  </class>
  <class name="TStyleCollection" file="FMX.Controls.pas" line="1097">
    
    <ancestor name="TOwnedCollection" namespace="System.Classes">
      <methodref name="GetOwner" visibility="protected" procflags="override">
      </methodref>
      <methodref name="Create" visibility="public" procflags="constructor">
      </methodref>
      <ancestor name="TCollection" namespace="System.Classes">
        <methodref name="GetCapacity" visibility="private">
        </methodref>
        <methodref name="GetCount" visibility="private" procflags="inline">
        </methodref>
        <methodref name="GetPropName" visibility="private">
        </methodref>
        <methodref name="InsertItem" visibility="private">
        </methodref>
        <methodref name="RemoveItem" visibility="private">
        </methodref>
        <methodref name="SetCapacity" visibility="private">
        </methodref>
        <methodref name="Added" visibility="protected" procflags="virtual" symflags="deprecated">
        </methodref>
        <methodref name="Deleting" visibility="protected" procflags="virtual" symflags="deprecated">
        </methodref>
        <propertyref name="NextID" visibility="protected">
        </propertyref>
        <methodref name="Notify" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="GetAttrCount" visibility="protected" procflags="dynamic">
        </methodref>
        <methodref name="GetAttr" visibility="protected" procflags="dynamic">
        </methodref>
        <methodref name="GetItemAttr" visibility="protected" procflags="dynamic">
        </methodref>
        <methodref name="Changed" visibility="protected">
        </methodref>
        <methodref name="GetItem" visibility="protected">
        </methodref>
        <methodref name="SetItem" visibility="protected">
        </methodref>
        <methodref name="SetItemName" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="Update" visibility="protected" procflags="virtual">
        </methodref>
        <propertyref name="PropName" visibility="protected">
        </propertyref>
        <propertyref name="UpdateCount" visibility="protected">
        </propertyref>
        <methodref name="Create" visibility="public" procflags="constructor">
        </methodref>
        <methodref name="Destroy" visibility="public" procflags="destructor override">
        </methodref>
        <methodref name="Owner" visibility="public">
        </methodref>
        <methodref name="Add" visibility="public">
        </methodref>
        <methodref name="Assign" visibility="public" procflags="override">
        </methodref>
        <methodref name="BeginUpdate" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="Clear" visibility="public">
        </methodref>
        <methodref name="ClearAndResetID" visibility="public">
        </methodref>
        <methodref name="Delete" visibility="public">
        </methodref>
        <methodref name="EndUpdate" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="Sort" visibility="public">
        </methodref>
        <methodref name="FindItemID" visibility="public">
        </methodref>
        <methodref name="GetEnumerator" visibility="public" procflags="inline">
        </methodref>
        <methodref name="GetNamePath" visibility="public" procflags="override">
        </methodref>
        <methodref name="Insert" visibility="public">
        </methodref>
        <propertyref name="Capacity" visibility="public">
        </propertyref>
        <propertyref name="Count" visibility="public">
        </propertyref>
        <propertyref name="ItemClass" visibility="public">
        </propertyref>
        <propertyref name="Items" visibility="public">
        </propertyref>
        <ancestor name="TPersistent" namespace="System.Classes">
          <methodref name="AssignError" visibility="private">
          </methodref>
          <methodref name="AssignTo" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="DefineProperties" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="GetOwner" visibility="protected" procflags="dynamic">
          </methodref>
          <methodref name="Destroy" visibility="public" procflags="destructor override">
          </methodref>
          <methodref name="Assign" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="GetNamePath" visibility="public" procflags="dynamic">
          </methodref>
          <ancestor name="TObject" namespace="System">
            <methodref name="Create" visibility="public" procflags="constructor">
            </methodref>
            <methodref name="Free" visibility="public">
            </methodref>
            <methodref name="DisposeOf" visibility="public" procflags="inline">
            </methodref>
            <methodref name="InitInstance" visibility="public" procflags="class">
            </methodref>
            <methodref name="CleanupInstance" visibility="public">
            </methodref>
            <methodref name="ClassType" visibility="public" procflags="inline">
            </methodref>
            <methodref name="ClassName" visibility="public" procflags="class">
            </methodref>
            <methodref name="ClassNameIs" visibility="public" procflags="class">
            </methodref>
            <methodref name="ClassParent" visibility="public" procflags="class inline">
            </methodref>
            <methodref name="ClassInfo" visibility="public" procflags="class inline">
            </methodref>
            <methodref name="InstanceSize" visibility="public" procflags="class inline">
            </methodref>
            <methodref name="InheritsFrom" visibility="public" procflags="class">
            </methodref>
            <methodref name="MethodAddress" visibility="public" procflags="class overload">
            </methodref>
            <methodref name="MethodAddress" visibility="public" procflags="class overload">
            </methodref>
            <methodref name="MethodName" visibility="public" procflags="class">
            </methodref>
            <methodref name="QualifiedClassName" visibility="public" procflags="class">
            </methodref>
            <methodref name="FieldAddress" visibility="public" procflags="overload">
            </methodref>
            <methodref name="FieldAddress" visibility="public" procflags="overload">
            </methodref>
            <methodref name="GetInterface" visibility="public">
            </methodref>
            <methodref name="GetInterfaceEntry" visibility="public" procflags="class">
            </methodref>
            <methodref name="GetInterfaceTable" visibility="public" procflags="class inline">
            </methodref>
            <methodref name="UnitName" visibility="public" procflags="class">
            </methodref>
            <methodref name="UnitScope" visibility="public" procflags="class">
            </methodref>
            <methodref name="Equals" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="GetHashCode" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="ToString" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="SafeCallException" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="AfterConstruction" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="BeforeDestruction" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="Dispatch" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="DefaultHandler" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="NewInstance" visibility="public" procflags="class virtual">
            </methodref>
            <methodref name="FreeInstance" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="Destroy" visibility="public" procflags="destructor virtual">
            </methodref>
            <methodref name="GetDisposed" visibility="protected" procflags="inline">
            </methodref>
            <methodref name="CheckDisposed" visibility="protected" procflags="inline">
            </methodref>
            <propertyref name="Disposed" visibility="protected">
            </propertyref>
          </ancestor>
        </ancestor>
      </ancestor>
    </ancestor>
    <members>
      <field name="FStyleBook" type="TStyleBook" visibility="private" size="4" offset="28" file="FMX.Controls.pas" line="1099">
        <attributes>
          <attribute name="TObject"/>
        </attributes>
      </field>
      <function name="GetItem" visibility="private" file="FMX.Controls.pas" line="1100">
        <parameters>
          <parameter name="Index" type="Integer"/>
          <retval type="TStyleCollectionItem">
            <devnotes>
               <summary>Represents an item in an instance of TStyleCollection that holds
               a style for a platform.</summary>
            </devnotes>
          </retval>
        </parameters>
      </function>
      <procedure name="SetItem" visibility="private" file="FMX.Controls.pas" line="1101">
        <parameters>
          <parameter name="Index" type="Integer"/>
          <parameter name="Value" type="TStyleCollectionItem" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="Notify" visibility="protected" procflags="override" file="FMX.Controls.pas" line="1103">
        <parameters>
          <parameter name="Item" type="TCollectionItem"/>
          <parameter name="Action" type="TCollectionNotification"/>
        </parameters>
      </procedure>
      <constructor name="Create" visibility="public" file="FMX.Controls.pas" line="1105">
        <parameters>
          <parameter name="AOwner" type="TPersistent"/>
        </parameters>
      </constructor>
      <function name="Add" visibility="public" file="FMX.Controls.pas" line="1107">
        <devnotes>
           <summary>Create and add new item</summary>
        </devnotes>
        <parameters>
          <retval type="TStyleCollectionItem">
            <devnotes>
               <summary>Represents an item in an instance of TStyleCollection that holds
               a style for a platform.</summary>
            </devnotes>
          </retval>
        </parameters>
      </function>
      <property name="Items[Index]" visibility="public" read="GetItem" write="SetItem" type="TStyleCollectionItem" file="FMX.Controls.pas" line="1109">
        <devnotes>
           <summary>Access property for style collection items</summary>
        </devnotes>
      </property>
    </members>
  </class>
  <struct name="TStyleBookDesignInfo" size="28" file="FMX.Controls.pas" line="1114">
    <devnotes>
       <summary>Record type that contains design-time information for the Form
       Designer.</summary>
    </devnotes>
    <field name="ClassName" type="string" visibility="public" size="4" offset="0" file="FMX.Controls.pas" line="1116">
      <devnotes>
         <summary>ClassName of selected control</summary>
      </devnotes>
    </field>
    <field name="CustomStyle" type="Boolean" visibility="public" size="1" offset="4" file="FMX.Controls.pas" line="1118">
      <devnotes>
         <summary>If True that edit custom style mode is active</summary>
      </devnotes>
    </field>
    <field name="DefaultStyleLookup" type="string" visibility="public" size="4" offset="8" file="FMX.Controls.pas" line="1120">
      <devnotes>
         <summary>Default StyleLookup for selected control</summary>
      </devnotes>
    </field>
    <field name="Name" type="string" visibility="public" size="4" offset="12" file="FMX.Controls.pas" line="1122">
      <devnotes>
         <summary>Name of selected control</summary>
      </devnotes>
    </field>
    <field name="StyleLookup" type="string" visibility="public" size="4" offset="16" file="FMX.Controls.pas" line="1124">
      <devnotes>
         <summary>StyleLookup of selected control</summary>
      </devnotes>
    </field>
    <field name="Control" type="TStyledControl" visibility="public" size="4" offset="20" file="FMX.Controls.pas" line="1126">
      <devnotes>
         <summary>Selected control itself</summary>
      </devnotes>
    </field>
    <field name="JustCreated" type="Boolean" visibility="public" size="1" offset="24" file="FMX.Controls.pas" line="1128">
      <devnotes>
         <summary>True if StyleBook just created</summary>
      </devnotes>
    </field>
  </struct>
  <class name="TStyleBook" file="FMX.Controls.pas" line="1131">
    
    <members>
      <field name="FStyles" type="TStyleCollection" visibility="private" size="4" offset="128" file="FMX.Controls.pas" line="1133"/>
      <field name="FStylesDic" type="TDictionary&lt;System.string,FMX.Controls.TStyleCollectionItem&gt;" visibility="private" size="4" offset="132" file="FMX.Controls.pas" line="1134"/>
      <field name="FCurrentItemIndex" type="Integer" visibility="private" size="4" offset="136" file="FMX.Controls.pas" line="1135"/>
      <field name="FFileName" type="string" visibility="private" size="4" offset="140" file="FMX.Controls.pas" line="1136"/>
      <field name="FDesignInfo" type="TStyleBookDesignInfo" visibility="private" size="28" offset="144" file="FMX.Controls.pas" line="1137"/>
      <field name="FUseStyleManager" type="Boolean" visibility="private" size="1" offset="172" file="FMX.Controls.pas" line="1138"/>
      <field name="FBeforeStyleChangingId" type="Integer" visibility="private" size="4" offset="176" file="FMX.Controls.pas" line="1139"/>
      <field name="FStyleChangedId" type="Integer" visibility="private" size="4" offset="180" file="FMX.Controls.pas" line="1140"/>
      <field name="FResource" type="TStrings" visibility="private" size="4" offset="184" file="FMX.Controls.pas" line="1141"/>
      <procedure name="SetFileName" visibility="private" file="FMX.Controls.pas" line="1142">
        <parameters>
          <parameter name="Value" type="string" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetUseStyleManager" visibility="private" file="FMX.Controls.pas" line="1143">
        <parameters>
          <parameter name="Value" type="Boolean" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetStyles" visibility="private" file="FMX.Controls.pas" line="1144">
        <parameters>
          <parameter name="Value" type="TStyleCollection" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="GetStyle" visibility="private" procflags="overload" file="FMX.Controls.pas" line="1145">
        <parameters>
          <retval type="TFmxObject"/>
        </parameters>
      <devnotes><summary>
Gets the style of the  CurrentItem stored in  TStyleCollectionItem. Getter of  Style. 
 TStyleCollectionItem stores one style for the specified platform. GetStyle  gets the style item.
The style is a  TFmxObject type.
</summary></devnotes></function>
      <procedure name="SetCurrentItemIndex" visibility="private" file="FMX.Controls.pas" line="1146">
        <parameters>
          <parameter name="Value" type="Integer" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="BeforeStyleChangingHandler" visibility="private" file="FMX.Controls.pas" line="1147">
        <parameters>
          <parameter name="Sender" type="TObject" paramflags="const"/>
          <parameter name="Msg" type="TMessageBase" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="StyleChangedHandler" visibility="private" file="FMX.Controls.pas" line="1148">
        <parameters>
          <parameter name="Sender" type="TObject" paramflags="const"/>
          <parameter name="Msg" type="TMessageBase" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="GetCurrentItem" visibility="private" file="FMX.Controls.pas" line="1149">
        <parameters>
          <retval type="TStyleCollectionItem">
            <devnotes>
               <summary>Represents an item in an instance of TStyleCollection that holds
               a style for a platform.</summary>
            </devnotes>
          </retval>
        </parameters>
      </function>
      <function name="GetUnsupportedPlatform" visibility="private" file="FMX.Controls.pas" line="1150">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <procedure name="RebuildDictionary" visibility="private" file="FMX.Controls.pas" line="1151">
      </procedure>
      <procedure name="ResourceChanged" visibility="private" file="FMX.Controls.pas" line="1152">
        <parameters>
          <parameter name="Sender" type="TObject"/>
        </parameters>
      </procedure>
      <function name="StyleIndexByContext" visibility="private" file="FMX.Controls.pas" line="1153">
        <parameters>
          <parameter name="Context" type="TFmxObject" paramflags="const"/>
          <retval type="Integer"/>
        </parameters>
      </function>
      <procedure name="CollectionChanged" visibility="private" file="FMX.Controls.pas" line="1154">
      </procedure>
      <procedure name="ReadStrings" visibility="private" file="FMX.Controls.pas" line="1155">
        <parameters>
          <parameter name="Reader" type="TReader"/>
        </parameters>
      </procedure>
      <function name="CustomFindStyleResource" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="1158">
        <devnotes><summary>
Use it to look for a style in a global pool.


</summary></devnotes>
        <parameters>
          <parameter name="AStyleLookup" type="string" paramflags="const"/>
          <parameter name="Clone" type="Boolean" paramflags="const"/>
          <retval type="TFmxObject"/>
        </parameters>
      </function>
      <procedure name="ChooseStyleIndex" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="1160">
        <devnotes><summary>
It chooses style depending on context.


</summary></devnotes>
      </procedure>
      <procedure name="CreateDefaultItem" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="1162">
        <devnotes><summary>
Creates an empty item on demand.
 CreateDefaultItem calls  Add to create a  TStyleCollectionItem and add it to the  TStyleCollection. The new style collection item is placed at the end of the  Items array.
Add returns the new style collection item. 
Add inherits from System.Classes.TCollection.Add.
</summary></devnotes>
      </procedure>
      <procedure name="Loaded" visibility="protected" procflags="override" file="FMX.Controls.pas" line="1163">
      <devnotes><summary>
Loads the style. Loaded is called automatically to load the style definition from the file that is set using the FileName property.
</summary></devnotes></procedure>
      <procedure name="DefineProperties" visibility="protected" procflags="override" file="FMX.Controls.pas" line="1164">
        <parameters>
          <parameter name="Filer" type="TFiler"/>
        </parameters>
      <devnotes><summary>
Provides an interface for a method that reads and writes otherwise unpublished data. DefineProperties is called automatically as part of the component streaming system; do not call it directly. 
</summary></devnotes></procedure>
      <procedure name="ReadResources" visibility="protected" file="FMX.Controls.pas" line="1165">
        <parameters>
          <parameter name="Stream" type="TStream"/>
        </parameters>
      <devnotes><summary>
Reads the resources from the given stream. ReadResources is called automatically to read resources from the given stream into the TStyleBook object.


</summary></devnotes></procedure>
      <constructor name="Create" visibility="public" file="FMX.Controls.pas" line="1167">
        <parameters>
          <parameter name="AOwner" type="TComponent"/>
        </parameters>
      <devnotes><summary>
Creates and initializes a TStyleBook instance. Create constructs a TStyleBook object and initializes its data before the object is first used. 
</summary></devnotes></constructor>
      <destructor name="Destroy" visibility="public" file="FMX.Controls.pas" line="1168">
        <parameters>
        </parameters>
      <devnotes><summary>
Destroys an instance of TStyleBook and frees the associated memory.
Do not call Destroy directly. Call Free instead. Free verifies that the object reference is not nil before calling Destroy. 
</summary></devnotes></destructor>
      <property name="DesignInfo" visibility="public" read="FDesignInfo" write="FDesignInfo" type="TStyleBookDesignInfo" file="FMX.Controls.pas" line="1170">
        <devnotes><summary>
 DesignInfo is a  TStyleBookDesignInfo record that contains design-time information only used by the Form designer.

 ClassName: Class name of the selected control.
 CustomStyle: True when edit custom style mode is active.
 DefaultStyleLookup: The default StyleLookup for the selected control.
 Name: Name of the selected control.
 StyleLookup: Name of the StyleLookup for the selected control.
 Control: The selected control itself.</summary></devnotes>
      </property>
      <procedure name="Clear" visibility="public" file="FMX.Controls.pas" line="1172">
        <devnotes><summary>
Clears the style collection of a  TStyleBook.
 TStyleCollection is a collection that stores the styles for the different platforms.
 Clear deletes all items from the collection. 
</summary></devnotes>
      </procedure>
      <function name="GetStyle" visibility="public" procflags="overload" file="FMX.Controls.pas" line="1174">
        <devnotes><summary>
Gets the style of the  CurrentItem stored in  TStyleCollectionItem. Getter of  Style. 
 TStyleCollectionItem stores one style for the specified platform. GetStyle  gets the style item.
The style is a  TFmxObject type.
</summary></devnotes>
        <parameters>
          <parameter name="Context" type="TFmxObject" paramflags="const"/>
          <retval type="TFmxObject"/>
        </parameters>
      </function>
      <procedure name="LoadFromStream" visibility="public" file="FMX.Controls.pas" line="1176">
        <devnotes><summary>
Method to load a style to the  TStyleBook, from a stream.
To load the style from a file use  LoadFromFile.

procedure TForm1.FormCreate(Sender: TObject);
var
  S: TFileStream; 
begin
  S :=  TFileStream.Create('Air.Style', fmOpenRead);
  Stylebook1.LoadFromStream(S);
end;

procedure TForm2.FormCreate(Sender: TObject);
var
  iStream: TMemoryStream;
begin
  StyleBook1.LoadFromFile('Air.Style'); //Loads the style from a file.
  iStream := TMemoryStream.Create; //Instanziate the memory stream var.
  TStyleStreaming.SaveToStream(StyleBook1.Style, iStream); //saves the style as a memory stream.
  StyleBook1.Clear; //Clear the styles from the stylebook.
  iStream.Position := 0; //Sets the position to start the streaming.
  StyleBook1.LoadFromStream(iStream); //Loads the style to the stylebook from the memory stream.
end;
</summary></devnotes>
        <parameters>
          <parameter name="Stream" type="TStream" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="LoadFromFile" visibility="public" file="FMX.Controls.pas" line="1178">
        <devnotes><summary>
Method to load a style to a  TStyleBook, from a file.
Select the full path to the file or the file name when located in the project folder.
FireMonkey styles are delivered in the RAD Studio product installation, at the following paths:

C:\Program Files (x86)\Embarcadero\Studio\21.0\Redist\styles\Fmx
C:\Users\Public\Documents\Embarcadero\Studio\21.0\Styles
Apply the style to the form using the  StyleBook  property of the form, for example:

procedure TForm1.FormCreate(Sender: TObject);
begin
  StyleBook1.LoadFromFile('Air.Style');
  Form1.StyleBook := StyleBook1;
end;

To load a style to an  item of the  TStyleCollection, that is a style for each platform added to the  TStyleBook, then use FMX.Controls.TStyleCollectionItem.LoadFromFile.
</summary></devnotes>
        <parameters>
          <parameter name="AFileName" type="string" paramflags="const"/>
        </parameters>
      </procedure>
      <property name="Style" visibility="public" read="GetStyle" type="TFmxObject" file="FMX.Controls.pas" line="1180">
        <devnotes><summary>
Represents the current style as a TFmxObject. 
</summary></devnotes>
      </property>
      <property name="CurrentItemIndex" visibility="public" read="FCurrentItemIndex" write="SetCurrentItemIndex" type="Integer" file="FMX.Controls.pas" line="1182">
        <devnotes><summary>
Index of the current style in the style collection.
 CurrentItemIndex is the index of the current  StyleCollectionItem from the  StyleCollection array.
 CurrentItemIndex is an integer value.
</summary></devnotes>
      </property>
      <property name="CurrentItem" visibility="public" read="GetCurrentItem" type="TStyleCollectionItem" file="FMX.Controls.pas" line="1184">
        <devnotes><summary>
Current style in the style collection.
 CurrentItem is the current  StyleCollectionItem from the  StyleCollection. 
</summary></devnotes>
      </property>
      <property name="Resource" visibility="public" read="FResource" type="TStrings" file="FMX.Controls.pas" line="1185"><devnotes><summary>
The style definition. Resource is a string list containing the style defined by the TStyleBook.
</summary></devnotes></property>
      <property name="UnsupportedPlatform" visibility="public" read="GetUnsupportedPlatform" type="Boolean" file="FMX.Controls.pas" line="1187">
        <devnotes><summary>
Indicates whether the style can be loaded in the current target platform. 
If the style cannot be loaded, UnsupportedPlatform is True and Style is empty.
</summary></devnotes>
      </property>
      <property name="FileName" visibility="published" read="FFileName" write="SetFileName" type="string" default="0" file="FMX.Controls.pas" line="1190">
        <devnotes><summary>
The name of the file that contains the style definition.
Use FileName to specify the .style file from which the TStyleBook loads its Resource.
Setting the FileName also loads and applies the style.
</summary></devnotes>
      </property>
      <property name="UseStyleManager" visibility="published" read="FUseStyleManager" write="SetUseStyleManager" type="Boolean" default="0" file="FMX.Controls.pas" line="1192">
        <devnotes><summary>
Specifies whether the TStyleManager replaces the default style for the whole application.
</summary></devnotes>
      </property>
      <property name="Styles" visibility="published" read="FStyles" write="SetStyles" type="TStyleCollection" file="FMX.Controls.pas" line="1194">
        <devnotes><summary>
Contains the  collection of  styles stored in the  TStyleBook.
</summary></devnotes>
      </property>
    </members>
  <devnotes><summary>
TStyleBook stores a collection of styles for a form.
There are two ways to create and use a TStyleBook component:

Drop a TStyleBook component from the Tool Palette onto the Form Designer and make your new TStyleBook component the value of the StyleBook property of the form. This works for desktop applications and mobile applications.
Right-click a control on a FireMonkey desktop form and choose either Edit Default Style or Edit Custom Style. This automatically creates a TStyleBook component, sets it to the form's StyleBook, and opens the Style Designer.
TStyleBook stores the style definition as text in the Resource property and can be loaded from a .style file.
Double-clicking the TStyleBook component on the form opens the Style Designer.

TStyleBook and Form Inheritance
If you want all the descendant forms to have the same style as the base form, place the TStyleBook in the base form.
If you want the descendant forms to have different styles, place separate TStyleBooks in the descendant forms.
Note: At design time, using the StyleLookup property of a control in any form in the current project group you can access any custom style defined in any TStyleBook component used in the current project group. That is, even if the form does not have a particular TStyleBook component, controls from this form can use custom  styles defined in this TStyleBook component (if this TStyleBook component is used in any form in the current project group). At run time, only styles in the current project and only after an owner of the TStyleBook containing these styles is already created can be accessed.</summary></devnotes></class>
  <class name="TTextSettingsInfo" file="FMX.Controls.pas" line="1197">
    
    <members>
      <class name="TBaseTextSettings" visibility="public" alias="FMX.Controls.TBaseTextSettings" file="FMX.Controls.pas" line="1199">
        
        <members>
          <field name="FInfo" type="TTextSettingsInfo" visibility="private" size="4" offset="56" file="FMX.Controls.pas" line="1201">
            <attributes>
              <attribute name="TObject"/>
            </attributes>
          </field>
          <field name="FControl" type="TControl" visibility="private" size="4" offset="60" file="FMX.Controls.pas" line="1202">
            <attributes>
              <attribute name="TObject"/>
            </attributes>
          </field>
          <constructor name="Create" visibility="public" file="FMX.Controls.pas" line="1204">
            <parameters>
              <parameter name="AOwner" type="TPersistent" paramflags="const"/>
            </parameters>
          </constructor>
          <property name="Info" visibility="public" read="FInfo" type="TTextSettingsInfo" file="FMX.Controls.pas" line="1205"/>
          <property name="Control" visibility="public" read="FControl" type="TControl" file="FMX.Controls.pas" line="1206"/>
        </members>
      </class>
      <class name="TCustomTextSettings" visibility="public" alias="FMX.Controls.TCustomTextSettings" file="FMX.Controls.pas" line="1208">
        
        <members>
          <constructor name="Create" visibility="public" file="FMX.Controls.pas" line="1210">
            <parameters>
              <parameter name="AOwner" type="TPersistent" paramflags="const"/>
            </parameters>
          </constructor>
          <property name="WordWrap" visibility="public" read="FWordWrap" write="SetWordWrap" type="Boolean" default="1" hoisted="true" file="FMX.Controls.pas" line="1211"/>
          <property name="Trimming" visibility="public" read="FTrimming" write="SetTrimming" type="TTextTrimming" default="0" hoisted="true" file="FMX.Controls.pas" line="1212"/>
        </members>
      </class>
      <classref name="TCustomTextSettingsClass" alias="FMX.Controls.TCustomTextSettingsClass" ref="TTextSettingsInfo.TCustomTextSettings" file="FMX.Controls.pas" line="1214"/>
      <class name="TTextPropLoader" visibility="public" alias="FMX.Controls.TTextPropLoader" file="FMX.Controls.pas" line="1215">
        
        <members>
          <field name="FInstance" type="TPersistent" visibility="private" size="4" offset="4" file="FMX.Controls.pas" line="1217"/>
          <field name="FFiler" type="TFiler" visibility="private" size="4" offset="8" file="FMX.Controls.pas" line="1218"/>
          <field name="FITextSettings" type="ITextSettings" visibility="private" size="4" offset="12" file="FMX.Controls.pas" line="1219"/>
          <field name="FTextSettings" type="TTextSettings" visibility="private" size="4" offset="16" file="FMX.Controls.pas" line="1220"/>
          <procedure name="ReadSet" visibility="protected" file="FMX.Controls.pas" line="1222">
            <parameters>
              <parameter name="Instance" type="TPersistent" paramflags="const"/>
              <parameter name="Reader" type="TReader" paramflags="const"/>
              <parameter name="PropertyName" type="string" paramflags="const"/>
            </parameters>
          </procedure>
          <procedure name="ReadEnumeration" visibility="protected" file="FMX.Controls.pas" line="1223">
            <parameters>
              <parameter name="Instance" type="TPersistent" paramflags="const"/>
              <parameter name="Reader" type="TReader" paramflags="const"/>
              <parameter name="PropertyName" type="string" paramflags="const"/>
            </parameters>
          </procedure>
          <procedure name="ReadFontFillColor" visibility="protected" file="FMX.Controls.pas" line="1224">
            <parameters>
              <parameter name="Reader" type="TReader"/>
            </parameters>
          </procedure>
          <procedure name="ReadFontFamily" visibility="protected" file="FMX.Controls.pas" line="1225">
            <devnotes>
              LONGINT64
              LONGINT64
            </devnotes>
            <parameters>
              <parameter name="Reader" type="TReader"/>
            </parameters>
          </procedure>
          <procedure name="ReadFontFillKind" visibility="protected" file="FMX.Controls.pas" line="1226">
            <parameters>
              <parameter name="Reader" type="TReader"/>
            </parameters>
          </procedure>
          <procedure name="ReadFontStyle" visibility="protected" file="FMX.Controls.pas" line="1227">
            <parameters>
              <parameter name="Reader" type="TReader"/>
            </parameters>
          </procedure>
          <procedure name="ReadFontSize" visibility="protected" file="FMX.Controls.pas" line="1228">
            <parameters>
              <parameter name="Reader" type="TReader"/>
            </parameters>
          </procedure>
          <procedure name="ReadTextAlign" visibility="protected" file="FMX.Controls.pas" line="1229">
            <parameters>
              <parameter name="Reader" type="TReader"/>
            </parameters>
          </procedure>
          <procedure name="ReadTrimming" visibility="protected" file="FMX.Controls.pas" line="1230">
            <parameters>
              <parameter name="Reader" type="TReader"/>
            </parameters>
          </procedure>
          <procedure name="ReadVertTextAlign" visibility="protected" file="FMX.Controls.pas" line="1231">
            <parameters>
              <parameter name="Reader" type="TReader"/>
            </parameters>
          </procedure>
          <procedure name="ReadWordWrap" visibility="protected" file="FMX.Controls.pas" line="1232">
            <parameters>
              <parameter name="Reader" type="TReader"/>
            </parameters>
          </procedure>
          <constructor name="Create" visibility="public" file="FMX.Controls.pas" line="1234">
            <parameters>
              <parameter name="AInstance" type="TComponent" paramflags="const"/>
              <parameter name="AFiler" type="TFiler" paramflags="const"/>
            </parameters>
          </constructor>
          <procedure name="ReadProperties" visibility="public" procflags="virtual" file="FMX.Controls.pas" line="1235">
          </procedure>
          <property name="Instance" visibility="public" read="FInstance" type="TPersistent" file="FMX.Controls.pas" line="1236"/>
          <property name="Filer" visibility="public" read="FFiler" type="TFiler" file="FMX.Controls.pas" line="1237"/>
          <property name="TextSettings" visibility="public" read="FTextSettings" type="TTextSettings" file="FMX.Controls.pas" line="1238"/>
        </members>
      </class>
      <field name="FDefaultTextSettings" type="TTextSettings" visibility="private" size="4" offset="4" file="FMX.Controls.pas" line="1241"/>
      <field name="FTextSettings" type="TTextSettings" visibility="private" size="4" offset="8" file="FMX.Controls.pas" line="1242"/>
      <field name="FResultingTextSettings" type="TTextSettings" visibility="private" size="4" offset="12" file="FMX.Controls.pas" line="1243"/>
      <field name="FOldTextSettings" type="TTextSettings" visibility="private" size="4" offset="16" file="FMX.Controls.pas" line="1244"/>
      <field name="FOwner" type="TPersistent" visibility="private" size="4" offset="20" file="FMX.Controls.pas" line="1245">
        <attributes>
          <attribute name="TObject"/>
        </attributes>
      </field>
      <field name="FDesign" type="Boolean" visibility="private" size="1" offset="24" file="FMX.Controls.pas" line="1246"/>
      <field name="FStyledSettings" type="TStyledSettings" visibility="private" size="1" offset="25" file="FMX.Controls.pas" line="1247"/>
      <procedure name="SetDefaultTextSettings" visibility="private" file="FMX.Controls.pas" line="1248">
        <parameters>
          <parameter name="Value" type="TTextSettings" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetStyledSettings" visibility="private" file="FMX.Controls.pas" line="1249">
        <parameters>
          <parameter name="Value" type="TStyledSettings" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetTextSettings" visibility="private" file="FMX.Controls.pas" line="1250">
        <parameters>
          <parameter name="Value" type="TTextSettings" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="OnDefaultChanged" visibility="private" file="FMX.Controls.pas" line="1251">
        <parameters>
          <parameter name="Sender" type="TObject"/>
        </parameters>
      </procedure>
      <procedure name="OnTextChanged" visibility="private" file="FMX.Controls.pas" line="1252">
        <parameters>
          <parameter name="Sender" type="TObject"/>
        </parameters>
      </procedure>
      <procedure name="OnCalculatedTextSettings" visibility="private" file="FMX.Controls.pas" line="1253">
        <parameters>
          <parameter name="Sender" type="TObject"/>
        </parameters>
      </procedure>
      <procedure name="RecalculateTextSettings" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="1255">
      </procedure>
      <procedure name="DoDefaultChanged" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="1256">
      </procedure>
      <procedure name="DoTextChanged" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="1257">
      </procedure>
      <procedure name="DoCalculatedTextSettings" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="1258">
      </procedure>
      <procedure name="DoStyledSettingsChanged" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="1259">
      </procedure>
      <constructor name="Create" visibility="public" file="FMX.Controls.pas" line="1261">
        <parameters>
          <parameter name="AOwner" type="TPersistent"/>
          <parameter name="ATextSettingsClass" type="TTextSettingsInfo.TCustomTextSettingsClass"/>
        </parameters>
      </constructor>
      <destructor name="Destroy" visibility="public" file="FMX.Controls.pas" line="1262">
        <parameters>
        </parameters>
      </destructor>
      <property name="Design" visibility="public" read="FDesign" write="FDesign" type="Boolean" file="FMX.Controls.pas" line="1263"/>
      <property name="StyledSettings" visibility="public" read="FStyledSettings" write="SetStyledSettings" type="TStyledSettings" file="FMX.Controls.pas" line="1264"/>
      <property name="DefaultTextSettings" visibility="public" read="FDefaultTextSettings" write="SetDefaultTextSettings" type="TTextSettings" file="FMX.Controls.pas" line="1265"/>
      <property name="TextSettings" visibility="public" read="FTextSettings" write="SetTextSettings" type="TTextSettings" file="FMX.Controls.pas" line="1266"/>
      <property name="ResultingTextSettings" visibility="public" read="FResultingTextSettings" type="TTextSettings" file="FMX.Controls.pas" line="1267"/>
      <property name="Owner" visibility="public" read="FOwner" type="TPersistent" file="FMX.Controls.pas" line="1268"/>
    </members>
  </class>
  <class name="TTextControl" file="FMX.Controls.pas" line="1273">
    
    <interfaces>
      <implements name="IAcceleratorKeyReceiver"/>
      <implements name="ICaption"/>
      <implements name="ITextSettings"/>
    </interfaces>
    <members>
      <field name="FTextSettingsInfo" type="TTextSettingsInfo" visibility="private" size="4" offset="944" file="FMX.Controls.pas" line="1275"/>
      <field name="FTextObject" type="TControl" visibility="private" size="4" offset="948" file="FMX.Controls.pas" line="1276"/>
      <field name="FITextSettings" type="ITextSettings" visibility="private" size="4" offset="952" file="FMX.Controls.pas" line="1277"/>
      <field name="FObjectState" type="IObjectState" visibility="private" size="4" offset="956" file="FMX.Controls.pas" line="1278"/>
      <field name="FText" type="string" visibility="private" size="4" offset="960" file="FMX.Controls.pas" line="1279"/>
      <field name="FIsChanging" type="Boolean" visibility="private" size="1" offset="964" file="FMX.Controls.pas" line="1280"/>
      <field name="FPrefixStyle" type="TPrefixStyle" visibility="private" size="4" offset="968" file="FMX.Controls.pas" line="1281"/>
      <field name="FAcceleratorKey" type="Char" visibility="private" size="2" offset="972" file="FMX.Controls.pas" line="1282"/>
      <field name="FAcceleratorKeyIndex" type="Integer" visibility="private" size="4" offset="976" file="FMX.Controls.pas" line="1283"/>
      <function name="GetFont" visibility="private" file="FMX.Controls.pas" line="1284">
        <parameters>
          <retval type="TFont"/>
        </parameters>
      </function>
      <function name="GetText" visibility="private" file="FMX.Controls.pas" line="1285">
        <parameters>
          <retval type="string"/>
        </parameters>
      </function>
      <function name="TextStored" visibility="private" file="FMX.Controls.pas" line="1286">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <procedure name="SetFont" visibility="private" file="FMX.Controls.pas" line="1287">
        <parameters>
          <parameter name="Value" type="TFont" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="GetTextAlign" visibility="private" file="FMX.Controls.pas" line="1288">
        <parameters>
          <retval type="TTextAlign"/>
        </parameters>
      </function>
      <procedure name="SetTextAlign" visibility="private" file="FMX.Controls.pas" line="1289">
        <parameters>
          <parameter name="Value" type="TTextAlign" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="GetVertTextAlign" visibility="private" file="FMX.Controls.pas" line="1290">
        <parameters>
          <retval type="TTextAlign"/>
        </parameters>
      </function>
      <procedure name="SetVertTextAlign" visibility="private" file="FMX.Controls.pas" line="1291">
        <parameters>
          <parameter name="Value" type="TTextAlign" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="GetWordWrap" visibility="private" file="FMX.Controls.pas" line="1292">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <procedure name="SetWordWrap" visibility="private" file="FMX.Controls.pas" line="1293">
        <parameters>
          <parameter name="Value" type="Boolean" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="GetFontColor" visibility="private" file="FMX.Controls.pas" line="1294">
        <parameters>
          <retval type="TAlphaColor"/>
        </parameters>
      </function>
      <procedure name="SetFontColor" visibility="private" file="FMX.Controls.pas" line="1295">
        <parameters>
          <parameter name="Value" type="TAlphaColor" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="GetTrimming" visibility="private" file="FMX.Controls.pas" line="1296">
        <parameters>
          <retval type="TTextTrimming"/>
        </parameters>
      </function>
      <procedure name="SetTrimming" visibility="private" file="FMX.Controls.pas" line="1297">
        <parameters>
          <parameter name="Value" type="TTextTrimming" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetPrefixStyle" visibility="private" file="FMX.Controls.pas" line="1298">
        <parameters>
          <parameter name="Value" type="TPrefixStyle" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="GetDefaultTextSettings" visibility="private" file="FMX.Controls.pas" line="1300">
        <parameters>
          <retval type="TTextSettings">
            <devnotes>
               <summary>
               This class combines some of properties that relate to the text
               </summary>
            </devnotes>
          </retval>
        </parameters>
      </function>
      <function name="GetTextSettings" visibility="private" file="FMX.Controls.pas" line="1301">
        <parameters>
          <retval type="TTextSettings">
            <devnotes>
               <summary>
               This class combines some of properties that relate to the text
               </summary>
            </devnotes>
          </retval>
        </parameters>
      </function>
      <function name="GetStyledSettings" visibility="private" file="FMX.Controls.pas" line="1302">
        <parameters>
          <retval type="TStyledSettings"/>
        </parameters>
      </function>
      <function name="GetResultingTextSettings" visibility="private" file="FMX.Controls.pas" line="1303">
        <parameters>
          <retval type="TTextSettings">
            <devnotes>
               <summary>
               This class combines some of properties that relate to the text
               </summary>
            </devnotes>
          </retval>
        </parameters>
      </function>
      <procedure name="DoRootChanging" visibility="protected" procflags="override" file="FMX.Controls.pas" line="1308">
        <devnotes><summary>
DoRootChanging is executed when the root container (typically a form) is defined or changes.
For example, DoRootChanging is executed when this control is added to a form or moved from one form to another. 
When this control works as an accelerator key receiver, DoRootChanging overrides TControl.DoRootChanging to:

Register this control to a specific form when the text control is added to the form.
Unregister and register this control from one form to another when this control is moved between forms.</summary></devnotes>
        <parameters>
          <parameter name="NewRoot" type="IRoot" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="DoFilterControlText" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="1311">
        <devnotes><summary>
Filters the string contained in the Text property.
For example, you can use DoFilterControlText to filter the ampersand symbol of the accelerator key character.
If the control is registered as an accelerator key receiver, you can override this method to do your own filtering to the accelerator keys.
</summary></devnotes>
        <parameters>
          <parameter name="AText" type="string" paramflags="const"/>
          <retval type="string"/>
        </parameters>
      </function>
      <procedure name="DefineProperties" visibility="protected" procflags="override" file="FMX.Controls.pas" line="1312">
        <parameters>
          <parameter name="Filer" type="TFiler"/>
        </parameters>
      <devnotes><summary>




Designates methods for storing an object's unpublished data on a stream such as a form file.
FMX.Controls.TTextControl.DefineProperties inherits from System.Classes.TComponent.DefineProperties. All content below this line refers to System.Classes.TComponent.DefineProperties.
Designates methods for storing an object's unpublished data on a stream such as a form file.
TComponent overrides the DefineProperties method defined in TPersistent to define &quot;fake&quot; Top and Left properties. These are defined so that components that are not controls can be manipulated at design time. However, the Top and Left properties are hidden, that is, they are not published, because only controls appear at run time.
DefineProperties is virtual; descendent classes can override it. When overriding DefineProperties, be aware that the Ancestor property of Filer might be set, and that this property can determine whether or not it is appropriate to write properties.
DefineProperties is called automatically as part of the component streaming system; do not call it directly.
</summary></devnotes></procedure>
      <procedure name="ApplyStyle" visibility="protected" procflags="override" file="FMX.Controls.pas" line="1313">
      <devnotes><summary>
Customizes styles in complex objects.
FMX.Controls.TTextControl.ApplyStyle inherits from FMX.Controls.TStyledControl.ApplyStyle. All content below this line refers to FMX.Controls.TStyledControl.ApplyStyle.
Customizes styles in complex objects.
TStyledControl descendants override it to apply styles in concordance with their primitive components.      
Do not call ApplyStyle explicitly in an application. It is called by the ApplyStyleLookup method when object styles are updated.
For an example of an ApplyStyle implementation, see &quot;TCalloutPanel:Style Contracts&quot; in FireMonkey Component Design.
</summary></devnotes></procedure>
      <procedure name="FreeStyle" visibility="protected" procflags="override" file="FMX.Controls.pas" line="1314">
      <devnotes><summary>
Frees the style of TStyledControl.
FreeStyle frees some TTextControl-specific style resources like TextObject and TextSettings, then calls the inherited TStyledControl.FreeStyle.
</summary></devnotes></procedure>
      <procedure name="DoStyleChanged" visibility="protected" procflags="override" file="FMX.Controls.pas" line="1315">
      <devnotes><summary>
Calls the inherited TStyledControl.DoStyleChanged, then tries to translate the Text.
DoStyleChanged calls the inherited TStyledControl.DoStyleChanged to set that the control needs to update the style, then calls Repaint to redraw the control, and then tries to translate the control's Text calling Translate. 
</summary></devnotes></procedure>
      <procedure name="SetText" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="1316">
        <parameters>
          <parameter name="Value" type="string" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Protected setter implementation for the Text property.
In descendants, override SetText to allow for further functionality when setting the text using the Text property.
Do not use SetText directly in applications. Use the Text property instead.
</summary></devnotes></procedure>
      <procedure name="SetTextInternal" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="1317">
        <parameters>
          <parameter name="Value" type="string" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="SetName" visibility="protected" procflags="override" file="FMX.Controls.pas" line="1318">
        <parameters>
          <parameter name="Value" type="TComponentName" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Sets the value of the Name property.
FMX.Controls.TTextControl.SetName inherits from System.Classes.TComponent.SetName. All content below this line refers to System.Classes.TComponent.SetName.
Sets the value of the Name property.
SetName is the virtual property setter for the Name property. It calls the ChangeName method, which performs the actual name change.
ChangeName is not virtual; override SetName instead when modifying the behavior of the Name property.

Warning: Using SetName to change the name of a component at run time causes any references to the old name to become undefined. Any subsequent code that uses the old name will cause an exception.</summary></devnotes></procedure>
      <function name="GetData" visibility="protected" procflags="override" file="FMX.Controls.pas" line="1319">
        <parameters>
          <retval type="TValue">
            <attributes>
              <attribute name="HPPGENAttribute"/>
            </attributes>
          </retval>
        </parameters>
      <devnotes><summary>
Protected getter implementation for the Data property.
FMX.Controls.TTextControl.GetData inherits from FMX.Types.TFmxObject.GetData. All content below this line refers to FMX.Types.TFmxObject.GetData.
Protected getter implementation for the Data property.
</summary></devnotes></function>
      <procedure name="SetData" visibility="protected" procflags="override" file="FMX.Controls.pas" line="1320">
        <parameters>
          <parameter name="Value" type="TValue" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Protected setter implementation for the Data property.
FMX.Controls.TTextControl.SetData inherits from FMX.Types.TFmxObject.SetData. All content below this line refers to FMX.Types.TFmxObject.SetData.
Protected setter implementation for the Data property.
</summary></devnotes></procedure>
      <procedure name="ActionChange" visibility="protected" procflags="override" file="FMX.Controls.pas" line="1321">
        <parameters>
          <parameter name="Sender" type="TBasicAction"/>
          <parameter name="CheckDefaults" type="Boolean"/>
        </parameters>
      <devnotes><summary>
Specifies the behavior of a TTextControl control when Action changes. 
Depending on the CheckDefaults value,  ActionChange uses the TCustomAction.Text property of the Sender action to set the new value to the  
Text property of TTextControl. Then ActionChange calls the inherited TControl.ActionChange method.  
Do not call ActionChange explicitly in an application. It is for internal use.
</summary></devnotes></procedure>
      <procedure name="Loaded" visibility="protected" procflags="override" file="FMX.Controls.pas" line="1322">
      <devnotes><summary>
Initializes the component after the form file has been read into memory.
FMX.Controls.TTextControl.Loaded inherits from FMX.Controls.TControl.Loaded. All content below this line refers to FMX.Controls.TControl.Loaded.
Initializes the component after the form file has been read into memory. 
Loaded inherits TComponent.Loaded, realigns the children, if any, and updates the tab list.
For details, see TComponent.Loaded.
</summary></devnotes></procedure>
      <function name="FindTextObject" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="1323">
        <parameters>
          <retval type="TFmxObject"/>
        </parameters>
      <devnotes><summary>
Retrieves the resource object linked to the style of the current TTextControl object.
In the current implementation, FindTextObject retrieves the resource object linked to the 'text' style.
</summary></devnotes></function>
      <procedure name="UpdateTextObject" visibility="protected" file="FMX.Controls.pas" line="1324">
        <parameters>
          <parameter name="TextControl" type="TControl" paramflags="const"/>
          <parameter name="Str" type="string" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <property name="TextObject" visibility="protected" read="FTextObject" type="TControl" file="FMX.Controls.pas" line="1325"><devnotes><summary>
Keeps the resource object linked to the style of the current TTextControl object.
In the current implementation, TextObject keeps the resource object linked to the 'text' style.
</summary></devnotes></property>
      <procedure name="DoTextChanged" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="1326">
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="DoEndUpdate" visibility="protected" procflags="override" file="FMX.Controls.pas" line="1327">
      <devnotes><summary>


Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <function name="CalcTextObjectSize" visibility="protected" file="FMX.Controls.pas" line="1328">
        <parameters>
          <parameter name="MaxWidth" type="Single" paramflags="const"/>
          <parameter name="Size" type="TSizeF" paramflags="var"/>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></function>
      <procedure name="SetTextSettings" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="1330">
        <parameters>
          <parameter name="Value" type="TTextSettings" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Copies the values of the styled text representation properties of the specified Value object to the current TTextControl object.
SetTextSettings calls 

TTextSettings.Assign(Value);
</summary></devnotes></procedure>
      <procedure name="SetStyledSettings" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="1331">
        <parameters>
          <parameter name="Value" type="TStyledSettings" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Setter for the StyledSettings property.
</summary></devnotes></procedure>
      <procedure name="DoChanged" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="1332">
      <devnotes><summary>
Updates the representation of the text on the control.
DoChanged is called internally from the Change methods.
Do not call DoChanged explicitly; call the Change  method. 
</summary></devnotes></procedure>
      <function name="StyledSettingsStored" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="1333">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Retrieves whether any of the default values of font properties that are stored in the StyledSettings property is changed.
StyledSettingsStored retrieves whether StyledSettings needs to be stored in the .fmx form file, keeping the description of the FMX form.
StyledSettingsStored returns True if StyledSettings &lt;&gt; DefaultStyledSettings. The DefaultStyledSettings property is set during the style loading in the ApplyStyle method. See also AllStyledSettings.
</summary></devnotes></function>
      <function name="GetTextSettingsClass" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="1334">
        <parameters>
          <retval type="TTextSettingsInfo.TCustomTextSettingsClass"/>
        </parameters>
      <devnotes><summary>
Returns the class type that instance represents the used text settings.
GetTextSettingsClass returns the TTextSettingsInfo.TCustomTextSettingsClass (or its descendant)  class reference. An instance of such class provides the DefaultTextSettings,   TextSettings, StyledSettings, ResultingTextSettings, and other properties handling the text representation settings of a control. 
You can override the method in descendant classes to modify the default behavior.
Typical implementations of GetTextSettingsClass returns the class declaring properties like the Font, FontColor, HorzAlign, and WordWrap. Some of these properties can be declared as published to be editable in the Object Inspector.
</summary></devnotes></function>
      <procedure name="TriggerAcceleratorKey" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="1337">
        <devnotes><summary>
Allows the object to perform an action when the accelerator key is pressed.
FMX.Controls.TTextControl.TriggerAcceleratorKey inherits from FMX.AcceleratorKey.IAcceleratorKeyReceiver.TriggerAcceleratorKey. All content below this line refers to FMX.AcceleratorKey.IAcceleratorKeyReceiver.TriggerAcceleratorKey.
Allows the object to perform an action when the accelerator key is pressed.
Use TriggerAcceleratorKey to trigger an action as a response to the accelerator key. For example, use TriggerAcceleratorKey to set focus to the acceleration key receiver control.

 See Also
FMX.AcceleratorKey.IAcceleratorKeyReceiver.CanTriggerAcceleratorKey

</summary></devnotes>
      </procedure>
      <function name="CanTriggerAcceleratorKey" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="1340">
        <devnotes><summary>
Determines whether the object reacts to the accelerator key or not.
FMX.Controls.TTextControl.CanTriggerAcceleratorKey inherits from FMX.AcceleratorKey.IAcceleratorKeyReceiver.CanTriggerAcceleratorKey. All content below this line refers to FMX.AcceleratorKey.IAcceleratorKeyReceiver.CanTriggerAcceleratorKey.
Determines whether the object reacts to the accelerator key or not.
Use CanTriggerAcceleratorKey for objects that are not intended to react to the accelerator key, for example: a hidden tab page or a hidden submenu. The object triggers the action if CanTriggerAcceleratorKey is True. Otherwise, the object cannot trigger the action.

 See Also
FMX.AcceleratorKey.IAcceleratorKeyReceiver.TriggerAcceleratorKey

</summary></devnotes>
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <function name="GetAcceleratorChar" visibility="protected" file="FMX.Controls.pas" line="1342">
        <devnotes><summary>
Returns the character key that serves as the  keyboard accelerator for the receiver object.
FMX.Controls.TTextControl.GetAcceleratorChar inherits from FMX.AcceleratorKey.IAcceleratorKeyReceiver.GetAcceleratorChar. All content below this line refers to FMX.AcceleratorKey.IAcceleratorKeyReceiver.GetAcceleratorChar.
Returns the character key that serves as the  keyboard accelerator for the receiver object.

 See Also
FMX.AcceleratorKey.IAcceleratorKeyReceiver.GetAcceleratorCharIndex

</summary></devnotes>
        <parameters>
          <retval type="Char"/>
        </parameters>
      </function>
      <function name="GetAcceleratorCharIndex" visibility="protected" file="FMX.Controls.pas" line="1345">
        <devnotes><summary>
Returns the index of the accelerator character within the text string of the receiver object.
FMX.Controls.TTextControl.GetAcceleratorCharIndex inherits from FMX.AcceleratorKey.IAcceleratorKeyReceiver.GetAcceleratorCharIndex. All content below this line refers to FMX.AcceleratorKey.IAcceleratorKeyReceiver.GetAcceleratorCharIndex.
Returns the index of the accelerator character within the text string of the receiver object.
Use GetAcceleratorCharIndex to highlight the accelerator character when the text string contains several times the same character.

 See Also
FMX.AcceleratorKey.IAcceleratorKeyReceiver.GetAcceleratorChar

</summary></devnotes>
        <parameters>
          <retval type="Integer"/>
        </parameters>
      </function>
      <constructor name="Create" visibility="public" file="FMX.Controls.pas" line="1347">
        <parameters>
          <parameter name="AOwner" type="TComponent"/>
        </parameters>
      <devnotes><summary>
Allocates memory and constructs a safely initialized instance of a component.
Allocates memory and constructs a safely initialized instance of a component.
FMX.Controls.TTextControl.Create inherits from System.Classes.TComponent.Create. All content below this line refers to System.Classes.TComponent.Create.
Allocates memory and constructs a safely initialized instance of a component.
All objects have a Create method that constructs the object. TComponent redefines Create so that, for components, Create also:

Establishes the relationship of a component and its Owner, as indicated by the AOwner parameter.
Sets the ComponentStyle property to csInheritable, meaning that the component can be inherited by a descendent form type.
It is not necessary to explicitly create components added in the Form Designer. These components are created automatically when the application is run, and they are destroyed when the application is closed.
For components created programmatically, that is, not created in the Form Designer, call Create and pass in an owner component as the AOwner parameter. The owner disposes of the component when it is destroyed. If the component is not owned, then use Free when it needs to be destroyed.

Tip:  When passing in Self as the Owner parameter, consider what Self references. If a component creates another component in one of its methods, then Self refers to the first component and not the component being created, which is then owned by the first component.
Note:  The TComponent constructor is virtual in part to allow polymorphic instantiation of class references. This is critical to the streaming system and to the Form Designer. Do not forget to use the override directive when declaring a new component's Create constructor.</summary></devnotes></constructor>
      <destructor name="Destroy" visibility="public" file="FMX.Controls.pas" line="1348">
        <parameters>
        </parameters>
      <devnotes><summary>
Disposes of the component and its owned components.
Disposes of the component and its owned components.
FMX.Controls.TTextControl.Destroy inherits from System.Classes.TComponent.Destroy. All content below this line refers to System.Classes.TComponent.Destroy.
Disposes of the component and its owned components.
Do not call Destroy directly. Call Free instead. Free verifies that the component is not nil, and only then calls Destroy.
Never explicitly free a component in one of its own event handlers, nor free a component from the event handler of a component that it owns or contains.
To destroy a form, call its Release method. Release waits for all the form's event handlers and the event handlers of the form's components to finish executing before destroying the form.

Note: A form owns all the controls and nonvisual components that are placed on it in design mode. When it is freed, all of these components are automatically freed as well. By default, all forms are owned by the global Application object. When an application terminates, it frees the global Application object, which frees all forms. For objects that are not components, and for components created with a nil owner, be sure to call Free after finishing with the object; otherwise the memory allocated for the object will be lost until the application terminates.</summary></devnotes></destructor>
      <procedure name="AfterConstruction" visibility="public" procflags="override" file="FMX.Controls.pas" line="1349">
      <devnotes><summary>
Responds after the last constructor has executed.
FMX.Controls.TTextControl.AfterConstruction inherits from System.TObject.AfterConstruction. All content below this line refers to System.TObject.AfterConstruction.
Responds after the last constructor has executed.
AfterConstruction is called automatically after the object's last constructor has executed. Do not call it explicitly in your applications. 
The AfterConstruction method implemented in TObject does nothing. Override this method when creating a class that performs an action after the object is created. For example, TCustomForm overrides AfterConstruction to generate an OnCreate event. 
</summary></devnotes></procedure>
      <function name="ToString" visibility="public" procflags="override" file="FMX.Controls.pas" line="1350">
        <parameters>
          <retval type="string"/>
        </parameters>
      <devnotes><summary>
Returns a string containing the class name followed by the text that is rendered over the surface of this TTextControl object.
ToString returns a string containing the concatenation of two substrings:

The first substring contains the class name of the instance that is being called (retrieved by TObject.ToString). For example, calling  on a TCheckBox instance returns a substring containing TCheckBox.
The second substring contains the text from the Text property. This is the text that will be rendered over the surface of the object in which ToString is called.</summary></devnotes></function>
      <property name="Text" visibility="public" read="GetText" write="SetText" stored="TextStored" type="string" default="0" file="FMX.Controls.pas" line="1352"><devnotes><summary>
Specifies the text that will be rendered over the surface of this TTextControl object.
Set the Text property to specify the text that will be displayed by this TTextControl. Text can be any string.
If there are any effects already applied before changing the Text property, they will be preserved for the new text. Also, the surface of this TTextControl is repainted.
In the Text property you can define an accelerator key. On Windows platforms, an accelerator key is shown as an underlined letter. To specify an accelerator key, precede an &lt;accelerator_letter&gt; with an ampersand &amp; character. The letter after the ampersand appears underlined. For example, to set the S character as an accelerator key for a Save button, type &amp;Save. On Windows platforms, accelerator keys enable the user to access controls pressing Alt+&lt;accelerator_letter&gt; key combination. When run on not Windows platforms, a single ampersand is simply stripped from the text. To show a single ampersand &amp; character in a Text property specify doubled ampersand &amp;&amp; characters.

Tip:  If you specify a new text string that is exactly the same as the one already displayed, the effects will not be re-updated and this TTextControl object will not be repainted.
Note: FMX.ExtCtrls.TPopupBox.Text is not a writable property in the same way as FMX.Controls.TTextControl.Text. The FMX.ExtCtrls.TPopupBox.Text property cannot be &quot;any string&quot;, but instead must be just one of the strings in the FMX.ExtCtrls.TPopupBox.Items property and, in this case, FMX.ExtCtrls.TPopupBox.ItemIndex is updated accordingly.</summary></devnotes></property>
      <property name="DefaultTextSettings" visibility="public" read="GetDefaultTextSettings" type="TTextSettings" file="FMX.Controls.pas" line="1354"><devnotes><summary>
Stores a TTextSettings type object keeping the default values of the text representation properties.
DefaultTextSettings is set during the loading of the style in the ApplyStyle method. 
DefaultTextSettings is initialized in Create with the following values: 

Font.Size := 11 ;          // depends on the platform     
Font.Family = 'Tahoma';    // depends on the platform
Font.Style := [] ;
FontColor := TAlphaColorRec.Black;
TextAlign := TTextAlign.Leading;
VertTextAlign := TTextAlign.Center;
Trimming := TTextTrimming.None;
WordWrap := False;
</summary></devnotes></property>
      <property name="TextSettings" visibility="public" read="GetTextSettings" write="SetTextSettings" type="TTextSettings" file="FMX.Controls.pas" line="1355"><devnotes><summary>
Keeps the values of styled text representation properties that are set in the Object Inspector or programmatically.
TextSettings references a TTextSettings type object that handles values of styled text representation properties that are set in the Object Inspector or programmatically. TextSettings references a TTextSettings type object, which handles  styled text representation properties to be used for drawing texts in this control. 
TTextSettings type objects provide all styled text representation properties and methods to manage them.
The styled text representation properties are 
FontColor, TextAlign,
VertTextAlign,
Trimming, WordWrap, and Font (TFont.Family, TFont.Size, and TFont.Style).
TTextSettings objects provide both styled text representation properties, whose values are loaded from a style (specified in StyledSettings), so all other styled text representation properties, whose values can be set manually, and methods to manage these text representation properties. The text representation properties identified in StyledSettings are loaded from the style and cannot be set manually. 
Remember that the HorzAlign and VertAlign text representation properties stored in the TextSettings property of a control correspond to the TextAlign and 
VertTextAlign properties of the control.
</summary></devnotes></property>
      <property name="StyledSettings" visibility="public" read="GetStyledSettings" write="SetStyledSettings" stored="StyledSettingsStored" type="TStyledSettings" file="FMX.Controls.pas" line="1356"><devnotes><summary>
Defines the set of styled text representation properties whose values are loaded from the current style and cannot be changed manually. 
Text representation properties are used as parameters for drawing texts in controls.
The StyledSettings property is used in FMX controls such as TButton, TSpeedButton, TCheckBox, and others.
Styles, for example Metropolis UI styles, define the default values of the text representation properties like font name, font size, word-wrapping, and others.
The TTextSettings class define properties keeping values of the FontColor, TextAlign, VertTextAlign, Trimming,  WordWrap, and Font (TFont.Family, TFont.Size, TFont.Style) elements defining visual parameters of a text representation.
StyledSettings can contain the Family, Size, Style, FontColor, and 
Other values defined in TStyledSetting. The &quot;Relation between TStyledSetting constants and TTextSettings properties&quot; table shows which of the  TStyledSetting constants control the handling of these TTextSettings text representation properties.
Keep in mind that the values of all styled text representation properties listed in the StyledSettings are taken from a style and cannot be changed manually. For example, if you set a new value of the FontColor property of a TTextControl control, then the real updating of the font color takes place only if the StyledSettings property of this control does not contain TStyledSetting.FontColor. For more details, see the example in Setting Text Parameters in FireMonkey.
To switch OFF a font property for a control, select the control in the Form Designer. In the Object Inspector, expand the StyledSettings property. Clear the check mark before the property. For example, the following figure shows a TButton control with Size turned OFF (for Button1) and ON (for Button2):

With StyledSettings you can also use the DefaultStyledSettings constant that defines the values of the styled properties that are taken from a style by default.
Remember that the HorzAlign and VertAlign text representation properties stored in the TextSettings property of a control correspond to the TextAlign and 
VertTextAlign properties of the control.
</summary></devnotes></property>
      <property name="ResultingTextSettings" visibility="public" read="GetResultingTextSettings" type="TTextSettings" file="FMX.Controls.pas" line="1357"><devnotes><summary>
Keeps final values of text representation properties. These values are really used to draw texts in a control. 
ResultingTextSettings keeps a TTextSettings object that manages the final values of the text representation properties. These values are really used to draw texts in a control. 
To obtain values stored in ResultingTextSettings, a control uses the StyledSettings property. For example, if StyledSettings contains the TStyledSetting.Family value, then the TFont.Family value is taken from the DefaultTextSettings. (That is the font family name defined in the loaded style is used. The font family name defined by the programmer in the Object Editor is ignored.) Oppositely, if StyledSettings does not contain TStyledSetting.Family, then the font family name defined by the programmer in the Object Editor is used and the font family name defined in the loaded style is ignored.
The TTextSettings class define properties keeping values of the FontColor, TextAlign, VertTextAlign, Trimming,  WordWrap, and Font (TFont.Family, TFont.Size, TFont.Style) elements defining visual parameters of a text representation.
RecalculateTextSettings updates the ResultingTextSettings.
</summary></devnotes></property>
      <procedure name="Change" visibility="public" file="FMX.Controls.pas" line="1359">
      <devnotes><summary>
Calls DoChanged when any of the styled text representation properties of the current TTextControl control is changed.
Change is called when any of the Font, FontColor, VertTextAlign, Trimming or WordWrap properties is changed. 
If the control is not in a loading or destroying state (csLoading or csDestroying), Change calls DoChanged to update the representation of the text on the control.  
</summary></devnotes></procedure>
      <property name="Font" visibility="public" read="GetFont" write="SetFont" type="TFont" file="FMX.Controls.pas" line="1360"><devnotes><summary>
Specifies the font to use when rendering the text.
Set Font to specify the font to use when rendering the text. To change to a new font, specify a new TFont object. To modify a font, change the value of the Family, Size, or Style of the TFont object.
</summary></devnotes></property>
      <property name="FontColor" visibility="public" read="GetFontColor" write="SetFontColor" type="TAlphaColor" default="-16777216" file="FMX.Controls.pas" line="1361"><devnotes><summary>
Specifies the font color of the text in this TTextControl control.
Use the FontColor property to read or change the font color of the text in this TTextControl control. The default value of the FontColor property is TAlphaColorRec.Black.
</summary></devnotes></property>
      <property name="VertTextAlign" visibility="public" read="GetVertTextAlign" write="SetVertTextAlign" type="TTextAlign" default="0" file="FMX.Controls.pas" line="1362"><devnotes><summary>
Specifies how the text will be displayed in terms of vertical alignment.
The VertTextAlign property specifies how the TTextControl control displays the text in terms of vertical alignment. VertTextAlign can have one of the following values (defined in TTextAlign):

Center (default)--aligns the text on a vertical axis, at the middle of the TTextControl object.
Leading--aligns the text on a vertical axis, at the topmost position inside the TTextControl object.
Trailing--aligns the text on a vertical axis, at the bottommost position inside the TTextControl object.
When you use text representation properties stored in ITextSettings.TextSettings, remember that VertTextAlign corresponds to VertAlign.
</summary></devnotes></property>
      <property name="TextAlign" visibility="public" read="GetTextAlign" write="SetTextAlign" type="TTextAlign" default="1" file="FMX.Controls.pas" line="1363"><devnotes><summary>
Specifies how the text will be displayed in terms of horizontal alignment.
The TextAlign property specifies how the TTextControl object will display the text in terms of horizontal alignment. TextAlign can have one of the following values (defined in TTextAlign):

Center (default)--aligns the text on a horizontal axis, at the middle of the TTextControl object.
Leading--aligns the text on a horizontal axis, at the leftmost position inside the TTextControl object.
Trailing--aligns the text on a horizontal axis, at the rightmost position inside the TTextControl object.
When you use text representation properties stored in ITextSettings.TextSettings, remember that TextAlign corresponds to HorzAlign.
</summary></devnotes></property>
      <property name="WordWrap" visibility="public" read="GetWordWrap" write="SetWordWrap" type="Boolean" default="0" file="FMX.Controls.pas" line="1364"><devnotes><summary>
Specifies whether the text inside the TTextControl object wraps when it is longer than the width of the control.
Set WordWrap to True to allow the TTextControl control to display multiple lines of text. When WordWrap is True, text that is too long for the TTextControl object wraps at the right margin and continues in additional lines.
Set WordWrap to False for the text to span onto a single line of the TTextControl. However, in this case, the text that is too long for TTextControl appears truncated.
The default value for the WordWrap property is False.
</summary></devnotes></property>
      <property name="Trimming" visibility="public" read="GetTrimming" write="SetTrimming" type="TTextTrimming" default="0" file="FMX.Controls.pas" line="1365"><devnotes><summary>
Specifies the behavior of the text, when it overflows the area for drawing the text.
Trimming may take the following values defined in the TTextTrimming type: None, Character, and Word.
If the value of this property is not None and the text does not fit in the drawing area, then it is trimmed to fit the area and an ellipsis sign is printed after the trimmed text.

Note: Under the iOS platform, Trimming works only when WordWrap = False.</summary></devnotes></property>
      <property name="PrefixStyle" visibility="public" read="FPrefixStyle" write="SetPrefixStyle" type="TPrefixStyle" default="0" file="FMX.Controls.pas" line="1367">
        <devnotes><summary>
Determines whether the ampersand character (&amp;) is considered as a special prefix character.
The default value is TPrefixStyle.HidePrefix, which means that the (first) ampersand is hidden at run-time.
</summary></devnotes>
      </property>
    </members>
  <devnotes><summary>
Base class for all text controls such as TDateEdit.
TTextControl is the base class for all graphical controls that display text, such as TTimeEdit, TListBoxItem, TTabItem, and so on.
TTextControl encapsulates standard functionality to manipulate the displayed text, offering the possibility of changing the font, the alignment of the text, or enabling word wrapping.
If you need to create a new control from scratch that displays text (for instance, an enhanced label graphical control or a custom redesigned check box control), then you should derive your component from TTextControl.
TTextControl implements the ITextSettings interface. This interface provides methods and properties to manage the most common text representation properties of general text objects independently of the particular types of these objects. TTextControl and its descendants contain the public property TextSettings of the TTextSettings type. Using the methods and the properties declared in the ITextSettings interface, you can manage the text representation TFont.Family, TFont.Size, TFont.Style, FontColor, HorzAlign, VertAlign, Trimming, and WordWrap properties defining visual parameters of the text representation. For more information, see Setting Text Parameters in FireMonkey.
TTextControl uses the TTextSettingsInfo service class to manage sets of styled text representation properties stored in the DefaultTextSettings, TextSettings, StyledSettings, and ResultingTextSettings properties.
TTextControl implements the IAcceleratorKeyReceiver interface to allow the use of this control as an accelerator key receiver.
</summary></devnotes></class>
  <class name="TContent" file="FMX.Controls.pas" line="1372">
    
    <interfaces>
      <implements name="IContent"/>
    </interfaces>
    <members>
      <field name="FParentAligning" type="Boolean" visibility="private" size="1" offset="904" file="FMX.Controls.pas" line="1374"/>
      <function name="GetTabStopController" visibility="protected" procflags="override" file="FMX.Controls.pas" line="1376">
        <parameters>
          <retval type="ITabStopController"/>
        </parameters>
      </function>
      <procedure name="DoRealign" visibility="protected" procflags="override" file="FMX.Controls.pas" line="1377">
      </procedure>
      <procedure name="ContentChanged" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="1379">
      </procedure>
      <constructor name="Create" visibility="public" file="FMX.Controls.pas" line="1381">
        <parameters>
          <parameter name="AOwner" type="TComponent"/>
        </parameters>
      </constructor>
      <function name="GetTabListClass" visibility="public" procflags="override" file="FMX.Controls.pas" line="1382">
        <parameters>
          <retval type="TTabListClass"/>
        </parameters>
      </function>
      <property name="Align" visibility="published" read="FAlign" write="SetAlign" type="TAlignLayout" default="0" hoisted="true" file="FMX.Controls.pas" line="1384"/>
      <property name="ClipChildren" visibility="published" read="FClipChildren" write="SetClipChildren" type="Boolean" default="0" hoisted="true" file="FMX.Controls.pas" line="1385"/>
      <property name="ClipParent" visibility="published" read="FClipParent" write="FClipParent" type="Boolean" default="0" hoisted="true" file="FMX.Controls.pas" line="1386"/>
      <property name="Cursor" visibility="published" read="GetCursor" write="SetCursor" type="TCursor" default="0" hoisted="true" file="FMX.Controls.pas" line="1387"/>
      <property name="DragMode" visibility="published" read="GetDragMode" write="SetDragMode" type="TDragMode" default="0" hoisted="true" file="FMX.Controls.pas" line="1388"/>
      <property name="EnableDragHighlight" visibility="published" read="FEnableDragHighlight" write="FEnableDragHighlight" type="Boolean" default="1" hoisted="true" file="FMX.Controls.pas" line="1389"/>
      <property name="Enabled" visibility="published" read="FEnabled" write="SetEnabled" stored="EnabledStored" type="Boolean" hoisted="true" file="FMX.Controls.pas" line="1390"/>
      <property name="Locked" visibility="published" read="FLocked" write="SetLocked" type="Boolean" default="0" hoisted="true" file="FMX.Controls.pas" line="1391"/>
      <property name="Height" visibility="published" read="GetHeight" write="SetHeight" stored="False" type="Single" hoisted="true" file="FMX.Controls.pas" line="1392"/>
      <property name="HitTest" visibility="published" read="FHitTest" write="SetHitTest" type="Boolean" default="1" hoisted="true" file="FMX.Controls.pas" line="1393"/>
      <property name="Padding" visibility="published" read="GetPadding" write="SetPadding" type="TBounds" hoisted="true" file="FMX.Controls.pas" line="1394"/>
      <property name="Opacity" visibility="published" read="FOpacity" write="SetOpacity" stored="IsOpacityStored" type="Single" hoisted="true" file="FMX.Controls.pas" line="1395"/>
      <property name="Margins" visibility="published" read="GetMargins" write="SetMargins" type="TBounds" hoisted="true" file="FMX.Controls.pas" line="1396"/>
      <property name="PopupMenu" visibility="published" read="FPopupMenu" write="SetPopupMenu" stored="IsPopupMenuStored" type="TCustomPopupMenu" hoisted="true" file="FMX.Controls.pas" line="1397"/>
      <property name="Position" visibility="published" read="FPosition" write="SetPosition" stored="IsPositionStored" type="TPosition" hoisted="true" file="FMX.Controls.pas" line="1398"/>
      <property name="RotationAngle" visibility="published" read="GetRotationAngle" write="SetRotationAngle" type="Single" default="0" hoisted="true" file="FMX.Controls.pas" line="1399"/>
      <property name="RotationCenter" visibility="published" read="GetRotationCenter" write="SetRotationCenter" type="TPosition" hoisted="true" file="FMX.Controls.pas" line="1400"/>
      <property name="Scale" visibility="published" read="GetScale" write="SetScale" type="TPosition" hoisted="true" file="FMX.Controls.pas" line="1401"/>
      <property name="Visible" visibility="published" read="FVisible" write="SetVisible" stored="VisibleStored" type="Boolean" default="1" hoisted="true" file="FMX.Controls.pas" line="1402"/>
      <property name="Width" visibility="published" read="GetWidth" write="SetWidth" stored="False" type="Single" hoisted="true" file="FMX.Controls.pas" line="1403"/>
      <property name="Size" visibility="published" read="FSize" write="SetSize" stored="IsSizeStored" type="TControlSize" hoisted="true" file="FMX.Controls.pas" line="1404"/>
      <event name="OnDragEnter" visibility="published" read="FOnDragEnter" write="FOnDragEnter" type="TDragEnterEvent" hoisted="true" file="FMX.Controls.pas" line="1406"/>
      <event name="OnDragLeave" visibility="published" read="FOnDragLeave" write="FOnDragLeave" type="TNotifyEvent" hoisted="true" file="FMX.Controls.pas" line="1407"/>
      <event name="OnDragOver" visibility="published" read="FOnDragOver" write="FOnDragOver" type="TDragOverEvent" hoisted="true" file="FMX.Controls.pas" line="1408"/>
      <event name="OnDragDrop" visibility="published" read="FOnDragDrop" write="FOnDragDrop" type="TDragDropEvent" hoisted="true" file="FMX.Controls.pas" line="1409"/>
      <event name="OnDragEnd" visibility="published" read="FOnDragEnd" write="FOnDragEnd" type="TNotifyEvent" hoisted="true" file="FMX.Controls.pas" line="1410"/>
      <event name="OnKeyDown" visibility="published" read="FOnKeyDown" write="FOnKeyDown" type="TKeyEvent" hoisted="true" file="FMX.Controls.pas" line="1412"/>
      <event name="OnKeyUp" visibility="published" read="FOnKeyUp" write="FOnKeyUp" type="TKeyEvent" hoisted="true" file="FMX.Controls.pas" line="1413"/>
      <event name="OnCanFocus" visibility="published" read="FOnCanFocus" write="FOnCanFocus" type="TCanFocusEvent" hoisted="true" file="FMX.Controls.pas" line="1415"/>
      <event name="OnClick" visibility="published" read="FOnClick" write="SetOnClick" stored="OnClickStored" type="TNotifyEvent" hoisted="true" file="FMX.Controls.pas" line="1416"/>
      <event name="OnDblClick" visibility="published" read="FOnDblClick" write="FOnDblClick" type="TNotifyEvent" hoisted="true" file="FMX.Controls.pas" line="1417"/>
      <event name="OnEnter" visibility="published" read="FOnEnter" write="FOnEnter" type="TNotifyEvent" hoisted="true" file="FMX.Controls.pas" line="1419"/>
      <event name="OnExit" visibility="published" read="FOnExit" write="FOnExit" type="TNotifyEvent" hoisted="true" file="FMX.Controls.pas" line="1420"/>
      <event name="OnMouseDown" visibility="published" read="FOnMouseDown" write="FOnMouseDown" type="TMouseEvent" hoisted="true" file="FMX.Controls.pas" line="1421"/>
      <event name="OnMouseMove" visibility="published" read="FOnMouseMove" write="FOnMouseMove" type="TMouseMoveEvent" hoisted="true" file="FMX.Controls.pas" line="1422"/>
      <event name="OnMouseUp" visibility="published" read="FOnMouseUp" write="FOnMouseUp" type="TMouseEvent" hoisted="true" file="FMX.Controls.pas" line="1423"/>
      <event name="OnMouseWheel" visibility="published" read="FOnMouseWheel" write="FOnMouseWheel" type="TMouseWheelEvent" hoisted="true" file="FMX.Controls.pas" line="1424"/>
      <event name="OnMouseEnter" visibility="published" read="FOnMouseEnter" write="FOnMouseEnter" type="TNotifyEvent" hoisted="true" file="FMX.Controls.pas" line="1425"/>
      <event name="OnMouseLeave" visibility="published" read="FOnMouseLeave" write="FOnMouseLeave" type="TNotifyEvent" hoisted="true" file="FMX.Controls.pas" line="1426"/>
      <event name="OnPainting" visibility="published" read="FOnPainting" write="FOnPainting" type="TOnPaintEvent" hoisted="true" file="FMX.Controls.pas" line="1428"/>
      <event name="OnPaint" visibility="published" read="FOnPaint" write="FOnPaint" type="TOnPaintEvent" hoisted="true" file="FMX.Controls.pas" line="1429"/>
      <event name="OnResize" visibility="published" read="FOnResize" write="FOnResize" type="TNotifyEvent" hoisted="true" file="FMX.Controls.pas" line="1430"/>
      <event name="OnResized" visibility="published" read="FOnResized" write="FOnResized" type="TNotifyEvent" hoisted="true" file="FMX.Controls.pas" line="1431"/>
    </members>
  </class>
  <enum name="TPlacement" file="FMX.Controls.pas" line="1436">
    <element value="0" name="Bottom" file="FMX.Controls.pas" line="1436"/>
    <element value="1" name="Top" file="FMX.Controls.pas" line="1436"/>
    <element value="2" name="Left" file="FMX.Controls.pas" line="1436"/>
    <element value="3" name="Right" file="FMX.Controls.pas" line="1436"/>
    <element value="4" name="Center" file="FMX.Controls.pas" line="1436"/>
    <element value="5" name="BottomCenter" file="FMX.Controls.pas" line="1436"/>
    <element value="6" name="TopCenter" file="FMX.Controls.pas" line="1436"/>
    <element value="7" name="LeftCenter" file="FMX.Controls.pas" line="1436"/>
    <element value="8" name="RightCenter" file="FMX.Controls.pas" line="1436"/>
    <element value="9" name="Absolute" file="FMX.Controls.pas" line="1436"/>
    <element value="10" name="Mouse" file="FMX.Controls.pas" line="1436"/>
    <element value="11" name="MouseCenter" file="FMX.Controls.pas" line="1436"/>
  </enum>
  <class name="TPopup" file="FMX.Controls.pas" line="1438">
    
    <members>
      <field name="FSaveParent" type="TFmxObject" visibility="private" size="4" offset="944" file="FMX.Controls.pas" line="1440">
        <attributes>
          <attribute name="TObject"/>
        </attributes>
      </field>
      <field name="FSaveScale" type="TPointF" visibility="private" size="8" offset="948" file="FMX.Controls.pas" line="1441"/>
      <field name="FPopupForm" type="TFmxObject" visibility="private" size="4" offset="956" file="FMX.Controls.pas" line="1442"/>
      <field name="FIsOpen" type="Boolean" visibility="private" size="1" offset="960" file="FMX.Controls.pas" line="1443"/>
      <field name="FStaysOpen" type="Boolean" visibility="private" size="1" offset="961" file="FMX.Controls.pas" line="1444"/>
      <field name="FPlacement" type="TPlacement" visibility="private" size="1" offset="962" file="FMX.Controls.pas" line="1445"/>
      <field name="FPlacementTarget" type="TControl" visibility="private" size="4" offset="964" file="FMX.Controls.pas" line="1446">
        <attributes>
          <attribute name="TObject"/>
        </attributes>
      </field>
      <field name="FPlacementRectangle" type="TBounds" visibility="private" size="4" offset="968" file="FMX.Controls.pas" line="1447"/>
      <field name="FHorizontalOffset" type="Single" visibility="private" size="4" offset="972" file="FMX.Controls.pas" line="1448"/>
      <field name="FVerticalOffset" type="Single" visibility="private" size="4" offset="976" file="FMX.Controls.pas" line="1449"/>
      <field name="FDragWithParent" type="Boolean" visibility="private" size="1" offset="980" file="FMX.Controls.pas" line="1450"/>
      <field name="FHideWhenPlacementTargetInvisible" type="Boolean" visibility="private" size="1" offset="981" file="FMX.Controls.pas" line="1451"/>
      <field name="FClosingAnimation" type="Boolean" visibility="private" size="1" offset="982" file="FMX.Controls.pas" line="1452"/>
      <field name="FStyleBook" type="TStyleBook" visibility="private" size="4" offset="984" file="FMX.Controls.pas" line="1453"/>
      <field name="FModalResult" type="TModalResult" visibility="private" size="4" offset="988" file="FMX.Controls.pas" line="1454"/>
      <field name="FModal" type="Boolean" visibility="private" size="1" offset="992" file="FMX.Controls.pas" line="1455"/>
      <field name="FOnClosePopup" type="TNotifyEvent" visibility="private" size="8" offset="1000" file="FMX.Controls.pas" line="1456"/>
      <field name="FOnPopup" type="TNotifyEvent" visibility="private" size="8" offset="1008" file="FMX.Controls.pas" line="1457"/>
      <field name="FBorderWidth" type="Single" visibility="private" size="4" offset="1016" file="FMX.Controls.pas" line="1458"/>
      <field name="FAniDuration" type="Single" visibility="private" size="4" offset="1020" file="FMX.Controls.pas" line="1459"/>
      <field name="FPopupFormSize" type="TSizeF" visibility="private" size="8" offset="1024" file="FMX.Controls.pas" line="1460"/>
      <field name="FPreferedDisplayIndex" type="Integer" visibility="private" size="4" offset="1032" file="FMX.Controls.pas" line="1461"/>
      <field name="FOnAniTimer" type="TNotifyEvent" visibility="private" size="8" offset="1040" file="FMX.Controls.pas" line="1462"/>
      <procedure name="SetIsOpen" visibility="private" file="FMX.Controls.pas" line="1463">
        <parameters>
          <parameter name="Value" type="Boolean" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetPlacementRectangle" visibility="private" file="FMX.Controls.pas" line="1464">
        <parameters>
          <parameter name="Value" type="TBounds" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetModalResult" visibility="private" file="FMX.Controls.pas" line="1465">
        <parameters>
          <parameter name="Value" type="TModalResult" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetPlacementTarget" visibility="private" file="FMX.Controls.pas" line="1466">
        <parameters>
          <parameter name="Value" type="TControl" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetStyleBook" visibility="private" file="FMX.Controls.pas" line="1467">
        <parameters>
          <parameter name="Value" type="TStyleBook" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetPlacement" visibility="private" file="FMX.Controls.pas" line="1468">
        <parameters>
          <parameter name="Value" type="TPlacement" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetDragWithParent" visibility="private" file="FMX.Controls.pas" line="1469">
        <parameters>
          <parameter name="Value" type="Boolean" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetHideWhenPlacementTargetInvisible" visibility="private" file="FMX.Controls.pas" line="1470">
        <parameters>
          <parameter name="Value" type="Boolean" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetBorderWidth" visibility="private" file="FMX.Controls.pas" line="1471">
        <parameters>
          <parameter name="Value" type="Single" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="BeforeShowProc" visibility="private" file="FMX.Controls.pas" line="1472">
        <parameters>
          <parameter name="Sender" type="TObject"/>
        </parameters>
      </procedure>
      <procedure name="BeforeCloseProc" visibility="private" file="FMX.Controls.pas" line="1473">
        <parameters>
          <parameter name="Sender" type="TObject"/>
        </parameters>
      </procedure>
      <procedure name="CloseProc" visibility="private" file="FMX.Controls.pas" line="1474">
        <parameters>
          <parameter name="Sender" type="TObject"/>
          <parameter name="Action" type="TCloseAction" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="SetAniDuration" visibility="private" file="FMX.Controls.pas" line="1475">
        <parameters>
          <parameter name="Value" type="Single" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="ReadLeft" visibility="private" file="FMX.Controls.pas" line="1476">
        <parameters>
          <parameter name="Reader" type="TReader"/>
        </parameters>
      </procedure>
      <procedure name="ReadTop" visibility="private" file="FMX.Controls.pas" line="1477">
        <parameters>
          <parameter name="Reader" type="TReader"/>
        </parameters>
      </procedure>
      <procedure name="SetPopupFormSize" visibility="private" file="FMX.Controls.pas" line="1478">
        <parameters>
          <parameter name="Value" type="TSizeF" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="UpdatePopupSize" visibility="private" file="FMX.Controls.pas" line="1479">
      </procedure>
      <procedure name="SetOnAniTimer" visibility="private" file="FMX.Controls.pas" line="1480">
        <parameters>
          <parameter name="Value" type="TNotifyEvent" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="ApplyStyle" visibility="protected" procflags="override" file="FMX.Controls.pas" line="1482">
      <devnotes><summary>
Customizes styles in complex objects.
FMX.Controls.TPopup.ApplyStyle inherits from FMX.Controls.TStyledControl.ApplyStyle. All content below this line refers to FMX.Controls.TStyledControl.ApplyStyle.
Customizes styles in complex objects.
TStyledControl descendants override it to apply styles in concordance with their primitive components.      
Do not call ApplyStyle explicitly in an application. It is called by the ApplyStyleLookup method when object styles are updated.
For an example of an ApplyStyle implementation, see &quot;TCalloutPanel:Style Contracts&quot; in FireMonkey Component Design.
</summary></devnotes></procedure>
      <procedure name="Paint" visibility="protected" procflags="override" file="FMX.Controls.pas" line="1483">
      <devnotes><summary>
Renders the control's surface. 
FMX.Controls.TPopup.Paint inherits from FMX.Controls.TControl.Paint. All content below this line refers to FMX.Controls.TControl.Paint.
Renders the control's surface. 
The Paint method is called by DoPaint when a control is being painted by the PaintTo method. Before DoPaint, Painting is called. AfterPaint is called immediately after. 
FireMonkey internally calls Paint to paint the control when the window is being painted. You must not call Paint explicitly.
The base class TControl implements an empty Paint. The descendants of TControl override Paint to provide specific rendering of the respective controls.
For example, Paint methods in classes of the FMX.Objects unit draw and fill shapes using the properties defined in these classes. See the descriptions of these classes to find the properties of the respective shapes. 
</summary></devnotes></procedure>
      <procedure name="Notification" visibility="protected" procflags="override" file="FMX.Controls.pas" line="1484">
        <parameters>
          <parameter name="AComponent" type="TComponent"/>
          <parameter name="Operation" type="TOperation"/>
        </parameters>
      <devnotes><summary>






Forwards notification messages to all owned components.
FMX.Controls.TPopup.Notification inherits from System.Classes.TComponent.Notification. All content below this line refers to System.Classes.TComponent.Notification.
Forwards notification messages to all owned components.
Do not call the Notification method in an application. Notification is called automatically when the component specified by AComponent is about to be inserted or removed, as specified by Operation. By default, components pass along the notification to their owned components, if any.
A component can, if needed, act on the notification that a component is being inserted or removed. For example, if a component has object fields or properties that contain references to other components, it can check the notifications of component removals and invalidate those references as needed.

Note: Notification is not called for components that are freed implicitly (because their Owner is freed).</summary></devnotes></procedure>
      <procedure name="DefineProperties" visibility="protected" procflags="override" file="FMX.Controls.pas" line="1485">
        <parameters>
          <parameter name="Filer" type="TFiler"/>
        </parameters>
      <devnotes><summary>




Designates methods for storing an object's unpublished data on a stream such as a form file.
FMX.Controls.TPopup.DefineProperties inherits from System.Classes.TComponent.DefineProperties. All content below this line refers to System.Classes.TComponent.DefineProperties.
Designates methods for storing an object's unpublished data on a stream such as a form file.
TComponent overrides the DefineProperties method defined in TPersistent to define &quot;fake&quot; Top and Left properties. These are defined so that components that are not controls can be manipulated at design time. However, the Top and Left properties are hidden, that is, they are not published, because only controls appear at run time.
DefineProperties is virtual; descendent classes can override it. When overriding DefineProperties, be aware that the Ancestor property of Filer might be set, and that this property can determine whether or not it is appropriate to write properties.
DefineProperties is called automatically as part of the component streaming system; do not call it directly.
</summary></devnotes></procedure>
      <procedure name="DialogKey" visibility="protected" procflags="override" file="FMX.Controls.pas" line="1486">
        <parameters>
          <parameter name="Key" type="Word" paramflags="var"/>
          <parameter name="Shift" type="TShiftState"/>
        </parameters>
      <devnotes><summary>
Processes a dialog key. 
DialogKey is called during the message preprocessing to handle dialog characters. 
Do not call DialogKey in an application. It is for internal use only.
</summary></devnotes></procedure>
      <procedure name="DoClosePopup" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="1487">
      <devnotes><summary>
Dispatcher of the OnClosePopup event.

</summary></devnotes></procedure>
      <procedure name="DoPopup" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="1488">
      <devnotes><summary>
Dispatcher of the OnPopup event.
</summary></devnotes></procedure>
      <procedure name="ClosePopup" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="1489">
      <devnotes><summary>
Closes the current TPopup. 

Note: We do not recommend using Popup and ClosePopup. To open and explicitly close a TPopup, set the TPopup.IsOpen property to True and False, respectively.
Call ClosePopup to explicitly close a TPopup. If there is more than one pop-ups opened, ClosePopup closes only the specified instance.
To take specific action when TPopup closes, write an OnClosePopup event handler.
</summary></devnotes></procedure>
      <function name="CreatePopupForm" visibility="protected" procflags="virtual" file="FMX.Controls.pas" line="1490">
        <parameters>
          <retval type="TFmxObject"/>
        </parameters>
      <devnotes><summary>
For internal use.
Creates a new TCustomPopupForm pop-up form.
This pop-up form is stored in the PopupForm property. Popup calls CreatePopupForm.
</summary></devnotes></function>
      <property name="PopupForm" visibility="protected" read="FPopupForm" type="TFmxObject" file="FMX.Controls.pas" line="1491"><devnotes><summary>
Holds the form that appears on the screen after the Popup method execution. 
The value of the PopupForm property is nil if the form does not exist.
</summary></devnotes></property>
      <function name="VisibleStored" visibility="protected" procflags="override" file="FMX.Controls.pas" line="1492">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Specifies whether TPopup has an associated action. 
The VisibleStored method returns True if TPopup has an associated action (if the ActionClient property is True). This method returns False otherwise.
</summary></devnotes></function>
      <constructor name="Create" visibility="public" file="FMX.Controls.pas" line="1494">
        <parameters>
          <parameter name="AOwner" type="TComponent"/>
        </parameters>
      <devnotes><summary>
Creates and initializes a TPopup instance.
Create constructs a TPopup object and initializes its data before the object is used. 
</summary></devnotes></constructor>
      <destructor name="Destroy" visibility="public" file="FMX.Controls.pas" line="1495">
        <parameters>
        </parameters>
      <devnotes><summary>
Destroys the TPopup instance.
Do not call Destroy directly in an application. Call Free instead. Free verifies that the TPopup object is not nil before calling Destroy.
</summary></devnotes></destructor>
      <procedure name="Popup" visibility="public" procflags="virtual" file="FMX.Controls.pas" line="1496">
        <parameters>
          <parameter name="AShowModal" type="Boolean" paramflags="const">
            <value>
              False
            </value>
          </parameter>
        </parameters>
      <devnotes><summary>
Displays the TPopup window. 

Note: We do not recommend using Popup and ClosePopup. To open and explicitly close a TPopup, set the TPopup.IsOpen property to True and False, respectively.
When AShowModal is True, then Popup drops down TPopup as a modal dialog. 
Popup applies the specified placement and style to TPopup, before making it visible.
To set the placement, use the PlacementRectangle, PlacementTarget, HorizontalOffset, VerticalOffset, and Placement properties.
</summary></devnotes></procedure>
      <function name="PopupModal" visibility="public" procflags="virtual" file="FMX.Controls.pas" line="1497">
        <parameters>
          <retval type="TModalResult"/>
        </parameters>
      <devnotes><summary>
Returns whether and how the modal form of TPopup closes. 
PopupModal returns 0 if the modal form is not closed. Otherwise PopupModal returns the value of the ModalResult property.
To change how the modal form of TPopup is closed, set the ModalResult property.
You can check a return value using the global IsAbortResult, IsAnAllResult, IsNegativeResult, or IsPositiveResult functions and use the  StripAllFromResult function to convert the return value from a constant that refers to &quot;all&quot; to the corresponding simple constant. 
</summary></devnotes></function>
      <function name="HasPopupForm" visibility="public" file="FMX.Controls.pas" line="1498">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Returns whether the PopupForm property holds a pop-up form. 
HasPopupForm returns True if PopupForm holds the pop-up form that appears on the screen after the Popup method execution. 
</summary></devnotes></function>
      <procedure name="BringToFront" visibility="public" procflags="override" file="FMX.Controls.pas" line="1499">
      <devnotes><summary>
Brings this FMX visual object on top of other overlapping visual controls that are on the same form.
FMX.Controls.TPopup.BringToFront inherits from FMX.Types.TFmxObject.BringToFront. All content below this line refers to FMX.Types.TFmxObject.BringToFront.
Brings this FMX visual object on top of other overlapping visual controls that are on the same form.
You can call BringToFront at run time as in the following code snippet:

  Label1.BringToFront;

or, at design time, by right-clicking the FMX visual control and selecting Control &gt; Bring to Front from the pop-up menu.
</summary></devnotes></procedure>
      <property name="AniDuration" visibility="public" read="FAniDuration" write="SetAniDuration" type="Single" default="0" file="FMX.Controls.pas" line="1500"><devnotes><summary>
Sets the animation duration during appearing or closing of the pop-up window.
AniDuration defines time (in seconds) of a custom animation execution. The OnAniTimer event is periodically triggered during the AniDuration time after the pop-up window starts appearing or closing. During the AniDuration time, the AniPosition property changes from 0 to 1 (during opening) and from 1 to 0 (during closing) respectively. The OnAniTimer event handler contains the code that is performed during animation. 

Note: AniDuration does not influence on a duration of an external animation (for example TFloatAnimation animation) if such is assigned to the TPopup pop-up window.</summary></devnotes></property>
      <property name="BorderWidth" visibility="public" read="FBorderWidth" write="SetBorderWidth" type="Single" default="0" file="FMX.Controls.pas" line="1501"><devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></property>
      <property name="ModalResult" visibility="public" read="FModalResult" write="SetModalResult" type="TModalResult" file="FMX.Controls.pas" line="1502"><devnotes><summary>
Determines whether and how the TPopup closes its modal form. 
TModalResult describes possible values of ModalResult.
You can check a ModalResult value  using the global IsAbortResult, IsAnAllResult, IsNegativeResult, or IsPositiveResult functions and use the  StripAllFromResult function to convert the ModalResult value from a constant that refers to &quot;all&quot; to the corresponding simple constant. 
</summary></devnotes></property>
      <property name="IsOpen" visibility="public" read="FIsOpen" write="SetIsOpen" type="Boolean" file="FMX.Controls.pas" line="1503"><devnotes><summary>
Is True if the TPopup is dropped down, False otherwise.
</summary></devnotes></property>
      <property name="ClosingAnimation" visibility="public" read="FClosingAnimation" type="Boolean" file="FMX.Controls.pas" line="1504"><devnotes><summary>
Is True if the TPopup has a closing animation, False otherwise.
</summary></devnotes></property>
      <property name="PopupFormSize" visibility="public" read="FPopupFormSize" write="SetPopupFormSize" type="TSizeF" file="FMX.Controls.pas" line="1505"><devnotes><summary>
Sets the size of the TPopup through a TSizeF object.
For example, the following code will set up the TPopup Width to 200 and Height to 250: 
Delphi:

  p1.PopupFormSize := TSizeF.Create(200, 250);

C++ Builder:

  p1-&gt;PopupFormSize = TSizeF-&gt;Create(200, 250);


</summary></devnotes></property>
      <property name="PreferedDisplayIndex" visibility="public" read="FPreferedDisplayIndex" write="FPreferedDisplayIndex" type="Integer" file="FMX.Controls.pas" line="1506"><devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></property>
      <event name="OnAniTimer" visibility="public" read="FOnAniTimer" write="SetOnAniTimer" type="TNotifyEvent" file="FMX.Controls.pas" line="1509">
        <devnotes><summary>
Periodically occurs during TCustomPopupForm custom animation execution.
The OnAniTimer event periodically occurs during  AniDuration time while a custom animation executes during appearing and closing of the current TPopup pop-up window.
Write an OnAniTimer event handler to provide animation functionality during appearing and closing of the current pop-up window. AniDuration defines the animation duration in seconds. 
To show a TPopup window you can set the IsOpen property to True or call the Popup method. Rendering the TPopup window, the owner form calls CreatePopupForm to create an instance of a TCustomPopupForm pop-up form stored in the PopupForm property. Notice that all visual components placed in the TPopup window are contained in the ContentControl created in the PopupForm pop-up form. 
The OnAniTimer event handler has the type TNotifyEvent declared as follows:

 TNotifyEvent = procedure(Sender: TObject) of object;

Therefore, the Sender parameter, in the following example, can be cast to TCustomPopupForm. See how this is used in the AniTimeProc event handler of the OnAniTimer event in the following example implementing animation of appearing and closing of the TPopup window:

type
  TForm1 = class(TForm)
    Button1: TButton;
    Popup1: TPopup;
    Button2: TButton;
    Rectangle1: TRectangle;
    procedure FormCreate(Sender: TObject);
  public
    T: TDateTime;
    procedure AniTimeProc(Sender: TObject);
  end;

var
  Form1: TForm1;

implementation

procedure TForm1.AniTimeProc(Sender: TObject);
begin
  Button1.Text := FloatToStr(RoundTo((Now - T) * 86400{SecPerDay}, -2));
  TCustomPopupForm(Sender).ContentControl.Opacity := TCustomPopupForm(Sender).AniPosition;
  TCustomPopupForm(Sender).Left := Self.Left + Round(100 * TCustomPopupForm(Sender).AniPosition);
end;

procedure TForm1.Button2Click(Sender: TObject);
begin
  T := Now;
  Popup1.Popup;
end;

procedure TForm1.FormCreate(Sender: TObject);
begin
  Popup1.AniDuration := 4;
  Popup1.OnAniTimer := AniTimeProc;
end;

end.

Notice that OnAniTimer can use AniPosition and other properties of TCustomPopupForm.
</summary></devnotes>
      </event>
      <property name="Align" visibility="published" read="FAlign" write="SetAlign" type="TAlignLayout" default="0" hoisted="true" file="FMX.Controls.pas" line="1511"/>
      <property name="ClipChildren" visibility="published" read="FClipChildren" write="SetClipChildren" type="Boolean" default="0" hoisted="true" file="FMX.Controls.pas" line="1512"/>
      <property name="ClipParent" visibility="published" read="FClipParent" write="FClipParent" type="Boolean" default="0" hoisted="true" file="FMX.Controls.pas" line="1513"/>
      <property name="Cursor" visibility="published" read="GetCursor" write="SetCursor" type="TCursor" default="0" hoisted="true" file="FMX.Controls.pas" line="1514"/>
      <property name="DragMode" visibility="published" read="GetDragMode" write="SetDragMode" type="TDragMode" default="0" hoisted="true" file="FMX.Controls.pas" line="1515"/>
      <property name="DragWithParent" visibility="published" read="FDragWithParent" write="SetDragWithParent" type="Boolean" default="0" file="FMX.Controls.pas" line="1516"><devnotes><summary>
Specifies whether the TPopup is dragged together with its parent.
If DragWithParent is set to True, TPopup is dragged too, when its parent is the target of a drag-and-drop operation. The default value is False. 
For example, the TPopup of a combo box is dragged with its parent.
</summary></devnotes></property>
      <property name="HideWhenPlacementTargetInvisible" visibility="published" read="FHideWhenPlacementTargetInvisible" write="SetHideWhenPlacementTargetInvisible" type="Boolean" default="1" file="FMX.Controls.pas" line="1519">
        <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes>
      </property>
      <property name="EnableDragHighlight" visibility="published" read="FEnableDragHighlight" write="FEnableDragHighlight" type="Boolean" default="1" hoisted="true" file="FMX.Controls.pas" line="1520"/>
      <property name="Enabled" visibility="published" read="FEnabled" write="SetEnabled" stored="EnabledStored" type="Boolean" hoisted="true" file="FMX.Controls.pas" line="1521"/>
      <property name="Locked" visibility="published" read="FLocked" write="SetLocked" type="Boolean" default="0" hoisted="true" file="FMX.Controls.pas" line="1522"/>
      <property name="Height" visibility="published" read="GetHeight" write="SetHeight" stored="False" type="Single" hoisted="true" file="FMX.Controls.pas" line="1523"/>
      <property name="HelpContext" visibility="published" read="FHelpContext" write="SetHelpContext" stored="IsHelpContextStored" type="THelpContext" default="0" hoisted="true" file="FMX.Controls.pas" line="1524"/>
      <property name="HelpKeyword" visibility="published" read="FHelpKeyword" write="SetHelpKeyword" stored="IsHelpContextStored" type="string" default="0" hoisted="true" file="FMX.Controls.pas" line="1525"/>
      <property name="HelpType" visibility="published" read="FHelpType" write="FHelpType" type="THelpType" default="1" hoisted="true" file="FMX.Controls.pas" line="1526"/>
      <property name="HitTest" visibility="published" read="FHitTest" write="SetHitTest" type="Boolean" default="1" hoisted="true" file="FMX.Controls.pas" line="1527"/>
      <property name="HorizontalOffset" visibility="published" read="FHorizontalOffset" write="FHorizontalOffset" type="Single" default="0" file="FMX.Controls.pas" line="1528"><devnotes><summary>
Sets and gets the horizontal distance between the target origin and the TPopup alignment point. 
To set the target origin and the alignment point, use the PlacementTarget, Placement, and PlacementRectangle properties. 
HorizontalOffset has no effect if Placement has one of the values: Absolute, Mouse, MouseCenter.
</summary></devnotes></property>
      <property name="Padding" visibility="published" read="GetPadding" write="SetPadding" type="TBounds" hoisted="true" file="FMX.Controls.pas" line="1529"/>
      <property name="Opacity" visibility="published" read="FOpacity" write="SetOpacity" stored="IsOpacityStored" type="Single" hoisted="true" file="FMX.Controls.pas" line="1530"/>
      <property name="Margins" visibility="published" read="GetMargins" write="SetMargins" type="TBounds" hoisted="true" file="FMX.Controls.pas" line="1531"/>
      <property name="Placement" visibility="published" read="FPlacement" write="SetPlacement" type="TPlacement" default="0" file="FMX.Controls.pas" line="1532"><devnotes><summary>
Determines how to position the TPopup form  relative to a rectangle specified by the PlacementRectangle or PlacementTarget properties, relative to the screen, or relative to the mouse (pointing device) position.
Placement also specifies the behavior of the TPopup form, when it overlaps screen boundaries. The default value is Bottom.
TPlacement determines possible values of Placement.
Use Placement, PlacementTarget, and PlacementRectangle to set the target origin and the alignment point of TPopup. 
</summary></devnotes></property>
      <property name="PlacementRectangle" visibility="published" read="FPlacementRectangle" write="SetPlacementRectangle" type="TBounds" file="FMX.Controls.pas" line="1533"><devnotes><summary>
Gets or sets the rectangle element relative to which TPopup is positioned. 
Use Placement, PlacementTarget, and PlacementRectangle to set the target origin and the alignment point of TPopup. 
This is an example of a TPopup with PlacementRectangle:

</summary></devnotes></property>
      <property name="PlacementTarget" visibility="published" read="FPlacementTarget" write="SetPlacementTarget" type="TControl" file="FMX.Controls.pas" line="1534"><devnotes><summary>
Gets or sets the target relative to which TPopup is positioned. 
If PlacementTarget is not set, and TPopup has a parent, TPopup is positioned relative to its parent. If PlacementTarget and Parent are not set, TPopup is positioned relative to the main window. 
Use Placement, PlacementTarget, and PlacementRectangle to set the target origin and the alignment point of TPopup. 
</summary></devnotes></property>
      <property name="PopupMenu" visibility="published" read="FPopupMenu" write="SetPopupMenu" stored="IsPopupMenuStored" type="TCustomPopupMenu" hoisted="true" file="FMX.Controls.pas" line="1535"/>
      <property name="Position" visibility="published" read="FPosition" write="SetPosition" stored="IsPositionStored" type="TPosition" hoisted="true" file="FMX.Controls.pas" line="1536"/>
      <property name="RotationAngle" visibility="published" read="GetRotationAngle" write="SetRotationAngle" type="Single" default="0" hoisted="true" file="FMX.Controls.pas" line="1537"/>
      <property name="RotationCenter" visibility="published" read="GetRotationCenter" write="SetRotationCenter" type="TPosition" hoisted="true" file="FMX.Controls.pas" line="1538"/>
      <property name="Scale" visibility="published" read="GetScale" write="SetScale" type="TPosition" hoisted="true" file="FMX.Controls.pas" line="1539"/>
      <property name="Size" visibility="published" read="FSize" write="SetSize" stored="IsSizeStored" type="TControlSize" hoisted="true" file="FMX.Controls.pas" line="1540"/>
      <property name="StyleBook" visibility="published" read="FStyleBook" write="SetStyleBook" type="TStyleBook" file="FMX.Controls.pas" line="1541"><devnotes><summary>
Gets and sets the TPopup stored style.
To create a new style, use the Style Designer. See details here: Style Resource Storage.
</summary></devnotes></property>
      <property name="StyleLookup" visibility="published" read="FStyleLookup" write="SetStyleLookup" type="string" default="0" hoisted="true" file="FMX.Controls.pas" line="1542"/>
      <property name="TabOrder" visibility="published" read="GetTabOrder" write="SetTabOrder" type="TTabOrder" default="-1" hoisted="true" file="FMX.Controls.pas" line="1543"/>
      <property name="VerticalOffset" visibility="published" read="FVerticalOffset" write="FVerticalOffset" type="Single" default="0" file="FMX.Controls.pas" line="1544"><devnotes><summary>
Sets and gets the vertical distance between the target origin and the TPopup alignment point.
To set the target origin and the alignment point, use the PlacementTarget, Placement, and PlacementRectangle properties. 
VerticalOffset has no effect if Placement has one of the values: Absolute, Mouse, MouseCenter.
</summary></devnotes></property>
      <property name="Visible" visibility="published" read="FVisible" write="SetVisible" stored="VisibleStored" type="Boolean" default="1" hoisted="true" file="FMX.Controls.pas" line="1545"/>
      <property name="Width" visibility="published" read="GetWidth" write="SetWidth" stored="False" type="Single" hoisted="true" file="FMX.Controls.pas" line="1546"/>
      <event name="OnApplyStyleLookup" visibility="published" read="FOnApplyStyleLookup" write="FOnApplyStyleLookup" type="TNotifyEvent" hoisted="true" file="FMX.Controls.pas" line="1549"/>
      <event name="OnClosePopup" visibility="published" read="FOnClosePopup" write="FOnClosePopup" type="TNotifyEvent" file="FMX.Controls.pas" line="1550"><devnotes><summary>
Occurs when the TPopup object is closed. Write an OnClosePopup event handler to take specific action when the TPopup closes.
</summary></devnotes></event>
      <event name="OnPopup" visibility="published" read="FOnPopup" write="FOnPopup" type="TNotifyEvent" file="FMX.Controls.pas" line="1551"><devnotes><summary>
Occurs just before the pop-up window appears.
Write an OnPopup event handler to take specific action just before the pop-up window appears.
</summary></devnotes></event>
      <event name="OnDragEnter" visibility="published" read="FOnDragEnter" write="FOnDragEnter" type="TDragEnterEvent" hoisted="true" file="FMX.Controls.pas" line="1553"/>
      <event name="OnDragLeave" visibility="published" read="FOnDragLeave" write="FOnDragLeave" type="TNotifyEvent" hoisted="true" file="FMX.Controls.pas" line="1554"/>
      <event name="OnDragOver" visibility="published" read="FOnDragOver" write="FOnDragOver" type="TDragOverEvent" hoisted="true" file="FMX.Controls.pas" line="1555"/>
      <event name="OnDragDrop" visibility="published" read="FOnDragDrop" write="FOnDragDrop" type="TDragDropEvent" hoisted="true" file="FMX.Controls.pas" line="1556"/>
      <event name="OnDragEnd" visibility="published" read="FOnDragEnd" write="FOnDragEnd" type="TNotifyEvent" hoisted="true" file="FMX.Controls.pas" line="1557"/>
      <event name="OnKeyDown" visibility="published" read="FOnKeyDown" write="FOnKeyDown" type="TKeyEvent" hoisted="true" file="FMX.Controls.pas" line="1559"/>
      <event name="OnKeyUp" visibility="published" read="FOnKeyUp" write="FOnKeyUp" type="TKeyEvent" hoisted="true" file="FMX.Controls.pas" line="1560"/>
      <event name="OnCanFocus" visibility="published" read="FOnCanFocus" write="FOnCanFocus" type="TCanFocusEvent" hoisted="true" file="FMX.Controls.pas" line="1562"/>
      <event name="OnClick" visibility="published" read="FOnClick" write="SetOnClick" stored="OnClickStored" type="TNotifyEvent" hoisted="true" file="FMX.Controls.pas" line="1563"/>
      <event name="OnDblClick" visibility="published" read="FOnDblClick" write="FOnDblClick" type="TNotifyEvent" hoisted="true" file="FMX.Controls.pas" line="1564"/>
      <event name="OnEnter" visibility="published" read="FOnEnter" write="FOnEnter" type="TNotifyEvent" hoisted="true" file="FMX.Controls.pas" line="1566"/>
      <event name="OnExit" visibility="published" read="FOnExit" write="FOnExit" type="TNotifyEvent" hoisted="true" file="FMX.Controls.pas" line="1567"/>
      <event name="OnMouseDown" visibility="published" read="FOnMouseDown" write="FOnMouseDown" type="TMouseEvent" hoisted="true" file="FMX.Controls.pas" line="1568"/>
      <event name="OnMouseMove" visibility="published" read="FOnMouseMove" write="FOnMouseMove" type="TMouseMoveEvent" hoisted="true" file="FMX.Controls.pas" line="1569"/>
      <event name="OnMouseUp" visibility="published" read="FOnMouseUp" write="FOnMouseUp" type="TMouseEvent" hoisted="true" file="FMX.Controls.pas" line="1570"/>
      <event name="OnMouseWheel" visibility="published" read="FOnMouseWheel" write="FOnMouseWheel" type="TMouseWheelEvent" hoisted="true" file="FMX.Controls.pas" line="1571"/>
      <event name="OnMouseEnter" visibility="published" read="FOnMouseEnter" write="FOnMouseEnter" type="TNotifyEvent" hoisted="true" file="FMX.Controls.pas" line="1572"/>
      <event name="OnMouseLeave" visibility="published" read="FOnMouseLeave" write="FOnMouseLeave" type="TNotifyEvent" hoisted="true" file="FMX.Controls.pas" line="1573"/>
      <event name="OnPainting" visibility="published" read="FOnPainting" write="FOnPainting" type="TOnPaintEvent" hoisted="true" file="FMX.Controls.pas" line="1575"/>
      <event name="OnPaint" visibility="published" read="FOnPaint" write="FOnPaint" type="TOnPaintEvent" hoisted="true" file="FMX.Controls.pas" line="1576"/>
      <event name="OnResize" visibility="published" read="FOnResize" write="FOnResize" type="TNotifyEvent" hoisted="true" file="FMX.Controls.pas" line="1577"/>
      <event name="OnResized" visibility="published" read="FOnResized" write="FOnResized" type="TNotifyEvent" hoisted="true" file="FMX.Controls.pas" line="1578"/>
    </members>
  <devnotes><summary>
TPopup provides a pop-up window.
Use TPopup to display content in a temporary window.   
By default, a TPopup content is empty. You can add any number of objects to the TPopup content:

To add a control to the TPopup content, set the Parent property of the control or create it with the TPopup as its owner.
To access the TPopup children, use ChildrenCount and Children properties.
To position a TPopup, use the following properties:

PlacementRectangle
PlacementTarget
HorizontalOffset
VerticalOffset
Placement
When TPopup is open, it does not reposition itself if its parent is repositioned. To drag a TPopup together with its parent, set the DragWithParent property to True.
TPopup supports animations and graphic effects. The animations and graphic effects are applied to the displayed window, and not to every child of the TPopup. For opacity effects, set the effects directly to the TPopup children. TPopup children do not inherit the animations and effects applied to the parent.
If TPopup is not explicitly sized, it is sized by its content. In this case, if an effect is applied that increases the content's displayed size, part of the content might be obscured. To avoid this, explicitly set the size for TPopup or set its bounds through the BoundsRect, Margins, and Padding properties.   
To open and explicitly close a TPopup, set the TPopup.IsOpen property to True and False, respectively. 
(We do not recommend using Popup and ClosePopup.) 
</summary></devnotes></class>
  <class name="TPathAnimation" file="FMX.Controls.pas" line="1583">
    
    <members>
      <field name="FPath" type="TPathData" visibility="private" size="4" offset="200" file="FMX.Controls.pas" line="1585"/>
      <field name="FPolygon" type="TPolygon" visibility="private" size="4" offset="204" file="FMX.Controls.pas" line="1586"/>
      <field name="FObj" type="TControl" visibility="private" size="4" offset="208" file="FMX.Controls.pas" line="1587"/>
      <field name="FStart" type="TPointF" visibility="private" size="8" offset="212" file="FMX.Controls.pas" line="1588"/>
      <field name="FRotate" type="Boolean" visibility="private" size="1" offset="220" file="FMX.Controls.pas" line="1589"/>
      <field name="FSpline" type="TSpline" visibility="private" size="4" offset="224" file="FMX.Controls.pas" line="1590"/>
      <procedure name="SetPath" visibility="private" file="FMX.Controls.pas" line="1591">
        <parameters>
          <parameter name="Value" type="TPathData" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="EnabledStored" visibility="private" file="FMX.Controls.pas" line="1592">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <procedure name="ProcessAnimation" visibility="protected" procflags="override" file="FMX.Controls.pas" line="1594">
      </procedure>
      <constructor name="Create" visibility="public" file="FMX.Controls.pas" line="1596">
        <parameters>
          <parameter name="AOwner" type="TComponent"/>
        </parameters>
      </constructor>
      <destructor name="Destroy" visibility="public" file="FMX.Controls.pas" line="1597">
        <parameters>
        </parameters>
      </destructor>
      <procedure name="Start" visibility="public" procflags="override" file="FMX.Controls.pas" line="1598">
      </procedure>
      <property name="AnimationType" visibility="published" read="FAnimationType" write="FAnimationType" type="TAnimationType" default="0" hoisted="true" file="FMX.Controls.pas" line="1600"/>
      <property name="AutoReverse" visibility="published" read="FAutoReverse" write="FAutoReverse" type="Boolean" default="0" hoisted="true" file="FMX.Controls.pas" line="1601"/>
      <property name="Enabled" visibility="published" read="FEnabled" write="SetEnabled" stored="EnabledStored" type="Boolean" default="0" hoisted="true" file="FMX.Controls.pas" line="1602"/>
      <property name="Delay" visibility="published" read="FDelay" write="FDelay" type="Single" default="0" hoisted="true" file="FMX.Controls.pas" line="1603"/>
      <property name="Duration" visibility="published" read="FDuration" write="FDuration" type="Single" hoisted="true" file="FMX.Controls.pas" line="1604"/>
      <property name="Interpolation" visibility="published" read="FInterpolation" write="FInterpolation" type="TInterpolationType" default="0" hoisted="true" file="FMX.Controls.pas" line="1605"/>
      <property name="Inverse" visibility="published" read="FInverse" write="FInverse" type="Boolean" default="0" hoisted="true" file="FMX.Controls.pas" line="1606"/>
      <property name="Loop" visibility="published" read="FLoop" write="FLoop" type="Boolean" default="0" hoisted="true" file="FMX.Controls.pas" line="1607"/>
      <event name="OnProcess" visibility="published" read="FOnProcess" write="FOnProcess" type="TNotifyEvent" hoisted="true" file="FMX.Controls.pas" line="1608"/>
      <event name="OnFinish" visibility="published" read="FOnFinish" write="FOnFinish" type="TNotifyEvent" hoisted="true" file="FMX.Controls.pas" line="1609"/>
      <property name="Path" visibility="published" read="FPath" write="SetPath" type="TPathData" file="FMX.Controls.pas" line="1610"/>
      <property name="Rotate" visibility="published" read="FRotate" write="FRotate" type="Boolean" default="0" file="FMX.Controls.pas" line="1611"/>
      <property name="Trigger" visibility="published" read="GetTrigger" write="SetTrigger" type="TTrigger" default="0" index="0" hoisted="true" file="FMX.Controls.pas" line="1612"/>
      <property name="TriggerInverse" visibility="published" read="GetTrigger" write="SetTrigger" type="TTrigger" default="0" index="1" hoisted="true" file="FMX.Controls.pas" line="1613"/>
    </members>
  </class>
  <interface name="IInflatableContent`1" ancestor="IInterface" file="FMX.Controls.pas" line="1616">
    <function name="GetInflatableItems" visibility="public" procflags="abstract virtual" file="FMX.Controls.pas" line="1617">
      <parameters>
        <retval>
        </retval>
      </parameters>
    </function>
    <procedure name="NotifyInflated" visibility="public" procflags="abstract virtual" file="FMX.Controls.pas" line="1618">
    </procedure>
  </interface>
  <class name="TContentInflater`1" file="FMX.Controls.pas" line="1621">
    
    <interfaces>
      <implements name="IInterface"/>
    </interfaces>
    <members>
      <field name="FInflatable" visibility="class private" size="4" offset="12" file="FMX.Controls.pas" line="1623">
      </field>
      <field name="FBusy" type="Boolean" visibility="class private" size="1" offset="16" file="FMX.Controls.pas" line="1624"/>
      <procedure name="ReceiveIdleMessage" visibility="class private" file="FMX.Controls.pas" line="1625">
        <parameters>
          <parameter name="Sender" type="TObject" paramflags="const"/>
          <parameter name="M" type="TMessageBase" paramflags="const"/>
        </parameters>
      </procedure>
      <constructor name="Create" visibility="public" file="FMX.Controls.pas" line="1627">
        <parameters>
          <parameter name="Inflatable" paramflags="const">
          </parameter>
        </parameters>
      </constructor>
      <destructor name="Destroy" visibility="public" file="FMX.Controls.pas" line="1628">
        <parameters>
        </parameters>
      </destructor>
      <procedure name="Inflate" visibility="public" file="FMX.Controls.pas" line="1629">
        <parameters>
          <parameter name="Total" type="Boolean"/>
        </parameters>
      </procedure>
    </members>
  </class>
  <class name="TControlsFilter`1" file="FMX.Controls.pas" line="1632">
    
  </class>
  <interface name="ISearchResponder" GUID="{C73631F4-5AD7-48B9-92D2-CC808B911B5E}" ancestor="IInterface" file="FMX.Controls.pas" line="1635">
    <procedure name="SetFilterPredicate" visibility="public" procflags="abstract virtual" file="FMX.Controls.pas" line="1637">
      <parameters>
        <parameter name="Predicate" type="TPredicate&lt;System.string&gt;" paramflags="const"/>
      </parameters>
    </procedure>
  </interface>
  <interface name="IListBoxHeaderTrait" GUID="{C7BDF195-C1E2-48F9-9376-1382C60A6BCC}" ancestor="IInterface" file="FMX.Controls.pas" line="1640">
  </interface>
  <anonMethod name="TPropertyApplyProc" file="FMX.Controls.pas" line="1657">
    <procedure name="Invoke" visibility="public" procflags="abstract virtual" file="FMX.Controls.pas" line="1657">
      <parameters>
        <parameter name="Instance" type="TObject"/>
        <parameter name="Prop" type="TRttiProperty"/>
      </parameters>
    </procedure>
  </anonMethod>
  <function name="FindProperty" visibility="public" file="FMX.Controls.pas" line="6155">
    <parameters>
      <parameter name="O" type="TObject" paramflags="var"/>
      <parameter name="Path" type="string"/>
      <parameter name="Apply" type="TPropertyApplyProc" paramflags="const"/>
      <retval type="Boolean"/>
    </parameters>
  </function>
  <procedure name="ClosePopup" visibility="public" procflags="overload" file="FMX.Controls.pas" line="8141">
    <parameters>
      <parameter name="AIndex" type="Integer" paramflags="const"/>
    </parameters>
  </procedure>
  <procedure name="ClosePopup" visibility="public" procflags="overload" file="FMX.Controls.pas" line="8150">
    <parameters>
      <parameter name="Wnd" type="TFmxObject"/>
    </parameters>
  </procedure>
  <procedure name="CloseAllPopups" visibility="public" file="FMX.Controls.pas" line="8161">
  </procedure>
  <function name="IsPopup" visibility="public" file="FMX.Controls.pas" line="8178">
    <parameters>
      <parameter name="Wnd" type="TFmxObject" paramflags="const"/>
      <retval type="Boolean"/>
    </parameters>
  </function>
  <function name="CanClosePopup" visibility="public" file="FMX.Controls.pas" line="8194">
    <parameters>
      <parameter name="Wnd" type="TFmxObject" paramflags="const"/>
      <retval type="Boolean"/>
    </parameters>
  </function>
  <procedure name="PopupBringToFront" visibility="public" file="FMX.Controls.pas" line="8201">
  </procedure>
  <function name="GetPopup" visibility="public" file="FMX.Controls.pas" line="8207">
    <parameters>
      <parameter name="AIndex" type="Integer" paramflags="const"/>
      <retval type="TFmxObject"/>
    </parameters>
  </function>
  <function name="GetPopupCount" visibility="public" file="FMX.Controls.pas" line="8215">
    <parameters>
      <retval type="Integer"/>
    </parameters>
  </function>
  <procedure name="FreeControls" visibility="public" file="FMX.Controls.pas" line="8846">
  </procedure>
</namespace>