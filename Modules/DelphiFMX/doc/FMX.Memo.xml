<?xml version="1.0" ?><namespace name="FMX.Memo" platform="Win32">
  <const name="MM_MEMO_CARETCHANGED" type="Integer" file="FMX.Memo.pas" line="21">
    <value>
      $1710
    </value>
  </const>
  <const name="MM_MEMO_READONLY_CHANGED" type="Integer" file="FMX.Memo.pas" line="22">
    <value>
      $1711
    </value>
  </const>
  <const name="MM_MEMO_CHECKSPELLING_CHANGED" type="Integer" file="FMX.Memo.pas" line="23">
    <value>
      $1712
    </value>
  </const>
  <const name="MM_MEMO_IMEMODE_CHANGED" type="Integer" file="FMX.Memo.pas" line="24">
    <value>
      $1713
    </value>
  </const>
  <const name="MM_MEMO_KEYBOARDTYPE_CHANGED" type="Integer" file="FMX.Memo.pas" line="25">
    <value>
      $1714
    </value>
  </const>
  <const name="MM_MEMO_TEXT_SETTINGS_CHANGED" type="Integer" file="FMX.Memo.pas" line="26">
    <value>
      $1715
    </value>
  </const>
  <const name="MM_MEMO_AUTOSELECT_CHANGED" type="Integer" file="FMX.Memo.pas" line="27">
    <value>
      $1716
    </value>
  </const>
  <const name="MM_MEMO_CHARCASE_CHANGED" type="Integer" file="FMX.Memo.pas" line="28">
    <value>
      $1717
    </value>
  </const>
  <const name="MM_MEMO_HIDESELECTIONONEXIT_CHANGED" type="Integer" file="FMX.Memo.pas" line="29">
    <value>
      $1718
    </value>
  </const>
  <const name="MM_MEMO_MAXLENGTH_CHANGED" type="Integer" file="FMX.Memo.pas" line="30">
    <value>
      $1719
    </value>
  </const>
  <const name="MM_MEMO_LINES_CHANGED" type="Integer" file="FMX.Memo.pas" line="31">
    <value>
      $171A
    </value>
  </const>
  <const name="MM_MEMO_TEXT_CHANGING" type="Integer" file="FMX.Memo.pas" line="32">
    <value>
      $171B
    </value>
  </const>
  <const name="MM_MEMO_GET_CARET_POSITION" type="Integer" file="FMX.Memo.pas" line="33">
    <value>
      $171C
    </value>
  </const>
  <const name="MM_MEMO_SET_CARET_POSITION" type="Integer" file="FMX.Memo.pas" line="34">
    <value>
      $171D
    </value>
  </const>
  <const name="MM_MEMO_SELSTART_CHANGED" type="Integer" file="FMX.Memo.pas" line="35">
    <value>
      $171E
    </value>
  </const>
  <const name="MM_MEMO_SELLENGTH_CHANGED" type="Integer" file="FMX.Memo.pas" line="36">
    <value>
      $171F
    </value>
  </const>
  <const name="MM_MEMO_DATADETECTORTYPES_CHANGED" type="Integer" file="FMX.Memo.pas" line="37">
    <value>
      $1720
    </value>
  </const>
  <const name="MM_MEMO_LINES_INSERT_LINE" type="Integer" file="FMX.Memo.pas" line="38">
    <value>
      $1721
    </value>
  </const>
  <const name="MM_MEMO_LINES_PUT_LINE" type="Integer" file="FMX.Memo.pas" line="39">
    <value>
      $1722
    </value>
  </const>
  <const name="MM_MEMO_LINES_DELETE_LINE" type="Integer" file="FMX.Memo.pas" line="40">
    <value>
      $1723
    </value>
  </const>
  <const name="MM_MEMO_LINES_EXCHANGE_LINES" type="Integer" file="FMX.Memo.pas" line="41">
    <value>
      $1724
    </value>
  </const>
  <const name="MM_MEMO_LINES_CLEAR" type="Integer" file="FMX.Memo.pas" line="42">
    <value>
      $1725
    </value>
  </const>
  <const name="MM_MEMO_UPDATE_STATE_CHANGED" type="Integer" file="FMX.Memo.pas" line="43">
    <value>
      $1726
    </value>
  </const>
  <const name="MM_MEMO_CAN_SET_FOCUS" type="Integer" file="FMX.Memo.pas" line="44">
    <value>
      $172E
    </value>
  </const>
  <const name="MM_MEMO_GET_CARET_POSITION_BY_POINT" type="Integer" file="FMX.Memo.pas" line="45">
    <value>
      $172F
    </value>
  </const>
  <const name="MM_MEMO_USER" type="Integer" file="FMX.Memo.pas" line="46">
    <value>
      $1730
    </value>
  </const>
  <const name="PM_MEMO_GOTO_LINE_BEGIN" type="Integer" file="FMX.Memo.pas" line="48">
    <value>
      $100B
    </value>
  </const>
  <const name="PM_MEMO_GOTO_LINE_END" type="Integer" file="FMX.Memo.pas" line="49">
    <value>
      $100C
    </value>
  </const>
  <const name="PM_MEMO_GOTO_TEXT_BEGIN" type="Integer" file="FMX.Memo.pas" line="50" symflags="deprecated">
    <value>
      $100D
    </value>
  </const>
  <const name="PM_MEMO_GOTO_TEXT_END" type="Integer" file="FMX.Memo.pas" line="51" symflags="deprecated">
    <value>
      $100E
    </value>
  </const>
  <const name="PM_MEMO_UNDO_MANAGER_INSERT_TEXT" type="Integer" file="FMX.Memo.pas" line="52">
    <value>
      $100F
    </value>
  </const>
  <const name="PM_MEMO_UNDO_MANAGER_DELETE_TEXT" type="Integer" file="FMX.Memo.pas" line="53">
    <value>
      $1010
    </value>
  </const>
  <const name="PM_MEMO_UNDO_MANAGER_UNDO" type="Integer" file="FMX.Memo.pas" line="54">
    <value>
      $1011
    </value>
  </const>
  <const name="PM_MEMO_SELECT_TEXT" type="Integer" file="FMX.Memo.pas" line="55">
    <value>
      $1012
    </value>
  </const>
  <const name="PM_MEMO_USER" type="Integer" file="FMX.Memo.pas" line="56">
    <value>
      $1013
    </value>
  </const>
  <enum name="TDataDetectorType" file="FMX.Memo.pas" line="62">
    <element value="0" name="PhoneNumber" file="FMX.Memo.pas" line="62"/>
    <element value="1" name="Link" file="FMX.Memo.pas" line="62"/>
    <element value="2" name="Address" file="FMX.Memo.pas" line="62"/>
    <element value="3" name="CalendarEvent" file="FMX.Memo.pas" line="62"/>
  </enum>
  <set name="TDataDetectorTypes" type="TDataDetectorType" file="FMX.Memo.pas" line="63">
    <element name="PhoneNumber"/>
    <element name="Link"/>
    <element name="Address"/>
    <element name="CalendarEvent"/>
  </set>
  <class name="TCustomMemoModel" file="FMX.Memo.pas" line="66">
    
    <ancestor name="TCustomScrollBoxModel" namespace="FMX.ScrollBox">
      <methodref name="SetAutoHide" visibility="private"/>
      <methodref name="SetBounces" visibility="private"/>
      <methodref name="SetContentBounds" visibility="private"/>
      <methodref name="GetContentBounds" visibility="private"/>
      <methodref name="SetContentSize" visibility="private"/>
      <methodref name="SetDisableMouseWheel" visibility="private"/>
      <methodref name="SetEnabledScroll" visibility="private"/>
      <methodref name="SetScrollAnimation" visibility="private"/>
      <methodref name="SetScrollDirections" visibility="private"/>
      <methodref name="SetShowScrollBars" visibility="private"/>
      <methodref name="SetShowSizeGrip" visibility="private"/>
      <methodref name="SetTouchTracking" visibility="private"/>
      <methodref name="GetViewportSize" visibility="private"/>
      <methodref name="SetViewportPosition" visibility="private"/>
      <methodref name="GetViewportPosition" visibility="private"/>
      <methodref name="DoContentSizeChanged" visibility="private"/>
      <methodref name="Create" visibility="public" procflags="constructor overload override"/>
      <methodref name="Destroy" visibility="public" procflags="destructor override"/>
      <methodref name="DoViewportPositionChange" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="IsOpaque" visibility="public">
      </methodref>
      <propertyref name="ContentBounds" visibility="public">
      </propertyref>
      <propertyref name="AutoHide" visibility="public">
      </propertyref>
      <propertyref name="AutoCalculateContentSize" visibility="public">
      </propertyref>
      <propertyref name="Bounces" visibility="public">
      </propertyref>
      <propertyref name="ContentSize" visibility="public">
      </propertyref>
      <propertyref name="DisableMouseWheel" visibility="public">
      </propertyref>
      <propertyref name="EnabledScroll" visibility="public">
      </propertyref>
      <propertyref name="ScrollAnimation" visibility="public">
      </propertyref>
      <propertyref name="ScrollDirections" visibility="public">
      </propertyref>
      <propertyref name="ShowScrollBars" visibility="public">
      </propertyref>
      <propertyref name="ShowSizeGrip" visibility="public">
      </propertyref>
      <propertyref name="TouchTracking" visibility="public">
      </propertyref>
      <propertyref name="ViewportPosition" visibility="public">
      </propertyref>
      <propertyref name="ViewportSize" visibility="public">
      </propertyref>
      <eventref name="OnCalcContentBounds" visibility="public">
      </eventref>
      <eventref name="OnViewportPositionChange" visibility="public">
      </eventref>
      <ancestor name="TDataModel" namespace="FMX.Controls.Model">
        <methodref name="GetData" visibility="private">
        </methodref>
        <methodref name="SetData" visibility="private">
        </methodref>
        <methodref name="RemoveData" visibility="private">
        </methodref>
        <methodref name="QueryInterface" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="_AddRef" visibility="protected">
        </methodref>
        <methodref name="_Release" visibility="protected">
        </methodref>
        <methodref name="Create" visibility="public" procflags="constructor overload virtual">
        </methodref>
        <methodref name="Destroy" visibility="public" procflags="destructor override">
        </methodref>
        <propertyref name="Owner" visibility="public">
        </propertyref>
        <propertyref name="Data" visibility="public">
        </propertyref>
        <propertyref name="DataSource" visibility="public">
        </propertyref>
        <ancestor name="TMessageSender" namespace="FMX.Presentation.Messages">
          <methodref name="SetReceiver" visibility="private">
          </methodref>
          <methodref name="CreateReceiver" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="FreeReceiver" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="Create" visibility="public" procflags="constructor overload virtual">
          </methodref>
          <methodref name="Destroy" visibility="public" procflags="destructor override">
          </methodref>
          <methodref name="HasReceiver" visibility="public">
          </methodref>
          <methodref name="SendMessage" visibility="public" procflags="overload">
          </methodref>
          <methodref name="SendMessage" visibility="public" procflags="overload">
          </methodref>
          <methodref name="SendMessageWithResult" visibility="public">
          </methodref>
          <methodref name="DisableNotify" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="EnableNotify" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="CanNotify" visibility="public" procflags="virtual">
          </methodref>
          <propertyref name="Receiver" visibility="public">
          </propertyref>
          <ancestor name="TPersistent" namespace="System.Classes">
            <methodref name="AssignError" visibility="private">
            </methodref>
            <methodref name="AssignTo" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="DefineProperties" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="GetOwner" visibility="protected" procflags="dynamic">
            </methodref>
            <methodref name="Destroy" visibility="public" procflags="destructor override">
            </methodref>
            <methodref name="Assign" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="GetNamePath" visibility="public" procflags="dynamic">
            </methodref>
            <ancestor name="TObject" namespace="System">
              <methodref name="Create" visibility="public" procflags="constructor">
              </methodref>
              <methodref name="Free" visibility="public">
              </methodref>
              <methodref name="DisposeOf" visibility="public" procflags="inline">
              </methodref>
              <methodref name="InitInstance" visibility="public" procflags="class">
              </methodref>
              <methodref name="CleanupInstance" visibility="public">
              </methodref>
              <methodref name="ClassType" visibility="public" procflags="inline">
              </methodref>
              <methodref name="ClassName" visibility="public" procflags="class">
              </methodref>
              <methodref name="ClassNameIs" visibility="public" procflags="class">
              </methodref>
              <methodref name="ClassParent" visibility="public" procflags="class inline">
              </methodref>
              <methodref name="ClassInfo" visibility="public" procflags="class inline">
              </methodref>
              <methodref name="InstanceSize" visibility="public" procflags="class inline">
              </methodref>
              <methodref name="InheritsFrom" visibility="public" procflags="class">
              </methodref>
              <methodref name="MethodAddress" visibility="public" procflags="class overload">
              </methodref>
              <methodref name="MethodAddress" visibility="public" procflags="class overload">
              </methodref>
              <methodref name="MethodName" visibility="public" procflags="class">
              </methodref>
              <methodref name="QualifiedClassName" visibility="public" procflags="class">
              </methodref>
              <methodref name="FieldAddress" visibility="public" procflags="overload">
              </methodref>
              <methodref name="FieldAddress" visibility="public" procflags="overload">
              </methodref>
              <methodref name="GetInterface" visibility="public">
              </methodref>
              <methodref name="GetInterfaceEntry" visibility="public" procflags="class">
              </methodref>
              <methodref name="GetInterfaceTable" visibility="public" procflags="class inline">
              </methodref>
              <methodref name="UnitName" visibility="public" procflags="class">
              </methodref>
              <methodref name="UnitScope" visibility="public" procflags="class">
              </methodref>
              <methodref name="Equals" visibility="public" procflags="virtual">
              </methodref>
              <methodref name="GetHashCode" visibility="public" procflags="virtual">
              </methodref>
              <methodref name="ToString" visibility="public" procflags="virtual">
              </methodref>
              <methodref name="SafeCallException" visibility="public" procflags="virtual">
              </methodref>
              <methodref name="AfterConstruction" visibility="public" procflags="virtual">
              </methodref>
              <methodref name="BeforeDestruction" visibility="public" procflags="virtual">
              </methodref>
              <methodref name="Dispatch" visibility="public" procflags="virtual">
              </methodref>
              <methodref name="DefaultHandler" visibility="public" procflags="virtual">
              </methodref>
              <methodref name="NewInstance" visibility="public" procflags="class virtual">
              </methodref>
              <methodref name="FreeInstance" visibility="public" procflags="virtual">
              </methodref>
              <methodref name="Destroy" visibility="public" procflags="destructor virtual">
              </methodref>
              <methodref name="GetDisposed" visibility="protected" procflags="inline">
              </methodref>
              <methodref name="CheckDisposed" visibility="protected" procflags="inline">
              </methodref>
              <propertyref name="Disposed" visibility="protected">
              </propertyref>
            </ancestor>
          </ancestor>
        </ancestor>
      </ancestor>
    </ancestor>
    <interfaces>
      <implements name="ITextLinesSource"/>
    </interfaces>
    <members>
      <struct name="TLineInfo" visibility="public" alias="FMX.Memo.TLineInfo" size="12" file="FMX.Memo.pas" line="69">
        <field name="Index" type="Integer" visibility="public" size="4" offset="0" file="FMX.Memo.pas" line="70"/>
        <field name="Text" type="string" visibility="public" size="4" offset="4" file="FMX.Memo.pas" line="71"/>
        <field name="ExtraIndex" type="Integer" visibility="public" size="4" offset="8" file="FMX.Memo.pas" line="72"/>
        <function name="Create" visibility="public" procflags="static overload inline" file="FMX.Memo.pas" line="73">
          <parameters>
            <parameter name="Index" type="Integer" paramflags="const"/>
            <parameter name="Text" type="string" paramflags="const"/>
            <retval type="TCustomMemoModel.TLineInfo"/>
          </parameters>
        </function>
        <function name="Create" visibility="public" procflags="static overload inline" file="FMX.Memo.pas" line="74">
          <parameters>
            <parameter name="Index" type="Integer" paramflags="const"/>
            <parameter name="ExtraIndex" type="Integer" paramflags="const"/>
            <retval type="TCustomMemoModel.TLineInfo"/>
          </parameters>
        </function>
      </struct>
      <struct name="TGetCaretPositionInfo" visibility="public" alias="FMX.Memo.TGetCaretPositionInfo" size="20" file="FMX.Memo.pas" line="77">
        <field name="HitPoint" type="TPointF" visibility="public" size="8" offset="0" file="FMX.Memo.pas" line="78"/>
        <field name="RoundToWord" type="Boolean" visibility="public" size="1" offset="8" file="FMX.Memo.pas" line="79"/>
        <field name="CaretPosition" type="TCaretPosition" visibility="public" size="8" offset="12" file="FMX.Memo.pas" line="80"/>
      </struct>
      <const name="DefaultAutoSelect" visibility="public" type="Boolean" file="FMX.Memo.pas" line="66">
        <value>
          False
        </value>
      </const>
      <const name="DefaultCharCase" visibility="public" type="TEditCharCase" file="FMX.Memo.pas" line="84">
        <value>
          ecNormal
        </value>
      </const>
      <const name="DefaultHideSelectionOnExit" visibility="public" type="Boolean" file="FMX.Memo.pas" line="66">
        <value>
          True
        </value>
      </const>
      <const name="DefaultKeyboardType" visibility="public" type="TVirtualKeyboardType" file="FMX.Memo.pas" line="86">
        <value>
          Default
        </value>
      </const>
      <const name="DefaultMaxLength" visibility="public" type="Integer" file="FMX.Memo.pas" line="87">
        <value>
          $0
        </value>
      </const>
      <const name="DefaultReadOnly" visibility="public" type="Boolean" file="FMX.Memo.pas" line="66">
        <value>
          False
        </value>
      </const>
      <const name="DefaultSelectionColor" visibility="public" type="Integer" file="FMX.Memo.pas" line="66">
        <value>
          $802A8ADF
        </value>
      </const>
      <field name="FAutoSelect" type="Boolean" visibility="private" size="1" offset="72" file="FMX.Memo.pas" line="91"/>
      <field name="FCaret" type="TCaret" visibility="private" size="4" offset="76" file="FMX.Memo.pas" line="92"/>
      <field name="FChanged" type="Boolean" visibility="private" size="1" offset="80" file="FMX.Memo.pas" line="93"/>
      <field name="FCharCase" type="TEditCharCase" visibility="private" size="1" offset="81" file="FMX.Memo.pas" line="94"/>
      <field name="FCheckSpelling" type="Boolean" visibility="private" size="1" offset="82" file="FMX.Memo.pas" line="95"/>
      <field name="FDataDetectorTypes" type="TDataDetectorTypes" visibility="private" size="1" offset="83" file="FMX.Memo.pas" line="96"/>
      <field name="FHideSelectionOnExit" type="Boolean" visibility="private" size="1" offset="84" file="FMX.Memo.pas" line="97"/>
      <field name="FImeMode" type="TImeMode" visibility="private" size="4" offset="88" file="FMX.Memo.pas" line="98"/>
      <field name="FKeyboardType" type="TVirtualKeyboardType" visibility="private" size="4" offset="92" file="FMX.Memo.pas" line="99"/>
      <field name="FLines" type="TStrings" visibility="private" size="4" offset="96" file="FMX.Memo.pas" line="100"/>
      <field name="FMaxLength" type="Integer" visibility="private" size="4" offset="100" file="FMX.Memo.pas" line="101"/>
      <field name="FReadOnly" type="Boolean" visibility="private" size="1" offset="104" file="FMX.Memo.pas" line="102"/>
      <field name="FSelectionFill" type="TBrush" visibility="private" size="4" offset="108" file="FMX.Memo.pas" line="103"/>
      <field name="FSelStart" type="Integer" visibility="private" size="4" offset="112" file="FMX.Memo.pas" line="104"/>
      <field name="FSelLength" type="Integer" visibility="private" size="4" offset="116" file="FMX.Memo.pas" line="105"/>
      <field name="FTextSettingsInfo" type="TTextSettingsInfo" visibility="private" size="4" offset="120" file="FMX.Memo.pas" line="106"/>
      <field name="FOnChange" type="TNotifyEvent" visibility="private" size="8" offset="128" file="FMX.Memo.pas" line="107"/>
      <field name="FOnChangeTracking" type="TNotifyEvent" visibility="private" size="8" offset="136" file="FMX.Memo.pas" line="108"/>
      <field name="FOnValidating" type="TValidateTextEvent" visibility="private" size="8" offset="144" file="FMX.Memo.pas" line="109"/>
      <field name="FOnValidate" type="TValidateTextEvent" visibility="private" size="8" offset="152" file="FMX.Memo.pas" line="110"/>
      <procedure name="SetCaret" visibility="private" file="FMX.Memo.pas" line="111">
        <parameters>
          <parameter name="Value" type="TCaret" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetCheckSpelling" visibility="private" file="FMX.Memo.pas" line="112">
        <parameters>
          <parameter name="Value" type="Boolean" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetReadOnly" visibility="private" file="FMX.Memo.pas" line="113">
        <parameters>
          <parameter name="Value" type="Boolean" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetImeMode" visibility="private" file="FMX.Memo.pas" line="114">
        <parameters>
          <parameter name="Value" type="TImeMode" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetKeyboardType" visibility="private" file="FMX.Memo.pas" line="115">
        <parameters>
          <parameter name="Value" type="TVirtualKeyboardType" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetAutoSelect" visibility="private" file="FMX.Memo.pas" line="116">
        <parameters>
          <parameter name="Value" type="Boolean" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetCharCase" visibility="private" file="FMX.Memo.pas" line="117">
        <parameters>
          <parameter name="Value" type="TEditCharCase" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetHideSelectionOnExit" visibility="private" file="FMX.Memo.pas" line="118">
        <parameters>
          <parameter name="Value" type="Boolean" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetMaxLength" visibility="private" file="FMX.Memo.pas" line="119">
        <parameters>
          <parameter name="Value" type="Integer" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetLines" visibility="private" file="FMX.Memo.pas" line="120">
        <parameters>
          <parameter name="Value" type="TStrings" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetSelectionFill" visibility="private" file="FMX.Memo.pas" line="121">
        <parameters>
          <parameter name="Value" type="TBrush" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetSelLength" visibility="private" file="FMX.Memo.pas" line="122">
        <parameters>
          <parameter name="Value" type="Integer" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetSelStart" visibility="private" file="FMX.Memo.pas" line="123">
        <parameters>
          <parameter name="Value" type="Integer" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetTextSettingsInfo" visibility="private" file="FMX.Memo.pas" line="124">
        <parameters>
          <parameter name="Value" type="TTextSettingsInfo" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetDataDetectorTypes" visibility="private" file="FMX.Memo.pas" line="125">
        <parameters>
          <parameter name="Value" type="TDataDetectorTypes" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="GetCaretPosition" visibility="private" callconv="cdecl" file="FMX.Memo.pas" line="126">
        <parameters>
          <retval type="TCaretPosition"/>
        </parameters>
      </function>
      <procedure name="SetCaretPosition" visibility="private" file="FMX.Memo.pas" line="127">
        <parameters>
          <parameter name="Value" type="TCaretPosition" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="CanSetFocus" visibility="private" file="FMX.Memo.pas" line="128">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <function name="GetLine" visibility="private" file="FMX.Memo.pas" line="130">
        <parameters>
          <parameter name="ALineIndex" type="Integer" paramflags="const"/>
          <retval type="string"/>
        </parameters>
      </function>
      <function name="GetLineBreak" visibility="private" file="FMX.Memo.pas" line="131">
        <parameters>
          <retval type="string"/>
        </parameters>
      </function>
      <function name="GetCount" visibility="private" file="FMX.Memo.pas" line="132">
        <parameters>
          <retval type="Integer"/>
        </parameters>
      </function>
      <function name="DoValidating" visibility="protected" procflags="virtual" file="FMX.Memo.pas" line="135">
        <devnotes>
          <summary>Validate inputing text. Calling before OnChangeTracking</summary>
        </devnotes>
        <parameters>
          <parameter name="Value" type="string" paramflags="const"/>
          <retval type="string"/>
        </parameters>
      </function>
      <function name="DoValidate" visibility="protected" procflags="virtual" file="FMX.Memo.pas" line="137">
        <devnotes>
          <summary>Validate inputed text. Calling before OnChange</summary>
        </devnotes>
        <parameters>
          <parameter name="Value" type="string" paramflags="const"/>
          <retval type="string"/>
        </parameters>
      </function>
      <procedure name="DoChangeTracking" visibility="protected" procflags="virtual" file="FMX.Memo.pas" line="139">
        <devnotes>
          <summary>Call OnChangeTracking event</summary>
        </devnotes>
      </procedure>
      <procedure name="DoChange" visibility="protected" procflags="virtual" file="FMX.Memo.pas" line="141">
        <devnotes>
          <summary>Call OnChange event</summary>
        </devnotes>
      </procedure>
      <procedure name="TextSettingsChanged" visibility="protected" procflags="virtual" file="FMX.Memo.pas" line="143">
        <devnotes>
          <summary>Method is calling when some parameter of text settings was changed</summary>
        </devnotes>
      </procedure>
      <function name="GetTextSettingsClass" visibility="protected" procflags="virtual" file="FMX.Memo.pas" line="146">
        <devnotes>
          <summary>Returns class type that represent used text settings. Could be overridden  in descendants to modify
          default behavior</summary>
        </devnotes>
        <parameters>
          <retval type="TTextSettingsInfo.TCustomTextSettingsClass">
          </retval>
        </parameters>
      </function>
      <constructor name="Create" visibility="public" file="FMX.Memo.pas" line="148">
        <parameters>
          <parameter name="AOwner" type="TComponent" paramflags="const"/>
        </parameters>
      </constructor>
      <destructor name="Destroy" visibility="public" file="FMX.Memo.pas" line="149">
        <parameters>
        </parameters>
      </destructor>
      <function name="HasSelection" visibility="public" file="FMX.Memo.pas" line="151">
        <devnotes>
          <summary>Does memo has selected text</summary>
        </devnotes>
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <function name="SelectedText" visibility="public" file="FMX.Memo.pas" line="153">
        <devnotes>
          <summary>Returns current selected text</summary>
        </devnotes>
        <parameters>
          <retval type="string"/>
        </parameters>
      </function>
      <procedure name="Change" visibility="public" file="FMX.Memo.pas" line="155">
        <devnotes>
          <summary>If there were made any changes in text OnChange will be raised</summary>
        </devnotes>
      </procedure>
      <function name="TextPosToPos" visibility="public" file="FMX.Memo.pas" line="158">
        <devnotes>
          <summary>Convert absolute platform-dependent position in text to platform independent value in format
          (line_number, position_in_line)</summary>
        </devnotes>
        <parameters>
          <parameter name="APos" type="Integer" paramflags="const"/>
          <retval type="TCaretPosition"/>
        </parameters>
      </function>
      <function name="PosToTextPos" visibility="public" file="FMX.Memo.pas" line="160">
        <devnotes>
          <summary>Convert platform-independent position to absolute platform-dependent position</summary>
        </devnotes>
        <parameters>
          <parameter name="APostion" type="TCaretPosition" paramflags="const"/>
          <retval type="Integer"/>
        </parameters>
      </function>
      <procedure name="InsertAfter" visibility="public" file="FMX.Memo.pas" line="162">
        <devnotes>
          <summary>Insert text in memo after defined position</summary>
        </devnotes>
        <parameters>
          <parameter name="APosition" type="TCaretPosition" paramflags="const"/>
          <parameter name="AFragment" type="string" paramflags="const"/>
          <parameter name="Options" type="TInsertOptions" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="DeleteFrom" visibility="public" file="FMX.Memo.pas" line="164">
        <devnotes>
          <summary>Delete fragment of the text from the memo after defined position</summary>
        </devnotes>
        <parameters>
          <parameter name="APosition" type="TCaretPosition" paramflags="const"/>
          <parameter name="ALength" type="Integer" paramflags="const"/>
          <parameter name="Options" type="TDeleteOptions" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="Replace" visibility="public" file="FMX.Memo.pas" line="166">
        <devnotes>
           <summary>Replace fragment of text from the memo in the specifeid range.</summary>
        </devnotes>
        <parameters>
          <parameter name="APosition" type="TCaretPosition" paramflags="const"/>
          <parameter name="ALength" type="Integer" paramflags="const"/>
          <parameter name="AFragment" type="string" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SelectText" visibility="public" file="FMX.Memo.pas" line="168">
        <devnotes>
          <summary>Select <c>ALength</c> characters in memo's text starting from <c>AStartPosition</c></summary>
        </devnotes>
        <parameters>
          <parameter name="AStartPosition" type="TCaretPosition" paramflags="const"/>
          <parameter name="ALength" type="Integer" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="GetNextWordBegin" visibility="public" file="FMX.Memo.pas" line="170">
        <parameters>
          <parameter name="APosition" type="TCaretPosition" paramflags="const"/>
          <retval type="TCaretPosition"/>
        </parameters>
      </function>
      <function name="GetPrevWordBegin" visibility="public" file="FMX.Memo.pas" line="171">
        <parameters>
          <parameter name="APosition" type="TCaretPosition" paramflags="const"/>
          <retval type="TCaretPosition"/>
        </parameters>
      </function>
      <function name="GetPositionShift" visibility="public" file="FMX.Memo.pas" line="172">
        <parameters>
          <parameter name="APosition" type="TCaretPosition" paramflags="const"/>
          <parameter name="ADelta" type="Integer" paramflags="const"/>
          <retval type="TCaretPosition"/>
        </parameters>
      </function>
      <procedure name="MoveCaretHorizontal" visibility="public" file="FMX.Memo.pas" line="174">
        <parameters>
          <parameter name="ADelta" type="Integer" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="MoveCaretLeft" visibility="public" file="FMX.Memo.pas" line="175">
      </procedure>
      <procedure name="MoveCaretRight" visibility="public" file="FMX.Memo.pas" line="176">
      </procedure>
      <function name="GetCaretPositionByPoint" visibility="public" file="FMX.Memo.pas" line="179">
        <devnotes>
           <summary>Returns caret position by specified hittest point.</summary>
           <remarks>Works only for <c>TMemo.ControlType=Styled</c>.</remarks>
        </devnotes>
        <parameters>
          <parameter name="AHitPoint" type="TPointF" paramflags="const"/>
          <parameter name="ARoundToWord" type="Boolean" paramflags="const">
            <value>
              False
            </value>
          </parameter>
          <retval type="TCaretPosition"/>
        </parameters>
      </function>
      <property name="AutoSelect" visibility="public" read="FAutoSelect" write="SetAutoSelect" type="Boolean" file="FMX.Memo.pas" line="182">
        <devnotes>
          <summary>Select all text when control getting focus</summary>
        </devnotes>
      </property>
      <property name="Caret" visibility="public" read="FCaret" write="SetCaret" type="TCaret" file="FMX.Memo.pas" line="184">
        <devnotes>
          <summary>Contains component that represent current caret for control</summary>
        </devnotes>
      </property>
      <property name="CharCase" visibility="public" read="FCharCase" write="SetCharCase" type="TEditCharCase" file="FMX.Memo.pas" line="186">
        <devnotes>
          <summary>Defines character case for text in component</summary>
        </devnotes>
      </property>
      <property name="CheckSpelling" visibility="public" read="FCheckSpelling" write="SetCheckSpelling" type="Boolean" file="FMX.Memo.pas" line="188">
        <devnotes>
          <summary>Switch on/off spell checking feature</summary>
        </devnotes>
      </property>
      <property name="DataDetectorTypes" visibility="public" read="FDataDetectorTypes" write="SetDataDetectorTypes" type="TDataDetectorTypes" file="FMX.Memo.pas" line="191">
        <devnotes>
          <summary>Defines the types of information that can be detected in text
          (for native presentation on iOS only)</summary>
        </devnotes>
      </property>
      <property name="HideSelectionOnExit" visibility="public" read="FHideSelectionOnExit" write="SetHideSelectionOnExit" type="Boolean" default="1" file="FMX.Memo.pas" line="193">
        <devnotes>
          <summary>Do not draw selected text region when component not in focus</summary>
        </devnotes>
      </property>
      <property name="ReadOnly" visibility="public" read="FReadOnly" write="SetReadOnly" type="Boolean" file="FMX.Memo.pas" line="195">
        <devnotes>
          <summary>Text is in read-only mode</summary>
        </devnotes>
      </property>
      <property name="ImeMode" visibility="public" read="FImeMode" write="SetImeMode" type="TImeMode" file="FMX.Memo.pas" line="197">
        <devnotes>
          <summary>Default IME text input mode</summary>
        </devnotes>
      </property>
      <property name="KeyboardType" visibility="public" read="FKeyboardType" write="SetKeyboardType" type="TVirtualKeyboardType" file="FMX.Memo.pas" line="199">
        <devnotes>
          <summary>Defines visual type of on-screen-keyboard</summary>
        </devnotes>
      </property>
      <property name="Lines" visibility="public" read="FLines" write="SetLines" type="TStrings" file="FMX.Memo.pas" line="201">
        <devnotes>
          <summary>Lines of text</summary>
        </devnotes>
      </property>
      <property name="MaxLength" visibility="public" read="FMaxLength" write="SetMaxLength" type="Integer" file="FMX.Memo.pas" line="203">
        <devnotes>
          <summary>Available maximum length of text (0 - no length limitation).</summary>
        </devnotes>
      </property>
      <property name="SelectionFill" visibility="public" read="FSelectionFill" write="SetSelectionFill" type="TBrush" file="FMX.Memo.pas" line="205">
        <devnotes>
          <summary>Brush that is using to draw text selection region</summary>
        </devnotes>
      </property>
      <property name="CaretPosition" visibility="public" read="GetCaretPosition" write="SetCaretPosition" type="TCaretPosition" file="FMX.Memo.pas" line="207">
        <devnotes>
          <summary>Current position of cursor in the text</summary>
        </devnotes>
      </property>
      <property name="SelStart" visibility="public" read="FSelStart" write="SetSelStart" type="Integer" file="FMX.Memo.pas" line="209">
        <devnotes>
          <summary>Text selection starting position</summary>
        </devnotes>
      </property>
      <property name="SelLength" visibility="public" read="FSelLength" write="SetSelLength" type="Integer" file="FMX.Memo.pas" line="211">
        <devnotes>
          <summary>Length of selected text</summary>
        </devnotes>
      </property>
      <property name="TextSettingsInfo" visibility="public" read="FTextSettingsInfo" write="SetTextSettingsInfo" type="TTextSettingsInfo" file="FMX.Memo.pas" line="213">
        <devnotes>
          <summary>Container for current text visualization attributes</summary>
        </devnotes>
      </property>
      <event name="OnChange" visibility="public" read="FOnChange" write="FOnChange" type="TNotifyEvent" file="FMX.Memo.pas" line="216">
        <devnotes>
          <summary>Event that raises when control losing focus or user pressing ENTER key (but onlt if some changes were
          made)</summary>
        </devnotes>
      </event>
      <event name="OnChangeTracking" visibility="public" read="FOnChangeTracking" write="FOnChangeTracking" type="TNotifyEvent" file="FMX.Memo.pas" line="218">
        <devnotes>
          <summary>Event that raises on any change in text</summary>
        </devnotes>
      </event>
      <event name="OnValidating" visibility="public" read="FOnValidating" write="FOnValidating" type="TValidateTextEvent" file="FMX.Memo.pas" line="220">
        <devnotes>
          <summary>Event that raises to validate any change in text (raises before OnChangeTracking event)</summary>
        </devnotes>
      </event>
      <event name="OnValidate" visibility="public" read="FOnValidate" write="FOnValidate" type="TValidateTextEvent" file="FMX.Memo.pas" line="222">
        <devnotes>
          <summary>Event that raises to validate changes in text (raises before OnChange event)</summary>
        </devnotes>
      </event>
    </members>
  </class>
  <class name="TCustomMemo" file="FMX.Memo.pas" line="227">
    
    <ancestor name="TCustomPresentedScrollBox" namespace="FMX.ScrollBox">
      <methodref name="GetModel" visibility="private" procflags="overload"/>
      <methodref name="SetAutoHide" visibility="private"/>
      <methodref name="GetAutoHide" visibility="private"/>
      <methodref name="SetBounces" visibility="private"/>
      <methodref name="GetBounces" visibility="private"/>
      <methodref name="SetCalculateContentSize" visibility="private"/>
      <methodref name="GetCalculateContentSize" visibility="private"/>
      <methodref name="SetContentBounds" visibility="private"/>
      <methodref name="GetContentBounds" visibility="private"/>
      <methodref name="SetContentSize" visibility="private"/>
      <methodref name="GetContentSize" visibility="private"/>
      <methodref name="SetDisableMouseWheel" visibility="private"/>
      <methodref name="GetDisableMouseWheel" visibility="private"/>
      <methodref name="SetEnabledScroll" visibility="private"/>
      <methodref name="GetEnabledScroll" visibility="private"/>
      <methodref name="SetScrollAnimation" visibility="private"/>
      <methodref name="GetScrollAnimation" visibility="private"/>
      <methodref name="SetScrollDirections" visibility="private"/>
      <methodref name="GetScrollDirections" visibility="private"/>
      <methodref name="SetShowScrollBars" visibility="private"/>
      <methodref name="GetShowScrollBars" visibility="private"/>
      <methodref name="SetShowSizeGrip" visibility="private"/>
      <methodref name="GetShowSizeGrip" visibility="private"/>
      <methodref name="SetTouchTracking" visibility="private"/>
      <methodref name="GetTouchTracking" visibility="private"/>
      <methodref name="SetViewportPosition" visibility="private"/>
      <methodref name="GetViewportPosition" visibility="private"/>
      <methodref name="GetViewportSize" visibility="private"/>
      <methodref name="SetOnCalcContentBounds" visibility="private"/>
      <methodref name="GetOnCalcContentBounds" visibility="private"/>
      <methodref name="SetOnViewportPositionChange" visibility="private"/>
      <methodref name="GetOnViewportPositionChange" visibility="private"/>
      <methodref name="ReadSizeValue" visibility="private"/>
      <methodref name="ReadViewportHeight" visibility="private"/>
      <methodref name="ReadViewportWidth" visibility="private"/>
      <methodref name="WriteViewportHeight" visibility="private"/>
      <methodref name="WriteViewportWidth" visibility="private"/>
      <methodref name="GetContentLayout" visibility="private"/>
      <methodref name="GetHScrollBar" visibility="private"/>
      <methodref name="GetVScrollBar" visibility="private"/>
      <methodref name="GetAniCalculations" visibility="private"/>
      <methodref name="Loaded" visibility="protected" procflags="override"/>
      <methodref name="PaddingChanged" visibility="protected" procflags="overload override"/>
      <methodref name="CreateScrollContent" visibility="protected" procflags="virtual">
      </methodref>
      <methodref name="DoAddObject" visibility="protected" procflags="override">
      </methodref>
      <methodref name="DoInsertObject" visibility="protected" procflags="override">
      </methodref>
      <methodref name="DoRemoveObject" visibility="protected" procflags="override">
      </methodref>
      <methodref name="PaintChildren" visibility="protected" procflags="override"/>
      <methodref name="DoCalcContentBounds" visibility="protected" procflags="virtual">
      </methodref>
      <methodref name="IsAddToContent" visibility="protected" procflags="virtual">
      </methodref>
      <methodref name="ContentAddObject" visibility="protected" procflags="virtual">
      </methodref>
      <methodref name="ContentInsertObject" visibility="protected" procflags="virtual">
      </methodref>
      <methodref name="ContentBeforeRemoveObject" visibility="protected" procflags="virtual">
      </methodref>
      <methodref name="ContentRemoveObject" visibility="protected" procflags="virtual">
      </methodref>
      <methodref name="IsOpaque" visibility="protected" procflags="virtual">
      </methodref>
      <methodref name="DefineProperties" visibility="protected" procflags="override">
      </methodref>
      <propertyref name="AniCalculations" visibility="protected">
      </propertyref>
      <methodref name="MouseWheel" visibility="protected" procflags="override">
      </methodref>
      <methodref name="DefineModelClass" visibility="protected" procflags="override">
      </methodref>
      <methodref name="InitPresentation" visibility="protected" procflags="override">
      </methodref>
      <methodref name="Create" visibility="public" procflags="constructor overload override"/>
      <methodref name="ScrollBy" visibility="public">
      </methodref>
      <methodref name="ScrollTo" visibility="public">
      </methodref>
      <methodref name="ScrollToTop" visibility="public">
      </methodref>
      <methodref name="ScrollToCenter" visibility="public">
      </methodref>
      <methodref name="InViewRect" visibility="public">
      </methodref>
      <methodref name="Sort" visibility="public" procflags="override">
      </methodref>
      <methodref name="GetTabList" visibility="public" procflags="override">
      </methodref>
      <methodref name="UpdateContentSize" visibility="public">
      </methodref>
      <methodref name="RealignContent" visibility="public">
      </methodref>
      <propertyref name="Content" visibility="public">
      </propertyref>
      <propertyref name="ContentBounds" visibility="public">
      </propertyref>
      <methodref name="ClearContent" visibility="public">
      </methodref>
      <propertyref name="Model" visibility="public">
      </propertyref>
      <propertyref name="ViewportPosition" visibility="public">
      </propertyref>
      <propertyref name="ViewportSize" visibility="public">
      </propertyref>
      <propertyref name="VScrollBar" visibility="public">
      </propertyref>
      <propertyref name="HScrollBar" visibility="public">
      </propertyref>
      <propertyref name="ContentLayout" visibility="public">
      </propertyref>
      <propertyref name="AutoCalculateContentSize" visibility="public">
      </propertyref>
      <propertyref name="AutoHide" visibility="public">
      </propertyref>
      <propertyref name="Bounces" visibility="public">
      </propertyref>
      <propertyref name="ContentSize" visibility="public">
      </propertyref>
      <propertyref name="DisableMouseWheel" visibility="public">
      </propertyref>
      <propertyref name="EnabledScroll" visibility="public">
      </propertyref>
      <propertyref name="ScrollAnimation" visibility="public">
      </propertyref>
      <propertyref name="ScrollDirections" visibility="public">
      </propertyref>
      <propertyref name="ShowScrollBars" visibility="public">
      </propertyref>
      <propertyref name="ShowSizeGrip" visibility="public">
      </propertyref>
      <propertyref name="TouchTracking" visibility="public">
      </propertyref>
      <eventref name="OnCalcContentBounds" visibility="public">
      </eventref>
      <eventref name="OnViewportPositionChange" visibility="public">
      </eventref>
      <ancestor name="TPresentedControl" namespace="FMX.Controls.Presentation">
        <interfaces>
          <implements name="ISceneChildrenObserver"/>
          <implements name="IControlTypeSupportable"/>
          <implements name="IMessageSendingCompatible"/>
        </interfaces>
        <methodref name="GetPresentation" visibility="private">
        </methodref>
        <methodref name="GetPresentationScene" visibility="private">
        </methodref>
        <methodref name="CreateModel" visibility="private">
        </methodref>
        <methodref name="DoPresentationNameChoosing" visibility="private">
        </methodref>
        <methodref name="RemoveStyleResource" visibility="private">
        </methodref>
        <methodref name="GetMessageSender" visibility="private">
        </methodref>
        <methodref name="GetControlType" visibility="private">
        </methodref>
        <methodref name="SetControlType" visibility="private">
        </methodref>
        <methodref name="ChildWasRemoved" visibility="private">
        </methodref>
        <methodref name="Loaded" visibility="protected" procflags="override">
        </methodref>
        <methodref name="PaintChildren" visibility="protected" procflags="override">
        </methodref>
        <methodref name="ControlTypeChanged" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="ClipChildrenChanged" visibility="protected" procflags="override">
        </methodref>
        <methodref name="HitTestChanged" visibility="protected" procflags="override">
        </methodref>
        <methodref name="GetDefaultStyleLookupName" visibility="protected" procflags="override">
        </methodref>
        <methodref name="StyleLookupChanged" visibility="protected" procflags="override">
        </methodref>
        <methodref name="StyleDataChanged" visibility="protected" procflags="override">
        </methodref>
        <methodref name="RequestStyleData" visibility="protected" procflags="override">
        </methodref>
        <methodref name="GetResourceLink" visibility="protected" procflags="override">
        </methodref>
        <methodref name="AncestorParentChanged" visibility="protected" procflags="override">
        </methodref>
        <methodref name="AncestorVisibleChanged" visibility="protected" procflags="override">
        </methodref>
        <methodref name="SetVisible" visibility="protected" procflags="override">
        </methodref>
        <methodref name="ObjectAtPoint" visibility="protected" procflags="override">
        </methodref>
        <methodref name="ChangeOrder" visibility="protected" procflags="override">
        </methodref>
        <methodref name="ParentChanged" visibility="protected" procflags="override">
        </methodref>
        <methodref name="DoAddObject" visibility="protected" procflags="override">
        </methodref>
        <methodref name="DoInsertObject" visibility="protected" procflags="override">
        </methodref>
        <methodref name="DoRemoveObject" visibility="protected" procflags="override">
        </methodref>
        <methodref name="DoDeleteChildren" visibility="protected" procflags="override">
        </methodref>
        <methodref name="DoRootChanged" visibility="protected" procflags="override">
        </methodref>
        <methodref name="DoSetSize" visibility="protected" procflags="override">
        </methodref>
        <methodref name="DoAbsoluteChanged" visibility="protected" procflags="override">
        </methodref>
        <methodref name="DoRealign" visibility="protected" procflags="override">
        </methodref>
        <methodref name="RecommendSize" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="KeyDown" visibility="protected" procflags="override">
        </methodref>
        <methodref name="KeyUp" visibility="protected" procflags="override">
        </methodref>
        <methodref name="DoEnter" visibility="protected" procflags="override">
        </methodref>
        <methodref name="DoExit" visibility="protected" procflags="override">
        </methodref>
        <methodref name="AfterPaint" visibility="protected" procflags="override">
        </methodref>
        <methodref name="GetFirstControlWithGesture" visibility="protected" procflags="override">
        </methodref>
        <methodref name="SetAdjustSizeValue" visibility="protected" procflags="override">
        </methodref>
        <methodref name="GetAdjustSizeValue" visibility="protected" procflags="override">
        </methodref>
        <methodref name="GetAdjustType" visibility="protected" procflags="override">
        </methodref>
        <methodref name="SetAdjustType" visibility="protected" procflags="override">
        </methodref>
        <methodref name="ActionChange" visibility="protected" procflags="override">
        </methodref>
        <methodref name="DoActionClientChanged" visibility="protected" procflags="override">
        </methodref>
        <methodref name="DefinePresentationName" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="GetPresentationSuffix" visibility="protected">
        </methodref>
        <methodref name="InitPresentation" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="AncestorPresentationLoaded" visibility="protected">
        </methodref>
        <methodref name="AncestorPresentationUnloading" visibility="protected">
        </methodref>
        <methodref name="GetModel" visibility="protected">
        </methodref>
        <methodref name="DefineModelClass" visibility="protected" procflags="virtual">
        </methodref>
        <propertyref name="CanUseDefaultPresentation" visibility="protected">
        </propertyref>
        <methodref name="QueryInterface" visibility="protected" procflags="override">
        </methodref>
        <propertyref name="PresentationScene" visibility="protected">
        </propertyref>
        <methodref name="Create" visibility="public" procflags="constructor overload override">
        </methodref>
        <methodref name="Destroy" visibility="public" procflags="destructor override">
        </methodref>
        <methodref name="HasPresentationProxy" visibility="public">
        </methodref>
        <methodref name="RecalcEnabled" visibility="public" procflags="override">
        </methodref>
        <methodref name="RecalcOpacity" visibility="public" procflags="override">
        </methodref>
        <methodref name="AfterConstruction" visibility="public" procflags="override">
        </methodref>
        <methodref name="BeforeDestruction" visibility="public" procflags="override">
        </methodref>
        <methodref name="ApplyStyleLookup" visibility="public" procflags="override">
        </methodref>
        <methodref name="NeedStyleLookup" visibility="public" procflags="override">
        </methodref>
        <methodref name="FindStyleResource" visibility="public" procflags="overload override">
        </methodref>
        <methodref name="PointInObjectLocal" visibility="public" procflags="override">
        </methodref>
        <methodref name="ApplyTriggerEffect" visibility="public" procflags="override">
        </methodref>
        <methodref name="StartTriggerAnimation" visibility="public" procflags="override">
        </methodref>
        <methodref name="StartTriggerAnimationWait" visibility="public" procflags="override">
        </methodref>
        <methodref name="LoadPresentation" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="UnloadPresentation" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="ReloadPresentation" visibility="public">
        </methodref>
        <propertyref name="ControlType" visibility="public">
        </propertyref>
        <propertyref name="Presentation" visibility="public">
        </propertyref>
        <propertyref name="PresentationProxy" visibility="public">
        </propertyref>
        <propertyref name="PresentationState" visibility="public">
        </propertyref>
        <propertyref name="Model" visibility="public">
        </propertyref>
        <eventref name="OnPresentationNameChoosing" visibility="public">
        </eventref>
        <ancestor name="TStyledControl" namespace="FMX.Controls">
          <methodref name="GetStyleData" visibility="class private">
          </methodref>
          <methodref name="SetStyleData" visibility="class private">
          </methodref>
          <methodref name="SetStyleLookup" visibility="class private">
          </methodref>
          <methodref name="ScaleChangedHandler" visibility="class private">
          </methodref>
          <methodref name="StyleChangedHandler" visibility="class private">
          </methodref>
          <methodref name="InternalFreeStyle" visibility="private">
          </methodref>
          <methodref name="SearchInto" visibility="protected" procflags="override">
          </methodref>
          <methodref name="GetBackIndex" visibility="protected" procflags="override">
          </methodref>
          <methodref name="IsHelpContextStored" visibility="protected">
          </methodref>
          <methodref name="SetHelpContext" visibility="protected">
          </methodref>
          <methodref name="SetHelpKeyword" visibility="protected">
          </methodref>
          <methodref name="Notification" visibility="protected" procflags="override">
          </methodref>
          <methodref name="DoSetSize" visibility="protected" procflags="override">
          </methodref>
          <methodref name="DoApplyStyleLookup" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="StyleDataChanged" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="RequestStyleData" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="Painting" visibility="protected" procflags="override">
          </methodref>
          <methodref name="ApplyStyle" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="FreeStyle" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="GetStyleContext" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="GetDefaultStyleLookupName" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="GetParentClassStyleLookupName" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="DoEnter" visibility="protected" procflags="override">
          </methodref>
          <methodref name="Disappear" visibility="protected" procflags="override">
          </methodref>
          <methodref name="AdjustSize" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="AdjustFixedSize" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="ChooseAdjustType" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="DoStyleChanged" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="StyleLookupChanged" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="RecycleResourceLink" visibility="protected">
          </methodref>
          <methodref name="KillResourceLink" visibility="protected">
          </methodref>
          <methodref name="DoDeleteChildren" visibility="protected" procflags="override">
          </methodref>
          <methodref name="GenerateStyleName" visibility="protected">
          </methodref>
          <methodref name="GetStyleObject" visibility="protected" procflags="overload virtual">
          </methodref>
          <methodref name="GetStyleObject" visibility="protected" procflags="overload virtual">
          </methodref>
          <methodref name="SetAdjustSizeValue" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="SetAdjustType" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="GetResourceLink" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="GetResourceControl" visibility="protected">
          </methodref>
          <propertyref name="IsNeedStyleLookup" visibility="protected">
          </propertyref>
          <propertyref name="ResourceLink" visibility="protected">
          </propertyref>
          <propertyref name="ResourceControl" visibility="protected">
          </propertyref>
          <methodref name="GetAdjustSizeValue" visibility="protected" procflags="override">
          </methodref>
          <methodref name="GetAdjustType" visibility="protected" procflags="override">
          </methodref>
          <methodref name="Create" visibility="public" procflags="constructor overload override">
          </methodref>
          <methodref name="BeforeDestruction" visibility="public" procflags="override">
          </methodref>
          <methodref name="Destroy" visibility="public" procflags="destructor override">
          </methodref>
          <propertyref name="AdjustType" visibility="public">
          </propertyref>
          <propertyref name="AdjustSizeValue" visibility="public">
          </propertyref>
          <propertyref name="StyleState" visibility="public">
          </propertyref>
          <methodref name="RecalcSize" visibility="public" procflags="override">
          </methodref>
          <methodref name="FindStyleResource" visibility="public" procflags="overload override">
          </methodref>
          <methodref name="FindStyleResource" visibility="public" procflags="overload">
          </methodref>
          <methodref name="FindAndCloneStyleResource" visibility="public">
          </methodref>
          <methodref name="SetNewScene" visibility="public" procflags="override">
          </methodref>
          <methodref name="ApplyStyleLookup" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="NeedStyleLookup" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="Inflate" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="PrepareForPaint" visibility="public" procflags="override">
          </methodref>
          <methodref name="StartTriggerAnimation" visibility="public" procflags="override">
          </methodref>
          <methodref name="StartTriggerAnimationWait" visibility="public" procflags="override">
          </methodref>
          <propertyref name="AutoTranslate" visibility="public">
          </propertyref>
          <propertyref name="DefaultStyleLookupName" visibility="public">
          </propertyref>
          <propertyref name="ParentClassStyleLookupName" visibility="public">
          </propertyref>
          <propertyref name="HelpType" visibility="public">
          </propertyref>
          <propertyref name="HelpKeyword" visibility="public">
          </propertyref>
          <propertyref name="HelpContext" visibility="public">
          </propertyref>
          <propertyref name="StylesData" visibility="public">
          </propertyref>
          <propertyref name="StyleLookup" visibility="public">
          </propertyref>
          <propertyref name="LoadableStyle" visibility="public">
          </propertyref>
          <methodref name="LookupStyleObject" visibility="public" procflags="class">
          </methodref>
          <ancestor name="TControl" namespace="FMX.Controls">
            <interfaces>
              <implements name="ITriggerEffect"/>
              <implements name="ITriggerAnimation"/>
              <implements name="ITabStopController"/>
              <implements name="IGestureControl"/>
              <implements name="IEffectContainer"/>
              <implements name="IAlignableObject"/>
              <implements name="IRotatedControl"/>
              <implements name="IAlignRoot"/>
              <implements name="IContainerObject"/>
              <implements name="IControl"/>
            </interfaces>
            <methodref name="AddToEffectsList" visibility="class private">
            </methodref>
            <methodref name="RemoveFromEffectsList" visibility="class private">
            </methodref>
            <methodref name="GetInvertAbsoluteMatrix" visibility="class private">
            </methodref>
            <methodref name="SetPosition" visibility="class private">
            </methodref>
            <methodref name="SetHitTest" visibility="class private">
            </methodref>
            <methodref name="SetClipChildren" visibility="class private">
            </methodref>
            <methodref name="GetCanvas" visibility="class private" procflags="inline">
            </methodref>
            <methodref name="SetLocked" visibility="class private">
            </methodref>
            <methodref name="SetTempCanvas" visibility="class private">
            </methodref>
            <methodref name="SetOpacity" visibility="class private">
            </methodref>
            <methodref name="IsOpacityStored" visibility="class private">
            </methodref>
            <methodref name="SetCursor" visibility="class private">
            </methodref>
            <methodref name="RefreshInheritedCursor" visibility="class private">
            </methodref>
            <methodref name="RefreshInheritedCursorForChildren" visibility="class private">
            </methodref>
            <methodref name="GetAbsoluteWidth" visibility="class private">
            </methodref>
            <methodref name="GetAbsoluteHeight" visibility="class private">
            </methodref>
            <methodref name="IsAnchorsStored" visibility="class private">
            </methodref>
            <methodref name="GetEnabled" visibility="class private">
            </methodref>
            <methodref name="GetCursor" visibility="class private">
            </methodref>
            <methodref name="GetInheritedCursor" visibility="class private">
            </methodref>
            <methodref name="GetAbsoluteHasEffect" visibility="class private">
            </methodref>
            <methodref name="GetAbsoluteHasDisablePaintEffect" visibility="class private">
            </methodref>
            <methodref name="GetAbsoluteHasAfterPaintEffect" visibility="class private">
            </methodref>
            <methodref name="PaddingChangedHandler" visibility="class private" procflags="overload">
            </methodref>
            <methodref name="MarginsChanged" visibility="class private">
            </methodref>
            <methodref name="MatrixChanged" visibility="class private">
            </methodref>
            <methodref name="SizeChanged" visibility="class private">
            </methodref>
            <methodref name="GetControlsCount" visibility="class private">
            </methodref>
            <methodref name="OnClickStored" visibility="class private">
            </methodref>
            <methodref name="IsPopupMenuStored" visibility="class private">
            </methodref>
            <methodref name="RequestAlign" visibility="class private">
            </methodref>
            <methodref name="SetMinClipHeight" visibility="class private">
            </methodref>
            <methodref name="SetMinClipWidth" visibility="class private">
            </methodref>
            <methodref name="UpdateSmallSizeControl" visibility="class private">
            </methodref>
            <methodref name="Create@" visibility="class private" procflags="class constructor noself">
            </methodref>
            <methodref name="Destroy@" visibility="class private" procflags="class destructor noself">
            </methodref>
            <methodref name="SetOnClick" visibility="class private">
            </methodref>
            <methodref name="GetIsFocused" visibility="class private">
            </methodref>
            <methodref name="SetPadding" visibility="class private">
            </methodref>
            <methodref name="SetMargins" visibility="class private">
            </methodref>
            <methodref name="SetTouchTargetExpansion" visibility="class private">
            </methodref>
            <methodref name="InternalSizeChanged" visibility="class private">
            </methodref>
            <methodref name="ReadFixedWidth" visibility="class private">
            </methodref>
            <methodref name="WriteFixedWidth" visibility="class private">
            </methodref>
            <methodref name="ReadFixedHeight" visibility="class private">
            </methodref>
            <methodref name="WriteFixedHeight" visibility="class private">
            </methodref>
            <methodref name="ReadDesignVisible" visibility="class private">
            </methodref>
            <methodref name="ReadHint" visibility="class private">
            </methodref>
            <methodref name="ReadShowHint" visibility="class private">
            </methodref>
            <methodref name="DisabledOpacityStored" visibility="class private">
            </methodref>
            <methodref name="SetDisabledOpacity" visibility="class private">
            </methodref>
            <methodref name="GetAxisAlignedRect" visibility="class private">
            </methodref>
            <methodref name="GetRotationAngle" visibility="class private">
            </methodref>
            <methodref name="GetRotationCenter" visibility="class private">
            </methodref>
            <methodref name="GetScale" visibility="class private">
            </methodref>
            <methodref name="SetRotationAngle" visibility="class private">
            </methodref>
            <methodref name="SetRotationCenter" visibility="class private">
            </methodref>
            <methodref name="SetScale" visibility="class private">
            </methodref>
            <methodref name="GetTabOrder" visibility="class private">
            </methodref>
            <methodref name="SetTabOrder" visibility="class private">
            </methodref>
            <methodref name="GetTabStop" visibility="class private">
            </methodref>
            <methodref name="SetTabStop" visibility="class private">
            </methodref>
            <methodref name="SetDisableDisappear" visibility="class private">
            </methodref>
            <methodref name="GetDisableDisappear" visibility="class private">
            </methodref>
            <methodref name="UpdateParentProperties" visibility="class private">
            </methodref>
            <methodref name="CreateTouchManagerIfRequired" visibility="private">
            </methodref>
            <methodref name="GetTouchManager" visibility="private">
            </methodref>
            <methodref name="SetTouchManager" visibility="private">
            </methodref>
            <methodref name="IsShowHintStored" visibility="private">
            </methodref>
            <methodref name="SetParentShowHint" visibility="private">
            </methodref>
            <methodref name="SetShowHint" visibility="private">
            </methodref>
            <methodref name="GetAbsoluteClipRect" visibility="private">
            </methodref>
            <methodref name="HintStored" visibility="private">
            </methodref>
            <methodref name="RepaintJointArea" visibility="class protected">
            </methodref>
            <methodref name="DoAbsoluteChanged" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="CheckHitTest" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="SetInPaintTo" visibility="protected">
            </methodref>
            <methodref name="EndUpdateNoChanges" visibility="protected">
            </methodref>
            <methodref name="SetHint" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="SetEnabled" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="Loaded" visibility="protected" procflags="override">
            </methodref>
            <methodref name="Updated" visibility="protected" procflags="override">
            </methodref>
            <methodref name="DefineProperties" visibility="protected" procflags="override">
            </methodref>
            <methodref name="Notification" visibility="protected" procflags="override">
            </methodref>
            <methodref name="ParentChanged" visibility="protected" procflags="override">
            </methodref>
            <methodref name="ChangeOrder" visibility="protected" procflags="override">
            </methodref>
            <methodref name="ChangeChildren" visibility="protected" procflags="override">
            </methodref>
            <methodref name="SetVisible" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="DoSetWidth" visibility="protected" procflags="virtual" symflags="deprecated">
            </methodref>
            <methodref name="DoSetHeight" visibility="protected" procflags="virtual" symflags="deprecated">
            </methodref>
            <methodref name="DoSetSize" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="HandleSizeChanged" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="DoMatrixChanged" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="SetHeight" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="SetWidth" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="SetSize" visibility="protected" procflags="overload virtual">
            </methodref>
            <methodref name="SetSize" visibility="protected" procflags="overload virtual">
            </methodref>
            <methodref name="GetAbsoluteRect" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="GetChildrenMatrix" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="GetAbsoluteScale" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="GetParentedRect" visibility="protected" procflags="virtual" symflags="deprecated">
            </methodref>
            <methodref name="GetClipRect" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="GetEffectsRect" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="GetAbsoluteEnabled" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="GetChildrenRect" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="GetLocalRect" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="GetBoundsRect" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="SetBoundsRect" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="IsHeightStored" visibility="protected" procflags="virtual" symflags="deprecated">
            </methodref>
            <methodref name="IsWidthStored" visibility="protected" procflags="virtual" symflags="deprecated">
            </methodref>
            <methodref name="IsPositionStored" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="IsSizeStored" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="SetPopupMenu" visibility="protected">
            </methodref>
            <methodref name="GetAbsoluteMatrix" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="GetHasClipParent" visibility="protected">
            </methodref>
            <methodref name="GetUpdateRect" visibility="protected">
            </methodref>
            <methodref name="DoGetUpdateRect" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="GetAbsoluteOpacity" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="BeginAutoDrag" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="Capture" visibility="protected">
            </methodref>
            <methodref name="ReleaseCapture" visibility="protected">
            </methodref>
            <propertyref name="EnableExecuteAction" visibility="protected">
            </propertyref>
            <methodref name="Click" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="DblClick" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="MouseDown" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="MouseMove" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="MouseUp" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="MouseWheel" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="MouseClick" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="KeyDown" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="KeyUp" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="DialogKey" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="AfterDialogKey" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="ShowContextMenu" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="DragEnter" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="DragOver" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="DragDrop" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="DragLeave" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="DragEnd" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="GetDefaultTouchTargetExpansion" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="GetCanFocus" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="GetCanParentFocus" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="EnterChildren" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="ExitChildren" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="GetParentedVisible" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="NeedUpdateEffects" visibility="protected">
            </methodref>
            <methodref name="BeforeEffectEnabledChanged" visibility="protected">
            </methodref>
            <methodref name="EffectEnabledChanged" visibility="protected">
            </methodref>
            <methodref name="Realign" visibility="protected">
            </methodref>
            <methodref name="ChildrenAlignChanged" visibility="protected">
            </methodref>
            <methodref name="GetAlign" visibility="protected">
            </methodref>
            <methodref name="SetAlign" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="GetAnchors" visibility="protected">
            </methodref>
            <methodref name="SetAnchors" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="GetMargins" visibility="protected">
            </methodref>
            <methodref name="GetPadding" visibility="protected">
            </methodref>
            <methodref name="GetWidth" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="GetHeight" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="GetLeft" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="GetTop" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="GetAllowAlign" visibility="protected">
            </methodref>
            <methodref name="GetAnchorRules" visibility="protected">
            </methodref>
            <methodref name="GetAnchorOrigin" visibility="protected">
            </methodref>
            <methodref name="GetOriginalParentSize" visibility="protected">
            </methodref>
            <methodref name="GetAnchorMove" visibility="protected">
            </methodref>
            <methodref name="SetAnchorMove" visibility="protected">
            </methodref>
            <methodref name="GetAdjustSizeValue" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="GetAdjustType" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="GetContainerWidth" visibility="protected">
            </methodref>
            <methodref name="GetContainerHeight" visibility="protected">
            </methodref>
            <methodref name="GetObject" visibility="protected">
            </methodref>
            <methodref name="GetParent" visibility="protected">
            </methodref>
            <methodref name="GetVisible" visibility="protected">
            </methodref>
            <methodref name="GetDesignInteractive" visibility="protected">
            </methodref>
            <methodref name="GetPopupMenu" visibility="protected">
            </methodref>
            <methodref name="DoEnter" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="DoExit" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="DoActivate" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="DoDeactivate" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="DoMouseEnter" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="DoMouseLeave" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="CheckForAllowFocus" visibility="protected">
            </methodref>
            <methodref name="GetDragMode" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="SetDragMode" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="GetLocked" visibility="protected">
            </methodref>
            <methodref name="GetHitTest" visibility="protected">
            </methodref>
            <methodref name="GetAcceptsControls" visibility="protected">
            </methodref>
            <methodref name="SetAcceptsControls" visibility="protected">
            </methodref>
            <methodref name="FindTarget" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="ObjectAtPoint" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="HasHint" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="GetHintString" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="GetHintObject" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="CanShowHint" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="BroadcastGesture" visibility="protected">
            </methodref>
            <methodref name="CMGesture" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="TouchManager" visibility="protected">
            </methodref>
            <methodref name="GetFirstControlWithGesture" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="GetFirstControlWithGestureEngine" visibility="protected">
            </methodref>
            <methodref name="GetListOfInteractiveGestures" visibility="protected">
            </methodref>
            <methodref name="Tap" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="GetFirstVisibleObjectIndex" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="GetLastVisibleObjectIndex" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="GetDefaultSize" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="FillTextFlags" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="ApplyEffect" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="PaintInternal" visibility="protected">
            </methodref>
            <methodref name="SupportsPaintStage" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="CanRepaint" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="RepaintRect" visibility="protected">
            </methodref>
            <methodref name="PaintChildren" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="Painting" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="Paint" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="DoPaint" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="AfterPaint" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="DrawDesignBorder" visibility="protected">
            </methodref>
            <methodref name="DoRealign" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="DoBeginUpdate" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="DoEndUpdate" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="Move" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="Resize" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="DoResized" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="Disappear" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="Show" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="Hide" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="AncestorVisibleChanged" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="AncestorParentChanged" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="ClipChildrenChanged" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="HitTestChanged" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="PaddingChanged" visibility="protected" procflags="overload virtual">
            </methodref>
            <propertyref name="MinClipWidth" visibility="protected">
            </propertyref>
            <propertyref name="MinClipHeight" visibility="protected">
            </propertyref>
            <propertyref name="SmallSizeControl" visibility="protected">
            </propertyref>
            <methodref name="DoAddObject" visibility="protected" procflags="override">
            </methodref>
            <methodref name="DoInsertObject" visibility="protected" procflags="override">
            </methodref>
            <methodref name="DoRemoveObject" visibility="protected" procflags="override">
            </methodref>
            <methodref name="DoDeleteChildren" visibility="protected" procflags="override">
            </methodref>
            <propertyref name="PaintStage" visibility="protected">
            </propertyref>
            <propertyref name="TempCanvas" visibility="protected">
            </propertyref>
            <methodref name="SetLeft" visibility="protected">
            </methodref>
            <methodref name="SetTop" visibility="protected">
            </methodref>
            <methodref name="UpdateExplicitBounds" visibility="protected">
            </methodref>
            <methodref name="UpdateAnchorRules" visibility="protected">
            </methodref>
            <propertyref name="Left" visibility="protected">
            </propertyref>
            <propertyref name="Top" visibility="protected">
            </propertyref>
            <propertyref name="ExplicitLeft" visibility="protected">
            </propertyref>
            <propertyref name="ExplicitTop" visibility="protected">
            </propertyref>
            <propertyref name="ExplicitWidth" visibility="protected">
            </propertyref>
            <propertyref name="ExplicitHeight" visibility="protected">
            </propertyref>
            <methodref name="GetActionLinkClass" visibility="protected" procflags="override">
            </methodref>
            <methodref name="ActionChange" visibility="protected" procflags="override">
            </methodref>
            <methodref name="EnabledStored" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="VisibleStored" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="EnabledChanged" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="VisibleChanged" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="IsControlRectEmpty" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="GetControls" visibility="protected">
            </methodref>
            <methodref name="DoGesture" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="GetTabStopController" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="GetTabListClass" visibility="protected" procflags="virtual">
            </methodref>
            <propertyref name="DoubleClick" visibility="protected">
            </propertyref>
            <propertyref name="RotationAngle" visibility="protected">
            </propertyref>
            <propertyref name="RotationCenter" visibility="protected">
            </propertyref>
            <propertyref name="Scale" visibility="protected">
            </propertyref>
            <propertyref name="DisabledOpacity" visibility="protected">
            </propertyref>
            <propertyref name="ParentContent" visibility="protected">
            </propertyref>
            <propertyref name="ParentShowHint" visibility="protected">
            </propertyref>
            <methodref name="Create" visibility="public" procflags="constructor override">
            </methodref>
            <methodref name="Destroy" visibility="public" procflags="destructor override">
            </methodref>
            <methodref name="SetNewScene" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="SetBounds" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="AbsoluteToLocal" visibility="public" procflags="overload virtual">
            </methodref>
            <methodref name="AbsoluteToLocal" visibility="public" procflags="overload">
            </methodref>
            <methodref name="LocalToAbsolute" visibility="public" procflags="overload virtual">
            </methodref>
            <methodref name="LocalToAbsolute" visibility="public" procflags="overload">
            </methodref>
            <methodref name="ScreenToLocal" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="LocalToScreen" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="ConvertLocalPointFrom" visibility="public">
            </methodref>
            <methodref name="ConvertLocalPointTo" visibility="public">
            </methodref>
            <methodref name="AbsoluteToLocalVector" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="LocalToAbsoluteVector" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="PointInObject" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="PointInObjectLocal" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="MakeScreenshot" visibility="public">
            </methodref>
            <methodref name="BeginUpdate" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="IsUpdating" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="EndUpdate" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="RecalcAbsoluteNow" visibility="public">
            </methodref>
            <methodref name="RecalcUpdateRect" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="RecalcOpacity" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="RecalcAbsolute" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="RecalcEnabled" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="RecalcHasEffect" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="RecalcHasClipParent" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="PrepareForPaint" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="RecalcSize" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="UpdateEffects" visibility="public">
            </methodref>
            <methodref name="ApplyTriggerEffect" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="StartTriggerAnimation" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="StartTriggerAnimationWait" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="SetFocus" visibility="public">
            </methodref>
            <methodref name="ResetFocus" visibility="public">
            </methodref>
            <methodref name="PaintTo" visibility="public">
            </methodref>
            <methodref name="Repaint" visibility="public">
            </methodref>
            <methodref name="InvalidateRect" visibility="public">
            </methodref>
            <methodref name="Lock" visibility="public">
            </methodref>
            <propertyref name="AbsoluteMatrix" visibility="public">
            </propertyref>
            <propertyref name="AbsoluteOpacity" visibility="public">
            </propertyref>
            <propertyref name="AbsoluteWidth" visibility="public">
            </propertyref>
            <propertyref name="AbsoluteHeight" visibility="public">
            </propertyref>
            <propertyref name="AbsoluteScale" visibility="public">
            </propertyref>
            <propertyref name="AbsoluteEnabled" visibility="public">
            </propertyref>
            <propertyref name="AbsoluteRect" visibility="public">
            </propertyref>
            <propertyref name="AbsoluteClipRect" visibility="public">
            </propertyref>
            <propertyref name="AxisAlignedRect" visibility="public">
            </propertyref>
            <propertyref name="ApplyingEffect" visibility="public">
            </propertyref>
            <propertyref name="HasEffect" visibility="public">
            </propertyref>
            <propertyref name="HasDisablePaintEffect" visibility="public">
            </propertyref>
            <propertyref name="HasAfterPaintEffect" visibility="public">
            </propertyref>
            <propertyref name="HasClipParent" visibility="public">
            </propertyref>
            <propertyref name="ChildrenRect" visibility="public">
            </propertyref>
            <propertyref name="DefaultSize" visibility="public">
            </propertyref>
            <propertyref name="FixedSize" visibility="public">
            </propertyref>
            <propertyref name="InvertAbsoluteMatrix" visibility="public">
            </propertyref>
            <propertyref name="InPaintTo" visibility="public">
            </propertyref>
            <propertyref name="LocalRect" visibility="public">
            </propertyref>
            <propertyref name="Pressed" visibility="public">
            </propertyref>
            <propertyref name="PressedPosition" visibility="public">
            </propertyref>
            <propertyref name="UpdateRect" visibility="public">
            </propertyref>
            <propertyref name="BoundsRect" visibility="public">
            </propertyref>
            <propertyref name="ParentedRect" visibility="public">
            </propertyref>
            <propertyref name="ParentedVisible" visibility="public">
            </propertyref>
            <propertyref name="ClipRect" visibility="public">
            </propertyref>
            <propertyref name="Canvas" visibility="public">
            </propertyref>
            <propertyref name="Controls" visibility="public">
            </propertyref>
            <propertyref name="ControlsCount" visibility="public">
            </propertyref>
            <propertyref name="ParentControl" visibility="public">
            </propertyref>
            <propertyref name="Scene" visibility="public">
            </propertyref>
            <propertyref name="AutoCapture" visibility="public">
            </propertyref>
            <propertyref name="CanFocus" visibility="public">
            </propertyref>
            <propertyref name="CanParentFocus" visibility="public">
            </propertyref>
            <propertyref name="DisableFocusEffect" visibility="public">
            </propertyref>
            <propertyref name="IsInflated" visibility="public">
            </propertyref>
            <methodref name="EnumControls" visibility="public" procflags="overload">
            </methodref>
            <methodref name="EnumControls" visibility="public" procflags="overload" symflags="deprecated">
            </methodref>
            <methodref name="GetTabList" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="ShowInDesigner" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="ShouldTestMouseHits" visibility="public" procflags="virtual">
            </methodref>
            <propertyref name="IsMouseOver" visibility="public">
            </propertyref>
            <propertyref name="IsDragOver" visibility="public">
            </propertyref>
            <propertyref name="IsFocused" visibility="public">
            </propertyref>
            <propertyref name="IsVisible" visibility="public">
            </propertyref>
            <propertyref name="Align" visibility="public">
            </propertyref>
            <propertyref name="Anchors" visibility="public">
            </propertyref>
            <propertyref name="Cursor" visibility="public">
            </propertyref>
            <propertyref name="InheritedCursor" visibility="public">
            </propertyref>
            <propertyref name="DragMode" visibility="public">
            </propertyref>
            <propertyref name="EnableDragHighlight" visibility="public">
            </propertyref>
            <propertyref name="Enabled" visibility="public">
            </propertyref>
            <propertyref name="Position" visibility="public">
            </propertyref>
            <propertyref name="Locked" visibility="public">
            </propertyref>
            <propertyref name="Width" visibility="public">
            </propertyref>
            <propertyref name="Height" visibility="public">
            </propertyref>
            <propertyref name="Size" visibility="public">
            </propertyref>
            <propertyref name="Padding" visibility="public">
            </propertyref>
            <propertyref name="Margins" visibility="public">
            </propertyref>
            <propertyref name="Opacity" visibility="public">
            </propertyref>
            <propertyref name="ClipChildren" visibility="public">
            </propertyref>
            <propertyref name="ClipParent" visibility="public">
            </propertyref>
            <propertyref name="HitTest" visibility="public">
            </propertyref>
            <propertyref name="PopupMenu" visibility="public">
            </propertyref>
            <propertyref name="TabOrder" visibility="public">
            </propertyref>
            <propertyref name="Visible" visibility="public">
            </propertyref>
            <eventref name="CustomSceneAddRect" visibility="public">
            </eventref>
            <eventref name="OnDragEnter" visibility="public">
            </eventref>
            <eventref name="OnDragLeave" visibility="public">
            </eventref>
            <eventref name="OnDragOver" visibility="public">
            </eventref>
            <eventref name="OnDragDrop" visibility="public">
            </eventref>
            <eventref name="OnDragEnd" visibility="public">
            </eventref>
            <eventref name="OnKeyDown" visibility="public">
            </eventref>
            <eventref name="OnKeyUp" visibility="public">
            </eventref>
            <eventref name="OnClick" visibility="public">
            </eventref>
            <eventref name="OnDblClick" visibility="public">
            </eventref>
            <eventref name="OnCanFocus" visibility="public">
            </eventref>
            <eventref name="OnEnter" visibility="public">
            </eventref>
            <eventref name="OnExit" visibility="public">
            </eventref>
            <eventref name="OnMouseDown" visibility="public">
            </eventref>
            <eventref name="OnMouseMove" visibility="public">
            </eventref>
            <eventref name="OnMouseUp" visibility="public">
            </eventref>
            <eventref name="OnMouseWheel" visibility="public">
            </eventref>
            <eventref name="OnMouseEnter" visibility="public">
            </eventref>
            <eventref name="OnMouseLeave" visibility="public">
            </eventref>
            <eventref name="OnPainting" visibility="public">
            </eventref>
            <eventref name="OnPaint" visibility="public">
            </eventref>
            <eventref name="OnResize" visibility="public">
            </eventref>
            <eventref name="OnResized" visibility="public">
            </eventref>
            <eventref name="OnActivate" visibility="public">
            </eventref>
            <eventref name="OnDeactivate" visibility="public">
            </eventref>
            <eventref name="OnApplyStyleLookup" visibility="public">
            </eventref>
            <propertyref name="TouchTargetExpansion" visibility="public">
            </propertyref>
            <propertyref name="TabStop" visibility="public">
            </propertyref>
            <propertyref name="DisableDisappear" visibility="public">
            </propertyref>
            <propertyref name="ShowHint" visibility="public">
            </propertyref>
            <propertyref name="Hint" visibility="public">
            </propertyref>
            <propertyref name="Touch" visibility="published">
            </propertyref>
            <eventref name="OnGesture" visibility="published">
            </eventref>
            <eventref name="OnTap" visibility="published">
            </eventref>
            <ancestor name="TFmxObject" namespace="FMX.Types">
              <interfaces>
                <implements name="IActionClient"/>
                <implements name="IFreeNotification"/>
              </interfaces>
              <methodref name="SetStyleName" visibility="private">
              </methodref>
              <methodref name="SetStored" visibility="private">
              </methodref>
              <methodref name="GetChildrenCount" visibility="private" procflags="inline">
              </methodref>
              <methodref name="GetIndexOfChild" visibility="private">
              </methodref>
              <methodref name="SetIndexOfChild" visibility="private">
              </methodref>
              <methodref name="SetIndex" visibility="private">
              </methodref>
              <methodref name="GetActionRoot" visibility="private">
              </methodref>
              <methodref name="GetActionClient" visibility="private" procflags="inline">
              </methodref>
              <methodref name="SetActionClient" visibility="private">
              </methodref>
              <methodref name="GetAction" visibility="private">
              </methodref>
              <methodref name="SetAction" visibility="private">
              </methodref>
              <methodref name="GetIndex" visibility="private">
              </methodref>
              <methodref name="Create@" visibility="class private" procflags="class constructor noself">
              </methodref>
              <methodref name="Destroy@" visibility="class private" procflags="class destructor noself">
              </methodref>
              <methodref name="CreateChildrenList" visibility="protected" procflags="virtual">
              </methodref>
              <methodref name="ResetChildrenIndicesSpan" visibility="protected">
              </methodref>
              <methodref name="ResetChildrenIndices" visibility="protected">
              </methodref>
              <methodref name="GetBackIndex" visibility="protected" procflags="virtual">
              </methodref>
              <methodref name="DefineProperties" visibility="protected" procflags="override">
              </methodref>
              <methodref name="IgnoreBindingName" visibility="protected">
              </methodref>
              <methodref name="GetChildren" visibility="protected" procflags="override">
              </methodref>
              <methodref name="SetParentComponent" visibility="protected" procflags="override">
              </methodref>
              <methodref name="Notification" visibility="protected" procflags="override">
              </methodref>
              <methodref name="GetActionLinkClass" visibility="protected" procflags="virtual">
              </methodref>
              <methodref name="InitiateAction" visibility="protected" procflags="virtual">
              </methodref>
              <methodref name="DoActionChange" visibility="protected" procflags="virtual">
              </methodref>
              <methodref name="ActionChange" visibility="protected" procflags="virtual">
              </methodref>
              <methodref name="DoActionClientChanged" visibility="protected" procflags="virtual">
              </methodref>
              <propertyref name="ActionLink" visibility="protected">
              </propertyref>
              <propertyref name="Action" visibility="protected">
              </propertyref>
              <propertyref name="StyleIndexer" visibility="protected">
              </propertyref>
              <methodref name="GetParentComponent" visibility="public" procflags="override">
              </methodref>
              <methodref name="HasParent" visibility="public" procflags="override">
              </methodref>
              <methodref name="AddToResourcePool" visibility="protected" procflags="virtual">
              </methodref>
              <methodref name="RemoveFromResourcePool" visibility="protected" procflags="virtual">
              </methodref>
              <methodref name="SetParent" visibility="protected" procflags="virtual">
              </methodref>
              <methodref name="DoRootChanging" visibility="protected" procflags="virtual">
              </methodref>
              <methodref name="DoRootChanged" visibility="protected" procflags="virtual">
              </methodref>
              <methodref name="ParentChanged" visibility="protected" procflags="virtual">
              </methodref>
              <methodref name="ChangeOrder" visibility="protected" procflags="virtual">
              </methodref>
              <methodref name="ChangeChildren" visibility="protected" procflags="virtual">
              </methodref>
              <methodref name="DoAddObject" visibility="protected" procflags="virtual">
              </methodref>
              <methodref name="DoInsertObject" visibility="protected" procflags="virtual">
              </methodref>
              <methodref name="DoRemoveObject" visibility="protected" procflags="virtual">
              </methodref>
              <methodref name="DoDeleteChildren" visibility="protected" procflags="virtual">
              </methodref>
              <methodref name="SearchInto" visibility="protected" procflags="virtual">
              </methodref>
              <methodref name="FreeNotification" visibility="protected" procflags="virtual">
              </methodref>
              <methodref name="SupportsPlatformService" visibility="protected" procflags="virtual">
              </methodref>
              <methodref name="GetData" visibility="protected" procflags="virtual">
              </methodref>
              <methodref name="SetData" visibility="protected" procflags="virtual">
              </methodref>
              <methodref name="IgnoreIntegerValue" visibility="protected">
              </methodref>
              <methodref name="IgnoreFloatValue" visibility="protected">
              </methodref>
              <methodref name="IgnoreBooleanValue" visibility="protected">
              </methodref>
              <methodref name="IgnoreIdentValue" visibility="protected">
              </methodref>
              <methodref name="Create" visibility="public" procflags="constructor override">
              </methodref>
              <methodref name="Destroy" visibility="public" procflags="destructor override">
              </methodref>
              <methodref name="BeforeDestruction" visibility="public" procflags="override">
              </methodref>
              <methodref name="Release" visibility="public" procflags="virtual">
              </methodref>
              <methodref name="Released" visibility="public" symflags="deprecated">
              </methodref>
              <methodref name="ObjectState" visibility="public" symflags="deprecated">
              </methodref>
              <methodref name="SetRoot" visibility="public">
              </methodref>
              <methodref name="SetDesign" visibility="public">
              </methodref>
              <methodref name="Clone" visibility="public">
              </methodref>
              <methodref name="AddObject" visibility="public">
              </methodref>
              <methodref name="InsertObject" visibility="public">
              </methodref>
              <methodref name="RemoveObject" visibility="public" procflags="overload">
              </methodref>
              <methodref name="RemoveObject" visibility="public" procflags="overload">
              </methodref>
              <methodref name="ContainsObject" visibility="public" procflags="virtual">
              </methodref>
              <methodref name="Exchange" visibility="public" procflags="virtual">
              </methodref>
              <methodref name="DeleteChildren" visibility="public">
              </methodref>
              <methodref name="IsChild" visibility="public" procflags="virtual">
              </methodref>
              <methodref name="BringChildToFront" visibility="public">
              </methodref>
              <methodref name="SendChildToBack" visibility="public">
              </methodref>
              <methodref name="BringToFront" visibility="public" procflags="virtual">
              </methodref>
              <methodref name="SendToBack" visibility="public" procflags="virtual">
              </methodref>
              <methodref name="AddObjectsToList" visibility="public">
              </methodref>
              <methodref name="Sort" visibility="public" procflags="virtual">
              </methodref>
              <methodref name="EnumObjects" visibility="public">
              </methodref>
              <methodref name="AnimateFloat" visibility="public" symflags="deprecated">
              </methodref>
              <methodref name="AnimateFloatDelay" visibility="public" symflags="deprecated">
              </methodref>
              <methodref name="AnimateFloatWait" visibility="public" symflags="deprecated">
              </methodref>
              <methodref name="AnimateInt" visibility="public" symflags="deprecated">
              </methodref>
              <methodref name="AnimateIntWait" visibility="public" symflags="deprecated">
              </methodref>
              <methodref name="AnimateColor" visibility="public" symflags="deprecated">
              </methodref>
              <methodref name="StopPropertyAnimation" visibility="public">
              </methodref>
              <methodref name="AddFreeNotify" visibility="public">
              </methodref>
              <methodref name="RemoveFreeNotify" visibility="public">
              </methodref>
              <methodref name="FindStyleResource" visibility="public" procflags="overload virtual">
              </methodref>
              <propertyref name="Root" visibility="public">
              </propertyref>
              <propertyref name="Stored" visibility="public">
              </propertyref>
              <propertyref name="TagObject" visibility="public">
              </propertyref>
              <propertyref name="TagFloat" visibility="public">
              </propertyref>
              <propertyref name="TagString" visibility="public">
              </propertyref>
              <propertyref name="ChildrenCount" visibility="public">
              </propertyref>
              <propertyref name="Children" visibility="public">
              </propertyref>
              <propertyref name="Data" visibility="public">
              </propertyref>
              <propertyref name="Parent" visibility="public">
              </propertyref>
              <propertyref name="Index" visibility="public">
              </propertyref>
              <propertyref name="ActionClient" visibility="public">
              </propertyref>
              <propertyref name="StyleName" visibility="published">
              </propertyref>
              <ancestor name="TComponent" namespace="System.Classes">
                <interfaces>
                  <implements name="IInterfaceComponentReference"/>
                  <implements name="IInterface"/>
                </interfaces>
                <methodref name="GetComObject" visibility="private">
                </methodref>
                <methodref name="GetComponent" visibility="private">
                </methodref>
                <methodref name="GetComponentCount" visibility="private">
                </methodref>
                <methodref name="GetComponentIndex" visibility="private">
                </methodref>
                <methodref name="Insert" visibility="private">
                </methodref>
                <methodref name="ReadLeft" visibility="private">
                </methodref>
                <methodref name="ReadTop" visibility="private">
                </methodref>
                <methodref name="Remove" visibility="private">
                </methodref>
                <methodref name="RemoveNotification" visibility="private">
                </methodref>
                <methodref name="SetComponentIndex" visibility="private">
                </methodref>
                <methodref name="SetReference" visibility="private">
                </methodref>
                <methodref name="WriteLeft" visibility="private">
                </methodref>
                <methodref name="WriteTop" visibility="private">
                </methodref>
                <methodref name="IntfGetComponent" visibility="private">
                </methodref>
                <methodref name="DoGetDeltaStreams" visibility="private">
                </methodref>
                <methodref name="ReadDeltaStream" visibility="private">
                </methodref>
                <methodref name="ReadDeltaState" visibility="private">
                </methodref>
                <methodref name="FindSortedComponent" visibility="private">
                </methodref>
                <methodref name="AddSortedComponent" visibility="private">
                </methodref>
                <methodref name="RemoveSortedComponent" visibility="private" procflags="inline">
                </methodref>
                <methodref name="Create@" visibility="class private" procflags="class constructor noself">
                </methodref>
                <methodref name="AsyncSchedule" visibility="protected" procflags="virtual">
                </methodref>
                <methodref name="ChangeName" visibility="protected">
                </methodref>
                <methodref name="DefineProperties" visibility="protected" procflags="override">
                </methodref>
                <methodref name="GetChildren" visibility="protected" procflags="dynamic">
                </methodref>
                <methodref name="GetChildOwner" visibility="protected" procflags="dynamic">
                </methodref>
                <methodref name="GetChildParent" visibility="protected" procflags="dynamic">
                </methodref>
                <methodref name="GetOwner" visibility="protected" procflags="override">
                </methodref>
                <methodref name="Loaded" visibility="protected" procflags="virtual">
                </methodref>
                <methodref name="Notification" visibility="protected" procflags="virtual">
                </methodref>
                <methodref name="GetDeltaStreams" visibility="protected" procflags="dynamic">
                </methodref>
                <methodref name="ReadState" visibility="protected" procflags="virtual">
                </methodref>
                <methodref name="CanObserve" visibility="protected" procflags="virtual">
                </methodref>
                <methodref name="ObserverAdded" visibility="protected" procflags="virtual">
                </methodref>
                <methodref name="GetObservers" visibility="protected" procflags="virtual">
                </methodref>
                <methodref name="SetAncestor" visibility="protected">
                </methodref>
                <methodref name="SetDesigning" visibility="protected">
                </methodref>
                <methodref name="SetInline" visibility="protected">
                </methodref>
                <methodref name="SetDesignInstance" visibility="protected">
                </methodref>
                <methodref name="SetName" visibility="protected" procflags="virtual">
                </methodref>
                <methodref name="SetChildOrder" visibility="protected" procflags="dynamic">
                </methodref>
                <methodref name="SetParentComponent" visibility="protected" procflags="dynamic">
                </methodref>
                <methodref name="Updating" visibility="protected" procflags="dynamic">
                </methodref>
                <methodref name="Updated" visibility="protected" procflags="dynamic">
                </methodref>
                <methodref name="UpdateRegistry" visibility="protected" procflags="class virtual">
                </methodref>
                <methodref name="ValidateRename" visibility="protected" procflags="virtual">
                </methodref>
                <methodref name="ValidateContainer" visibility="protected" procflags="dynamic">
                </methodref>
                <methodref name="ValidateInsert" visibility="protected" procflags="dynamic">
                </methodref>
                <methodref name="WriteState" visibility="protected" procflags="virtual">
                </methodref>
                <methodref name="RemoveFreeNotifications" visibility="protected">
                </methodref>
                <methodref name="QueryInterface" visibility="protected" procflags="virtual">
                </methodref>
                <methodref name="_AddRef" visibility="protected">
                </methodref>
                <methodref name="_Release" visibility="protected">
                </methodref>
                <methodref name="GetTypeInfoCount" visibility="protected">
                </methodref>
                <methodref name="GetTypeInfo" visibility="protected">
                </methodref>
                <methodref name="GetIDsOfNames" visibility="protected">
                </methodref>
                <methodref name="Invoke" visibility="protected">
                </methodref>
                <eventref name="OnGetDeltaStreams" visibility="protected">
                </eventref>
                <methodref name="Create" visibility="public" procflags="constructor virtual">
                </methodref>
                <methodref name="Destroy" visibility="public" procflags="destructor override">
                </methodref>
                <methodref name="BeforeDestruction" visibility="public" procflags="override">
                </methodref>
                <methodref name="BeginInvoke" visibility="public" procflags="overload">
                </methodref>
                <methodref name="BeginInvoke" visibility="public" procflags="overload">
                </methodref>
                <methodref name="BeginInvoke" visibility="public" procflags="overload">
                </methodref>
                <methodref name="BeginInvoke" visibility="public" procflags="overload">
                </methodref>
                <methodref name="BeginInvoke" visibility="public" procflags="overload">
                </methodref>
                <methodref name="BeginInvoke" visibility="public" procflags="overload">
                </methodref>
                <methodref name="BeginInvoke" visibility="public" procflags="overload">
                </methodref>
                <methodref name="BeginInvoke" visibility="public" procflags="overload">
                </methodref>
                <methodref name="EndInvoke" visibility="public" procflags="overload">
                </methodref>
                <methodref name="EndInvoke" visibility="public" procflags="overload">
                </methodref>
                <methodref name="EndFunctionInvoke" visibility="public">
                </methodref>
                <methodref name="DestroyComponents" visibility="public">
                </methodref>
                <methodref name="Destroying" visibility="public">
                </methodref>
                <methodref name="ExecuteAction" visibility="public" procflags="dynamic">
                </methodref>
                <methodref name="FindComponent" visibility="public">
                </methodref>
                <methodref name="FreeNotification" visibility="public">
                </methodref>
                <methodref name="RemoveFreeNotification" visibility="public">
                </methodref>
                <methodref name="FreeOnRelease" visibility="public">
                </methodref>
                <methodref name="GetEnumerator" visibility="public" procflags="inline">
                </methodref>
                <methodref name="GetParentComponent" visibility="public" procflags="dynamic">
                </methodref>
                <methodref name="GetNamePath" visibility="public" procflags="override">
                </methodref>
                <methodref name="HasParent" visibility="public" procflags="dynamic">
                </methodref>
                <methodref name="InsertComponent" visibility="public">
                </methodref>
                <methodref name="RemoveComponent" visibility="public">
                </methodref>
                <methodref name="SetSubComponent" visibility="public">
                </methodref>
                <methodref name="SafeCallException" visibility="public" procflags="override">
                </methodref>
                <methodref name="UpdateAction" visibility="public" procflags="virtual">
                </methodref>
                <methodref name="IsImplementorOf" visibility="public">
                </methodref>
                <methodref name="ReferenceInterface" visibility="public">
                </methodref>
                <propertyref name="ComObject" visibility="public">
                </propertyref>
                <propertyref name="Components" visibility="public">
                </propertyref>
                <propertyref name="ComponentCount" visibility="public">
                </propertyref>
                <propertyref name="ComponentIndex" visibility="public">
                </propertyref>
                <propertyref name="ComponentState" visibility="public">
                </propertyref>
                <propertyref name="ComponentStyle" visibility="public">
                </propertyref>
                <propertyref name="DesignInfo" visibility="public">
                </propertyref>
                <propertyref name="Owner" visibility="public">
                </propertyref>
                <propertyref name="VCLComObject" visibility="public">
                </propertyref>
                <propertyref name="Observers" visibility="public">
                </propertyref>
                <propertyref name="Name" visibility="published">
                </propertyref>
                <propertyref name="Tag" visibility="published">
                </propertyref>
                <ancestor name="TPersistent" namespace="System.Classes">
                  <methodref name="AssignError" visibility="private">
                  </methodref>
                  <methodref name="AssignTo" visibility="protected" procflags="virtual">
                  </methodref>
                  <methodref name="DefineProperties" visibility="protected" procflags="virtual">
                  </methodref>
                  <methodref name="GetOwner" visibility="protected" procflags="dynamic">
                  </methodref>
                  <methodref name="Destroy" visibility="public" procflags="destructor override">
                  </methodref>
                  <methodref name="Assign" visibility="public" procflags="virtual">
                  </methodref>
                  <methodref name="GetNamePath" visibility="public" procflags="dynamic">
                  </methodref>
                  <ancestor name="TObject" namespace="System">
                    <methodref name="Create" visibility="public" procflags="constructor">
                    </methodref>
                    <methodref name="Free" visibility="public">
                    </methodref>
                    <methodref name="DisposeOf" visibility="public" procflags="inline">
                    </methodref>
                    <methodref name="InitInstance" visibility="public" procflags="class">
                    </methodref>
                    <methodref name="CleanupInstance" visibility="public">
                    </methodref>
                    <methodref name="ClassType" visibility="public" procflags="inline">
                    </methodref>
                    <methodref name="ClassName" visibility="public" procflags="class">
                    </methodref>
                    <methodref name="ClassNameIs" visibility="public" procflags="class">
                    </methodref>
                    <methodref name="ClassParent" visibility="public" procflags="class inline">
                    </methodref>
                    <methodref name="ClassInfo" visibility="public" procflags="class inline">
                    </methodref>
                    <methodref name="InstanceSize" visibility="public" procflags="class inline">
                    </methodref>
                    <methodref name="InheritsFrom" visibility="public" procflags="class">
                    </methodref>
                    <methodref name="MethodAddress" visibility="public" procflags="class overload">
                    </methodref>
                    <methodref name="MethodAddress" visibility="public" procflags="class overload">
                    </methodref>
                    <methodref name="MethodName" visibility="public" procflags="class">
                    </methodref>
                    <methodref name="QualifiedClassName" visibility="public" procflags="class">
                    </methodref>
                    <methodref name="FieldAddress" visibility="public" procflags="overload">
                    </methodref>
                    <methodref name="FieldAddress" visibility="public" procflags="overload">
                    </methodref>
                    <methodref name="GetInterface" visibility="public">
                    </methodref>
                    <methodref name="GetInterfaceEntry" visibility="public" procflags="class">
                    </methodref>
                    <methodref name="GetInterfaceTable" visibility="public" procflags="class inline">
                    </methodref>
                    <methodref name="UnitName" visibility="public" procflags="class">
                    </methodref>
                    <methodref name="UnitScope" visibility="public" procflags="class">
                    </methodref>
                    <methodref name="Equals" visibility="public" procflags="virtual">
                    </methodref>
                    <methodref name="GetHashCode" visibility="public" procflags="virtual">
                    </methodref>
                    <methodref name="ToString" visibility="public" procflags="virtual">
                    </methodref>
                    <methodref name="SafeCallException" visibility="public" procflags="virtual">
                    </methodref>
                    <methodref name="AfterConstruction" visibility="public" procflags="virtual">
                    </methodref>
                    <methodref name="BeforeDestruction" visibility="public" procflags="virtual">
                    </methodref>
                    <methodref name="Dispatch" visibility="public" procflags="virtual">
                    </methodref>
                    <methodref name="DefaultHandler" visibility="public" procflags="virtual">
                    </methodref>
                    <methodref name="NewInstance" visibility="public" procflags="class virtual">
                    </methodref>
                    <methodref name="FreeInstance" visibility="public" procflags="virtual">
                    </methodref>
                    <methodref name="Destroy" visibility="public" procflags="destructor virtual">
                    </methodref>
                    <methodref name="GetDisposed" visibility="protected" procflags="inline">
                    </methodref>
                    <methodref name="CheckDisposed" visibility="protected" procflags="inline">
                    </methodref>
                    <propertyref name="Disposed" visibility="protected">
                    </propertyref>
                  </ancestor>
                </ancestor>
              </ancestor>
            </ancestor>
          </ancestor>
        </ancestor>
      </ancestor>
    </ancestor>
    <interfaces>
      <implements name="IReadOnly"/>
      <implements name="ICaret"/>
      <implements name="IVirtualKeyboardControl"/>
      <implements name="ITextActions"/>
      <implements name="ITextSettings"/>
    </interfaces>
    <members>
      <field name="FSaveReadOnly" type="Boolean" visibility="private" size="1" offset="1000" file="FMX.Memo.pas" line="230"/>
      <procedure name="ReadTextData" visibility="private" file="FMX.Memo.pas" line="231">
        <parameters>
          <parameter name="Reader" type="TReader"/>
        </parameters>
      </procedure>
      <procedure name="ReadHideSelectionData" visibility="private" file="FMX.Memo.pas" line="232">
        <parameters>
          <parameter name="Reader" type="TReader"/>
        </parameters>
      </procedure>
      <function name="GetModel" visibility="private" procflags="overload" file="FMX.Memo.pas" line="233">
        <parameters>
          <retval type="TCustomMemoModel">
            <devnotes>
               <summary>Data model for the TMemo control.</summary>
            </devnotes>
          </retval>
        </parameters>
      </function>
      <function name="GetLines" visibility="private" file="FMX.Memo.pas" line="234">
        <parameters>
          <retval type="TStrings"/>
        </parameters>
      </function>
      <procedure name="SetLines" visibility="private" file="FMX.Memo.pas" line="235">
        <parameters>
          <parameter name="Value" type="TStrings" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="GetCheckSpelling" visibility="private" file="FMX.Memo.pas" line="236">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <procedure name="SetCheckSpelling" visibility="private" file="FMX.Memo.pas" line="237">
        <parameters>
          <parameter name="Value" type="Boolean" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="GetAutoSelect" visibility="private" file="FMX.Memo.pas" line="238">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <procedure name="SetAutoSelect" visibility="private" file="FMX.Memo.pas" line="239">
        <parameters>
          <parameter name="Value" type="Boolean" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="GetCaret" visibility="private" file="FMX.Memo.pas" line="240">
        <parameters>
          <retval type="TCaret"/>
        </parameters>
      </function>
      <procedure name="SetCaret" visibility="private" file="FMX.Memo.pas" line="241">
        <parameters>
          <parameter name="Value" type="TCaret" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="GetCharCase" visibility="private" file="FMX.Memo.pas" line="242">
        <parameters>
          <retval type="TEditCharCase"/>
        </parameters>
      </function>
      <procedure name="SetCharCase" visibility="private" file="FMX.Memo.pas" line="243">
        <parameters>
          <parameter name="Value" type="TEditCharCase" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="GetHideSelectionOnExit" visibility="private" file="FMX.Memo.pas" line="244">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <procedure name="SetHideSelectionOnExit" visibility="private" file="FMX.Memo.pas" line="245">
        <parameters>
          <parameter name="Value" type="Boolean" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="GetMaxLength" visibility="private" file="FMX.Memo.pas" line="246">
        <parameters>
          <retval type="Integer"/>
        </parameters>
      </function>
      <procedure name="SetMaxLength" visibility="private" file="FMX.Memo.pas" line="247">
        <parameters>
          <parameter name="Value" type="Integer" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="GetImeMode" visibility="private" file="FMX.Memo.pas" line="248">
        <parameters>
          <retval type="TImeMode"/>
        </parameters>
      </function>
      <procedure name="SetImeMode" visibility="private" file="FMX.Memo.pas" line="249">
        <parameters>
          <parameter name="Value" type="TImeMode" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="GetSelLength" visibility="private" file="FMX.Memo.pas" line="250">
        <parameters>
          <retval type="Integer"/>
        </parameters>
      </function>
      <procedure name="SetSelLength" visibility="private" file="FMX.Memo.pas" line="251">
        <parameters>
          <parameter name="Value" type="Integer" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="GetSelStart" visibility="private" file="FMX.Memo.pas" line="252">
        <parameters>
          <retval type="Integer"/>
        </parameters>
      </function>
      <procedure name="SetSelStart" visibility="private" file="FMX.Memo.pas" line="253">
        <parameters>
          <parameter name="Value" type="Integer" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="GetDataDetectorTypes" visibility="private" file="FMX.Memo.pas" line="254">
        <parameters>
          <retval type="TDataDetectorTypes"/>
        </parameters>
      </function>
      <procedure name="SetDataDetectorTypes" visibility="private" file="FMX.Memo.pas" line="255">
        <parameters>
          <parameter name="Value" type="TDataDetectorTypes" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="GetText" visibility="private" file="FMX.Memo.pas" line="256">
        <parameters>
          <retval type="string"/>
        </parameters>
      </function>
      <procedure name="SetText" visibility="private" file="FMX.Memo.pas" line="257">
        <parameters>
          <parameter name="Value" type="string" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="GetOnChange" visibility="private" file="FMX.Memo.pas" line="258">
        <parameters>
          <retval type="TNotifyEvent"/>
        </parameters>
      </function>
      <procedure name="SetOnChange" visibility="private" file="FMX.Memo.pas" line="259">
        <parameters>
          <parameter name="Value" type="TNotifyEvent" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="GetOnChangeTracking" visibility="private" file="FMX.Memo.pas" line="260">
        <parameters>
          <retval type="TNotifyEvent"/>
        </parameters>
      </function>
      <procedure name="SetOnChangeTracking" visibility="private" file="FMX.Memo.pas" line="261">
        <parameters>
          <parameter name="Value" type="TNotifyEvent" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="GetOnValidate" visibility="private" file="FMX.Memo.pas" line="262">
        <parameters>
          <retval type="TValidateTextEvent"/>
        </parameters>
      </function>
      <procedure name="SetOnValidate" visibility="private" file="FMX.Memo.pas" line="263">
        <parameters>
          <parameter name="Value" type="TValidateTextEvent" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="GetOnValidating" visibility="private" file="FMX.Memo.pas" line="264">
        <parameters>
          <retval type="TValidateTextEvent"/>
        </parameters>
      </function>
      <procedure name="SetOnValidating" visibility="private" file="FMX.Memo.pas" line="265">
        <parameters>
          <parameter name="Value" type="TValidateTextEvent" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="GetDefaultTextSettings" visibility="private" file="FMX.Memo.pas" line="267">
        <parameters>
          <retval type="TTextSettings"/>
        </parameters>
      </function>
      <function name="GetResultingTextSettings" visibility="private" file="FMX.Memo.pas" line="268">
        <parameters>
          <retval type="TTextSettings"/>
        </parameters>
      </function>
      <function name="GetTextSettings" visibility="private" file="FMX.Memo.pas" line="269">
        <parameters>
          <retval type="TTextSettings"/>
        </parameters>
      </function>
      <procedure name="SetTextSettings" visibility="private" file="FMX.Memo.pas" line="270">
        <parameters>
          <parameter name="Value" type="TTextSettings" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="GetStyledSettings" visibility="private" file="FMX.Memo.pas" line="271">
        <parameters>
          <retval type="TStyledSettings"/>
        </parameters>
      </function>
      <procedure name="SetStyledSettings" visibility="private" file="FMX.Memo.pas" line="272">
        <parameters>
          <parameter name="Value" type="TStyledSettings" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="StyledSettingsStored" visibility="private" file="FMX.Memo.pas" line="273">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <function name="GetKeyboardType" visibility="private" file="FMX.Memo.pas" line="275">
        <parameters>
          <retval type="TVirtualKeyboardType"/>
        </parameters>
      </function>
      <procedure name="SetKeyboardType" visibility="private" file="FMX.Memo.pas" line="276">
        <parameters>
          <parameter name="Value" type="TVirtualKeyboardType"/>
        </parameters>
      </procedure>
      <procedure name="SetReturnKeyType" visibility="private" file="FMX.Memo.pas" line="277">
        <parameters>
          <parameter name="Value" type="TReturnKeyType"/>
        </parameters>
      </procedure>
      <function name="GetReturnKeyType" visibility="private" file="FMX.Memo.pas" line="278">
        <parameters>
          <retval type="TReturnKeyType"/>
        </parameters>
      </function>
      <function name="IsPassword" visibility="private" file="FMX.Memo.pas" line="279">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <function name="GetObject" visibility="private" file="FMX.Memo.pas" line="281">
        <parameters>
          <retval type="TCustomCaret"/>
        </parameters>
      </function>
      <procedure name="ShowCaret" visibility="private" file="FMX.Memo.pas" line="282">
      </procedure>
      <procedure name="HideCaret" visibility="private" file="FMX.Memo.pas" line="283">
      </procedure>
      <function name="GetCaretPosition" visibility="private" callconv="cdecl" file="FMX.Memo.pas" line="284">
        <parameters>
          <retval type="TCaretPosition"/>
        </parameters>
      </function>
      <procedure name="SetCaretPosition" visibility="private" file="FMX.Memo.pas" line="285">
        <parameters>
          <parameter name="Value" type="TCaretPosition" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="GetSelText" visibility="private" file="FMX.Memo.pas" line="286">
        <parameters>
          <retval type="string"/>
        </parameters>
      </function>
      <function name="GetFont" visibility="private" file="FMX.Memo.pas" line="287">
        <parameters>
          <retval type="TFont"/>
        </parameters>
      </function>
      <function name="GetFontColor" visibility="private" file="FMX.Memo.pas" line="288">
        <parameters>
          <retval type="TAlphaColor"/>
        </parameters>
      </function>
      <function name="GetSelectionFill" visibility="private" file="FMX.Memo.pas" line="289">
        <parameters>
          <retval type="TBrush"/>
        </parameters>
      </function>
      <function name="GetTextAlign" visibility="private" file="FMX.Memo.pas" line="290">
        <parameters>
          <retval type="TTextAlign"/>
        </parameters>
      </function>
      <function name="GetWordWrap" visibility="private" file="FMX.Memo.pas" line="291">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <procedure name="SetFont" visibility="private" file="FMX.Memo.pas" line="292">
        <parameters>
          <parameter name="Value" type="TFont" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetFontColor" visibility="private" file="FMX.Memo.pas" line="293">
        <parameters>
          <parameter name="Value" type="TAlphaColor" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetTextAlign" visibility="private" file="FMX.Memo.pas" line="294">
        <parameters>
          <parameter name="Value" type="TTextAlign" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetWordWrap" visibility="private" file="FMX.Memo.pas" line="295">
        <parameters>
          <parameter name="Value" type="Boolean" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="ObserverToggle" visibility="private" file="FMX.Memo.pas" line="296">
        <parameters>
          <parameter name="AObserver" type="IObserver" paramflags="const"/>
          <parameter name="Value" type="Boolean" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="GetReadOnly" visibility="private" file="FMX.Memo.pas" line="298">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <procedure name="SetReadOnly" visibility="private" file="FMX.Memo.pas" line="299">
        <parameters>
          <parameter name="Value" type="Boolean" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="DefineProperties" visibility="protected" procflags="override" file="FMX.Memo.pas" line="301">
        <parameters>
          <parameter name="Filer" type="TFiler"/>
        </parameters>
      <devnotes><summary>






Designates methods for storing an object's unpublished data on a stream such as a form file.
FMX.Memo.TCustomMemo.DefineProperties inherits from System.Classes.TComponent.DefineProperties. All content below this line refers to System.Classes.TComponent.DefineProperties.
Designates methods for storing an object's unpublished data on a stream such as a form file.
TComponent overrides the DefineProperties method defined in TPersistent to define &quot;fake&quot; Top and Left properties. These are defined so that components that are not controls can be manipulated at design time. However, the Top and Left properties are hidden, that is, they are not published, because only controls appear at run time.
DefineProperties is virtual; descendent classes can override it. When overriding DefineProperties, be aware that the Ancestor property of Filer might be set, and that this property can determine whether or not it is appropriate to write properties.
DefineProperties is called automatically as part of the component streaming system; do not call it directly.
</summary></devnotes></procedure>
      <function name="DefineModelClass" visibility="protected" procflags="override" file="FMX.Memo.pas" line="302">
        <parameters>
          <retval type="TDataModelClass"/>
        </parameters>
      <devnotes><summary>


Returns a class reference to a data model of this presented control.
FMX.Memo.TCustomMemo.DefineModelClass inherits from FMX.Controls.Presentation.TPresentedControl.DefineModelClass. All content below this line refers to FMX.Controls.Presentation.TPresentedControl.DefineModelClass.
Returns a class reference to a data model of this presented control.
Returns a class reference to a data model class that the constructor of this presented control uses to create a data model for the control.
By default DefineModelClass returns TDataModel. Descendant classes reimplement DefineModelClass to determine the data model class that a descendant presented control uses for its data model.

 See Also
FMX.Controls.Model.TDataModelClass
FMX.Controls.Model.TDataModel
FMX.Controls.Presentation.TPresentedControl.Create
FMX.Controls.Presentation.TPresentedControl.Model
FMX.Presentation.Style.TStyledPresentation.DefineModelClass
Class References

</summary></devnotes></function>
      <function name="DefinePresentationName" visibility="protected" procflags="override" file="FMX.Memo.pas" line="303">
        <parameters>
          <retval type="string"/>
        </parameters>
      <devnotes><summary>
Returns the name of the default presentation proxy that your presented control uses.
FMX.Memo.TCustomMemo.DefinePresentationName inherits from FMX.Controls.Presentation.TPresentedControl.DefinePresentationName. All content below this line refers to FMX.Controls.Presentation.TPresentedControl.DefinePresentationName.
Returns the name of the default presentation proxy that your presented control uses.
You can handle OnPresentationNameChoosing to specify a presentation proxy name to use instead of the name that DefinePresentationName returns.
DefinePresentationName  calls TPresentationProxyFactory.GeneratePresentationName and returns a generated  presentation proxy name based on the class name of the presented control and the control type (Styled or Platform) of the presentation layer. For example:



Class name

Control type

Result


TMyPresentedControl

Styled

&quot;MyPresentedControl-Styled&quot;


TMyPresentedControl

Platform

&quot;MyPresentedControl-Platform&quot;

 See Also
System.TObject.ClassName
FMX.Controls.Presentation.TPresentedControl.ControlType
FMX.Presentation.Factory.TPresentationProxyFactory.Register
FMX.Controls.Presentation.TPresentationProxy
FMX.Controls.Presentation.TPresentedControl.OnPresentationNameChoosing
FMX.Controls.Presentation.TPresentedControl.LoadPresentation

</summary></devnotes></function>
      <function name="GetData" visibility="protected" procflags="override" file="FMX.Memo.pas" line="304">
        <parameters>
          <retval type="TValue">
            <attributes>
              <attribute name="HPPGENAttribute"/>
            </attributes>
          </retval>
        </parameters>
      <devnotes><summary>
Returns the text from the memo control.

</summary></devnotes></function>
      <procedure name="SetData" visibility="protected" procflags="override" file="FMX.Memo.pas" line="305">
        <parameters>
          <parameter name="Value" type="TValue" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Modifies the value of the Text property.
Sets the Text property to Value.
</summary></devnotes></procedure>
      <procedure name="DoBeginUpdate" visibility="protected" procflags="override" file="FMX.Memo.pas" line="307">
      <devnotes><summary>


Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="DoEndUpdate" visibility="protected" procflags="override" file="FMX.Memo.pas" line="308">
      <devnotes><summary>


Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <function name="GetCanFocus" visibility="protected" procflags="override" file="FMX.Memo.pas" line="310">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>


Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></function>
      <function name="CanObserve" visibility="protected" procflags="override" file="FMX.Memo.pas" line="314">
        <devnotes><summary>


Embarcadero Technologies does not currently have any additional information.


</summary></devnotes>
        <parameters>
          <parameter name="ID" type="Integer" paramflags="const"/>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <procedure name="ObserverAdded" visibility="protected" procflags="override" file="FMX.Memo.pas" line="316">
        <devnotes><summary>


Embarcadero Technologies does not currently have any additional information.


</summary></devnotes>
        <parameters>
          <parameter name="ID" type="Integer" paramflags="const"/>
          <parameter name="Observer" type="IObserver" paramflags="const"/>
        </parameters>
      </procedure>
      <constructor name="Create" visibility="public" file="FMX.Memo.pas" line="318">
        <parameters>
          <parameter name="AOwner" type="TComponent"/>
        </parameters>
      <devnotes><summary>


Creates a new instance of TPresentedControl.
FMX.Memo.TCustomMemo.Create inherits from FMX.Controls.Presentation.TPresentedControl.Create. All content below this line refers to FMX.Controls.Presentation.TPresentedControl.Create.
Creates a new instance of TPresentedControl.
AOwner takes ownership of the control and becomes responsible of destroying the control once the control is no longer necessary.
The control constructor creates a data model for the control. DefineModelClass determines the default class of data model for each subclass of TPresentedControl.
Create also sets the value of the CanUseDefaultPresentation property to True.

 See Also
System.Classes.TComponent.Create
FMX.Controls.Presentation.TPresentedControl.Model
FMX.Controls.Presentation.TPresentedControl.DefineModelClass
FMX.Controls.Presentation.TPresentedControl.Destroy
FMX.Controls.Presentation.TPresentedControl.CanUseDefaultPresentation

</summary></devnotes></constructor>
      <procedure name="ClearSelection" visibility="public" file="FMX.Memo.pas" line="320" symflags="deprecated">
        <devnotes>
          <summary>Delete selected text</summary>
        </devnotes>
      </procedure>
      <procedure name="DeleteSelection" visibility="public" file="FMX.Memo.pas" line="323">
        <devnotes><summary>
Removes the selected text from the memo control.
Use DeleteSelection to delete the selected text from the memo control. If the ReadOnly property is True or if no text is selected, DeleteSelection does nothing.
</summary></devnotes>
      </procedure>
      <procedure name="CopyToClipboard" visibility="public" file="FMX.Memo.pas" line="325">
        <devnotes><summary>
Copies the selected text from the memo control to the system Clipboard.
Use CopyToClipboard to replace the contents of the system Clipboard with the selected text. If no text is selected, CopyToClipboard does nothing.
</summary></devnotes>
      </procedure>
      <procedure name="CutToClipboard" visibility="public" file="FMX.Memo.pas" line="327">
        <devnotes><summary>
Copies the selected text to the system Clipboard and then deletes the selected text.
Use CutToClipboard to replace the contents of the system Clipboard with the selected text and then to delete the selected text from the memo control. If no text is selected, CutToClipboard does nothing.
</summary></devnotes>
      </procedure>
      <procedure name="PasteFromClipboard" visibility="public" file="FMX.Memo.pas" line="329">
        <devnotes><summary>
Copies the contents of the system Clipboard to the memo control.
PasteFromClipboard copies the contents of the system Clipboard, if possible, to the memo control, at the position of the cursor. If there is text selected in the memo control, the selected text will be removed. If the content of the system Clipboard is not a string, PasteFromClipboard does nothing.
</summary></devnotes>
      </procedure>
      <procedure name="SelectAll" visibility="public" file="FMX.Memo.pas" line="331">
        <devnotes><summary>
Selects all the text in the memo control.
Use SelectAll to select all the text in the memo control. If there is no text in the memo control, SelectAll does nothing.
</summary></devnotes>
      </procedure>
      <procedure name="SelectWord" visibility="public" file="FMX.Memo.pas" line="333">
        <devnotes><summary>
Selects the word that contains the cursor.
In the memo's text, SelectWord selects a delimited by word dividing characters (space characters, punctuation marks, and others) substring (word) that contains the cursor. Here word dividing characters are space characters, line feeds, and punctuation marks. 
</summary></devnotes>
      </procedure>
      <procedure name="ResetSelection" visibility="public" file="FMX.Memo.pas" line="335">
        <devnotes><summary>
Cancel the text selection if it exists.
The ResetSelection method internally sets the SelLength property to 0.
</summary></devnotes>
      </procedure>
      <procedure name="GoToTextEnd" visibility="public" file="FMX.Memo.pas" line="337">
        <devnotes><summary>
Moves the cursor to the end of the text in the memo control.
</summary></devnotes>
      </procedure>
      <procedure name="GoToTextBegin" visibility="public" file="FMX.Memo.pas" line="339">
        <devnotes><summary>
Moves the cursor to the beginning of the text in the memo control.
</summary></devnotes>
      </procedure>
      <procedure name="Replace" visibility="public" file="FMX.Memo.pas" line="342">
        <devnotes><summary>
Replaces the ALength number of characters, beginning from the AStartPos position, with the AStr string.
The caret is moved to the position of the last inserted character.
</summary></devnotes>
        <parameters>
          <parameter name="AStartPos" type="Integer" paramflags="const"/>
          <parameter name="ALength" type="Integer" paramflags="const"/>
          <parameter name="AStr" type="string" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="GoToLineEnd" visibility="public" file="FMX.Memo.pas" line="346">
        <devnotes><summary>
Moves the cursor to the end of the current visual line.
When WordWrap is True, then each line (in the memo text) can be separated into several 'visual lines'.  
GoToLineEnd moves the cursor to the end of the current (pointed by the cursor) visual line.
</summary></devnotes>
      </procedure>
      <procedure name="GoToLineBegin" visibility="public" file="FMX.Memo.pas" line="350">
        <devnotes><summary>
Moves the cursor to the beginning of the current visual line.
When WordWrap is True, then each line (in the memo text) can be separated into several 'visual lines'.    
GoToLineBegin moves the cursor to the beginning of the current (pointed by the cursor) visual line.
</summary></devnotes>
      </procedure>
      <procedure name="UnDo" visibility="public" file="FMX.Memo.pas" line="352">
        <devnotes><summary>
Undoing the latest text change made in the memo control.
UnDo backs out, if possible, the latest change made to the text in the memo control. If no change has been made, UnDo does nothing.

Note: Remove TDeleteOptions.CanUndo from Options calling DeleteFrom or TInsertOptions.CanUndo from Options calling InsertAfter when modifying the text in the memo control, so that the changes cannot be backed out.</summary></devnotes>
      </procedure>
      <function name="TextPosToPos" visibility="public" file="FMX.Memo.pas" line="356">
        <devnotes><summary>
Converts APos into a Line/Pos coordinate in the memo control.
TextPosToPos returns the TCaretPosition format position of a character indicated by APos. TextPosToPos calculates the TCaretPosition.Line line number and TCaretPosition.Pos horizontal shifting, corresponding to the APos character count coordinate of a character in the text of the memo control. 
Keep in mind that APos counts end-of-line characters. 
For example, if the first line of a memo's text contains 'Hello' and the second line contains 'Goodbye', then the following code:

  OldPosition.Line := 1;           //Zero-based
  OldPosition.Pos := 2;            //Zero-based
  NewPosition := TextPosToPos(PosToTextPos(OldPosition) + 2);

sets the NewPosition.Line to 1 and NewPosition.Pos to 4.
TextPosToPos internally calls Model.TextPosToPos.
</summary></devnotes>
        <parameters>
          <parameter name="APos" type="Integer" paramflags="const"/>
          <retval type="TCaretPosition"/>
        </parameters>
      </function>
      <function name="PosToTextPos" visibility="public" file="FMX.Memo.pas" line="358">
        <devnotes><summary>
Converts a Line/Pos coordinate of a character into a number of this character in the text of the memo.
PosToTextPos returns an integer an integer representing a position of the character specified by APosition in the memo control. The APosition position is specified in the TCaretPosition format which uses the Line number and Pos horizontal shifting of the character in the memo control. Keep in mind that PosToTextPos calculates the character number counting end-of-line characters. 
For example, if the first line of a memo's text contains 'Hello' and the second line contains 'Goodbye', then the following code:

  MyPosition.Line := 1;           //Zero-based
  MyPosition.Pos := 1;            //Zero-based
  MyString := Copy(Text, PosToTextPos(MyPosition) + 1, 3);

sets MyString to 'odb', which are the three characters starting from the third character of the second line.
PosToTextPos internally calls Model.PosToTextPos.
</summary></devnotes>
        <parameters>
          <parameter name="APostion" type="TCaretPosition" paramflags="const"/>
          <retval type="Integer"/>
        </parameters>
      </function>
      <procedure name="InsertAfter" visibility="public" file="FMX.Memo.pas" line="360">
        <devnotes><summary>
Inserts the AFragment string into the memo's text, at APosition.
InsertAfter inserts in the memo's text the string specified by AFragment at the position specified by APosition. Options represent a set of insert options. 

Note: InsertAfter does not insert a newline character. If the Pos field of the APosition parameter is greater than the width of the specified line, then AFragment is inserted on the next line.
Note: If in a call of  InsertAfter one removes TInsertOptions.CanUndo from Options, then the implemented changes cannot be backed out.
InsertAfter internally calls Model.InsertAfter.
</summary></devnotes>
        <parameters>
          <parameter name="APosition" type="TCaretPosition" paramflags="const"/>
          <parameter name="AFragment" type="string" paramflags="const"/>
          <parameter name="Options" type="TInsertOptions" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="DeleteFrom" visibility="public" file="FMX.Memo.pas" line="363">
        <devnotes><summary>
From the memo's text, deletes the fragment of text that has the ALength number of characters and begins at APosition.
Options specifies the delete options.

Note: If in a call of  DeleteFrom, one removes TDeleteOptions.CanUndo from Options, then the implemented changes cannot be backed out.
DeleteFrom internally calls Model.DeleteFrom.
</summary></devnotes>
        <parameters>
          <parameter name="APosition" type="TCaretPosition" paramflags="const"/>
          <parameter name="ALength" type="Integer" paramflags="const"/>
          <parameter name="Options" type="TDeleteOptions" paramflags="const"/>
        </parameters>
      </procedure>
      <property name="Model" visibility="public" read="GetModel" type="TCustomMemoModel" file="FMX.Memo.pas" line="366">
        <devnotes><summary>
Holds the data model of the memo control.
</summary></devnotes>
      </property>
      <property name="Text" visibility="public" read="GetText" write="SetText" type="string" default="0" file="FMX.Memo.pas" line="368">
        <devnotes><summary>
Represents the entire text displayed in the memo control.

Note: The visibility for Text is Public. Thus, Text is not available in the Object Inspector at design time.
For manipulating the text in a TMemo, you should use FMX.Memo.TMemo.Lines, which is available at design time in the Object Inspector.</summary></devnotes>
      </property>
      <property name="AutoSelect" visibility="public" read="GetAutoSelect" write="SetAutoSelect" type="Boolean" file="FMX.Memo.pas" line="372">
        <devnotes><summary>
Defines whether the system selects all the memo's text when the control receives focus.
AutoSelect defines whether the system selects all the Text included in the TCustomMemo memo when the control receives focus. If AutoSelect is True, then all text is selected when the memo receives focus. 
In TMemo, AutoSelect is set to False.  
</summary></devnotes>
      </property>
      <property name="Caret" visibility="public" read="GetCaret" write="SetCaret" type="TCaret" file="FMX.Memo.pas" line="374">
        <devnotes><summary>
Provides access to the TCaret attached to the memo control.
</summary></devnotes>
      </property>
      <property name="CharCase" visibility="public" read="GetCharCase" write="SetCharCase" type="TEditCharCase" file="FMX.Memo.pas" line="376">
        <devnotes><summary>
Defines the character case for the text within the memo control.
Modify the CharCase|CharCase property's value in order to change the case of the text in the memo control. 
Options are: ecNormal, ecUpperCase and ecLowerCase.
</summary></devnotes>
      </property>
      <property name="CheckSpelling" visibility="public" read="GetCheckSpelling" write="SetCheckSpelling" type="Boolean" file="FMX.Memo.pas" line="378">
        <devnotes><summary>
Defines whether the spell-checking feature of the memo control is on or off.
This property enables spell checking on the TMemo component. When set to True a red squiggly line appears underlining the words misspelled.  
The spell checking is performed by an operating system service. It is only supported on iOS and OS X.
</summary></devnotes>
      </property>
      <property name="DataDetectorTypes" visibility="public" read="GetDataDetectorTypes" write="SetDataDetectorTypes" type="TDataDetectorTypes" file="FMX.Memo.pas" line="381">
        <devnotes><summary>
The types of information that can be detected in the memo text.
DataDetectorTypes is used on native presentation for iOS only.
</summary></devnotes>
      </property>
      <property name="HideSelectionOnExit" visibility="public" read="GetHideSelectionOnExit" write="SetHideSelectionOnExit" type="Boolean" file="FMX.Memo.pas" line="384">
        <devnotes><summary>
Determines whether to cancel the visual indication of the selected text region when the memo control does not have the focus.
If HideSelectionOnExit is False, then the memo keeps highlighting the selected text using the SelectionFill brush, even when the focus moves from the memo to another control.
</summary></devnotes>
      </property>
      <property name="ImeMode" visibility="public" read="GetImeMode" write="SetImeMode" type="TImeMode" file="FMX.Memo.pas" line="386">
        <devnotes><summary>
For internal use only.
Do not use this member. It is for internal use only.
Specifies the TImeMode input mode for the memo control.
</summary></devnotes>
      </property>
      <property name="KeyboardType" visibility="public" read="GetKeyboardType" write="SetKeyboardType" type="TVirtualKeyboardType" file="FMX.Memo.pas" line="388">
        <devnotes><summary>
Specifies the type of on-screen keyboard to be displayed for the memo control.
Use KeyboardType to specify the type of on-screen keyboard that appears for the memo when ShowVirtualKeyboard is called.
</summary></devnotes>
      </property>
      <property name="Lines" visibility="public" read="GetLines" write="SetLines" type="TStrings" file="FMX.Memo.pas" line="390">
        <devnotes><summary>
Provides access to the individual lines in the memo text.
The memo text can contain several line break symbols that separate the whole memo text into several lines. Depending on the current platform, a line break symbol can be a LF 'line feed' character (MacOS) or a CRLF 'carriage return' plus 'line feed' pair (Windows). Lines holds the memo text separated line by line. 
When WordWrap is True then each line (specified in the Lines property) can be wrapped into several 'visual lines' to fit to the memo width. However these several 'visual lines' are still represented by a single string element in the Lines property. 

Notice that GoToLineBegin and GoToLineEnd move the cursor to the beginning or the end of the current (pointed by the cursor) visual line.
Lines is a TStrings object, so you can use TStrings methods to work with the Lines property. 
For example, you can count the number of lines: 

ShowMessage('The number of lines:' + IntToStr(Memo1.Lines.Count));

You can add new lines: 

Memo1.Lines.Append('New text to append at the end of memo');

You can delete lines:  

Memo1.Lines.Delete(0); // Deletes the fist line from memo

You can replace a line with a new string:

Memo1.Lines[8] := 'Replace 9th  line with this string';

To work with all the memo's text at once, one can use the Text property.
</summary></devnotes>
      </property>
      <property name="MaxLength" visibility="public" read="GetMaxLength" write="SetMaxLength" type="Integer" file="FMX.Memo.pas" line="392">
        <devnotes><summary>
Specifies the maximum number of characters that can be kept in the memo control.
If the text in the memo control contains more characters than the MaxLength, then the text is truncated to the MaxLength characters. 
If the memo control already contains a number of characters equal to MaxLength, then the user cannot enter any more characters. 
MaxLength counts end-of-line characters. 
If MaxLength is 0, then no explicit length limitation is set.

Note: Even when MaxLength is 0, there may be limitations imposed by a platform on the number of characters that may be entered into a memo control. </summary></devnotes>
      </property>
      <property name="ReadOnly" visibility="public" read="GetReadOnly" write="SetReadOnly" type="Boolean" file="FMX.Memo.pas" line="394">
        <devnotes><summary>
Specifies whether the memo's text can be changed.
ReadOnly equals to True forbids any modification of the text in the memo control.
</summary></devnotes>
      </property>
      <property name="CaretPosition" visibility="public" read="GetCaretPosition" write="SetCaretPosition" type="TCaretPosition" file="FMX.Memo.pas" line="396">
        <devnotes><summary>
Provides access to the current cursor position in the memo's text.
Use CaretPosition to determine the coordinates of the cursor (insertion point) in the memo control. The TCaretPosition type has Line and Pos integer fields:

Line represents the number of the line containing the cursor, indexed from zero.
Pos represents the horizontal character coordinate of the cursor, indexed from zero.
Modify the value of the CaretPosition property in order to change the position of the cursor within the memo control. In order for the cursor to be visible, the memo control must have focus.
Thus, if Line = 3 and Pos = 5, then the cursor is at the fourth line and at the sixth character from the start of the line.
</summary></devnotes>
      </property>
      <property name="SelectionFill" visibility="public" read="GetSelectionFill" type="TBrush" file="FMX.Memo.pas" line="398">
        <devnotes><summary>
Represents the brush to draw the selected text region in the memo control.
Use SelectionFill to change the brush characteristics for the selected text region in the memo control. For example, to change the background color of the selected text region, use:

 Memo1.SelectionFill.Color := System.UIConsts.claCoral;
</summary></devnotes>
      </property>
      <property name="Font" visibility="public" read="GetFont" write="SetFont" type="TFont" file="FMX.Memo.pas" line="400">
        <devnotes><summary>
Specifies the family, size, and style properties of the text font in the memo control.
</summary></devnotes>
      </property>
      <property name="FontColor" visibility="public" read="GetFontColor" write="SetFontColor" type="TAlphaColor" file="FMX.Memo.pas" line="402">
        <devnotes><summary>
Specifies the font color of the text in this memo.
Use the FontColor property to read or change the font color of the text in this memo component. The default value of the FontColor property is TAlphaColorRec.Black.
</summary></devnotes>
      </property>
      <property name="TextAlign" visibility="public" read="GetTextAlign" write="SetTextAlign" type="TTextAlign" file="FMX.Memo.pas" line="404">
        <devnotes><summary>
Specifies the horizontal alignment of the text in the memo control.
Use the TextAlign property to change the horizontal alignment of the text in the memo control. TextAlign can be one of the Center, Leading, or Trailing values defined in TTextAlign.
When you use text representation properties stored in the 
TextSettings property, remember that TextAlign corresponds to HorzAlign.
</summary></devnotes>
      </property>
      <property name="WordWrap" visibility="public" read="GetWordWrap" write="SetWordWrap" type="Boolean" file="FMX.Memo.pas" line="406">
        <devnotes><summary>
Specifies whether to wrap the text in the memo when its length is greater than the memo width.
Set WordWrap to True to wrap the text in the memo control. Wrapping implies the division of the text string that is wider than the memo control onto several lines that fit to the memo control's width.
</summary></devnotes>
      </property>
      <property name="SelStart" visibility="public" read="GetSelStart" write="SetSelStart" type="Integer" file="FMX.Memo.pas" line="408">
        <devnotes><summary>
Specifies the zero-based number of the first character selected in the memo's text.
Read SelStart to determine the number of the first selected character, where 0 indicates the first character. If there is no selected text, then SelStart returns the cursor position. Keep in mind that the SelStart character count includes end-of-line characters at the end of each line.
To select a particular range of the text, first set SelStart to position the cursor, and then set SelLength to extend the selection. The memo component must have focus (call SetFocus) before you attempt to use SelStart; otherwise the selection is invisible.
</summary></devnotes>
      </property>
      <property name="SelLength" visibility="public" read="GetSelLength" write="SetSelLength" type="Integer" file="FMX.Memo.pas" line="410">
        <devnotes><summary>
Specifies the number of characters that are selected in the memo control.
Read SelLength to determine the length, in characters, of the selected text.
Set the value of the SelLength property in order to specify the length of the selected text, starting at SelStart. Keep in mind that the character count from SelLength will include end-of-line characters at the end of each line.
To select a particular range of the text, first set SelStart to position the cursor, and then set SelLength to extend the selection. The memo component must have focus (call SetFocus) before you attempt to use SelStart; otherwise the selection is invisible.

Note: Setting SelLength to a value greater than the number of characters from SelStart to the end of the text results in the selection of all characters from SelStart to the end of the text. Reading SelLength immediately after setting it to a value greater than the number of available characters returns the number of characters actually selected, not the value that was just set.</summary></devnotes>
      </property>
      <property name="SelText" visibility="public" read="GetSelText" type="string" default="0" file="FMX.Memo.pas" line="412">
        <devnotes><summary>
Represents the currently selected fragment of the memo's text.
Use SelText in order to retrieve the text that is selected, from the TCustomMemo control. If there is no selection,  SelText is an empty string. If the memo control does not have the focus, SelText represents the previous selected portion of the text.
</summary></devnotes>
      </property>
      <property name="StyledSettings" visibility="public" read="GetStyledSettings" write="SetStyledSettings" stored="StyledSettingsStored" type="TStyledSettings" file="FMX.Memo.pas" line="414">
        <devnotes><summary>
Defines the set of styled text representation properties whose values are loaded from the current style and cannot be changed manually. 
Text representation properties are used as parameters for drawing texts in controls.
The StyledSettings property is used in FMX controls such as TButton, TSpeedButton, TCheckBox, and others.
Styles, for example Metropolis UI styles, define the default values of the text representation properties like font name, font size, word-wrapping, and others.
The TTextSettings class define properties keeping values of the FontColor, TextAlign, VertTextAlign, Trimming,  WordWrap, and Font (TFont.Family, TFont.Size, TFont.Style) elements defining visual parameters of a text representation.
StyledSettings can contain the Family, Size, Style, FontColor, and 
Other values defined in TStyledSetting. The &quot;Relation between TStyledSetting constants and TTextSettings properties&quot; table shows which of the  TStyledSetting constants control the handling of these TTextSettings text representation properties.
Keep in mind that the values of all styled text representation properties listed in the StyledSettings are taken from a style and cannot be changed manually. For example, if you set a new value of the FontColor property of a TTextControl control, then the real updating of the font color takes place only if the StyledSettings property of this control does not contain TStyledSetting.FontColor. For more details, see the example in Setting Text Parameters in FireMonkey.
To switch OFF a font property for a control, select the control in the Form Designer. In the Object Inspector, expand the StyledSettings property. Clear the check mark before the property. For example, the following figure shows a TButton control with Size turned OFF (for Button1) and ON (for Button2):

With StyledSettings you can also use the DefaultStyledSettings constant that defines the values of the styled properties that are taken from a style by default.
Remember that the HorzAlign and VertAlign text representation properties stored in the TextSettings property of a control correspond to the TextAlign and 
VertTextAlign properties of the control.
</summary></devnotes>
      </property>
      <property name="TextSettings" visibility="public" read="GetTextSettings" write="SetTextSettings" type="TTextSettings" file="FMX.Memo.pas" line="417">
        <devnotes><summary>
Keeps the values of styled text representation properties that are set in the Object Inspector or programmatically.
TextSettings references a TTextSettings type object that handles values of styled text representation properties that are set in the Object Inspector or programmatically. TextSettings references a TTextSettings type object, which handles  styled text representation properties to be used for drawing texts in this control. 
TTextSettings type objects provide all styled text representation properties and methods to manage them.
The styled text representation properties are 
FontColor, TextAlign,
VertTextAlign,
Trimming, WordWrap, and Font (TFont.Family, TFont.Size, and TFont.Style).
TTextSettings objects provide both styled text representation properties, whose values are loaded from a style (specified in StyledSettings), so all other styled text representation properties, whose values can be set manually, and methods to manage these text representation properties. The text representation properties identified in StyledSettings are loaded from the style and cannot be set manually. 
Remember that the HorzAlign and VertAlign text representation properties stored in the TextSettings property of a control correspond to the TextAlign and 
VertTextAlign properties of the control.
</summary></devnotes>
      </property>
      <event name="OnChange" visibility="public" read="GetOnChange" write="SetOnChange" type="TNotifyEvent" file="FMX.Memo.pas" line="420">
        <devnotes><summary>
Occurs when the focus leaves the memo or the user presses ENTER. The event occurs only when the text has changed.
OnChange is raised when the following situations occur:

Text is cleared in the memo
Text is set in the memo
The memo loses focus
The user presses the ENTER key
Write an OnChange event handler to check the modified text data.
</summary></devnotes>
      </event>
      <event name="OnChangeTracking" visibility="public" read="GetOnChangeTracking" write="SetOnChangeTracking" type="TNotifyEvent" file="FMX.Memo.pas" line="422">
        <devnotes><summary>
Occurs on any change in the memo's text.
Write an OnChangeTracking event handler to respond immediately to any changes made in the memo control's text. The OnChangeTracking event provides the first opportunity to respond to modifications that the user makes by typing into the memo control. 
The Text property of the memo control is already updated and reflects any changes when OnChangeTracking is raised.
The difference between OnChangeTracking and OnChange is that OnChangeTracking occurs at each modification of text in the memo control. 

Note: OnChangeTracking does not occur when only text representation characteristics are changed (for example, when changing TextAlign).</summary></devnotes>
      </event>
      <event name="OnValidating" visibility="public" read="GetOnValidating" write="SetOnValidating" type="TValidateTextEvent" file="FMX.Memo.pas" line="425">
        <devnotes><summary>
Raises to validate any change has been made in the memo's text. Occurs before the OnChangeTracking event.
In descendent classes, to change when to raise the OnValidating event, redefine the virtual  TCustomMemoModel.DoValidating method. 
</summary></devnotes>
      </event>
      <event name="OnValidate" visibility="public" read="GetOnValidate" write="SetOnValidate" type="TValidateTextEvent" file="FMX.Memo.pas" line="428">
        <devnotes><summary>
Raises to validate changes have been made in the memo's text when the memo has lost the focus or the user has pressed ENTER. The OnValidate event occurs before the OnChange event. 
</summary></devnotes>
      </event>
    </members>
  </class>
  <class name="TMemo" file="FMX.Memo.pas" line="431">
    
    <members>
      <property name="AutoHide" visibility="published" read="GetAutoHide" write="SetAutoHide" type="TBehaviorBoolean" default="2" hoisted="true" file="FMX.Memo.pas" line="433"/>
      <property name="AutoSelect" visibility="published" read="GetAutoSelect" write="SetAutoSelect" type="Boolean" default="0" hoisted="true" file="FMX.Memo.pas" line="434"/>
      <property name="Caret" visibility="published" read="GetCaret" write="SetCaret" type="TCaret" hoisted="true" file="FMX.Memo.pas" line="435"/>
      <property name="CharCase" visibility="published" read="GetCharCase" write="SetCharCase" type="TEditCharCase" default="0" hoisted="true" file="FMX.Memo.pas" line="436"/>
      <property name="CheckSpelling" visibility="published" read="GetCheckSpelling" write="SetCheckSpelling" type="Boolean" default="0" hoisted="true" file="FMX.Memo.pas" line="437"/>
      <property name="DataDetectorTypes" visibility="published" read="GetDataDetectorTypes" write="SetDataDetectorTypes" type="TDataDetectorTypes" hoisted="true" file="FMX.Memo.pas" line="438"/>
      <property name="DisableMouseWheel" visibility="published" read="GetDisableMouseWheel" write="SetDisableMouseWheel" type="Boolean" default="0" hoisted="true" file="FMX.Memo.pas" line="439"/>
      <property name="HideSelectionOnExit" visibility="published" read="GetHideSelectionOnExit" write="SetHideSelectionOnExit" type="Boolean" default="1" hoisted="true" file="FMX.Memo.pas" line="440"/>
      <property name="ImeMode" visibility="published" read="GetImeMode" write="SetImeMode" type="TImeMode" default="0" hoisted="true" file="FMX.Memo.pas" line="441"/>
      <property name="KeyboardType" visibility="published" read="GetKeyboardType" write="SetKeyboardType" type="TVirtualKeyboardType" default="0" hoisted="true" file="FMX.Memo.pas" line="442"/>
      <property name="Lines" visibility="published" read="GetLines" write="SetLines" type="TStrings" hoisted="true" file="FMX.Memo.pas" line="443"/>
      <property name="MaxLength" visibility="published" read="GetMaxLength" write="SetMaxLength" type="Integer" default="0" hoisted="true" file="FMX.Memo.pas" line="444"/>
      <property name="ReadOnly" visibility="published" read="GetReadOnly" write="SetReadOnly" type="Boolean" default="0" hoisted="true" file="FMX.Memo.pas" line="445"/>
      <property name="ShowScrollBars" visibility="published" read="GetShowScrollBars" write="SetShowScrollBars" type="Boolean" default="1" hoisted="true" file="FMX.Memo.pas" line="446"/>
      <property name="ShowSizeGrip" visibility="published" read="GetShowSizeGrip" write="SetShowSizeGrip" type="Boolean" default="0" hoisted="true" file="FMX.Memo.pas" line="447"/>
      <property name="StyledSettings" visibility="published" read="GetStyledSettings" write="SetStyledSettings" stored="StyledSettingsStored" type="TStyledSettings" hoisted="true" file="FMX.Memo.pas" line="448"/>
      <property name="TextSettings" visibility="published" read="GetTextSettings" write="SetTextSettings" type="TTextSettings" hoisted="true" file="FMX.Memo.pas" line="449"/>
      <event name="OnChange" visibility="published" read="GetOnChange" write="SetOnChange" type="TNotifyEvent" hoisted="true" file="FMX.Memo.pas" line="450"/>
      <event name="OnChangeTracking" visibility="published" read="GetOnChangeTracking" write="SetOnChangeTracking" type="TNotifyEvent" hoisted="true" file="FMX.Memo.pas" line="451"/>
      <event name="OnValidating" visibility="published" read="GetOnValidating" write="SetOnValidating" type="TValidateTextEvent" hoisted="true" file="FMX.Memo.pas" line="452"/>
      <event name="OnValidate" visibility="published" read="GetOnValidate" write="SetOnValidate" type="TValidateTextEvent" hoisted="true" file="FMX.Memo.pas" line="453"/>
      <property name="Align" visibility="published" read="FAlign" write="SetAlign" type="TAlignLayout" default="0" hoisted="true" file="FMX.Memo.pas" line="455"/>
      <property name="Anchors" visibility="published" read="FAnchors" write="SetAnchors" stored="IsAnchorsStored" type="TAnchors" hoisted="true" file="FMX.Memo.pas" line="456"/>
      <property name="Bounces" visibility="published" read="GetBounces" write="SetBounces" type="TBehaviorBoolean" default="2" hoisted="true" file="FMX.Memo.pas" line="457"/>
      <property name="CanFocus" visibility="published" read="FCanFocus" write="FCanFocus" type="Boolean" default="1" hoisted="true" file="FMX.Memo.pas" line="458"/>
      <property name="CanParentFocus" visibility="published" read="FCanParentFocus" write="FCanParentFocus" type="Boolean" default="0" hoisted="true" file="FMX.Memo.pas" line="459"/>
      <property name="ClipChildren" visibility="published" read="FClipChildren" write="SetClipChildren" type="Boolean" default="0" hoisted="true" file="FMX.Memo.pas" line="460"/>
      <property name="ClipParent" visibility="published" read="FClipParent" write="FClipParent" type="Boolean" default="0" hoisted="true" file="FMX.Memo.pas" line="461"/>
      <property name="ControlType" visibility="published" read="GetControlType" write="SetControlType" type="TControlType" default="0" hoisted="true" file="FMX.Memo.pas" line="462"/>
      <property name="Cursor" visibility="published" read="GetCursor" write="SetCursor" type="TCursor" default="-4" hoisted="true" file="FMX.Memo.pas" line="463"/>
      <property name="DisableFocusEffect" visibility="published" read="FDisableFocusEffect" write="FDisableFocusEffect" type="Boolean" default="0" hoisted="true" file="FMX.Memo.pas" line="464"/>
      <property name="DragMode" visibility="published" read="GetDragMode" write="SetDragMode" type="TDragMode" default="0" hoisted="true" file="FMX.Memo.pas" line="465"/>
      <property name="Enabled" visibility="published" read="FEnabled" write="SetEnabled" stored="EnabledStored" type="Boolean" hoisted="true" file="FMX.Memo.pas" line="466"/>
      <property name="EnabledScroll" visibility="published" read="GetEnabledScroll" write="SetEnabledScroll" type="Boolean" default="1" hoisted="true" file="FMX.Memo.pas" line="467"/>
      <property name="EnableDragHighlight" visibility="published" read="FEnableDragHighlight" write="FEnableDragHighlight" type="Boolean" default="1" hoisted="true" file="FMX.Memo.pas" line="468"/>
      <property name="Height" visibility="published" read="GetHeight" write="SetHeight" stored="False" type="Single" hoisted="true" file="FMX.Memo.pas" line="469"/>
      <property name="HelpContext" visibility="published" read="FHelpContext" write="SetHelpContext" stored="IsHelpContextStored" type="THelpContext" default="0" hoisted="true" file="FMX.Memo.pas" line="470"/>
      <property name="HelpKeyword" visibility="published" read="FHelpKeyword" write="SetHelpKeyword" stored="IsHelpContextStored" type="string" default="0" hoisted="true" file="FMX.Memo.pas" line="471"/>
      <property name="HelpType" visibility="published" read="FHelpType" write="FHelpType" type="THelpType" default="1" hoisted="true" file="FMX.Memo.pas" line="472"/>
      <property name="Hint" visibility="published" read="FHint" write="SetHint" stored="HintStored" type="string" default="0" hoisted="true" file="FMX.Memo.pas" line="473"/>
      <property name="HitTest" visibility="published" read="FHitTest" write="SetHitTest" type="Boolean" default="1" hoisted="true" file="FMX.Memo.pas" line="474"/>
      <property name="Locked" visibility="published" read="FLocked" write="SetLocked" type="Boolean" default="0" hoisted="true" file="FMX.Memo.pas" line="475"/>
      <property name="Margins" visibility="published" read="GetMargins" write="SetMargins" type="TBounds" hoisted="true" file="FMX.Memo.pas" line="476"/>
      <property name="Opacity" visibility="published" read="FOpacity" write="SetOpacity" stored="IsOpacityStored" type="Single" hoisted="true" file="FMX.Memo.pas" line="477"/>
      <property name="Padding" visibility="published" read="GetPadding" write="SetPadding" type="TBounds" hoisted="true" file="FMX.Memo.pas" line="478"/>
      <property name="PopupMenu" visibility="published" read="FPopupMenu" write="SetPopupMenu" stored="IsPopupMenuStored" type="TCustomPopupMenu" hoisted="true" file="FMX.Memo.pas" line="479"/>
      <property name="Position" visibility="published" read="FPosition" write="SetPosition" stored="IsPositionStored" type="TPosition" hoisted="true" file="FMX.Memo.pas" line="480"/>
      <property name="RotationAngle" visibility="published" read="GetRotationAngle" write="SetRotationAngle" type="Single" default="0" hoisted="true" file="FMX.Memo.pas" line="481"/>
      <property name="RotationCenter" visibility="published" read="GetRotationCenter" write="SetRotationCenter" type="TPosition" hoisted="true" file="FMX.Memo.pas" line="482"/>
      <property name="Scale" visibility="published" read="GetScale" write="SetScale" type="TPosition" hoisted="true" file="FMX.Memo.pas" line="483"/>
      <property name="Size" visibility="published" read="FSize" write="SetSize" stored="IsSizeStored" type="TControlSize" hoisted="true" file="FMX.Memo.pas" line="484"/>
      <property name="StyleLookup" visibility="published" read="FStyleLookup" write="SetStyleLookup" type="string" default="0" hoisted="true" file="FMX.Memo.pas" line="485"/>
      <property name="TabOrder" visibility="published" read="GetTabOrder" write="SetTabOrder" type="TTabOrder" default="-1" hoisted="true" file="FMX.Memo.pas" line="486"/>
      <property name="TabStop" visibility="published" read="GetTabStop" write="SetTabStop" type="Boolean" default="1" hoisted="true" file="FMX.Memo.pas" line="487"/>
      <property name="TouchTargetExpansion" visibility="published" read="FTouchTargetExpansion" write="SetTouchTargetExpansion" type="TBounds" hoisted="true" file="FMX.Memo.pas" line="488"/>
      <property name="Visible" visibility="published" read="FVisible" write="SetVisible" stored="VisibleStored" type="Boolean" default="1" hoisted="true" file="FMX.Memo.pas" line="489"/>
      <property name="Width" visibility="published" read="GetWidth" write="SetWidth" stored="False" type="Single" hoisted="true" file="FMX.Memo.pas" line="490"/>
      <property name="ParentShowHint" visibility="published" read="FParentShowHint" write="SetParentShowHint" type="Boolean" default="1" hoisted="true" file="FMX.Memo.pas" line="491"/>
      <property name="ShowHint" visibility="published" read="FShowHint" write="SetShowHint" stored="IsShowHintStored" type="Boolean" hoisted="true" file="FMX.Memo.pas" line="492"/>
      <event name="OnApplyStyleLookup" visibility="published" read="FOnApplyStyleLookup" write="FOnApplyStyleLookup" type="TNotifyEvent" hoisted="true" file="FMX.Memo.pas" line="494"/>
      <event name="OnPainting" visibility="published" read="FOnPainting" write="FOnPainting" type="TOnPaintEvent" hoisted="true" file="FMX.Memo.pas" line="495"/>
      <event name="OnPaint" visibility="published" read="FOnPaint" write="FOnPaint" type="TOnPaintEvent" hoisted="true" file="FMX.Memo.pas" line="496"/>
      <event name="OnResize" visibility="published" read="FOnResize" write="FOnResize" type="TNotifyEvent" hoisted="true" file="FMX.Memo.pas" line="497"/>
      <event name="OnResized" visibility="published" read="FOnResized" write="FOnResized" type="TNotifyEvent" hoisted="true" file="FMX.Memo.pas" line="498"/>
      <event name="OnEnter" visibility="published" read="FOnEnter" write="FOnEnter" type="TNotifyEvent" hoisted="true" file="FMX.Memo.pas" line="499"/>
      <event name="OnExit" visibility="published" read="FOnExit" write="FOnExit" type="TNotifyEvent" hoisted="true" file="FMX.Memo.pas" line="500"/>
      <event name="OnKeyUp" visibility="published" read="FOnKeyUp" write="FOnKeyUp" type="TKeyEvent" hoisted="true" file="FMX.Memo.pas" line="501"/>
      <event name="OnKeyDown" visibility="published" read="FOnKeyDown" write="FOnKeyDown" type="TKeyEvent" hoisted="true" file="FMX.Memo.pas" line="502"/>
      <event name="OnDragEnter" visibility="published" read="FOnDragEnter" write="FOnDragEnter" type="TDragEnterEvent" hoisted="true" file="FMX.Memo.pas" line="503"/>
      <event name="OnDragLeave" visibility="published" read="FOnDragLeave" write="FOnDragLeave" type="TNotifyEvent" hoisted="true" file="FMX.Memo.pas" line="504"/>
      <event name="OnDragOver" visibility="published" read="FOnDragOver" write="FOnDragOver" type="TDragOverEvent" hoisted="true" file="FMX.Memo.pas" line="505"/>
      <event name="OnDragDrop" visibility="published" read="FOnDragDrop" write="FOnDragDrop" type="TDragDropEvent" hoisted="true" file="FMX.Memo.pas" line="506"/>
      <event name="OnDragEnd" visibility="published" read="FOnDragEnd" write="FOnDragEnd" type="TNotifyEvent" hoisted="true" file="FMX.Memo.pas" line="507"/>
      <event name="OnClick" visibility="published" read="FOnClick" write="SetOnClick" stored="OnClickStored" type="TNotifyEvent" hoisted="true" file="FMX.Memo.pas" line="508"/>
      <event name="OnDblClick" visibility="published" read="FOnDblClick" write="FOnDblClick" type="TNotifyEvent" hoisted="true" file="FMX.Memo.pas" line="509"/>
      <event name="OnMouseDown" visibility="published" read="FOnMouseDown" write="FOnMouseDown" type="TMouseEvent" hoisted="true" file="FMX.Memo.pas" line="510"/>
      <event name="OnMouseMove" visibility="published" read="FOnMouseMove" write="FOnMouseMove" type="TMouseMoveEvent" hoisted="true" file="FMX.Memo.pas" line="511"/>
      <event name="OnMouseUp" visibility="published" read="FOnMouseUp" write="FOnMouseUp" type="TMouseEvent" hoisted="true" file="FMX.Memo.pas" line="512"/>
      <event name="OnMouseWheel" visibility="published" read="FOnMouseWheel" write="FOnMouseWheel" type="TMouseWheelEvent" hoisted="true" file="FMX.Memo.pas" line="513"/>
      <event name="OnMouseEnter" visibility="published" read="FOnMouseEnter" write="FOnMouseEnter" type="TNotifyEvent" hoisted="true" file="FMX.Memo.pas" line="514"/>
      <event name="OnMouseLeave" visibility="published" read="FOnMouseLeave" write="FOnMouseLeave" type="TNotifyEvent" hoisted="true" file="FMX.Memo.pas" line="515"/>
      <event name="OnViewportPositionChange" visibility="published" read="GetOnViewportPositionChange" write="SetOnViewportPositionChange" type="TPositionChangeEvent" hoisted="true" file="FMX.Memo.pas" line="516"/>
      <event name="OnPresentationNameChoosing" visibility="published" read="FOnPresenterNameChoosing" write="FOnPresenterNameChoosing" type="TPresenterNameChoosingEvent" hoisted="true" file="FMX.Memo.pas" line="517"/>
    </members>
  <devnotes><summary>
TMemo is a multiline text editing control, providing text scrolling.
Use TMemo to place a standard multiline edit control on a form. Multiline edit boxes allow the user to enter more than one line of text. They are appropriate for representing large amounts of text. 
The text in the memo control can be edited as a whole or line by line. 
The characteristics of the text in the memo control can be modified by using, for example, Font, FontColor, or CharCase.
To limit the changes made to the memo control, use properties such as ReadOnly, Enabled, or MaxLength.
When not in focus, TMemo does not draw a selection rectangle even though the user has selected the text. You can verify whether the text is selected by using the SelText property.

Note: When a number of lines in a control is more than can be concurrently shown in the control, then you can use a scroll bar to scroll the text in the control. Notice that on Windows the scroll bar is shown by default. However, on OS X the scroll bar is not shown by default. On OS X, the scroll bar appears when you try to scroll a text using the mouse wheel. To enforce the scroll bar to be shown by default, in the Object Inspector, select the memo control and set the AutoHide to False.</summary></devnotes></class>
</namespace>